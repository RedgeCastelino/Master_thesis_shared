// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_roadmarking.proto

#ifndef PROTOBUF_osi_5froadmarking_2eproto__INCLUDED
#define PROTOBUF_osi_5froadmarking_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
#include "osi_trafficsign.pb.h"
// @@protoc_insertion_point(includes)

namespace osi3 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_osi_5froadmarking_2eproto();
void protobuf_AssignDesc_osi_5froadmarking_2eproto();
void protobuf_ShutdownFile_osi_5froadmarking_2eproto();

class RoadMarking;
class RoadMarking_Classification;

enum RoadMarking_Classification_Type {
  RoadMarking_Classification_Type_TYPE_UNKNOWN = 0,
  RoadMarking_Classification_Type_TYPE_OTHER = 1,
  RoadMarking_Classification_Type_TYPE_PAINTED_TRAFFIC_SIGN = 2,
  RoadMarking_Classification_Type_TYPE_SYMBOLIC_TRAFFIC_SIGN = 3,
  RoadMarking_Classification_Type_TYPE_TEXTUAL_TRAFFIC_SIGN = 4,
  RoadMarking_Classification_Type_TYPE_GENERIC_SYMBOL = 5,
  RoadMarking_Classification_Type_TYPE_GENERIC_LINE = 6,
  RoadMarking_Classification_Type_TYPE_GENERIC_TEXT = 7
};
bool RoadMarking_Classification_Type_IsValid(int value);
const RoadMarking_Classification_Type RoadMarking_Classification_Type_Type_MIN = RoadMarking_Classification_Type_TYPE_UNKNOWN;
const RoadMarking_Classification_Type RoadMarking_Classification_Type_Type_MAX = RoadMarking_Classification_Type_TYPE_GENERIC_TEXT;
const int RoadMarking_Classification_Type_Type_ARRAYSIZE = RoadMarking_Classification_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoadMarking_Classification_Type_descriptor();
inline const ::std::string& RoadMarking_Classification_Type_Name(RoadMarking_Classification_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoadMarking_Classification_Type_descriptor(), value);
}
inline bool RoadMarking_Classification_Type_Parse(
    const ::std::string& name, RoadMarking_Classification_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoadMarking_Classification_Type>(
    RoadMarking_Classification_Type_descriptor(), name, value);
}
enum RoadMarking_Classification_Color {
  RoadMarking_Classification_Color_COLOR_UNKNOWN = 0,
  RoadMarking_Classification_Color_COLOR_OTHER = 1,
  RoadMarking_Classification_Color_COLOR_WHITE = 2,
  RoadMarking_Classification_Color_COLOR_YELLOW = 3,
  RoadMarking_Classification_Color_COLOR_BLUE = 5,
  RoadMarking_Classification_Color_COLOR_RED = 6,
  RoadMarking_Classification_Color_COLOR_GREEN = 7,
  RoadMarking_Classification_Color_COLOR_VIOLET = 8
};
bool RoadMarking_Classification_Color_IsValid(int value);
const RoadMarking_Classification_Color RoadMarking_Classification_Color_Color_MIN = RoadMarking_Classification_Color_COLOR_UNKNOWN;
const RoadMarking_Classification_Color RoadMarking_Classification_Color_Color_MAX = RoadMarking_Classification_Color_COLOR_VIOLET;
const int RoadMarking_Classification_Color_Color_ARRAYSIZE = RoadMarking_Classification_Color_Color_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoadMarking_Classification_Color_descriptor();
inline const ::std::string& RoadMarking_Classification_Color_Name(RoadMarking_Classification_Color value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoadMarking_Classification_Color_descriptor(), value);
}
inline bool RoadMarking_Classification_Color_Parse(
    const ::std::string& name, RoadMarking_Classification_Color* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoadMarking_Classification_Color>(
    RoadMarking_Classification_Color_descriptor(), name, value);
}
// ===================================================================

class RoadMarking_Classification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.RoadMarking.Classification) */ {
 public:
  RoadMarking_Classification();
  virtual ~RoadMarking_Classification();

  RoadMarking_Classification(const RoadMarking_Classification& from);

  inline RoadMarking_Classification& operator=(const RoadMarking_Classification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadMarking_Classification& default_instance();

  void Swap(RoadMarking_Classification* other);

  // implements Message ----------------------------------------------

  inline RoadMarking_Classification* New() const { return New(NULL); }

  RoadMarking_Classification* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoadMarking_Classification& from);
  void MergeFrom(const RoadMarking_Classification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoadMarking_Classification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RoadMarking_Classification_Type Type;
  static const Type TYPE_UNKNOWN =
    RoadMarking_Classification_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    RoadMarking_Classification_Type_TYPE_OTHER;
  static const Type TYPE_PAINTED_TRAFFIC_SIGN =
    RoadMarking_Classification_Type_TYPE_PAINTED_TRAFFIC_SIGN;
  static const Type TYPE_SYMBOLIC_TRAFFIC_SIGN =
    RoadMarking_Classification_Type_TYPE_SYMBOLIC_TRAFFIC_SIGN;
  static const Type TYPE_TEXTUAL_TRAFFIC_SIGN =
    RoadMarking_Classification_Type_TYPE_TEXTUAL_TRAFFIC_SIGN;
  static const Type TYPE_GENERIC_SYMBOL =
    RoadMarking_Classification_Type_TYPE_GENERIC_SYMBOL;
  static const Type TYPE_GENERIC_LINE =
    RoadMarking_Classification_Type_TYPE_GENERIC_LINE;
  static const Type TYPE_GENERIC_TEXT =
    RoadMarking_Classification_Type_TYPE_GENERIC_TEXT;
  static inline bool Type_IsValid(int value) {
    return RoadMarking_Classification_Type_IsValid(value);
  }
  static const Type Type_MIN =
    RoadMarking_Classification_Type_Type_MIN;
  static const Type Type_MAX =
    RoadMarking_Classification_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    RoadMarking_Classification_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return RoadMarking_Classification_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return RoadMarking_Classification_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return RoadMarking_Classification_Type_Parse(name, value);
  }

  typedef RoadMarking_Classification_Color Color;
  static const Color COLOR_UNKNOWN =
    RoadMarking_Classification_Color_COLOR_UNKNOWN;
  static const Color COLOR_OTHER =
    RoadMarking_Classification_Color_COLOR_OTHER;
  static const Color COLOR_WHITE =
    RoadMarking_Classification_Color_COLOR_WHITE;
  static const Color COLOR_YELLOW =
    RoadMarking_Classification_Color_COLOR_YELLOW;
  static const Color COLOR_BLUE =
    RoadMarking_Classification_Color_COLOR_BLUE;
  static const Color COLOR_RED =
    RoadMarking_Classification_Color_COLOR_RED;
  static const Color COLOR_GREEN =
    RoadMarking_Classification_Color_COLOR_GREEN;
  static const Color COLOR_VIOLET =
    RoadMarking_Classification_Color_COLOR_VIOLET;
  static inline bool Color_IsValid(int value) {
    return RoadMarking_Classification_Color_IsValid(value);
  }
  static const Color Color_MIN =
    RoadMarking_Classification_Color_Color_MIN;
  static const Color Color_MAX =
    RoadMarking_Classification_Color_Color_MAX;
  static const int Color_ARRAYSIZE =
    RoadMarking_Classification_Color_Color_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Color_descriptor() {
    return RoadMarking_Classification_Color_descriptor();
  }
  static inline const ::std::string& Color_Name(Color value) {
    return RoadMarking_Classification_Color_Name(value);
  }
  static inline bool Color_Parse(const ::std::string& name,
      Color* value) {
    return RoadMarking_Classification_Color_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.RoadMarking.Classification.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::osi3::RoadMarking_Classification_Type type() const;
  void set_type(::osi3::RoadMarking_Classification_Type value);

  // optional .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
  bool has_traffic_main_sign_type() const;
  void clear_traffic_main_sign_type();
  static const int kTrafficMainSignTypeFieldNumber = 2;
  ::osi3::TrafficSign_MainSign_Classification_Type traffic_main_sign_type() const;
  void set_traffic_main_sign_type(::osi3::TrafficSign_MainSign_Classification_Type value);

  // optional .osi3.RoadMarking.Classification.Color monochrome_color = 3;
  bool has_monochrome_color() const;
  void clear_monochrome_color();
  static const int kMonochromeColorFieldNumber = 3;
  ::osi3::RoadMarking_Classification_Color monochrome_color() const;
  void set_monochrome_color(::osi3::RoadMarking_Classification_Color value);

  // optional .osi3.TrafficSignValue value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::osi3::TrafficSignValue& value() const;
  ::osi3::TrafficSignValue* mutable_value();
  ::osi3::TrafficSignValue* release_value();
  void set_allocated_value(::osi3::TrafficSignValue* value);

  // optional string value_text = 5;
  bool has_value_text() const;
  void clear_value_text();
  static const int kValueTextFieldNumber = 5;
  const ::std::string& value_text() const;
  void set_value_text(const ::std::string& value);
  void set_value_text(const char* value);
  void set_value_text(const char* value, size_t size);
  ::std::string* mutable_value_text();
  ::std::string* release_value_text();
  void set_allocated_value_text(::std::string* value_text);

  // repeated .osi3.Identifier assigned_lane_id = 6;
  int assigned_lane_id_size() const;
  void clear_assigned_lane_id();
  static const int kAssignedLaneIdFieldNumber = 6;
  const ::osi3::Identifier& assigned_lane_id(int index) const;
  ::osi3::Identifier* mutable_assigned_lane_id(int index);
  ::osi3::Identifier* add_assigned_lane_id();
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
      mutable_assigned_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
      assigned_lane_id() const;

  // @@protoc_insertion_point(class_scope:osi3.RoadMarking.Classification)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_traffic_main_sign_type();
  inline void clear_has_traffic_main_sign_type();
  inline void set_has_monochrome_color();
  inline void clear_has_monochrome_color();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_value_text();
  inline void clear_has_value_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int traffic_main_sign_type_;
  ::osi3::TrafficSignValue* value_;
  ::google::protobuf::internal::ArenaStringPtr value_text_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier > assigned_lane_id_;
  int monochrome_color_;
  friend void  protobuf_AddDesc_osi_5froadmarking_2eproto();
  friend void protobuf_AssignDesc_osi_5froadmarking_2eproto();
  friend void protobuf_ShutdownFile_osi_5froadmarking_2eproto();

  void InitAsDefaultInstance();
  static RoadMarking_Classification* default_instance_;
};
// -------------------------------------------------------------------

class RoadMarking : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.RoadMarking) */ {
 public:
  RoadMarking();
  virtual ~RoadMarking();

  RoadMarking(const RoadMarking& from);

  inline RoadMarking& operator=(const RoadMarking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadMarking& default_instance();

  void Swap(RoadMarking* other);

  // implements Message ----------------------------------------------

  inline RoadMarking* New() const { return New(NULL); }

  RoadMarking* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoadMarking& from);
  void MergeFrom(const RoadMarking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoadMarking* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RoadMarking_Classification Classification;

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::osi3::Identifier& id() const;
  ::osi3::Identifier* mutable_id();
  ::osi3::Identifier* release_id();
  void set_allocated_id(::osi3::Identifier* id);

  // optional .osi3.BaseStationary base = 2;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 2;
  const ::osi3::BaseStationary& base() const;
  ::osi3::BaseStationary* mutable_base();
  ::osi3::BaseStationary* release_base();
  void set_allocated_base(::osi3::BaseStationary* base);

  // optional .osi3.RoadMarking.Classification classification = 3;
  bool has_classification() const;
  void clear_classification();
  static const int kClassificationFieldNumber = 3;
  const ::osi3::RoadMarking_Classification& classification() const;
  ::osi3::RoadMarking_Classification* mutable_classification();
  ::osi3::RoadMarking_Classification* release_classification();
  void set_allocated_classification(::osi3::RoadMarking_Classification* classification);

  // @@protoc_insertion_point(class_scope:osi3.RoadMarking)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_classification();
  inline void clear_has_classification();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* id_;
  ::osi3::BaseStationary* base_;
  ::osi3::RoadMarking_Classification* classification_;
  friend void  protobuf_AddDesc_osi_5froadmarking_2eproto();
  friend void protobuf_AssignDesc_osi_5froadmarking_2eproto();
  friend void protobuf_ShutdownFile_osi_5froadmarking_2eproto();

  void InitAsDefaultInstance();
  static RoadMarking* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadMarking_Classification

// optional .osi3.RoadMarking.Classification.Type type = 1;
inline bool RoadMarking_Classification::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadMarking_Classification::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadMarking_Classification::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadMarking_Classification::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::osi3::RoadMarking_Classification_Type RoadMarking_Classification::type() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.type)
  return static_cast< ::osi3::RoadMarking_Classification_Type >(type_);
}
inline void RoadMarking_Classification::set_type(::osi3::RoadMarking_Classification_Type value) {
  assert(::osi3::RoadMarking_Classification_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.type)
}

// optional .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
inline bool RoadMarking_Classification::has_traffic_main_sign_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoadMarking_Classification::set_has_traffic_main_sign_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoadMarking_Classification::clear_has_traffic_main_sign_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoadMarking_Classification::clear_traffic_main_sign_type() {
  traffic_main_sign_type_ = 0;
  clear_has_traffic_main_sign_type();
}
inline ::osi3::TrafficSign_MainSign_Classification_Type RoadMarking_Classification::traffic_main_sign_type() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.traffic_main_sign_type)
  return static_cast< ::osi3::TrafficSign_MainSign_Classification_Type >(traffic_main_sign_type_);
}
inline void RoadMarking_Classification::set_traffic_main_sign_type(::osi3::TrafficSign_MainSign_Classification_Type value) {
  assert(::osi3::TrafficSign_MainSign_Classification_Type_IsValid(value));
  set_has_traffic_main_sign_type();
  traffic_main_sign_type_ = value;
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.traffic_main_sign_type)
}

// optional .osi3.RoadMarking.Classification.Color monochrome_color = 3;
inline bool RoadMarking_Classification::has_monochrome_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoadMarking_Classification::set_has_monochrome_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoadMarking_Classification::clear_has_monochrome_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoadMarking_Classification::clear_monochrome_color() {
  monochrome_color_ = 0;
  clear_has_monochrome_color();
}
inline ::osi3::RoadMarking_Classification_Color RoadMarking_Classification::monochrome_color() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.monochrome_color)
  return static_cast< ::osi3::RoadMarking_Classification_Color >(monochrome_color_);
}
inline void RoadMarking_Classification::set_monochrome_color(::osi3::RoadMarking_Classification_Color value) {
  assert(::osi3::RoadMarking_Classification_Color_IsValid(value));
  set_has_monochrome_color();
  monochrome_color_ = value;
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.monochrome_color)
}

// optional .osi3.TrafficSignValue value = 4;
inline bool RoadMarking_Classification::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoadMarking_Classification::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoadMarking_Classification::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoadMarking_Classification::clear_value() {
  if (value_ != NULL) value_->::osi3::TrafficSignValue::Clear();
  clear_has_value();
}
inline const ::osi3::TrafficSignValue& RoadMarking_Classification::value() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::osi3::TrafficSignValue* RoadMarking_Classification::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::osi3::TrafficSignValue;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.value)
  return value_;
}
inline ::osi3::TrafficSignValue* RoadMarking_Classification::release_value() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.Classification.value)
  clear_has_value();
  ::osi3::TrafficSignValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline void RoadMarking_Classification::set_allocated_value(::osi3::TrafficSignValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.Classification.value)
}

// optional string value_text = 5;
inline bool RoadMarking_Classification::has_value_text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoadMarking_Classification::set_has_value_text() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoadMarking_Classification::clear_has_value_text() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoadMarking_Classification::clear_value_text() {
  value_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value_text();
}
inline const ::std::string& RoadMarking_Classification::value_text() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.value_text)
  return value_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoadMarking_Classification::set_value_text(const ::std::string& value) {
  set_has_value_text();
  value_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.value_text)
}
inline void RoadMarking_Classification::set_value_text(const char* value) {
  set_has_value_text();
  value_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.RoadMarking.Classification.value_text)
}
inline void RoadMarking_Classification::set_value_text(const char* value, size_t size) {
  set_has_value_text();
  value_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.RoadMarking.Classification.value_text)
}
inline ::std::string* RoadMarking_Classification::mutable_value_text() {
  set_has_value_text();
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.value_text)
  return value_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoadMarking_Classification::release_value_text() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.Classification.value_text)
  clear_has_value_text();
  return value_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoadMarking_Classification::set_allocated_value_text(::std::string* value_text) {
  if (value_text != NULL) {
    set_has_value_text();
  } else {
    clear_has_value_text();
  }
  value_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_text);
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.Classification.value_text)
}

// repeated .osi3.Identifier assigned_lane_id = 6;
inline int RoadMarking_Classification::assigned_lane_id_size() const {
  return assigned_lane_id_.size();
}
inline void RoadMarking_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
inline const ::osi3::Identifier& RoadMarking_Classification::assigned_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.assigned_lane_id)
  return assigned_lane_id_.Get(index);
}
inline ::osi3::Identifier* RoadMarking_Classification::mutable_assigned_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.assigned_lane_id)
  return assigned_lane_id_.Mutable(index);
}
inline ::osi3::Identifier* RoadMarking_Classification::add_assigned_lane_id() {
  // @@protoc_insertion_point(field_add:osi3.RoadMarking.Classification.assigned_lane_id)
  return assigned_lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
RoadMarking_Classification::mutable_assigned_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.RoadMarking.Classification.assigned_lane_id)
  return &assigned_lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
RoadMarking_Classification::assigned_lane_id() const {
  // @@protoc_insertion_point(field_list:osi3.RoadMarking.Classification.assigned_lane_id)
  return assigned_lane_id_;
}

// -------------------------------------------------------------------

// RoadMarking

// optional .osi3.Identifier id = 1;
inline bool RoadMarking::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadMarking::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadMarking::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadMarking::clear_id() {
  if (id_ != NULL) id_->::osi3::Identifier::Clear();
  clear_has_id();
}
inline const ::osi3::Identifier& RoadMarking::id() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::osi3::Identifier* RoadMarking::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.id)
  return id_;
}
inline ::osi3::Identifier* RoadMarking::release_id() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.id)
  clear_has_id();
  ::osi3::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline void RoadMarking::set_allocated_id(::osi3::Identifier* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.id)
}

// optional .osi3.BaseStationary base = 2;
inline bool RoadMarking::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoadMarking::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoadMarking::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoadMarking::clear_base() {
  if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
  clear_has_base();
}
inline const ::osi3::BaseStationary& RoadMarking::base() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::osi3::BaseStationary* RoadMarking::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::osi3::BaseStationary;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.base)
  return base_;
}
inline ::osi3::BaseStationary* RoadMarking::release_base() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.base)
  clear_has_base();
  ::osi3::BaseStationary* temp = base_;
  base_ = NULL;
  return temp;
}
inline void RoadMarking::set_allocated_base(::osi3::BaseStationary* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.base)
}

// optional .osi3.RoadMarking.Classification classification = 3;
inline bool RoadMarking::has_classification() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoadMarking::set_has_classification() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoadMarking::clear_has_classification() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoadMarking::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::RoadMarking_Classification::Clear();
  clear_has_classification();
}
inline const ::osi3::RoadMarking_Classification& RoadMarking::classification() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
inline ::osi3::RoadMarking_Classification* RoadMarking::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::RoadMarking_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.classification)
  return classification_;
}
inline ::osi3::RoadMarking_Classification* RoadMarking::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.classification)
  clear_has_classification();
  ::osi3::RoadMarking_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
inline void RoadMarking::set_allocated_classification(::osi3::RoadMarking_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.classification)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::osi3::RoadMarking_Classification_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::RoadMarking_Classification_Type>() {
  return ::osi3::RoadMarking_Classification_Type_descriptor();
}
template <> struct is_proto_enum< ::osi3::RoadMarking_Classification_Color> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::RoadMarking_Classification_Color>() {
  return ::osi3::RoadMarking_Classification_Color_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osi_5froadmarking_2eproto__INCLUDED
