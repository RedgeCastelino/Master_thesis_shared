// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensorviewconfiguration.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_sensorviewconfiguration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* SensorViewConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorViewConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericSensorViewConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericSensorViewConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarSensorViewConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarSensorViewConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarSensorViewConfiguration_AntennaDiagramEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarSensorViewConfiguration_AntennaDiagramEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* LidarSensorViewConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LidarSensorViewConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraSensorViewConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraSensorViewConfiguration_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CameraSensorViewConfiguration_ChannelFormat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UltrasonicSensorViewConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UltrasonicSensorViewConfiguration_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5fsensorviewconfiguration_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5fsensorviewconfiguration_2eproto() {
  protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_sensorviewconfiguration.proto");
  GOOGLE_CHECK(file != NULL);
  SensorViewConfiguration_descriptor_ = file->message_type(0);
  static const int SensorViewConfiguration_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, mounting_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, mounting_position_rmse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, field_of_view_horizontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, field_of_view_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, update_cycle_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, update_cycle_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, simulation_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, generic_sensor_view_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, radar_sensor_view_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, lidar_sensor_view_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, camera_sensor_view_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, ultrasonic_sensor_view_configuration_),
  };
  SensorViewConfiguration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SensorViewConfiguration_descriptor_,
      SensorViewConfiguration::default_instance_,
      SensorViewConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, _has_bits_[0]),
      -1,
      -1,
      sizeof(SensorViewConfiguration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorViewConfiguration, _internal_metadata_),
      -1);
  GenericSensorViewConfiguration_descriptor_ = file->message_type(1);
  static const int GenericSensorViewConfiguration_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericSensorViewConfiguration, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericSensorViewConfiguration, mounting_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericSensorViewConfiguration, mounting_position_rmse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericSensorViewConfiguration, field_of_view_horizontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericSensorViewConfiguration, field_of_view_vertical_),
  };
  GenericSensorViewConfiguration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GenericSensorViewConfiguration_descriptor_,
      GenericSensorViewConfiguration::default_instance_,
      GenericSensorViewConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericSensorViewConfiguration, _has_bits_[0]),
      -1,
      -1,
      sizeof(GenericSensorViewConfiguration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericSensorViewConfiguration, _internal_metadata_),
      -1);
  RadarSensorViewConfiguration_descriptor_ = file->message_type(2);
  static const int RadarSensorViewConfiguration_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration, mounting_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration, mounting_position_rmse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration, field_of_view_horizontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration, field_of_view_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration, number_of_rays_horizontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration, number_of_rays_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration, max_number_of_interactions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration, emitter_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration, tx_antenna_diagram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration, rx_antenna_diagram_),
  };
  RadarSensorViewConfiguration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadarSensorViewConfiguration_descriptor_,
      RadarSensorViewConfiguration::default_instance_,
      RadarSensorViewConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration, _has_bits_[0]),
      -1,
      -1,
      sizeof(RadarSensorViewConfiguration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration, _internal_metadata_),
      -1);
  RadarSensorViewConfiguration_AntennaDiagramEntry_descriptor_ = RadarSensorViewConfiguration_descriptor_->nested_type(0);
  static const int RadarSensorViewConfiguration_AntennaDiagramEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration_AntennaDiagramEntry, horizontal_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration_AntennaDiagramEntry, vertical_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration_AntennaDiagramEntry, response_),
  };
  RadarSensorViewConfiguration_AntennaDiagramEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadarSensorViewConfiguration_AntennaDiagramEntry_descriptor_,
      RadarSensorViewConfiguration_AntennaDiagramEntry::default_instance_,
      RadarSensorViewConfiguration_AntennaDiagramEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration_AntennaDiagramEntry, _has_bits_[0]),
      -1,
      -1,
      sizeof(RadarSensorViewConfiguration_AntennaDiagramEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorViewConfiguration_AntennaDiagramEntry, _internal_metadata_),
      -1);
  LidarSensorViewConfiguration_descriptor_ = file->message_type(3);
  static const int LidarSensorViewConfiguration_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorViewConfiguration, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorViewConfiguration, mounting_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorViewConfiguration, mounting_position_rmse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorViewConfiguration, field_of_view_horizontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorViewConfiguration, field_of_view_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorViewConfiguration, number_of_rays_horizontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorViewConfiguration, number_of_rays_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorViewConfiguration, max_number_of_interactions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorViewConfiguration, emitter_frequency_),
  };
  LidarSensorViewConfiguration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LidarSensorViewConfiguration_descriptor_,
      LidarSensorViewConfiguration::default_instance_,
      LidarSensorViewConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorViewConfiguration, _has_bits_[0]),
      -1,
      -1,
      sizeof(LidarSensorViewConfiguration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorViewConfiguration, _internal_metadata_),
      -1);
  CameraSensorViewConfiguration_descriptor_ = file->message_type(4);
  static const int CameraSensorViewConfiguration_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorViewConfiguration, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorViewConfiguration, mounting_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorViewConfiguration, mounting_position_rmse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorViewConfiguration, field_of_view_horizontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorViewConfiguration, field_of_view_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorViewConfiguration, number_of_pixels_horizontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorViewConfiguration, number_of_pixels_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorViewConfiguration, channel_format_),
  };
  CameraSensorViewConfiguration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CameraSensorViewConfiguration_descriptor_,
      CameraSensorViewConfiguration::default_instance_,
      CameraSensorViewConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorViewConfiguration, _has_bits_[0]),
      -1,
      -1,
      sizeof(CameraSensorViewConfiguration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorViewConfiguration, _internal_metadata_),
      -1);
  CameraSensorViewConfiguration_ChannelFormat_descriptor_ = CameraSensorViewConfiguration_descriptor_->enum_type(0);
  UltrasonicSensorViewConfiguration_descriptor_ = file->message_type(5);
  static const int UltrasonicSensorViewConfiguration_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltrasonicSensorViewConfiguration, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltrasonicSensorViewConfiguration, mounting_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltrasonicSensorViewConfiguration, mounting_position_rmse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltrasonicSensorViewConfiguration, field_of_view_horizontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltrasonicSensorViewConfiguration, field_of_view_vertical_),
  };
  UltrasonicSensorViewConfiguration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UltrasonicSensorViewConfiguration_descriptor_,
      UltrasonicSensorViewConfiguration::default_instance_,
      UltrasonicSensorViewConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltrasonicSensorViewConfiguration, _has_bits_[0]),
      -1,
      -1,
      sizeof(UltrasonicSensorViewConfiguration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltrasonicSensorViewConfiguration, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5fsensorviewconfiguration_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SensorViewConfiguration_descriptor_, &SensorViewConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GenericSensorViewConfiguration_descriptor_, &GenericSensorViewConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadarSensorViewConfiguration_descriptor_, &RadarSensorViewConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadarSensorViewConfiguration_AntennaDiagramEntry_descriptor_, &RadarSensorViewConfiguration_AntennaDiagramEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LidarSensorViewConfiguration_descriptor_, &LidarSensorViewConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CameraSensorViewConfiguration_descriptor_, &CameraSensorViewConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UltrasonicSensorViewConfiguration_descriptor_, &UltrasonicSensorViewConfiguration::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5fsensorviewconfiguration_2eproto() {
  delete SensorViewConfiguration::default_instance_;
  delete SensorViewConfiguration_reflection_;
  delete GenericSensorViewConfiguration::default_instance_;
  delete GenericSensorViewConfiguration_reflection_;
  delete RadarSensorViewConfiguration::default_instance_;
  delete RadarSensorViewConfiguration_reflection_;
  delete RadarSensorViewConfiguration_AntennaDiagramEntry::default_instance_;
  delete RadarSensorViewConfiguration_AntennaDiagramEntry_reflection_;
  delete LidarSensorViewConfiguration::default_instance_;
  delete LidarSensorViewConfiguration_reflection_;
  delete CameraSensorViewConfiguration::default_instance_;
  delete CameraSensorViewConfiguration_reflection_;
  delete UltrasonicSensorViewConfiguration::default_instance_;
  delete UltrasonicSensorViewConfiguration_reflection_;
}

void protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::osi3::protobuf_AddDesc_osi_5fcommon_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fversion_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!osi_sensorviewconfiguration.proto\022\004osi"
    "3\032\020osi_common.proto\032\021osi_version.proto\"\303"
    "\006\n\027SensorViewConfiguration\022\'\n\007version\030\001 "
    "\001(\0132\026.osi3.InterfaceVersion\022#\n\tsensor_id"
    "\030\002 \001(\0132\020.osi3.Identifier\0221\n\021mounting_pos"
    "ition\030\003 \001(\0132\026.osi3.MountingPosition\0226\n\026m"
    "ounting_position_rmse\030\004 \001(\0132\026.osi3.Mount"
    "ingPosition\022 \n\030field_of_view_horizontal\030"
    "\005 \001(\001\022\036\n\026field_of_view_vertical\030\006 \001(\001\022\r\n"
    "\005range\030\007 \001(\001\022*\n\021update_cycle_time\030\010 \001(\0132"
    "\017.osi3.Timestamp\022,\n\023update_cycle_offset\030"
    "\t \001(\0132\017.osi3.Timestamp\022.\n\025simulation_sta"
    "rt_time\030\n \001(\0132\017.osi3.Timestamp\022P\n!generi"
    "c_sensor_view_configuration\030\350\007 \003(\0132$.osi"
    "3.GenericSensorViewConfiguration\022L\n\037rada"
    "r_sensor_view_configuration\030\351\007 \003(\0132\".osi"
    "3.RadarSensorViewConfiguration\022L\n\037lidar_"
    "sensor_view_configuration\030\352\007 \003(\0132\".osi3."
    "LidarSensorViewConfiguration\022N\n camera_s"
    "ensor_view_configuration\030\353\007 \003(\0132#.osi3.C"
    "ameraSensorViewConfiguration\022V\n$ultrason"
    "ic_sensor_view_configuration\030\354\007 \003(\0132\'.os"
    "i3.UltrasonicSensorViewConfiguration\"\362\001\n"
    "\036GenericSensorViewConfiguration\022#\n\tsenso"
    "r_id\030\001 \001(\0132\020.osi3.Identifier\0221\n\021mounting"
    "_position\030\002 \001(\0132\026.osi3.MountingPosition\022"
    "6\n\026mounting_position_rmse\030\003 \001(\0132\026.osi3.M"
    "ountingPosition\022 \n\030field_of_view_horizon"
    "tal\030\004 \001(\001\022\036\n\026field_of_view_vertical\030\005 \001("
    "\001\"\366\004\n\034RadarSensorViewConfiguration\022#\n\tse"
    "nsor_id\030\001 \001(\0132\020.osi3.Identifier\0221\n\021mount"
    "ing_position\030\002 \001(\0132\026.osi3.MountingPositi"
    "on\0226\n\026mounting_position_rmse\030\003 \001(\0132\026.osi"
    "3.MountingPosition\022 \n\030field_of_view_hori"
    "zontal\030\004 \001(\001\022\036\n\026field_of_view_vertical\030\005"
    " \001(\001\022!\n\031number_of_rays_horizontal\030\006 \001(\r\022"
    "\037\n\027number_of_rays_vertical\030\007 \001(\r\022\"\n\032max_"
    "number_of_interactions\030\010 \001(\r\022\031\n\021emitter_"
    "frequency\030\t \001(\001\022R\n\022tx_antenna_diagram\030\n "
    "\003(\01326.osi3.RadarSensorViewConfiguration."
    "AntennaDiagramEntry\022R\n\022rx_antenna_diagra"
    "m\030\013 \003(\01326.osi3.RadarSensorViewConfigurat"
    "ion.AntennaDiagramEntry\032Y\n\023AntennaDiagra"
    "mEntry\022\030\n\020horizontal_angle\030\001 \001(\001\022\026\n\016vert"
    "ical_angle\030\002 \001(\001\022\020\n\010response\030\003 \001(\001\"\363\002\n\034L"
    "idarSensorViewConfiguration\022#\n\tsensor_id"
    "\030\001 \001(\0132\020.osi3.Identifier\0221\n\021mounting_pos"
    "ition\030\002 \001(\0132\026.osi3.MountingPosition\0226\n\026m"
    "ounting_position_rmse\030\003 \001(\0132\026.osi3.Mount"
    "ingPosition\022 \n\030field_of_view_horizontal\030"
    "\004 \001(\001\022\036\n\026field_of_view_vertical\030\005 \001(\001\022!\n"
    "\031number_of_rays_horizontal\030\006 \001(\r\022\037\n\027numb"
    "er_of_rays_vertical\030\007 \001(\r\022\"\n\032max_number_"
    "of_interactions\030\010 \001(\r\022\031\n\021emitter_frequen"
    "cy\030\t \001(\001\"\351\006\n\035CameraSensorViewConfigurati"
    "on\022#\n\tsensor_id\030\001 \001(\0132\020.osi3.Identifier\022"
    "1\n\021mounting_position\030\002 \001(\0132\026.osi3.Mounti"
    "ngPosition\0226\n\026mounting_position_rmse\030\003 \001"
    "(\0132\026.osi3.MountingPosition\022 \n\030field_of_v"
    "iew_horizontal\030\004 \001(\001\022\036\n\026field_of_view_ve"
    "rtical\030\005 \001(\001\022#\n\033number_of_pixels_horizon"
    "tal\030\006 \001(\r\022!\n\031number_of_pixels_vertical\030\007"
    " \001(\r\022I\n\016channel_format\030\010 \003(\01621.osi3.Came"
    "raSensorViewConfiguration.ChannelFormat\""
    "\342\003\n\rChannelFormat\022\032\n\026CHANNEL_FORMAT_UNKN"
    "OWN\020\000\022\030\n\024CHANNEL_FORMAT_OTHER\020\001\022\036\n\032CHANN"
    "EL_FORMAT_MONO_U8_LIN\020\002\022\037\n\033CHANNEL_FORMA"
    "T_MONO_U16_LIN\020\003\022\037\n\033CHANNEL_FORMAT_MONO_"
    "U32_LIN\020\004\022\037\n\033CHANNEL_FORMAT_MONO_F32_LIN"
    "\020\005\022\035\n\031CHANNEL_FORMAT_RGB_U8_LIN\020\006\022\036\n\032CHA"
    "NNEL_FORMAT_RGB_U16_LIN\020\007\022\036\n\032CHANNEL_FOR"
    "MAT_RGB_U32_LIN\020\010\022\036\n\032CHANNEL_FORMAT_RGB_"
    "F32_LIN\020\t\022$\n CHANNEL_FORMAT_BAYER_BGGR_U"
    "8_LIN\020\n\022%\n!CHANNEL_FORMAT_BAYER_BGGR_U16"
    "_LIN\020\013\022%\n!CHANNEL_FORMAT_BAYER_BGGR_U32_"
    "LIN\020\014\022%\n!CHANNEL_FORMAT_BAYER_BGGR_F32_L"
    "IN\020\r\"\365\001\n!UltrasonicSensorViewConfigurati"
    "on\022#\n\tsensor_id\030\001 \001(\0132\020.osi3.Identifier\022"
    "1\n\021mounting_position\030\002 \001(\0132\026.osi3.Mounti"
    "ngPosition\0226\n\026mounting_position_rmse\030\003 \001"
    "(\0132\026.osi3.MountingPosition\022 \n\030field_of_v"
    "iew_horizontal\030\004 \001(\001\022\036\n\026field_of_view_ve"
    "rtical\030\005 \001(\001B\002H\001", 3296);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_sensorviewconfiguration.proto", &protobuf_RegisterTypes);
  SensorViewConfiguration::default_instance_ = new SensorViewConfiguration();
  GenericSensorViewConfiguration::default_instance_ = new GenericSensorViewConfiguration();
  RadarSensorViewConfiguration::default_instance_ = new RadarSensorViewConfiguration();
  RadarSensorViewConfiguration_AntennaDiagramEntry::default_instance_ = new RadarSensorViewConfiguration_AntennaDiagramEntry();
  LidarSensorViewConfiguration::default_instance_ = new LidarSensorViewConfiguration();
  CameraSensorViewConfiguration::default_instance_ = new CameraSensorViewConfiguration();
  UltrasonicSensorViewConfiguration::default_instance_ = new UltrasonicSensorViewConfiguration();
  SensorViewConfiguration::default_instance_->InitAsDefaultInstance();
  GenericSensorViewConfiguration::default_instance_->InitAsDefaultInstance();
  RadarSensorViewConfiguration::default_instance_->InitAsDefaultInstance();
  RadarSensorViewConfiguration_AntennaDiagramEntry::default_instance_->InitAsDefaultInstance();
  LidarSensorViewConfiguration::default_instance_->InitAsDefaultInstance();
  CameraSensorViewConfiguration::default_instance_->InitAsDefaultInstance();
  UltrasonicSensorViewConfiguration::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5fsensorviewconfiguration_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5fsensorviewconfiguration_2eproto {
  StaticDescriptorInitializer_osi_5fsensorviewconfiguration_2eproto() {
    protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  }
} static_descriptor_initializer_osi_5fsensorviewconfiguration_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorViewConfiguration::kVersionFieldNumber;
const int SensorViewConfiguration::kSensorIdFieldNumber;
const int SensorViewConfiguration::kMountingPositionFieldNumber;
const int SensorViewConfiguration::kMountingPositionRmseFieldNumber;
const int SensorViewConfiguration::kFieldOfViewHorizontalFieldNumber;
const int SensorViewConfiguration::kFieldOfViewVerticalFieldNumber;
const int SensorViewConfiguration::kRangeFieldNumber;
const int SensorViewConfiguration::kUpdateCycleTimeFieldNumber;
const int SensorViewConfiguration::kUpdateCycleOffsetFieldNumber;
const int SensorViewConfiguration::kSimulationStartTimeFieldNumber;
const int SensorViewConfiguration::kGenericSensorViewConfigurationFieldNumber;
const int SensorViewConfiguration::kRadarSensorViewConfigurationFieldNumber;
const int SensorViewConfiguration::kLidarSensorViewConfigurationFieldNumber;
const int SensorViewConfiguration::kCameraSensorViewConfigurationFieldNumber;
const int SensorViewConfiguration::kUltrasonicSensorViewConfigurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorViewConfiguration::SensorViewConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.SensorViewConfiguration)
}

void SensorViewConfiguration::InitAsDefaultInstance() {
  version_ = const_cast< ::osi3::InterfaceVersion*>(&::osi3::InterfaceVersion::default_instance());
  sensor_id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  mounting_position_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
  mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
  update_cycle_time_ = const_cast< ::osi3::Timestamp*>(&::osi3::Timestamp::default_instance());
  update_cycle_offset_ = const_cast< ::osi3::Timestamp*>(&::osi3::Timestamp::default_instance());
  simulation_start_time_ = const_cast< ::osi3::Timestamp*>(&::osi3::Timestamp::default_instance());
}

SensorViewConfiguration::SensorViewConfiguration(const SensorViewConfiguration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.SensorViewConfiguration)
}

void SensorViewConfiguration::SharedCtor() {
  _cached_size_ = 0;
  version_ = NULL;
  sensor_id_ = NULL;
  mounting_position_ = NULL;
  mounting_position_rmse_ = NULL;
  field_of_view_horizontal_ = 0;
  field_of_view_vertical_ = 0;
  range_ = 0;
  update_cycle_time_ = NULL;
  update_cycle_offset_ = NULL;
  simulation_start_time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorViewConfiguration::~SensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.SensorViewConfiguration)
  SharedDtor();
}

void SensorViewConfiguration::SharedDtor() {
  if (this != default_instance_) {
    delete version_;
    delete sensor_id_;
    delete mounting_position_;
    delete mounting_position_rmse_;
    delete update_cycle_time_;
    delete update_cycle_offset_;
    delete simulation_start_time_;
  }
}

void SensorViewConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorViewConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorViewConfiguration_descriptor_;
}

const SensorViewConfiguration& SensorViewConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  return *default_instance_;
}

SensorViewConfiguration* SensorViewConfiguration::default_instance_ = NULL;

SensorViewConfiguration* SensorViewConfiguration::New(::google::protobuf::Arena* arena) const {
  SensorViewConfiguration* n = new SensorViewConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SensorViewConfiguration)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SensorViewConfiguration, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SensorViewConfiguration*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(field_of_view_horizontal_, range_);
    if (has_version()) {
      if (version_ != NULL) version_->::osi3::InterfaceVersion::Clear();
    }
    if (has_sensor_id()) {
      if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
    }
    if (has_mounting_position()) {
      if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
    }
    if (has_mounting_position_rmse()) {
      if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
    }
    if (has_update_cycle_time()) {
      if (update_cycle_time_ != NULL) update_cycle_time_->::osi3::Timestamp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_update_cycle_offset()) {
      if (update_cycle_offset_ != NULL) update_cycle_offset_->::osi3::Timestamp::Clear();
    }
    if (has_simulation_start_time()) {
      if (simulation_start_time_ != NULL) simulation_start_time_->::osi3::Timestamp::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  generic_sensor_view_configuration_.Clear();
  radar_sensor_view_configuration_.Clear();
  lidar_sensor_view_configuration_.Clear();
  camera_sensor_view_configuration_.Clear();
  ultrasonic_sensor_view_configuration_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SensorViewConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.SensorViewConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.InterfaceVersion version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sensor_id;
        break;
      }

      // optional .osi3.Identifier sensor_id = 2;
      case 2: {
        if (tag == 18) {
         parse_sensor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mounting_position;
        break;
      }

      // optional .osi3.MountingPosition mounting_position = 3;
      case 3: {
        if (tag == 26) {
         parse_mounting_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mounting_position_rmse;
        break;
      }

      // optional .osi3.MountingPosition mounting_position_rmse = 4;
      case 4: {
        if (tag == 34) {
         parse_mounting_position_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_field_of_view_horizontal;
        break;
      }

      // optional double field_of_view_horizontal = 5;
      case 5: {
        if (tag == 41) {
         parse_field_of_view_horizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_horizontal_)));
          set_has_field_of_view_horizontal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_field_of_view_vertical;
        break;
      }

      // optional double field_of_view_vertical = 6;
      case 6: {
        if (tag == 49) {
         parse_field_of_view_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_vertical_)));
          set_has_field_of_view_vertical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_range;
        break;
      }

      // optional double range = 7;
      case 7: {
        if (tag == 57) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_update_cycle_time;
        break;
      }

      // optional .osi3.Timestamp update_cycle_time = 8;
      case 8: {
        if (tag == 66) {
         parse_update_cycle_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_cycle_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_update_cycle_offset;
        break;
      }

      // optional .osi3.Timestamp update_cycle_offset = 9;
      case 9: {
        if (tag == 74) {
         parse_update_cycle_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_cycle_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_simulation_start_time;
        break;
      }

      // optional .osi3.Timestamp simulation_start_time = 10;
      case 10: {
        if (tag == 82) {
         parse_simulation_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simulation_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_generic_sensor_view_configuration;
        break;
      }

      // repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
      case 1000: {
        if (tag == 8002) {
         parse_generic_sensor_view_configuration:
          DO_(input->IncrementRecursionDepth());
         parse_loop_generic_sensor_view_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_generic_sensor_view_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_loop_generic_sensor_view_configuration;
        if (input->ExpectTag(8010)) goto parse_loop_radar_sensor_view_configuration;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
      case 1001: {
        if (tag == 8010) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_radar_sensor_view_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_radar_sensor_view_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_loop_radar_sensor_view_configuration;
        if (input->ExpectTag(8018)) goto parse_loop_lidar_sensor_view_configuration;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
      case 1002: {
        if (tag == 8018) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lidar_sensor_view_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lidar_sensor_view_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8018)) goto parse_loop_lidar_sensor_view_configuration;
        if (input->ExpectTag(8026)) goto parse_loop_camera_sensor_view_configuration;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
      case 1003: {
        if (tag == 8026) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_camera_sensor_view_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_camera_sensor_view_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8026)) goto parse_loop_camera_sensor_view_configuration;
        if (input->ExpectTag(8034)) goto parse_loop_ultrasonic_sensor_view_configuration;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
      case 1004: {
        if (tag == 8034) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_ultrasonic_sensor_view_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ultrasonic_sensor_view_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8034)) goto parse_loop_ultrasonic_sensor_view_configuration;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.SensorViewConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.SensorViewConfiguration)
  return false;
#undef DO_
}

void SensorViewConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.SensorViewConfiguration)
  // optional .osi3.InterfaceVersion version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->version_, output);
  }

  // optional .osi3.Identifier sensor_id = 2;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sensor_id_, output);
  }

  // optional .osi3.MountingPosition mounting_position = 3;
  if (has_mounting_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mounting_position_, output);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 4;
  if (has_mounting_position_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mounting_position_rmse_, output);
  }

  // optional double field_of_view_horizontal = 5;
  if (has_field_of_view_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->field_of_view_horizontal(), output);
  }

  // optional double field_of_view_vertical = 6;
  if (has_field_of_view_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->field_of_view_vertical(), output);
  }

  // optional double range = 7;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->range(), output);
  }

  // optional .osi3.Timestamp update_cycle_time = 8;
  if (has_update_cycle_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->update_cycle_time_, output);
  }

  // optional .osi3.Timestamp update_cycle_offset = 9;
  if (has_update_cycle_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->update_cycle_offset_, output);
  }

  // optional .osi3.Timestamp simulation_start_time = 10;
  if (has_simulation_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->simulation_start_time_, output);
  }

  // repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
  for (unsigned int i = 0, n = this->generic_sensor_view_configuration_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->generic_sensor_view_configuration(i), output);
  }

  // repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
  for (unsigned int i = 0, n = this->radar_sensor_view_configuration_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->radar_sensor_view_configuration(i), output);
  }

  // repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
  for (unsigned int i = 0, n = this->lidar_sensor_view_configuration_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1002, this->lidar_sensor_view_configuration(i), output);
  }

  // repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
  for (unsigned int i = 0, n = this->camera_sensor_view_configuration_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1003, this->camera_sensor_view_configuration(i), output);
  }

  // repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
  for (unsigned int i = 0, n = this->ultrasonic_sensor_view_configuration_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1004, this->ultrasonic_sensor_view_configuration(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.SensorViewConfiguration)
}

::google::protobuf::uint8* SensorViewConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SensorViewConfiguration)
  // optional .osi3.InterfaceVersion version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->version_, false, target);
  }

  // optional .osi3.Identifier sensor_id = 2;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sensor_id_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position = 3;
  if (has_mounting_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->mounting_position_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 4;
  if (has_mounting_position_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->mounting_position_rmse_, false, target);
  }

  // optional double field_of_view_horizontal = 5;
  if (has_field_of_view_horizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->field_of_view_horizontal(), target);
  }

  // optional double field_of_view_vertical = 6;
  if (has_field_of_view_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->field_of_view_vertical(), target);
  }

  // optional double range = 7;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->range(), target);
  }

  // optional .osi3.Timestamp update_cycle_time = 8;
  if (has_update_cycle_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->update_cycle_time_, false, target);
  }

  // optional .osi3.Timestamp update_cycle_offset = 9;
  if (has_update_cycle_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->update_cycle_offset_, false, target);
  }

  // optional .osi3.Timestamp simulation_start_time = 10;
  if (has_simulation_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->simulation_start_time_, false, target);
  }

  // repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
  for (unsigned int i = 0, n = this->generic_sensor_view_configuration_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1000, this->generic_sensor_view_configuration(i), false, target);
  }

  // repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
  for (unsigned int i = 0, n = this->radar_sensor_view_configuration_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1001, this->radar_sensor_view_configuration(i), false, target);
  }

  // repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
  for (unsigned int i = 0, n = this->lidar_sensor_view_configuration_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1002, this->lidar_sensor_view_configuration(i), false, target);
  }

  // repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
  for (unsigned int i = 0, n = this->camera_sensor_view_configuration_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1003, this->camera_sensor_view_configuration(i), false, target);
  }

  // repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
  for (unsigned int i = 0, n = this->ultrasonic_sensor_view_configuration_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1004, this->ultrasonic_sensor_view_configuration(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SensorViewConfiguration)
  return target;
}

int SensorViewConfiguration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SensorViewConfiguration)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .osi3.InterfaceVersion version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->version_);
    }

    // optional .osi3.Identifier sensor_id = 2;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 3;
    if (has_mounting_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 4;
    if (has_mounting_position_rmse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_rmse_);
    }

    // optional double field_of_view_horizontal = 5;
    if (has_field_of_view_horizontal()) {
      total_size += 1 + 8;
    }

    // optional double field_of_view_vertical = 6;
    if (has_field_of_view_vertical()) {
      total_size += 1 + 8;
    }

    // optional double range = 7;
    if (has_range()) {
      total_size += 1 + 8;
    }

    // optional .osi3.Timestamp update_cycle_time = 8;
    if (has_update_cycle_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_cycle_time_);
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .osi3.Timestamp update_cycle_offset = 9;
    if (has_update_cycle_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_cycle_offset_);
    }

    // optional .osi3.Timestamp simulation_start_time = 10;
    if (has_simulation_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->simulation_start_time_);
    }

  }
  // repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
  total_size += 2 * this->generic_sensor_view_configuration_size();
  for (int i = 0; i < this->generic_sensor_view_configuration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->generic_sensor_view_configuration(i));
  }

  // repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
  total_size += 2 * this->radar_sensor_view_configuration_size();
  for (int i = 0; i < this->radar_sensor_view_configuration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->radar_sensor_view_configuration(i));
  }

  // repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
  total_size += 2 * this->lidar_sensor_view_configuration_size();
  for (int i = 0; i < this->lidar_sensor_view_configuration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lidar_sensor_view_configuration(i));
  }

  // repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
  total_size += 2 * this->camera_sensor_view_configuration_size();
  for (int i = 0; i < this->camera_sensor_view_configuration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera_sensor_view_configuration(i));
  }

  // repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
  total_size += 2 * this->ultrasonic_sensor_view_configuration_size();
  for (int i = 0; i < this->ultrasonic_sensor_view_configuration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ultrasonic_sensor_view_configuration(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorViewConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.SensorViewConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SensorViewConfiguration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorViewConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.SensorViewConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.SensorViewConfiguration)
    MergeFrom(*source);
  }
}

void SensorViewConfiguration::MergeFrom(const SensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.SensorViewConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  generic_sensor_view_configuration_.MergeFrom(from.generic_sensor_view_configuration_);
  radar_sensor_view_configuration_.MergeFrom(from.radar_sensor_view_configuration_);
  lidar_sensor_view_configuration_.MergeFrom(from.lidar_sensor_view_configuration_);
  camera_sensor_view_configuration_.MergeFrom(from.camera_sensor_view_configuration_);
  ultrasonic_sensor_view_configuration_.MergeFrom(from.ultrasonic_sensor_view_configuration_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
    }
    if (from.has_sensor_id()) {
      mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
    }
    if (from.has_mounting_position()) {
      mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
    }
    if (from.has_mounting_position_rmse()) {
      mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
    }
    if (from.has_field_of_view_horizontal()) {
      set_field_of_view_horizontal(from.field_of_view_horizontal());
    }
    if (from.has_field_of_view_vertical()) {
      set_field_of_view_vertical(from.field_of_view_vertical());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_update_cycle_time()) {
      mutable_update_cycle_time()->::osi3::Timestamp::MergeFrom(from.update_cycle_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_update_cycle_offset()) {
      mutable_update_cycle_offset()->::osi3::Timestamp::MergeFrom(from.update_cycle_offset());
    }
    if (from.has_simulation_start_time()) {
      mutable_simulation_start_time()->::osi3::Timestamp::MergeFrom(from.simulation_start_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SensorViewConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.SensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorViewConfiguration::CopyFrom(const SensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorViewConfiguration::IsInitialized() const {

  return true;
}

void SensorViewConfiguration::Swap(SensorViewConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorViewConfiguration::InternalSwap(SensorViewConfiguration* other) {
  std::swap(version_, other->version_);
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(mounting_position_, other->mounting_position_);
  std::swap(mounting_position_rmse_, other->mounting_position_rmse_);
  std::swap(field_of_view_horizontal_, other->field_of_view_horizontal_);
  std::swap(field_of_view_vertical_, other->field_of_view_vertical_);
  std::swap(range_, other->range_);
  std::swap(update_cycle_time_, other->update_cycle_time_);
  std::swap(update_cycle_offset_, other->update_cycle_offset_);
  std::swap(simulation_start_time_, other->simulation_start_time_);
  generic_sensor_view_configuration_.UnsafeArenaSwap(&other->generic_sensor_view_configuration_);
  radar_sensor_view_configuration_.UnsafeArenaSwap(&other->radar_sensor_view_configuration_);
  lidar_sensor_view_configuration_.UnsafeArenaSwap(&other->lidar_sensor_view_configuration_);
  camera_sensor_view_configuration_.UnsafeArenaSwap(&other->camera_sensor_view_configuration_);
  ultrasonic_sensor_view_configuration_.UnsafeArenaSwap(&other->ultrasonic_sensor_view_configuration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorViewConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorViewConfiguration_descriptor_;
  metadata.reflection = SensorViewConfiguration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorViewConfiguration

// optional .osi3.InterfaceVersion version = 1;
bool SensorViewConfiguration::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SensorViewConfiguration::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SensorViewConfiguration::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SensorViewConfiguration::clear_version() {
  if (version_ != NULL) version_->::osi3::InterfaceVersion::Clear();
  clear_has_version();
}
const ::osi3::InterfaceVersion& SensorViewConfiguration::version() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
::osi3::InterfaceVersion* SensorViewConfiguration::mutable_version() {
  set_has_version();
  if (version_ == NULL) {
    version_ = new ::osi3::InterfaceVersion;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.version)
  return version_;
}
::osi3::InterfaceVersion* SensorViewConfiguration::release_version() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.version)
  clear_has_version();
  ::osi3::InterfaceVersion* temp = version_;
  version_ = NULL;
  return temp;
}
void SensorViewConfiguration::set_allocated_version(::osi3::InterfaceVersion* version) {
  delete version_;
  version_ = version;
  if (version) {
    set_has_version();
  } else {
    clear_has_version();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.version)
}

// optional .osi3.Identifier sensor_id = 2;
bool SensorViewConfiguration::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SensorViewConfiguration::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SensorViewConfiguration::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
const ::osi3::Identifier& SensorViewConfiguration::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
::osi3::Identifier* SensorViewConfiguration::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.sensor_id)
  return sensor_id_;
}
::osi3::Identifier* SensorViewConfiguration::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
void SensorViewConfiguration::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 3;
bool SensorViewConfiguration::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SensorViewConfiguration::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000004u;
}
void SensorViewConfiguration::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void SensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
const ::osi3::MountingPosition& SensorViewConfiguration::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
::osi3::MountingPosition* SensorViewConfiguration::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.mounting_position)
  return mounting_position_;
}
::osi3::MountingPosition* SensorViewConfiguration::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
void SensorViewConfiguration::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 4;
bool SensorViewConfiguration::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SensorViewConfiguration::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000008u;
}
void SensorViewConfiguration::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000008u;
}
void SensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
const ::osi3::MountingPosition& SensorViewConfiguration::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
::osi3::MountingPosition* SensorViewConfiguration::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_;
}
::osi3::MountingPosition* SensorViewConfiguration::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
void SensorViewConfiguration::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.mounting_position_rmse)
}

// optional double field_of_view_horizontal = 5;
bool SensorViewConfiguration::has_field_of_view_horizontal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SensorViewConfiguration::set_has_field_of_view_horizontal() {
  _has_bits_[0] |= 0x00000010u;
}
void SensorViewConfiguration::clear_has_field_of_view_horizontal() {
  _has_bits_[0] &= ~0x00000010u;
}
void SensorViewConfiguration::clear_field_of_view_horizontal() {
  field_of_view_horizontal_ = 0;
  clear_has_field_of_view_horizontal();
}
 double SensorViewConfiguration::field_of_view_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.field_of_view_horizontal)
  return field_of_view_horizontal_;
}
 void SensorViewConfiguration::set_field_of_view_horizontal(double value) {
  set_has_field_of_view_horizontal();
  field_of_view_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.SensorViewConfiguration.field_of_view_horizontal)
}

// optional double field_of_view_vertical = 6;
bool SensorViewConfiguration::has_field_of_view_vertical() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SensorViewConfiguration::set_has_field_of_view_vertical() {
  _has_bits_[0] |= 0x00000020u;
}
void SensorViewConfiguration::clear_has_field_of_view_vertical() {
  _has_bits_[0] &= ~0x00000020u;
}
void SensorViewConfiguration::clear_field_of_view_vertical() {
  field_of_view_vertical_ = 0;
  clear_has_field_of_view_vertical();
}
 double SensorViewConfiguration::field_of_view_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.field_of_view_vertical)
  return field_of_view_vertical_;
}
 void SensorViewConfiguration::set_field_of_view_vertical(double value) {
  set_has_field_of_view_vertical();
  field_of_view_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.SensorViewConfiguration.field_of_view_vertical)
}

// optional double range = 7;
bool SensorViewConfiguration::has_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SensorViewConfiguration::set_has_range() {
  _has_bits_[0] |= 0x00000040u;
}
void SensorViewConfiguration::clear_has_range() {
  _has_bits_[0] &= ~0x00000040u;
}
void SensorViewConfiguration::clear_range() {
  range_ = 0;
  clear_has_range();
}
 double SensorViewConfiguration::range() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.range)
  return range_;
}
 void SensorViewConfiguration::set_range(double value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:osi3.SensorViewConfiguration.range)
}

// optional .osi3.Timestamp update_cycle_time = 8;
bool SensorViewConfiguration::has_update_cycle_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SensorViewConfiguration::set_has_update_cycle_time() {
  _has_bits_[0] |= 0x00000080u;
}
void SensorViewConfiguration::clear_has_update_cycle_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void SensorViewConfiguration::clear_update_cycle_time() {
  if (update_cycle_time_ != NULL) update_cycle_time_->::osi3::Timestamp::Clear();
  clear_has_update_cycle_time();
}
const ::osi3::Timestamp& SensorViewConfiguration::update_cycle_time() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.update_cycle_time)
  return update_cycle_time_ != NULL ? *update_cycle_time_ : *default_instance_->update_cycle_time_;
}
::osi3::Timestamp* SensorViewConfiguration::mutable_update_cycle_time() {
  set_has_update_cycle_time();
  if (update_cycle_time_ == NULL) {
    update_cycle_time_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.update_cycle_time)
  return update_cycle_time_;
}
::osi3::Timestamp* SensorViewConfiguration::release_update_cycle_time() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.update_cycle_time)
  clear_has_update_cycle_time();
  ::osi3::Timestamp* temp = update_cycle_time_;
  update_cycle_time_ = NULL;
  return temp;
}
void SensorViewConfiguration::set_allocated_update_cycle_time(::osi3::Timestamp* update_cycle_time) {
  delete update_cycle_time_;
  update_cycle_time_ = update_cycle_time;
  if (update_cycle_time) {
    set_has_update_cycle_time();
  } else {
    clear_has_update_cycle_time();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.update_cycle_time)
}

// optional .osi3.Timestamp update_cycle_offset = 9;
bool SensorViewConfiguration::has_update_cycle_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SensorViewConfiguration::set_has_update_cycle_offset() {
  _has_bits_[0] |= 0x00000100u;
}
void SensorViewConfiguration::clear_has_update_cycle_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
void SensorViewConfiguration::clear_update_cycle_offset() {
  if (update_cycle_offset_ != NULL) update_cycle_offset_->::osi3::Timestamp::Clear();
  clear_has_update_cycle_offset();
}
const ::osi3::Timestamp& SensorViewConfiguration::update_cycle_offset() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.update_cycle_offset)
  return update_cycle_offset_ != NULL ? *update_cycle_offset_ : *default_instance_->update_cycle_offset_;
}
::osi3::Timestamp* SensorViewConfiguration::mutable_update_cycle_offset() {
  set_has_update_cycle_offset();
  if (update_cycle_offset_ == NULL) {
    update_cycle_offset_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.update_cycle_offset)
  return update_cycle_offset_;
}
::osi3::Timestamp* SensorViewConfiguration::release_update_cycle_offset() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.update_cycle_offset)
  clear_has_update_cycle_offset();
  ::osi3::Timestamp* temp = update_cycle_offset_;
  update_cycle_offset_ = NULL;
  return temp;
}
void SensorViewConfiguration::set_allocated_update_cycle_offset(::osi3::Timestamp* update_cycle_offset) {
  delete update_cycle_offset_;
  update_cycle_offset_ = update_cycle_offset;
  if (update_cycle_offset) {
    set_has_update_cycle_offset();
  } else {
    clear_has_update_cycle_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.update_cycle_offset)
}

// optional .osi3.Timestamp simulation_start_time = 10;
bool SensorViewConfiguration::has_simulation_start_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SensorViewConfiguration::set_has_simulation_start_time() {
  _has_bits_[0] |= 0x00000200u;
}
void SensorViewConfiguration::clear_has_simulation_start_time() {
  _has_bits_[0] &= ~0x00000200u;
}
void SensorViewConfiguration::clear_simulation_start_time() {
  if (simulation_start_time_ != NULL) simulation_start_time_->::osi3::Timestamp::Clear();
  clear_has_simulation_start_time();
}
const ::osi3::Timestamp& SensorViewConfiguration::simulation_start_time() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.simulation_start_time)
  return simulation_start_time_ != NULL ? *simulation_start_time_ : *default_instance_->simulation_start_time_;
}
::osi3::Timestamp* SensorViewConfiguration::mutable_simulation_start_time() {
  set_has_simulation_start_time();
  if (simulation_start_time_ == NULL) {
    simulation_start_time_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.simulation_start_time)
  return simulation_start_time_;
}
::osi3::Timestamp* SensorViewConfiguration::release_simulation_start_time() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.simulation_start_time)
  clear_has_simulation_start_time();
  ::osi3::Timestamp* temp = simulation_start_time_;
  simulation_start_time_ = NULL;
  return temp;
}
void SensorViewConfiguration::set_allocated_simulation_start_time(::osi3::Timestamp* simulation_start_time) {
  delete simulation_start_time_;
  simulation_start_time_ = simulation_start_time;
  if (simulation_start_time) {
    set_has_simulation_start_time();
  } else {
    clear_has_simulation_start_time();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.simulation_start_time)
}

// repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
int SensorViewConfiguration::generic_sensor_view_configuration_size() const {
  return generic_sensor_view_configuration_.size();
}
void SensorViewConfiguration::clear_generic_sensor_view_configuration() {
  generic_sensor_view_configuration_.Clear();
}
const ::osi3::GenericSensorViewConfiguration& SensorViewConfiguration::generic_sensor_view_configuration(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.generic_sensor_view_configuration)
  return generic_sensor_view_configuration_.Get(index);
}
::osi3::GenericSensorViewConfiguration* SensorViewConfiguration::mutable_generic_sensor_view_configuration(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.generic_sensor_view_configuration)
  return generic_sensor_view_configuration_.Mutable(index);
}
::osi3::GenericSensorViewConfiguration* SensorViewConfiguration::add_generic_sensor_view_configuration() {
  // @@protoc_insertion_point(field_add:osi3.SensorViewConfiguration.generic_sensor_view_configuration)
  return generic_sensor_view_configuration_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::GenericSensorViewConfiguration >*
SensorViewConfiguration::mutable_generic_sensor_view_configuration() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorViewConfiguration.generic_sensor_view_configuration)
  return &generic_sensor_view_configuration_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::GenericSensorViewConfiguration >&
SensorViewConfiguration::generic_sensor_view_configuration() const {
  // @@protoc_insertion_point(field_list:osi3.SensorViewConfiguration.generic_sensor_view_configuration)
  return generic_sensor_view_configuration_;
}

// repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
int SensorViewConfiguration::radar_sensor_view_configuration_size() const {
  return radar_sensor_view_configuration_.size();
}
void SensorViewConfiguration::clear_radar_sensor_view_configuration() {
  radar_sensor_view_configuration_.Clear();
}
const ::osi3::RadarSensorViewConfiguration& SensorViewConfiguration::radar_sensor_view_configuration(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.radar_sensor_view_configuration)
  return radar_sensor_view_configuration_.Get(index);
}
::osi3::RadarSensorViewConfiguration* SensorViewConfiguration::mutable_radar_sensor_view_configuration(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.radar_sensor_view_configuration)
  return radar_sensor_view_configuration_.Mutable(index);
}
::osi3::RadarSensorViewConfiguration* SensorViewConfiguration::add_radar_sensor_view_configuration() {
  // @@protoc_insertion_point(field_add:osi3.SensorViewConfiguration.radar_sensor_view_configuration)
  return radar_sensor_view_configuration_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration >*
SensorViewConfiguration::mutable_radar_sensor_view_configuration() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorViewConfiguration.radar_sensor_view_configuration)
  return &radar_sensor_view_configuration_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration >&
SensorViewConfiguration::radar_sensor_view_configuration() const {
  // @@protoc_insertion_point(field_list:osi3.SensorViewConfiguration.radar_sensor_view_configuration)
  return radar_sensor_view_configuration_;
}

// repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
int SensorViewConfiguration::lidar_sensor_view_configuration_size() const {
  return lidar_sensor_view_configuration_.size();
}
void SensorViewConfiguration::clear_lidar_sensor_view_configuration() {
  lidar_sensor_view_configuration_.Clear();
}
const ::osi3::LidarSensorViewConfiguration& SensorViewConfiguration::lidar_sensor_view_configuration(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.lidar_sensor_view_configuration)
  return lidar_sensor_view_configuration_.Get(index);
}
::osi3::LidarSensorViewConfiguration* SensorViewConfiguration::mutable_lidar_sensor_view_configuration(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.lidar_sensor_view_configuration)
  return lidar_sensor_view_configuration_.Mutable(index);
}
::osi3::LidarSensorViewConfiguration* SensorViewConfiguration::add_lidar_sensor_view_configuration() {
  // @@protoc_insertion_point(field_add:osi3.SensorViewConfiguration.lidar_sensor_view_configuration)
  return lidar_sensor_view_configuration_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::LidarSensorViewConfiguration >*
SensorViewConfiguration::mutable_lidar_sensor_view_configuration() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorViewConfiguration.lidar_sensor_view_configuration)
  return &lidar_sensor_view_configuration_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::LidarSensorViewConfiguration >&
SensorViewConfiguration::lidar_sensor_view_configuration() const {
  // @@protoc_insertion_point(field_list:osi3.SensorViewConfiguration.lidar_sensor_view_configuration)
  return lidar_sensor_view_configuration_;
}

// repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
int SensorViewConfiguration::camera_sensor_view_configuration_size() const {
  return camera_sensor_view_configuration_.size();
}
void SensorViewConfiguration::clear_camera_sensor_view_configuration() {
  camera_sensor_view_configuration_.Clear();
}
const ::osi3::CameraSensorViewConfiguration& SensorViewConfiguration::camera_sensor_view_configuration(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.camera_sensor_view_configuration)
  return camera_sensor_view_configuration_.Get(index);
}
::osi3::CameraSensorViewConfiguration* SensorViewConfiguration::mutable_camera_sensor_view_configuration(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.camera_sensor_view_configuration)
  return camera_sensor_view_configuration_.Mutable(index);
}
::osi3::CameraSensorViewConfiguration* SensorViewConfiguration::add_camera_sensor_view_configuration() {
  // @@protoc_insertion_point(field_add:osi3.SensorViewConfiguration.camera_sensor_view_configuration)
  return camera_sensor_view_configuration_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::CameraSensorViewConfiguration >*
SensorViewConfiguration::mutable_camera_sensor_view_configuration() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorViewConfiguration.camera_sensor_view_configuration)
  return &camera_sensor_view_configuration_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::CameraSensorViewConfiguration >&
SensorViewConfiguration::camera_sensor_view_configuration() const {
  // @@protoc_insertion_point(field_list:osi3.SensorViewConfiguration.camera_sensor_view_configuration)
  return camera_sensor_view_configuration_;
}

// repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
int SensorViewConfiguration::ultrasonic_sensor_view_configuration_size() const {
  return ultrasonic_sensor_view_configuration_.size();
}
void SensorViewConfiguration::clear_ultrasonic_sensor_view_configuration() {
  ultrasonic_sensor_view_configuration_.Clear();
}
const ::osi3::UltrasonicSensorViewConfiguration& SensorViewConfiguration::ultrasonic_sensor_view_configuration(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.ultrasonic_sensor_view_configuration)
  return ultrasonic_sensor_view_configuration_.Get(index);
}
::osi3::UltrasonicSensorViewConfiguration* SensorViewConfiguration::mutable_ultrasonic_sensor_view_configuration(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.ultrasonic_sensor_view_configuration)
  return ultrasonic_sensor_view_configuration_.Mutable(index);
}
::osi3::UltrasonicSensorViewConfiguration* SensorViewConfiguration::add_ultrasonic_sensor_view_configuration() {
  // @@protoc_insertion_point(field_add:osi3.SensorViewConfiguration.ultrasonic_sensor_view_configuration)
  return ultrasonic_sensor_view_configuration_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::UltrasonicSensorViewConfiguration >*
SensorViewConfiguration::mutable_ultrasonic_sensor_view_configuration() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorViewConfiguration.ultrasonic_sensor_view_configuration)
  return &ultrasonic_sensor_view_configuration_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::UltrasonicSensorViewConfiguration >&
SensorViewConfiguration::ultrasonic_sensor_view_configuration() const {
  // @@protoc_insertion_point(field_list:osi3.SensorViewConfiguration.ultrasonic_sensor_view_configuration)
  return ultrasonic_sensor_view_configuration_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericSensorViewConfiguration::kSensorIdFieldNumber;
const int GenericSensorViewConfiguration::kMountingPositionFieldNumber;
const int GenericSensorViewConfiguration::kMountingPositionRmseFieldNumber;
const int GenericSensorViewConfiguration::kFieldOfViewHorizontalFieldNumber;
const int GenericSensorViewConfiguration::kFieldOfViewVerticalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericSensorViewConfiguration::GenericSensorViewConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.GenericSensorViewConfiguration)
}

void GenericSensorViewConfiguration::InitAsDefaultInstance() {
  sensor_id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  mounting_position_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
  mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
}

GenericSensorViewConfiguration::GenericSensorViewConfiguration(const GenericSensorViewConfiguration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.GenericSensorViewConfiguration)
}

void GenericSensorViewConfiguration::SharedCtor() {
  _cached_size_ = 0;
  sensor_id_ = NULL;
  mounting_position_ = NULL;
  mounting_position_rmse_ = NULL;
  field_of_view_horizontal_ = 0;
  field_of_view_vertical_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericSensorViewConfiguration::~GenericSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.GenericSensorViewConfiguration)
  SharedDtor();
}

void GenericSensorViewConfiguration::SharedDtor() {
  if (this != default_instance_) {
    delete sensor_id_;
    delete mounting_position_;
    delete mounting_position_rmse_;
  }
}

void GenericSensorViewConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericSensorViewConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericSensorViewConfiguration_descriptor_;
}

const GenericSensorViewConfiguration& GenericSensorViewConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  return *default_instance_;
}

GenericSensorViewConfiguration* GenericSensorViewConfiguration::default_instance_ = NULL;

GenericSensorViewConfiguration* GenericSensorViewConfiguration::New(::google::protobuf::Arena* arena) const {
  GenericSensorViewConfiguration* n = new GenericSensorViewConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenericSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.GenericSensorViewConfiguration)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GenericSensorViewConfiguration, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GenericSensorViewConfiguration*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(field_of_view_horizontal_, field_of_view_vertical_);
    if (has_sensor_id()) {
      if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
    }
    if (has_mounting_position()) {
      if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
    }
    if (has_mounting_position_rmse()) {
      if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GenericSensorViewConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.GenericSensorViewConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Identifier sensor_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mounting_position;
        break;
      }

      // optional .osi3.MountingPosition mounting_position = 2;
      case 2: {
        if (tag == 18) {
         parse_mounting_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mounting_position_rmse;
        break;
      }

      // optional .osi3.MountingPosition mounting_position_rmse = 3;
      case 3: {
        if (tag == 26) {
         parse_mounting_position_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_field_of_view_horizontal;
        break;
      }

      // optional double field_of_view_horizontal = 4;
      case 4: {
        if (tag == 33) {
         parse_field_of_view_horizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_horizontal_)));
          set_has_field_of_view_horizontal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_field_of_view_vertical;
        break;
      }

      // optional double field_of_view_vertical = 5;
      case 5: {
        if (tag == 41) {
         parse_field_of_view_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_vertical_)));
          set_has_field_of_view_vertical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.GenericSensorViewConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.GenericSensorViewConfiguration)
  return false;
#undef DO_
}

void GenericSensorViewConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.GenericSensorViewConfiguration)
  // optional .osi3.Identifier sensor_id = 1;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sensor_id_, output);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (has_mounting_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mounting_position_, output);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (has_mounting_position_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mounting_position_rmse_, output);
  }

  // optional double field_of_view_horizontal = 4;
  if (has_field_of_view_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->field_of_view_horizontal(), output);
  }

  // optional double field_of_view_vertical = 5;
  if (has_field_of_view_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->field_of_view_vertical(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.GenericSensorViewConfiguration)
}

::google::protobuf::uint8* GenericSensorViewConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.GenericSensorViewConfiguration)
  // optional .osi3.Identifier sensor_id = 1;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->sensor_id_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (has_mounting_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->mounting_position_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (has_mounting_position_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->mounting_position_rmse_, false, target);
  }

  // optional double field_of_view_horizontal = 4;
  if (has_field_of_view_horizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->field_of_view_horizontal(), target);
  }

  // optional double field_of_view_vertical = 5;
  if (has_field_of_view_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->field_of_view_vertical(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.GenericSensorViewConfiguration)
  return target;
}

int GenericSensorViewConfiguration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.GenericSensorViewConfiguration)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .osi3.Identifier sensor_id = 1;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 2;
    if (has_mounting_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 3;
    if (has_mounting_position_rmse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_rmse_);
    }

    // optional double field_of_view_horizontal = 4;
    if (has_field_of_view_horizontal()) {
      total_size += 1 + 8;
    }

    // optional double field_of_view_vertical = 5;
    if (has_field_of_view_vertical()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericSensorViewConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.GenericSensorViewConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GenericSensorViewConfiguration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericSensorViewConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.GenericSensorViewConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.GenericSensorViewConfiguration)
    MergeFrom(*source);
  }
}

void GenericSensorViewConfiguration::MergeFrom(const GenericSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.GenericSensorViewConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensor_id()) {
      mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
    }
    if (from.has_mounting_position()) {
      mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
    }
    if (from.has_mounting_position_rmse()) {
      mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
    }
    if (from.has_field_of_view_horizontal()) {
      set_field_of_view_horizontal(from.field_of_view_horizontal());
    }
    if (from.has_field_of_view_vertical()) {
      set_field_of_view_vertical(from.field_of_view_vertical());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GenericSensorViewConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.GenericSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericSensorViewConfiguration::CopyFrom(const GenericSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.GenericSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericSensorViewConfiguration::IsInitialized() const {

  return true;
}

void GenericSensorViewConfiguration::Swap(GenericSensorViewConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericSensorViewConfiguration::InternalSwap(GenericSensorViewConfiguration* other) {
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(mounting_position_, other->mounting_position_);
  std::swap(mounting_position_rmse_, other->mounting_position_rmse_);
  std::swap(field_of_view_horizontal_, other->field_of_view_horizontal_);
  std::swap(field_of_view_vertical_, other->field_of_view_vertical_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenericSensorViewConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericSensorViewConfiguration_descriptor_;
  metadata.reflection = GenericSensorViewConfiguration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenericSensorViewConfiguration

// optional .osi3.Identifier sensor_id = 1;
bool GenericSensorViewConfiguration::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GenericSensorViewConfiguration::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GenericSensorViewConfiguration::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GenericSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
const ::osi3::Identifier& GenericSensorViewConfiguration::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.GenericSensorViewConfiguration.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
::osi3::Identifier* GenericSensorViewConfiguration::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GenericSensorViewConfiguration.sensor_id)
  return sensor_id_;
}
::osi3::Identifier* GenericSensorViewConfiguration::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.GenericSensorViewConfiguration.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
void GenericSensorViewConfiguration::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GenericSensorViewConfiguration.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 2;
bool GenericSensorViewConfiguration::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GenericSensorViewConfiguration::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000002u;
}
void GenericSensorViewConfiguration::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void GenericSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
const ::osi3::MountingPosition& GenericSensorViewConfiguration::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.GenericSensorViewConfiguration.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
::osi3::MountingPosition* GenericSensorViewConfiguration::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GenericSensorViewConfiguration.mounting_position)
  return mounting_position_;
}
::osi3::MountingPosition* GenericSensorViewConfiguration::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.GenericSensorViewConfiguration.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
void GenericSensorViewConfiguration::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GenericSensorViewConfiguration.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 3;
bool GenericSensorViewConfiguration::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GenericSensorViewConfiguration::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000004u;
}
void GenericSensorViewConfiguration::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000004u;
}
void GenericSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
const ::osi3::MountingPosition& GenericSensorViewConfiguration::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.GenericSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
::osi3::MountingPosition* GenericSensorViewConfiguration::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GenericSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_;
}
::osi3::MountingPosition* GenericSensorViewConfiguration::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.GenericSensorViewConfiguration.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
void GenericSensorViewConfiguration::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GenericSensorViewConfiguration.mounting_position_rmse)
}

// optional double field_of_view_horizontal = 4;
bool GenericSensorViewConfiguration::has_field_of_view_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GenericSensorViewConfiguration::set_has_field_of_view_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
void GenericSensorViewConfiguration::clear_has_field_of_view_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
void GenericSensorViewConfiguration::clear_field_of_view_horizontal() {
  field_of_view_horizontal_ = 0;
  clear_has_field_of_view_horizontal();
}
 double GenericSensorViewConfiguration::field_of_view_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.GenericSensorViewConfiguration.field_of_view_horizontal)
  return field_of_view_horizontal_;
}
 void GenericSensorViewConfiguration::set_field_of_view_horizontal(double value) {
  set_has_field_of_view_horizontal();
  field_of_view_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.GenericSensorViewConfiguration.field_of_view_horizontal)
}

// optional double field_of_view_vertical = 5;
bool GenericSensorViewConfiguration::has_field_of_view_vertical() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GenericSensorViewConfiguration::set_has_field_of_view_vertical() {
  _has_bits_[0] |= 0x00000010u;
}
void GenericSensorViewConfiguration::clear_has_field_of_view_vertical() {
  _has_bits_[0] &= ~0x00000010u;
}
void GenericSensorViewConfiguration::clear_field_of_view_vertical() {
  field_of_view_vertical_ = 0;
  clear_has_field_of_view_vertical();
}
 double GenericSensorViewConfiguration::field_of_view_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.GenericSensorViewConfiguration.field_of_view_vertical)
  return field_of_view_vertical_;
}
 void GenericSensorViewConfiguration::set_field_of_view_vertical(double value) {
  set_has_field_of_view_vertical();
  field_of_view_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.GenericSensorViewConfiguration.field_of_view_vertical)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarSensorViewConfiguration_AntennaDiagramEntry::kHorizontalAngleFieldNumber;
const int RadarSensorViewConfiguration_AntennaDiagramEntry::kVerticalAngleFieldNumber;
const int RadarSensorViewConfiguration_AntennaDiagramEntry::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarSensorViewConfiguration_AntennaDiagramEntry::RadarSensorViewConfiguration_AntennaDiagramEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::InitAsDefaultInstance() {
}

RadarSensorViewConfiguration_AntennaDiagramEntry::RadarSensorViewConfiguration_AntennaDiagramEntry(const RadarSensorViewConfiguration_AntennaDiagramEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::SharedCtor() {
  _cached_size_ = 0;
  horizontal_angle_ = 0;
  vertical_angle_ = 0;
  response_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarSensorViewConfiguration_AntennaDiagramEntry::~RadarSensorViewConfiguration_AntennaDiagramEntry() {
  // @@protoc_insertion_point(destructor:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  SharedDtor();
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarSensorViewConfiguration_AntennaDiagramEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarSensorViewConfiguration_AntennaDiagramEntry_descriptor_;
}

const RadarSensorViewConfiguration_AntennaDiagramEntry& RadarSensorViewConfiguration_AntennaDiagramEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  return *default_instance_;
}

RadarSensorViewConfiguration_AntennaDiagramEntry* RadarSensorViewConfiguration_AntennaDiagramEntry::default_instance_ = NULL;

RadarSensorViewConfiguration_AntennaDiagramEntry* RadarSensorViewConfiguration_AntennaDiagramEntry::New(::google::protobuf::Arena* arena) const {
  RadarSensorViewConfiguration_AntennaDiagramEntry* n = new RadarSensorViewConfiguration_AntennaDiagramEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RadarSensorViewConfiguration_AntennaDiagramEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RadarSensorViewConfiguration_AntennaDiagramEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(horizontal_angle_, response_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RadarSensorViewConfiguration_AntennaDiagramEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double horizontal_angle = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontal_angle_)));
          set_has_horizontal_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_vertical_angle;
        break;
      }

      // optional double vertical_angle = 2;
      case 2: {
        if (tag == 17) {
         parse_vertical_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_angle_)));
          set_has_vertical_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_response;
        break;
      }

      // optional double response = 3;
      case 3: {
        if (tag == 25) {
         parse_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &response_)));
          set_has_response();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  return false;
#undef DO_
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  // optional double horizontal_angle = 1;
  if (has_horizontal_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->horizontal_angle(), output);
  }

  // optional double vertical_angle = 2;
  if (has_vertical_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->vertical_angle(), output);
  }

  // optional double response = 3;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
}

::google::protobuf::uint8* RadarSensorViewConfiguration_AntennaDiagramEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  // optional double horizontal_angle = 1;
  if (has_horizontal_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->horizontal_angle(), target);
  }

  // optional double vertical_angle = 2;
  if (has_vertical_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->vertical_angle(), target);
  }

  // optional double response = 3;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  return target;
}

int RadarSensorViewConfiguration_AntennaDiagramEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double horizontal_angle = 1;
    if (has_horizontal_angle()) {
      total_size += 1 + 8;
    }

    // optional double vertical_angle = 2;
    if (has_vertical_angle()) {
      total_size += 1 + 8;
    }

    // optional double response = 3;
    if (has_response()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RadarSensorViewConfiguration_AntennaDiagramEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarSensorViewConfiguration_AntennaDiagramEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
    MergeFrom(*source);
  }
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::MergeFrom(const RadarSensorViewConfiguration_AntennaDiagramEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horizontal_angle()) {
      set_horizontal_angle(from.horizontal_angle());
    }
    if (from.has_vertical_angle()) {
      set_vertical_angle(from.vertical_angle());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::CopyFrom(const RadarSensorViewConfiguration_AntennaDiagramEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSensorViewConfiguration_AntennaDiagramEntry::IsInitialized() const {

  return true;
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::Swap(RadarSensorViewConfiguration_AntennaDiagramEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarSensorViewConfiguration_AntennaDiagramEntry::InternalSwap(RadarSensorViewConfiguration_AntennaDiagramEntry* other) {
  std::swap(horizontal_angle_, other->horizontal_angle_);
  std::swap(vertical_angle_, other->vertical_angle_);
  std::swap(response_, other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarSensorViewConfiguration_AntennaDiagramEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarSensorViewConfiguration_AntennaDiagramEntry_descriptor_;
  metadata.reflection = RadarSensorViewConfiguration_AntennaDiagramEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarSensorViewConfiguration::kSensorIdFieldNumber;
const int RadarSensorViewConfiguration::kMountingPositionFieldNumber;
const int RadarSensorViewConfiguration::kMountingPositionRmseFieldNumber;
const int RadarSensorViewConfiguration::kFieldOfViewHorizontalFieldNumber;
const int RadarSensorViewConfiguration::kFieldOfViewVerticalFieldNumber;
const int RadarSensorViewConfiguration::kNumberOfRaysHorizontalFieldNumber;
const int RadarSensorViewConfiguration::kNumberOfRaysVerticalFieldNumber;
const int RadarSensorViewConfiguration::kMaxNumberOfInteractionsFieldNumber;
const int RadarSensorViewConfiguration::kEmitterFrequencyFieldNumber;
const int RadarSensorViewConfiguration::kTxAntennaDiagramFieldNumber;
const int RadarSensorViewConfiguration::kRxAntennaDiagramFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarSensorViewConfiguration::RadarSensorViewConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RadarSensorViewConfiguration)
}

void RadarSensorViewConfiguration::InitAsDefaultInstance() {
  sensor_id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  mounting_position_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
  mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
}

RadarSensorViewConfiguration::RadarSensorViewConfiguration(const RadarSensorViewConfiguration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.RadarSensorViewConfiguration)
}

void RadarSensorViewConfiguration::SharedCtor() {
  _cached_size_ = 0;
  sensor_id_ = NULL;
  mounting_position_ = NULL;
  mounting_position_rmse_ = NULL;
  field_of_view_horizontal_ = 0;
  field_of_view_vertical_ = 0;
  number_of_rays_horizontal_ = 0u;
  number_of_rays_vertical_ = 0u;
  max_number_of_interactions_ = 0u;
  emitter_frequency_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarSensorViewConfiguration::~RadarSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.RadarSensorViewConfiguration)
  SharedDtor();
}

void RadarSensorViewConfiguration::SharedDtor() {
  if (this != default_instance_) {
    delete sensor_id_;
    delete mounting_position_;
    delete mounting_position_rmse_;
  }
}

void RadarSensorViewConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarSensorViewConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarSensorViewConfiguration_descriptor_;
}

const RadarSensorViewConfiguration& RadarSensorViewConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  return *default_instance_;
}

RadarSensorViewConfiguration* RadarSensorViewConfiguration::default_instance_ = NULL;

RadarSensorViewConfiguration* RadarSensorViewConfiguration::New(::google::protobuf::Arena* arena) const {
  RadarSensorViewConfiguration* n = new RadarSensorViewConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarSensorViewConfiguration)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RadarSensorViewConfiguration, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RadarSensorViewConfiguration*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(field_of_view_horizontal_, number_of_rays_vertical_);
    if (has_sensor_id()) {
      if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
    }
    if (has_mounting_position()) {
      if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
    }
    if (has_mounting_position_rmse()) {
      if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
    }
    max_number_of_interactions_ = 0u;
  }
  emitter_frequency_ = 0;

#undef ZR_HELPER_
#undef ZR_

  tx_antenna_diagram_.Clear();
  rx_antenna_diagram_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RadarSensorViewConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RadarSensorViewConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Identifier sensor_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mounting_position;
        break;
      }

      // optional .osi3.MountingPosition mounting_position = 2;
      case 2: {
        if (tag == 18) {
         parse_mounting_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mounting_position_rmse;
        break;
      }

      // optional .osi3.MountingPosition mounting_position_rmse = 3;
      case 3: {
        if (tag == 26) {
         parse_mounting_position_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_field_of_view_horizontal;
        break;
      }

      // optional double field_of_view_horizontal = 4;
      case 4: {
        if (tag == 33) {
         parse_field_of_view_horizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_horizontal_)));
          set_has_field_of_view_horizontal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_field_of_view_vertical;
        break;
      }

      // optional double field_of_view_vertical = 5;
      case 5: {
        if (tag == 41) {
         parse_field_of_view_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_vertical_)));
          set_has_field_of_view_vertical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_number_of_rays_horizontal;
        break;
      }

      // optional uint32 number_of_rays_horizontal = 6;
      case 6: {
        if (tag == 48) {
         parse_number_of_rays_horizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_rays_horizontal_)));
          set_has_number_of_rays_horizontal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_number_of_rays_vertical;
        break;
      }

      // optional uint32 number_of_rays_vertical = 7;
      case 7: {
        if (tag == 56) {
         parse_number_of_rays_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_rays_vertical_)));
          set_has_number_of_rays_vertical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_number_of_interactions;
        break;
      }

      // optional uint32 max_number_of_interactions = 8;
      case 8: {
        if (tag == 64) {
         parse_max_number_of_interactions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_number_of_interactions_)));
          set_has_max_number_of_interactions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_emitter_frequency;
        break;
      }

      // optional double emitter_frequency = 9;
      case 9: {
        if (tag == 73) {
         parse_emitter_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &emitter_frequency_)));
          set_has_emitter_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_tx_antenna_diagram;
        break;
      }

      // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
      case 10: {
        if (tag == 82) {
         parse_tx_antenna_diagram:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tx_antenna_diagram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tx_antenna_diagram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_tx_antenna_diagram;
        if (input->ExpectTag(90)) goto parse_loop_rx_antenna_diagram;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rx_antenna_diagram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rx_antenna_diagram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_rx_antenna_diagram;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RadarSensorViewConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RadarSensorViewConfiguration)
  return false;
#undef DO_
}

void RadarSensorViewConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RadarSensorViewConfiguration)
  // optional .osi3.Identifier sensor_id = 1;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sensor_id_, output);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (has_mounting_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mounting_position_, output);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (has_mounting_position_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mounting_position_rmse_, output);
  }

  // optional double field_of_view_horizontal = 4;
  if (has_field_of_view_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->field_of_view_horizontal(), output);
  }

  // optional double field_of_view_vertical = 5;
  if (has_field_of_view_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->field_of_view_vertical(), output);
  }

  // optional uint32 number_of_rays_horizontal = 6;
  if (has_number_of_rays_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->number_of_rays_horizontal(), output);
  }

  // optional uint32 number_of_rays_vertical = 7;
  if (has_number_of_rays_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->number_of_rays_vertical(), output);
  }

  // optional uint32 max_number_of_interactions = 8;
  if (has_max_number_of_interactions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_number_of_interactions(), output);
  }

  // optional double emitter_frequency = 9;
  if (has_emitter_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->emitter_frequency(), output);
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
  for (unsigned int i = 0, n = this->tx_antenna_diagram_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tx_antenna_diagram(i), output);
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
  for (unsigned int i = 0, n = this->rx_antenna_diagram_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->rx_antenna_diagram(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RadarSensorViewConfiguration)
}

::google::protobuf::uint8* RadarSensorViewConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarSensorViewConfiguration)
  // optional .osi3.Identifier sensor_id = 1;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->sensor_id_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (has_mounting_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->mounting_position_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (has_mounting_position_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->mounting_position_rmse_, false, target);
  }

  // optional double field_of_view_horizontal = 4;
  if (has_field_of_view_horizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->field_of_view_horizontal(), target);
  }

  // optional double field_of_view_vertical = 5;
  if (has_field_of_view_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->field_of_view_vertical(), target);
  }

  // optional uint32 number_of_rays_horizontal = 6;
  if (has_number_of_rays_horizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->number_of_rays_horizontal(), target);
  }

  // optional uint32 number_of_rays_vertical = 7;
  if (has_number_of_rays_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->number_of_rays_vertical(), target);
  }

  // optional uint32 max_number_of_interactions = 8;
  if (has_max_number_of_interactions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_number_of_interactions(), target);
  }

  // optional double emitter_frequency = 9;
  if (has_emitter_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->emitter_frequency(), target);
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
  for (unsigned int i = 0, n = this->tx_antenna_diagram_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->tx_antenna_diagram(i), false, target);
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
  for (unsigned int i = 0, n = this->rx_antenna_diagram_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->rx_antenna_diagram(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarSensorViewConfiguration)
  return target;
}

int RadarSensorViewConfiguration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarSensorViewConfiguration)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .osi3.Identifier sensor_id = 1;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 2;
    if (has_mounting_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 3;
    if (has_mounting_position_rmse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_rmse_);
    }

    // optional double field_of_view_horizontal = 4;
    if (has_field_of_view_horizontal()) {
      total_size += 1 + 8;
    }

    // optional double field_of_view_vertical = 5;
    if (has_field_of_view_vertical()) {
      total_size += 1 + 8;
    }

    // optional uint32 number_of_rays_horizontal = 6;
    if (has_number_of_rays_horizontal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_rays_horizontal());
    }

    // optional uint32 number_of_rays_vertical = 7;
    if (has_number_of_rays_vertical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_rays_vertical());
    }

    // optional uint32 max_number_of_interactions = 8;
    if (has_max_number_of_interactions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_number_of_interactions());
    }

  }
  // optional double emitter_frequency = 9;
  if (has_emitter_frequency()) {
    total_size += 1 + 8;
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
  total_size += 1 * this->tx_antenna_diagram_size();
  for (int i = 0; i < this->tx_antenna_diagram_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tx_antenna_diagram(i));
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
  total_size += 1 * this->rx_antenna_diagram_size();
  for (int i = 0; i < this->rx_antenna_diagram_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rx_antenna_diagram(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarSensorViewConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RadarSensorViewConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RadarSensorViewConfiguration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarSensorViewConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RadarSensorViewConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RadarSensorViewConfiguration)
    MergeFrom(*source);
  }
}

void RadarSensorViewConfiguration::MergeFrom(const RadarSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarSensorViewConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tx_antenna_diagram_.MergeFrom(from.tx_antenna_diagram_);
  rx_antenna_diagram_.MergeFrom(from.rx_antenna_diagram_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensor_id()) {
      mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
    }
    if (from.has_mounting_position()) {
      mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
    }
    if (from.has_mounting_position_rmse()) {
      mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
    }
    if (from.has_field_of_view_horizontal()) {
      set_field_of_view_horizontal(from.field_of_view_horizontal());
    }
    if (from.has_field_of_view_vertical()) {
      set_field_of_view_vertical(from.field_of_view_vertical());
    }
    if (from.has_number_of_rays_horizontal()) {
      set_number_of_rays_horizontal(from.number_of_rays_horizontal());
    }
    if (from.has_number_of_rays_vertical()) {
      set_number_of_rays_vertical(from.number_of_rays_vertical());
    }
    if (from.has_max_number_of_interactions()) {
      set_max_number_of_interactions(from.max_number_of_interactions());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_emitter_frequency()) {
      set_emitter_frequency(from.emitter_frequency());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RadarSensorViewConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RadarSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarSensorViewConfiguration::CopyFrom(const RadarSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSensorViewConfiguration::IsInitialized() const {

  return true;
}

void RadarSensorViewConfiguration::Swap(RadarSensorViewConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarSensorViewConfiguration::InternalSwap(RadarSensorViewConfiguration* other) {
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(mounting_position_, other->mounting_position_);
  std::swap(mounting_position_rmse_, other->mounting_position_rmse_);
  std::swap(field_of_view_horizontal_, other->field_of_view_horizontal_);
  std::swap(field_of_view_vertical_, other->field_of_view_vertical_);
  std::swap(number_of_rays_horizontal_, other->number_of_rays_horizontal_);
  std::swap(number_of_rays_vertical_, other->number_of_rays_vertical_);
  std::swap(max_number_of_interactions_, other->max_number_of_interactions_);
  std::swap(emitter_frequency_, other->emitter_frequency_);
  tx_antenna_diagram_.UnsafeArenaSwap(&other->tx_antenna_diagram_);
  rx_antenna_diagram_.UnsafeArenaSwap(&other->rx_antenna_diagram_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarSensorViewConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarSensorViewConfiguration_descriptor_;
  metadata.reflection = RadarSensorViewConfiguration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarSensorViewConfiguration_AntennaDiagramEntry

// optional double horizontal_angle = 1;
bool RadarSensorViewConfiguration_AntennaDiagramEntry::has_horizontal_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarSensorViewConfiguration_AntennaDiagramEntry::set_has_horizontal_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarSensorViewConfiguration_AntennaDiagramEntry::clear_has_horizontal_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarSensorViewConfiguration_AntennaDiagramEntry::clear_horizontal_angle() {
  horizontal_angle_ = 0;
  clear_has_horizontal_angle();
}
 double RadarSensorViewConfiguration_AntennaDiagramEntry::horizontal_angle() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry.horizontal_angle)
  return horizontal_angle_;
}
 void RadarSensorViewConfiguration_AntennaDiagramEntry::set_horizontal_angle(double value) {
  set_has_horizontal_angle();
  horizontal_angle_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry.horizontal_angle)
}

// optional double vertical_angle = 2;
bool RadarSensorViewConfiguration_AntennaDiagramEntry::has_vertical_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarSensorViewConfiguration_AntennaDiagramEntry::set_has_vertical_angle() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarSensorViewConfiguration_AntennaDiagramEntry::clear_has_vertical_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarSensorViewConfiguration_AntennaDiagramEntry::clear_vertical_angle() {
  vertical_angle_ = 0;
  clear_has_vertical_angle();
}
 double RadarSensorViewConfiguration_AntennaDiagramEntry::vertical_angle() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry.vertical_angle)
  return vertical_angle_;
}
 void RadarSensorViewConfiguration_AntennaDiagramEntry::set_vertical_angle(double value) {
  set_has_vertical_angle();
  vertical_angle_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry.vertical_angle)
}

// optional double response = 3;
bool RadarSensorViewConfiguration_AntennaDiagramEntry::has_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RadarSensorViewConfiguration_AntennaDiagramEntry::set_has_response() {
  _has_bits_[0] |= 0x00000004u;
}
void RadarSensorViewConfiguration_AntennaDiagramEntry::clear_has_response() {
  _has_bits_[0] &= ~0x00000004u;
}
void RadarSensorViewConfiguration_AntennaDiagramEntry::clear_response() {
  response_ = 0;
  clear_has_response();
}
 double RadarSensorViewConfiguration_AntennaDiagramEntry::response() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry.response)
  return response_;
}
 void RadarSensorViewConfiguration_AntennaDiagramEntry::set_response(double value) {
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry.response)
}

// -------------------------------------------------------------------

// RadarSensorViewConfiguration

// optional .osi3.Identifier sensor_id = 1;
bool RadarSensorViewConfiguration::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarSensorViewConfiguration::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarSensorViewConfiguration::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
const ::osi3::Identifier& RadarSensorViewConfiguration::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
::osi3::Identifier* RadarSensorViewConfiguration::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RadarSensorViewConfiguration.sensor_id)
  return sensor_id_;
}
::osi3::Identifier* RadarSensorViewConfiguration::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.RadarSensorViewConfiguration.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
void RadarSensorViewConfiguration::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RadarSensorViewConfiguration.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 2;
bool RadarSensorViewConfiguration::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarSensorViewConfiguration::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarSensorViewConfiguration::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
const ::osi3::MountingPosition& RadarSensorViewConfiguration::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
::osi3::MountingPosition* RadarSensorViewConfiguration::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RadarSensorViewConfiguration.mounting_position)
  return mounting_position_;
}
::osi3::MountingPosition* RadarSensorViewConfiguration::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.RadarSensorViewConfiguration.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
void RadarSensorViewConfiguration::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RadarSensorViewConfiguration.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 3;
bool RadarSensorViewConfiguration::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RadarSensorViewConfiguration::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000004u;
}
void RadarSensorViewConfiguration::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000004u;
}
void RadarSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
const ::osi3::MountingPosition& RadarSensorViewConfiguration::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
::osi3::MountingPosition* RadarSensorViewConfiguration::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RadarSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_;
}
::osi3::MountingPosition* RadarSensorViewConfiguration::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.RadarSensorViewConfiguration.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
void RadarSensorViewConfiguration::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RadarSensorViewConfiguration.mounting_position_rmse)
}

// optional double field_of_view_horizontal = 4;
bool RadarSensorViewConfiguration::has_field_of_view_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RadarSensorViewConfiguration::set_has_field_of_view_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
void RadarSensorViewConfiguration::clear_has_field_of_view_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
void RadarSensorViewConfiguration::clear_field_of_view_horizontal() {
  field_of_view_horizontal_ = 0;
  clear_has_field_of_view_horizontal();
}
 double RadarSensorViewConfiguration::field_of_view_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.field_of_view_horizontal)
  return field_of_view_horizontal_;
}
 void RadarSensorViewConfiguration::set_field_of_view_horizontal(double value) {
  set_has_field_of_view_horizontal();
  field_of_view_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.field_of_view_horizontal)
}

// optional double field_of_view_vertical = 5;
bool RadarSensorViewConfiguration::has_field_of_view_vertical() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RadarSensorViewConfiguration::set_has_field_of_view_vertical() {
  _has_bits_[0] |= 0x00000010u;
}
void RadarSensorViewConfiguration::clear_has_field_of_view_vertical() {
  _has_bits_[0] &= ~0x00000010u;
}
void RadarSensorViewConfiguration::clear_field_of_view_vertical() {
  field_of_view_vertical_ = 0;
  clear_has_field_of_view_vertical();
}
 double RadarSensorViewConfiguration::field_of_view_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.field_of_view_vertical)
  return field_of_view_vertical_;
}
 void RadarSensorViewConfiguration::set_field_of_view_vertical(double value) {
  set_has_field_of_view_vertical();
  field_of_view_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.field_of_view_vertical)
}

// optional uint32 number_of_rays_horizontal = 6;
bool RadarSensorViewConfiguration::has_number_of_rays_horizontal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RadarSensorViewConfiguration::set_has_number_of_rays_horizontal() {
  _has_bits_[0] |= 0x00000020u;
}
void RadarSensorViewConfiguration::clear_has_number_of_rays_horizontal() {
  _has_bits_[0] &= ~0x00000020u;
}
void RadarSensorViewConfiguration::clear_number_of_rays_horizontal() {
  number_of_rays_horizontal_ = 0u;
  clear_has_number_of_rays_horizontal();
}
 ::google::protobuf::uint32 RadarSensorViewConfiguration::number_of_rays_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.number_of_rays_horizontal)
  return number_of_rays_horizontal_;
}
 void RadarSensorViewConfiguration::set_number_of_rays_horizontal(::google::protobuf::uint32 value) {
  set_has_number_of_rays_horizontal();
  number_of_rays_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.number_of_rays_horizontal)
}

// optional uint32 number_of_rays_vertical = 7;
bool RadarSensorViewConfiguration::has_number_of_rays_vertical() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RadarSensorViewConfiguration::set_has_number_of_rays_vertical() {
  _has_bits_[0] |= 0x00000040u;
}
void RadarSensorViewConfiguration::clear_has_number_of_rays_vertical() {
  _has_bits_[0] &= ~0x00000040u;
}
void RadarSensorViewConfiguration::clear_number_of_rays_vertical() {
  number_of_rays_vertical_ = 0u;
  clear_has_number_of_rays_vertical();
}
 ::google::protobuf::uint32 RadarSensorViewConfiguration::number_of_rays_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.number_of_rays_vertical)
  return number_of_rays_vertical_;
}
 void RadarSensorViewConfiguration::set_number_of_rays_vertical(::google::protobuf::uint32 value) {
  set_has_number_of_rays_vertical();
  number_of_rays_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.number_of_rays_vertical)
}

// optional uint32 max_number_of_interactions = 8;
bool RadarSensorViewConfiguration::has_max_number_of_interactions() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RadarSensorViewConfiguration::set_has_max_number_of_interactions() {
  _has_bits_[0] |= 0x00000080u;
}
void RadarSensorViewConfiguration::clear_has_max_number_of_interactions() {
  _has_bits_[0] &= ~0x00000080u;
}
void RadarSensorViewConfiguration::clear_max_number_of_interactions() {
  max_number_of_interactions_ = 0u;
  clear_has_max_number_of_interactions();
}
 ::google::protobuf::uint32 RadarSensorViewConfiguration::max_number_of_interactions() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.max_number_of_interactions)
  return max_number_of_interactions_;
}
 void RadarSensorViewConfiguration::set_max_number_of_interactions(::google::protobuf::uint32 value) {
  set_has_max_number_of_interactions();
  max_number_of_interactions_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.max_number_of_interactions)
}

// optional double emitter_frequency = 9;
bool RadarSensorViewConfiguration::has_emitter_frequency() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RadarSensorViewConfiguration::set_has_emitter_frequency() {
  _has_bits_[0] |= 0x00000100u;
}
void RadarSensorViewConfiguration::clear_has_emitter_frequency() {
  _has_bits_[0] &= ~0x00000100u;
}
void RadarSensorViewConfiguration::clear_emitter_frequency() {
  emitter_frequency_ = 0;
  clear_has_emitter_frequency();
}
 double RadarSensorViewConfiguration::emitter_frequency() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.emitter_frequency)
  return emitter_frequency_;
}
 void RadarSensorViewConfiguration::set_emitter_frequency(double value) {
  set_has_emitter_frequency();
  emitter_frequency_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.emitter_frequency)
}

// repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
int RadarSensorViewConfiguration::tx_antenna_diagram_size() const {
  return tx_antenna_diagram_.size();
}
void RadarSensorViewConfiguration::clear_tx_antenna_diagram() {
  tx_antenna_diagram_.Clear();
}
const ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry& RadarSensorViewConfiguration::tx_antenna_diagram(int index) const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.tx_antenna_diagram)
  return tx_antenna_diagram_.Get(index);
}
::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* RadarSensorViewConfiguration::mutable_tx_antenna_diagram(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.RadarSensorViewConfiguration.tx_antenna_diagram)
  return tx_antenna_diagram_.Mutable(index);
}
::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* RadarSensorViewConfiguration::add_tx_antenna_diagram() {
  // @@protoc_insertion_point(field_add:osi3.RadarSensorViewConfiguration.tx_antenna_diagram)
  return tx_antenna_diagram_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >*
RadarSensorViewConfiguration::mutable_tx_antenna_diagram() {
  // @@protoc_insertion_point(field_mutable_list:osi3.RadarSensorViewConfiguration.tx_antenna_diagram)
  return &tx_antenna_diagram_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >&
RadarSensorViewConfiguration::tx_antenna_diagram() const {
  // @@protoc_insertion_point(field_list:osi3.RadarSensorViewConfiguration.tx_antenna_diagram)
  return tx_antenna_diagram_;
}

// repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
int RadarSensorViewConfiguration::rx_antenna_diagram_size() const {
  return rx_antenna_diagram_.size();
}
void RadarSensorViewConfiguration::clear_rx_antenna_diagram() {
  rx_antenna_diagram_.Clear();
}
const ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry& RadarSensorViewConfiguration::rx_antenna_diagram(int index) const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.rx_antenna_diagram)
  return rx_antenna_diagram_.Get(index);
}
::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* RadarSensorViewConfiguration::mutable_rx_antenna_diagram(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.RadarSensorViewConfiguration.rx_antenna_diagram)
  return rx_antenna_diagram_.Mutable(index);
}
::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* RadarSensorViewConfiguration::add_rx_antenna_diagram() {
  // @@protoc_insertion_point(field_add:osi3.RadarSensorViewConfiguration.rx_antenna_diagram)
  return rx_antenna_diagram_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >*
RadarSensorViewConfiguration::mutable_rx_antenna_diagram() {
  // @@protoc_insertion_point(field_mutable_list:osi3.RadarSensorViewConfiguration.rx_antenna_diagram)
  return &rx_antenna_diagram_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >&
RadarSensorViewConfiguration::rx_antenna_diagram() const {
  // @@protoc_insertion_point(field_list:osi3.RadarSensorViewConfiguration.rx_antenna_diagram)
  return rx_antenna_diagram_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarSensorViewConfiguration::kSensorIdFieldNumber;
const int LidarSensorViewConfiguration::kMountingPositionFieldNumber;
const int LidarSensorViewConfiguration::kMountingPositionRmseFieldNumber;
const int LidarSensorViewConfiguration::kFieldOfViewHorizontalFieldNumber;
const int LidarSensorViewConfiguration::kFieldOfViewVerticalFieldNumber;
const int LidarSensorViewConfiguration::kNumberOfRaysHorizontalFieldNumber;
const int LidarSensorViewConfiguration::kNumberOfRaysVerticalFieldNumber;
const int LidarSensorViewConfiguration::kMaxNumberOfInteractionsFieldNumber;
const int LidarSensorViewConfiguration::kEmitterFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarSensorViewConfiguration::LidarSensorViewConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LidarSensorViewConfiguration)
}

void LidarSensorViewConfiguration::InitAsDefaultInstance() {
  sensor_id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  mounting_position_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
  mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
}

LidarSensorViewConfiguration::LidarSensorViewConfiguration(const LidarSensorViewConfiguration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.LidarSensorViewConfiguration)
}

void LidarSensorViewConfiguration::SharedCtor() {
  _cached_size_ = 0;
  sensor_id_ = NULL;
  mounting_position_ = NULL;
  mounting_position_rmse_ = NULL;
  field_of_view_horizontal_ = 0;
  field_of_view_vertical_ = 0;
  number_of_rays_horizontal_ = 0u;
  number_of_rays_vertical_ = 0u;
  max_number_of_interactions_ = 0u;
  emitter_frequency_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LidarSensorViewConfiguration::~LidarSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.LidarSensorViewConfiguration)
  SharedDtor();
}

void LidarSensorViewConfiguration::SharedDtor() {
  if (this != default_instance_) {
    delete sensor_id_;
    delete mounting_position_;
    delete mounting_position_rmse_;
  }
}

void LidarSensorViewConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarSensorViewConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LidarSensorViewConfiguration_descriptor_;
}

const LidarSensorViewConfiguration& LidarSensorViewConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  return *default_instance_;
}

LidarSensorViewConfiguration* LidarSensorViewConfiguration::default_instance_ = NULL;

LidarSensorViewConfiguration* LidarSensorViewConfiguration::New(::google::protobuf::Arena* arena) const {
  LidarSensorViewConfiguration* n = new LidarSensorViewConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LidarSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LidarSensorViewConfiguration)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LidarSensorViewConfiguration, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LidarSensorViewConfiguration*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(field_of_view_horizontal_, number_of_rays_vertical_);
    if (has_sensor_id()) {
      if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
    }
    if (has_mounting_position()) {
      if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
    }
    if (has_mounting_position_rmse()) {
      if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
    }
    max_number_of_interactions_ = 0u;
  }
  emitter_frequency_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LidarSensorViewConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LidarSensorViewConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Identifier sensor_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mounting_position;
        break;
      }

      // optional .osi3.MountingPosition mounting_position = 2;
      case 2: {
        if (tag == 18) {
         parse_mounting_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mounting_position_rmse;
        break;
      }

      // optional .osi3.MountingPosition mounting_position_rmse = 3;
      case 3: {
        if (tag == 26) {
         parse_mounting_position_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_field_of_view_horizontal;
        break;
      }

      // optional double field_of_view_horizontal = 4;
      case 4: {
        if (tag == 33) {
         parse_field_of_view_horizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_horizontal_)));
          set_has_field_of_view_horizontal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_field_of_view_vertical;
        break;
      }

      // optional double field_of_view_vertical = 5;
      case 5: {
        if (tag == 41) {
         parse_field_of_view_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_vertical_)));
          set_has_field_of_view_vertical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_number_of_rays_horizontal;
        break;
      }

      // optional uint32 number_of_rays_horizontal = 6;
      case 6: {
        if (tag == 48) {
         parse_number_of_rays_horizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_rays_horizontal_)));
          set_has_number_of_rays_horizontal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_number_of_rays_vertical;
        break;
      }

      // optional uint32 number_of_rays_vertical = 7;
      case 7: {
        if (tag == 56) {
         parse_number_of_rays_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_rays_vertical_)));
          set_has_number_of_rays_vertical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_number_of_interactions;
        break;
      }

      // optional uint32 max_number_of_interactions = 8;
      case 8: {
        if (tag == 64) {
         parse_max_number_of_interactions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_number_of_interactions_)));
          set_has_max_number_of_interactions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_emitter_frequency;
        break;
      }

      // optional double emitter_frequency = 9;
      case 9: {
        if (tag == 73) {
         parse_emitter_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &emitter_frequency_)));
          set_has_emitter_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LidarSensorViewConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LidarSensorViewConfiguration)
  return false;
#undef DO_
}

void LidarSensorViewConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LidarSensorViewConfiguration)
  // optional .osi3.Identifier sensor_id = 1;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sensor_id_, output);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (has_mounting_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mounting_position_, output);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (has_mounting_position_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mounting_position_rmse_, output);
  }

  // optional double field_of_view_horizontal = 4;
  if (has_field_of_view_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->field_of_view_horizontal(), output);
  }

  // optional double field_of_view_vertical = 5;
  if (has_field_of_view_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->field_of_view_vertical(), output);
  }

  // optional uint32 number_of_rays_horizontal = 6;
  if (has_number_of_rays_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->number_of_rays_horizontal(), output);
  }

  // optional uint32 number_of_rays_vertical = 7;
  if (has_number_of_rays_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->number_of_rays_vertical(), output);
  }

  // optional uint32 max_number_of_interactions = 8;
  if (has_max_number_of_interactions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_number_of_interactions(), output);
  }

  // optional double emitter_frequency = 9;
  if (has_emitter_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->emitter_frequency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LidarSensorViewConfiguration)
}

::google::protobuf::uint8* LidarSensorViewConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LidarSensorViewConfiguration)
  // optional .osi3.Identifier sensor_id = 1;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->sensor_id_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (has_mounting_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->mounting_position_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (has_mounting_position_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->mounting_position_rmse_, false, target);
  }

  // optional double field_of_view_horizontal = 4;
  if (has_field_of_view_horizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->field_of_view_horizontal(), target);
  }

  // optional double field_of_view_vertical = 5;
  if (has_field_of_view_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->field_of_view_vertical(), target);
  }

  // optional uint32 number_of_rays_horizontal = 6;
  if (has_number_of_rays_horizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->number_of_rays_horizontal(), target);
  }

  // optional uint32 number_of_rays_vertical = 7;
  if (has_number_of_rays_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->number_of_rays_vertical(), target);
  }

  // optional uint32 max_number_of_interactions = 8;
  if (has_max_number_of_interactions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_number_of_interactions(), target);
  }

  // optional double emitter_frequency = 9;
  if (has_emitter_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->emitter_frequency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LidarSensorViewConfiguration)
  return target;
}

int LidarSensorViewConfiguration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LidarSensorViewConfiguration)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .osi3.Identifier sensor_id = 1;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 2;
    if (has_mounting_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 3;
    if (has_mounting_position_rmse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_rmse_);
    }

    // optional double field_of_view_horizontal = 4;
    if (has_field_of_view_horizontal()) {
      total_size += 1 + 8;
    }

    // optional double field_of_view_vertical = 5;
    if (has_field_of_view_vertical()) {
      total_size += 1 + 8;
    }

    // optional uint32 number_of_rays_horizontal = 6;
    if (has_number_of_rays_horizontal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_rays_horizontal());
    }

    // optional uint32 number_of_rays_vertical = 7;
    if (has_number_of_rays_vertical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_rays_vertical());
    }

    // optional uint32 max_number_of_interactions = 8;
    if (has_max_number_of_interactions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_number_of_interactions());
    }

  }
  // optional double emitter_frequency = 9;
  if (has_emitter_frequency()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarSensorViewConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LidarSensorViewConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LidarSensorViewConfiguration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarSensorViewConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LidarSensorViewConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LidarSensorViewConfiguration)
    MergeFrom(*source);
  }
}

void LidarSensorViewConfiguration::MergeFrom(const LidarSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LidarSensorViewConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensor_id()) {
      mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
    }
    if (from.has_mounting_position()) {
      mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
    }
    if (from.has_mounting_position_rmse()) {
      mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
    }
    if (from.has_field_of_view_horizontal()) {
      set_field_of_view_horizontal(from.field_of_view_horizontal());
    }
    if (from.has_field_of_view_vertical()) {
      set_field_of_view_vertical(from.field_of_view_vertical());
    }
    if (from.has_number_of_rays_horizontal()) {
      set_number_of_rays_horizontal(from.number_of_rays_horizontal());
    }
    if (from.has_number_of_rays_vertical()) {
      set_number_of_rays_vertical(from.number_of_rays_vertical());
    }
    if (from.has_max_number_of_interactions()) {
      set_max_number_of_interactions(from.max_number_of_interactions());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_emitter_frequency()) {
      set_emitter_frequency(from.emitter_frequency());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LidarSensorViewConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LidarSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarSensorViewConfiguration::CopyFrom(const LidarSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LidarSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarSensorViewConfiguration::IsInitialized() const {

  return true;
}

void LidarSensorViewConfiguration::Swap(LidarSensorViewConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarSensorViewConfiguration::InternalSwap(LidarSensorViewConfiguration* other) {
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(mounting_position_, other->mounting_position_);
  std::swap(mounting_position_rmse_, other->mounting_position_rmse_);
  std::swap(field_of_view_horizontal_, other->field_of_view_horizontal_);
  std::swap(field_of_view_vertical_, other->field_of_view_vertical_);
  std::swap(number_of_rays_horizontal_, other->number_of_rays_horizontal_);
  std::swap(number_of_rays_vertical_, other->number_of_rays_vertical_);
  std::swap(max_number_of_interactions_, other->max_number_of_interactions_);
  std::swap(emitter_frequency_, other->emitter_frequency_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarSensorViewConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LidarSensorViewConfiguration_descriptor_;
  metadata.reflection = LidarSensorViewConfiguration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LidarSensorViewConfiguration

// optional .osi3.Identifier sensor_id = 1;
bool LidarSensorViewConfiguration::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LidarSensorViewConfiguration::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LidarSensorViewConfiguration::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LidarSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
const ::osi3::Identifier& LidarSensorViewConfiguration::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
::osi3::Identifier* LidarSensorViewConfiguration::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LidarSensorViewConfiguration.sensor_id)
  return sensor_id_;
}
::osi3::Identifier* LidarSensorViewConfiguration::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.LidarSensorViewConfiguration.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
void LidarSensorViewConfiguration::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LidarSensorViewConfiguration.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 2;
bool LidarSensorViewConfiguration::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LidarSensorViewConfiguration::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000002u;
}
void LidarSensorViewConfiguration::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void LidarSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
const ::osi3::MountingPosition& LidarSensorViewConfiguration::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
::osi3::MountingPosition* LidarSensorViewConfiguration::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LidarSensorViewConfiguration.mounting_position)
  return mounting_position_;
}
::osi3::MountingPosition* LidarSensorViewConfiguration::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.LidarSensorViewConfiguration.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
void LidarSensorViewConfiguration::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LidarSensorViewConfiguration.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 3;
bool LidarSensorViewConfiguration::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LidarSensorViewConfiguration::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000004u;
}
void LidarSensorViewConfiguration::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000004u;
}
void LidarSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
const ::osi3::MountingPosition& LidarSensorViewConfiguration::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
::osi3::MountingPosition* LidarSensorViewConfiguration::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LidarSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_;
}
::osi3::MountingPosition* LidarSensorViewConfiguration::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.LidarSensorViewConfiguration.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
void LidarSensorViewConfiguration::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LidarSensorViewConfiguration.mounting_position_rmse)
}

// optional double field_of_view_horizontal = 4;
bool LidarSensorViewConfiguration::has_field_of_view_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LidarSensorViewConfiguration::set_has_field_of_view_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
void LidarSensorViewConfiguration::clear_has_field_of_view_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
void LidarSensorViewConfiguration::clear_field_of_view_horizontal() {
  field_of_view_horizontal_ = 0;
  clear_has_field_of_view_horizontal();
}
 double LidarSensorViewConfiguration::field_of_view_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.field_of_view_horizontal)
  return field_of_view_horizontal_;
}
 void LidarSensorViewConfiguration::set_field_of_view_horizontal(double value) {
  set_has_field_of_view_horizontal();
  field_of_view_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorViewConfiguration.field_of_view_horizontal)
}

// optional double field_of_view_vertical = 5;
bool LidarSensorViewConfiguration::has_field_of_view_vertical() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LidarSensorViewConfiguration::set_has_field_of_view_vertical() {
  _has_bits_[0] |= 0x00000010u;
}
void LidarSensorViewConfiguration::clear_has_field_of_view_vertical() {
  _has_bits_[0] &= ~0x00000010u;
}
void LidarSensorViewConfiguration::clear_field_of_view_vertical() {
  field_of_view_vertical_ = 0;
  clear_has_field_of_view_vertical();
}
 double LidarSensorViewConfiguration::field_of_view_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.field_of_view_vertical)
  return field_of_view_vertical_;
}
 void LidarSensorViewConfiguration::set_field_of_view_vertical(double value) {
  set_has_field_of_view_vertical();
  field_of_view_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorViewConfiguration.field_of_view_vertical)
}

// optional uint32 number_of_rays_horizontal = 6;
bool LidarSensorViewConfiguration::has_number_of_rays_horizontal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LidarSensorViewConfiguration::set_has_number_of_rays_horizontal() {
  _has_bits_[0] |= 0x00000020u;
}
void LidarSensorViewConfiguration::clear_has_number_of_rays_horizontal() {
  _has_bits_[0] &= ~0x00000020u;
}
void LidarSensorViewConfiguration::clear_number_of_rays_horizontal() {
  number_of_rays_horizontal_ = 0u;
  clear_has_number_of_rays_horizontal();
}
 ::google::protobuf::uint32 LidarSensorViewConfiguration::number_of_rays_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.number_of_rays_horizontal)
  return number_of_rays_horizontal_;
}
 void LidarSensorViewConfiguration::set_number_of_rays_horizontal(::google::protobuf::uint32 value) {
  set_has_number_of_rays_horizontal();
  number_of_rays_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorViewConfiguration.number_of_rays_horizontal)
}

// optional uint32 number_of_rays_vertical = 7;
bool LidarSensorViewConfiguration::has_number_of_rays_vertical() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LidarSensorViewConfiguration::set_has_number_of_rays_vertical() {
  _has_bits_[0] |= 0x00000040u;
}
void LidarSensorViewConfiguration::clear_has_number_of_rays_vertical() {
  _has_bits_[0] &= ~0x00000040u;
}
void LidarSensorViewConfiguration::clear_number_of_rays_vertical() {
  number_of_rays_vertical_ = 0u;
  clear_has_number_of_rays_vertical();
}
 ::google::protobuf::uint32 LidarSensorViewConfiguration::number_of_rays_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.number_of_rays_vertical)
  return number_of_rays_vertical_;
}
 void LidarSensorViewConfiguration::set_number_of_rays_vertical(::google::protobuf::uint32 value) {
  set_has_number_of_rays_vertical();
  number_of_rays_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorViewConfiguration.number_of_rays_vertical)
}

// optional uint32 max_number_of_interactions = 8;
bool LidarSensorViewConfiguration::has_max_number_of_interactions() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LidarSensorViewConfiguration::set_has_max_number_of_interactions() {
  _has_bits_[0] |= 0x00000080u;
}
void LidarSensorViewConfiguration::clear_has_max_number_of_interactions() {
  _has_bits_[0] &= ~0x00000080u;
}
void LidarSensorViewConfiguration::clear_max_number_of_interactions() {
  max_number_of_interactions_ = 0u;
  clear_has_max_number_of_interactions();
}
 ::google::protobuf::uint32 LidarSensorViewConfiguration::max_number_of_interactions() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.max_number_of_interactions)
  return max_number_of_interactions_;
}
 void LidarSensorViewConfiguration::set_max_number_of_interactions(::google::protobuf::uint32 value) {
  set_has_max_number_of_interactions();
  max_number_of_interactions_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorViewConfiguration.max_number_of_interactions)
}

// optional double emitter_frequency = 9;
bool LidarSensorViewConfiguration::has_emitter_frequency() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LidarSensorViewConfiguration::set_has_emitter_frequency() {
  _has_bits_[0] |= 0x00000100u;
}
void LidarSensorViewConfiguration::clear_has_emitter_frequency() {
  _has_bits_[0] &= ~0x00000100u;
}
void LidarSensorViewConfiguration::clear_emitter_frequency() {
  emitter_frequency_ = 0;
  clear_has_emitter_frequency();
}
 double LidarSensorViewConfiguration::emitter_frequency() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.emitter_frequency)
  return emitter_frequency_;
}
 void LidarSensorViewConfiguration::set_emitter_frequency(double value) {
  set_has_emitter_frequency();
  emitter_frequency_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorViewConfiguration.emitter_frequency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CameraSensorViewConfiguration_ChannelFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraSensorViewConfiguration_ChannelFormat_descriptor_;
}
bool CameraSensorViewConfiguration_ChannelFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_UNKNOWN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_OTHER;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_MONO_U8_LIN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_MONO_U16_LIN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_MONO_U32_LIN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_MONO_F32_LIN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RGB_U8_LIN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RGB_U16_LIN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RGB_U32_LIN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RGB_F32_LIN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_BGGR_U8_LIN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_BGGR_U16_LIN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_BGGR_U32_LIN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_BGGR_F32_LIN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::ChannelFormat_MIN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::ChannelFormat_MAX;
const int CameraSensorViewConfiguration::ChannelFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraSensorViewConfiguration::kSensorIdFieldNumber;
const int CameraSensorViewConfiguration::kMountingPositionFieldNumber;
const int CameraSensorViewConfiguration::kMountingPositionRmseFieldNumber;
const int CameraSensorViewConfiguration::kFieldOfViewHorizontalFieldNumber;
const int CameraSensorViewConfiguration::kFieldOfViewVerticalFieldNumber;
const int CameraSensorViewConfiguration::kNumberOfPixelsHorizontalFieldNumber;
const int CameraSensorViewConfiguration::kNumberOfPixelsVerticalFieldNumber;
const int CameraSensorViewConfiguration::kChannelFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraSensorViewConfiguration::CameraSensorViewConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.CameraSensorViewConfiguration)
}

void CameraSensorViewConfiguration::InitAsDefaultInstance() {
  sensor_id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  mounting_position_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
  mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
}

CameraSensorViewConfiguration::CameraSensorViewConfiguration(const CameraSensorViewConfiguration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.CameraSensorViewConfiguration)
}

void CameraSensorViewConfiguration::SharedCtor() {
  _cached_size_ = 0;
  sensor_id_ = NULL;
  mounting_position_ = NULL;
  mounting_position_rmse_ = NULL;
  field_of_view_horizontal_ = 0;
  field_of_view_vertical_ = 0;
  number_of_pixels_horizontal_ = 0u;
  number_of_pixels_vertical_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraSensorViewConfiguration::~CameraSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.CameraSensorViewConfiguration)
  SharedDtor();
}

void CameraSensorViewConfiguration::SharedDtor() {
  if (this != default_instance_) {
    delete sensor_id_;
    delete mounting_position_;
    delete mounting_position_rmse_;
  }
}

void CameraSensorViewConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraSensorViewConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraSensorViewConfiguration_descriptor_;
}

const CameraSensorViewConfiguration& CameraSensorViewConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  return *default_instance_;
}

CameraSensorViewConfiguration* CameraSensorViewConfiguration::default_instance_ = NULL;

CameraSensorViewConfiguration* CameraSensorViewConfiguration::New(::google::protobuf::Arena* arena) const {
  CameraSensorViewConfiguration* n = new CameraSensorViewConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraSensorViewConfiguration)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CameraSensorViewConfiguration, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CameraSensorViewConfiguration*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(field_of_view_horizontal_, number_of_pixels_vertical_);
    if (has_sensor_id()) {
      if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
    }
    if (has_mounting_position()) {
      if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
    }
    if (has_mounting_position_rmse()) {
      if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  channel_format_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CameraSensorViewConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.CameraSensorViewConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Identifier sensor_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mounting_position;
        break;
      }

      // optional .osi3.MountingPosition mounting_position = 2;
      case 2: {
        if (tag == 18) {
         parse_mounting_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mounting_position_rmse;
        break;
      }

      // optional .osi3.MountingPosition mounting_position_rmse = 3;
      case 3: {
        if (tag == 26) {
         parse_mounting_position_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_field_of_view_horizontal;
        break;
      }

      // optional double field_of_view_horizontal = 4;
      case 4: {
        if (tag == 33) {
         parse_field_of_view_horizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_horizontal_)));
          set_has_field_of_view_horizontal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_field_of_view_vertical;
        break;
      }

      // optional double field_of_view_vertical = 5;
      case 5: {
        if (tag == 41) {
         parse_field_of_view_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_vertical_)));
          set_has_field_of_view_vertical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_number_of_pixels_horizontal;
        break;
      }

      // optional uint32 number_of_pixels_horizontal = 6;
      case 6: {
        if (tag == 48) {
         parse_number_of_pixels_horizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_pixels_horizontal_)));
          set_has_number_of_pixels_horizontal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_number_of_pixels_vertical;
        break;
      }

      // optional uint32 number_of_pixels_vertical = 7;
      case 7: {
        if (tag == 56) {
         parse_number_of_pixels_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_pixels_vertical_)));
          set_has_number_of_pixels_vertical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_channel_format;
        break;
      }

      // repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
      case 8: {
        if (tag == 64) {
         parse_channel_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::CameraSensorViewConfiguration_ChannelFormat_IsValid(value)) {
            add_channel_format(static_cast< ::osi3::CameraSensorViewConfiguration_ChannelFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 8,
                 ::osi3::CameraSensorViewConfiguration_ChannelFormat_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_channel_format())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_channel_format;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.CameraSensorViewConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.CameraSensorViewConfiguration)
  return false;
#undef DO_
}

void CameraSensorViewConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.CameraSensorViewConfiguration)
  // optional .osi3.Identifier sensor_id = 1;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sensor_id_, output);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (has_mounting_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mounting_position_, output);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (has_mounting_position_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mounting_position_rmse_, output);
  }

  // optional double field_of_view_horizontal = 4;
  if (has_field_of_view_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->field_of_view_horizontal(), output);
  }

  // optional double field_of_view_vertical = 5;
  if (has_field_of_view_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->field_of_view_vertical(), output);
  }

  // optional uint32 number_of_pixels_horizontal = 6;
  if (has_number_of_pixels_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->number_of_pixels_horizontal(), output);
  }

  // optional uint32 number_of_pixels_vertical = 7;
  if (has_number_of_pixels_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->number_of_pixels_vertical(), output);
  }

  // repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
  for (int i = 0; i < this->channel_format_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->channel_format(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.CameraSensorViewConfiguration)
}

::google::protobuf::uint8* CameraSensorViewConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraSensorViewConfiguration)
  // optional .osi3.Identifier sensor_id = 1;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->sensor_id_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (has_mounting_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->mounting_position_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (has_mounting_position_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->mounting_position_rmse_, false, target);
  }

  // optional double field_of_view_horizontal = 4;
  if (has_field_of_view_horizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->field_of_view_horizontal(), target);
  }

  // optional double field_of_view_vertical = 5;
  if (has_field_of_view_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->field_of_view_vertical(), target);
  }

  // optional uint32 number_of_pixels_horizontal = 6;
  if (has_number_of_pixels_horizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->number_of_pixels_horizontal(), target);
  }

  // optional uint32 number_of_pixels_vertical = 7;
  if (has_number_of_pixels_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->number_of_pixels_vertical(), target);
  }

  // repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
  for (int i = 0; i < this->channel_format_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->channel_format(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraSensorViewConfiguration)
  return target;
}

int CameraSensorViewConfiguration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraSensorViewConfiguration)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional .osi3.Identifier sensor_id = 1;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 2;
    if (has_mounting_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 3;
    if (has_mounting_position_rmse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_rmse_);
    }

    // optional double field_of_view_horizontal = 4;
    if (has_field_of_view_horizontal()) {
      total_size += 1 + 8;
    }

    // optional double field_of_view_vertical = 5;
    if (has_field_of_view_vertical()) {
      total_size += 1 + 8;
    }

    // optional uint32 number_of_pixels_horizontal = 6;
    if (has_number_of_pixels_horizontal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_pixels_horizontal());
    }

    // optional uint32 number_of_pixels_vertical = 7;
    if (has_number_of_pixels_vertical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_pixels_vertical());
    }

  }
  // repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->channel_format_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->channel_format(i));
    }
    total_size += 1 * this->channel_format_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraSensorViewConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.CameraSensorViewConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CameraSensorViewConfiguration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraSensorViewConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.CameraSensorViewConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.CameraSensorViewConfiguration)
    MergeFrom(*source);
  }
}

void CameraSensorViewConfiguration::MergeFrom(const CameraSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraSensorViewConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  channel_format_.MergeFrom(from.channel_format_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensor_id()) {
      mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
    }
    if (from.has_mounting_position()) {
      mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
    }
    if (from.has_mounting_position_rmse()) {
      mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
    }
    if (from.has_field_of_view_horizontal()) {
      set_field_of_view_horizontal(from.field_of_view_horizontal());
    }
    if (from.has_field_of_view_vertical()) {
      set_field_of_view_vertical(from.field_of_view_vertical());
    }
    if (from.has_number_of_pixels_horizontal()) {
      set_number_of_pixels_horizontal(from.number_of_pixels_horizontal());
    }
    if (from.has_number_of_pixels_vertical()) {
      set_number_of_pixels_vertical(from.number_of_pixels_vertical());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CameraSensorViewConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.CameraSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSensorViewConfiguration::CopyFrom(const CameraSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSensorViewConfiguration::IsInitialized() const {

  return true;
}

void CameraSensorViewConfiguration::Swap(CameraSensorViewConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraSensorViewConfiguration::InternalSwap(CameraSensorViewConfiguration* other) {
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(mounting_position_, other->mounting_position_);
  std::swap(mounting_position_rmse_, other->mounting_position_rmse_);
  std::swap(field_of_view_horizontal_, other->field_of_view_horizontal_);
  std::swap(field_of_view_vertical_, other->field_of_view_vertical_);
  std::swap(number_of_pixels_horizontal_, other->number_of_pixels_horizontal_);
  std::swap(number_of_pixels_vertical_, other->number_of_pixels_vertical_);
  channel_format_.UnsafeArenaSwap(&other->channel_format_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraSensorViewConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraSensorViewConfiguration_descriptor_;
  metadata.reflection = CameraSensorViewConfiguration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraSensorViewConfiguration

// optional .osi3.Identifier sensor_id = 1;
bool CameraSensorViewConfiguration::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CameraSensorViewConfiguration::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CameraSensorViewConfiguration::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CameraSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
const ::osi3::Identifier& CameraSensorViewConfiguration::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
::osi3::Identifier* CameraSensorViewConfiguration::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.CameraSensorViewConfiguration.sensor_id)
  return sensor_id_;
}
::osi3::Identifier* CameraSensorViewConfiguration::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.CameraSensorViewConfiguration.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
void CameraSensorViewConfiguration::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.CameraSensorViewConfiguration.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 2;
bool CameraSensorViewConfiguration::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CameraSensorViewConfiguration::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000002u;
}
void CameraSensorViewConfiguration::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void CameraSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
const ::osi3::MountingPosition& CameraSensorViewConfiguration::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
::osi3::MountingPosition* CameraSensorViewConfiguration::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.CameraSensorViewConfiguration.mounting_position)
  return mounting_position_;
}
::osi3::MountingPosition* CameraSensorViewConfiguration::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.CameraSensorViewConfiguration.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
void CameraSensorViewConfiguration::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.CameraSensorViewConfiguration.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 3;
bool CameraSensorViewConfiguration::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CameraSensorViewConfiguration::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000004u;
}
void CameraSensorViewConfiguration::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000004u;
}
void CameraSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
const ::osi3::MountingPosition& CameraSensorViewConfiguration::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
::osi3::MountingPosition* CameraSensorViewConfiguration::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.CameraSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_;
}
::osi3::MountingPosition* CameraSensorViewConfiguration::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.CameraSensorViewConfiguration.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
void CameraSensorViewConfiguration::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.CameraSensorViewConfiguration.mounting_position_rmse)
}

// optional double field_of_view_horizontal = 4;
bool CameraSensorViewConfiguration::has_field_of_view_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CameraSensorViewConfiguration::set_has_field_of_view_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
void CameraSensorViewConfiguration::clear_has_field_of_view_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
void CameraSensorViewConfiguration::clear_field_of_view_horizontal() {
  field_of_view_horizontal_ = 0;
  clear_has_field_of_view_horizontal();
}
 double CameraSensorViewConfiguration::field_of_view_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.field_of_view_horizontal)
  return field_of_view_horizontal_;
}
 void CameraSensorViewConfiguration::set_field_of_view_horizontal(double value) {
  set_has_field_of_view_horizontal();
  field_of_view_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.CameraSensorViewConfiguration.field_of_view_horizontal)
}

// optional double field_of_view_vertical = 5;
bool CameraSensorViewConfiguration::has_field_of_view_vertical() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CameraSensorViewConfiguration::set_has_field_of_view_vertical() {
  _has_bits_[0] |= 0x00000010u;
}
void CameraSensorViewConfiguration::clear_has_field_of_view_vertical() {
  _has_bits_[0] &= ~0x00000010u;
}
void CameraSensorViewConfiguration::clear_field_of_view_vertical() {
  field_of_view_vertical_ = 0;
  clear_has_field_of_view_vertical();
}
 double CameraSensorViewConfiguration::field_of_view_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.field_of_view_vertical)
  return field_of_view_vertical_;
}
 void CameraSensorViewConfiguration::set_field_of_view_vertical(double value) {
  set_has_field_of_view_vertical();
  field_of_view_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.CameraSensorViewConfiguration.field_of_view_vertical)
}

// optional uint32 number_of_pixels_horizontal = 6;
bool CameraSensorViewConfiguration::has_number_of_pixels_horizontal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CameraSensorViewConfiguration::set_has_number_of_pixels_horizontal() {
  _has_bits_[0] |= 0x00000020u;
}
void CameraSensorViewConfiguration::clear_has_number_of_pixels_horizontal() {
  _has_bits_[0] &= ~0x00000020u;
}
void CameraSensorViewConfiguration::clear_number_of_pixels_horizontal() {
  number_of_pixels_horizontal_ = 0u;
  clear_has_number_of_pixels_horizontal();
}
 ::google::protobuf::uint32 CameraSensorViewConfiguration::number_of_pixels_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.number_of_pixels_horizontal)
  return number_of_pixels_horizontal_;
}
 void CameraSensorViewConfiguration::set_number_of_pixels_horizontal(::google::protobuf::uint32 value) {
  set_has_number_of_pixels_horizontal();
  number_of_pixels_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.CameraSensorViewConfiguration.number_of_pixels_horizontal)
}

// optional uint32 number_of_pixels_vertical = 7;
bool CameraSensorViewConfiguration::has_number_of_pixels_vertical() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CameraSensorViewConfiguration::set_has_number_of_pixels_vertical() {
  _has_bits_[0] |= 0x00000040u;
}
void CameraSensorViewConfiguration::clear_has_number_of_pixels_vertical() {
  _has_bits_[0] &= ~0x00000040u;
}
void CameraSensorViewConfiguration::clear_number_of_pixels_vertical() {
  number_of_pixels_vertical_ = 0u;
  clear_has_number_of_pixels_vertical();
}
 ::google::protobuf::uint32 CameraSensorViewConfiguration::number_of_pixels_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.number_of_pixels_vertical)
  return number_of_pixels_vertical_;
}
 void CameraSensorViewConfiguration::set_number_of_pixels_vertical(::google::protobuf::uint32 value) {
  set_has_number_of_pixels_vertical();
  number_of_pixels_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.CameraSensorViewConfiguration.number_of_pixels_vertical)
}

// repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
int CameraSensorViewConfiguration::channel_format_size() const {
  return channel_format_.size();
}
void CameraSensorViewConfiguration::clear_channel_format() {
  channel_format_.Clear();
}
 ::osi3::CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::channel_format(int index) const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.channel_format)
  return static_cast< ::osi3::CameraSensorViewConfiguration_ChannelFormat >(channel_format_.Get(index));
}
 void CameraSensorViewConfiguration::set_channel_format(int index, ::osi3::CameraSensorViewConfiguration_ChannelFormat value) {
  assert(::osi3::CameraSensorViewConfiguration_ChannelFormat_IsValid(value));
  channel_format_.Set(index, value);
  // @@protoc_insertion_point(field_set:osi3.CameraSensorViewConfiguration.channel_format)
}
 void CameraSensorViewConfiguration::add_channel_format(::osi3::CameraSensorViewConfiguration_ChannelFormat value) {
  assert(::osi3::CameraSensorViewConfiguration_ChannelFormat_IsValid(value));
  channel_format_.Add(value);
  // @@protoc_insertion_point(field_add:osi3.CameraSensorViewConfiguration.channel_format)
}
 const ::google::protobuf::RepeatedField<int>&
CameraSensorViewConfiguration::channel_format() const {
  // @@protoc_insertion_point(field_list:osi3.CameraSensorViewConfiguration.channel_format)
  return channel_format_;
}
 ::google::protobuf::RepeatedField<int>*
CameraSensorViewConfiguration::mutable_channel_format() {
  // @@protoc_insertion_point(field_mutable_list:osi3.CameraSensorViewConfiguration.channel_format)
  return &channel_format_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UltrasonicSensorViewConfiguration::kSensorIdFieldNumber;
const int UltrasonicSensorViewConfiguration::kMountingPositionFieldNumber;
const int UltrasonicSensorViewConfiguration::kMountingPositionRmseFieldNumber;
const int UltrasonicSensorViewConfiguration::kFieldOfViewHorizontalFieldNumber;
const int UltrasonicSensorViewConfiguration::kFieldOfViewVerticalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UltrasonicSensorViewConfiguration::UltrasonicSensorViewConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicSensorViewConfiguration)
}

void UltrasonicSensorViewConfiguration::InitAsDefaultInstance() {
  sensor_id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  mounting_position_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
  mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
}

UltrasonicSensorViewConfiguration::UltrasonicSensorViewConfiguration(const UltrasonicSensorViewConfiguration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicSensorViewConfiguration)
}

void UltrasonicSensorViewConfiguration::SharedCtor() {
  _cached_size_ = 0;
  sensor_id_ = NULL;
  mounting_position_ = NULL;
  mounting_position_rmse_ = NULL;
  field_of_view_horizontal_ = 0;
  field_of_view_vertical_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UltrasonicSensorViewConfiguration::~UltrasonicSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicSensorViewConfiguration)
  SharedDtor();
}

void UltrasonicSensorViewConfiguration::SharedDtor() {
  if (this != default_instance_) {
    delete sensor_id_;
    delete mounting_position_;
    delete mounting_position_rmse_;
  }
}

void UltrasonicSensorViewConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltrasonicSensorViewConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UltrasonicSensorViewConfiguration_descriptor_;
}

const UltrasonicSensorViewConfiguration& UltrasonicSensorViewConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  return *default_instance_;
}

UltrasonicSensorViewConfiguration* UltrasonicSensorViewConfiguration::default_instance_ = NULL;

UltrasonicSensorViewConfiguration* UltrasonicSensorViewConfiguration::New(::google::protobuf::Arena* arena) const {
  UltrasonicSensorViewConfiguration* n = new UltrasonicSensorViewConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UltrasonicSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicSensorViewConfiguration)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UltrasonicSensorViewConfiguration, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UltrasonicSensorViewConfiguration*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(field_of_view_horizontal_, field_of_view_vertical_);
    if (has_sensor_id()) {
      if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
    }
    if (has_mounting_position()) {
      if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
    }
    if (has_mounting_position_rmse()) {
      if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UltrasonicSensorViewConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicSensorViewConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Identifier sensor_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mounting_position;
        break;
      }

      // optional .osi3.MountingPosition mounting_position = 2;
      case 2: {
        if (tag == 18) {
         parse_mounting_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mounting_position_rmse;
        break;
      }

      // optional .osi3.MountingPosition mounting_position_rmse = 3;
      case 3: {
        if (tag == 26) {
         parse_mounting_position_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_field_of_view_horizontal;
        break;
      }

      // optional double field_of_view_horizontal = 4;
      case 4: {
        if (tag == 33) {
         parse_field_of_view_horizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_horizontal_)));
          set_has_field_of_view_horizontal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_field_of_view_vertical;
        break;
      }

      // optional double field_of_view_vertical = 5;
      case 5: {
        if (tag == 41) {
         parse_field_of_view_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_vertical_)));
          set_has_field_of_view_vertical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicSensorViewConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicSensorViewConfiguration)
  return false;
#undef DO_
}

void UltrasonicSensorViewConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicSensorViewConfiguration)
  // optional .osi3.Identifier sensor_id = 1;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sensor_id_, output);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (has_mounting_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mounting_position_, output);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (has_mounting_position_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mounting_position_rmse_, output);
  }

  // optional double field_of_view_horizontal = 4;
  if (has_field_of_view_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->field_of_view_horizontal(), output);
  }

  // optional double field_of_view_vertical = 5;
  if (has_field_of_view_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->field_of_view_vertical(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicSensorViewConfiguration)
}

::google::protobuf::uint8* UltrasonicSensorViewConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicSensorViewConfiguration)
  // optional .osi3.Identifier sensor_id = 1;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->sensor_id_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position = 2;
  if (has_mounting_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->mounting_position_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  if (has_mounting_position_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->mounting_position_rmse_, false, target);
  }

  // optional double field_of_view_horizontal = 4;
  if (has_field_of_view_horizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->field_of_view_horizontal(), target);
  }

  // optional double field_of_view_vertical = 5;
  if (has_field_of_view_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->field_of_view_vertical(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicSensorViewConfiguration)
  return target;
}

int UltrasonicSensorViewConfiguration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicSensorViewConfiguration)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .osi3.Identifier sensor_id = 1;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 2;
    if (has_mounting_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 3;
    if (has_mounting_position_rmse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_rmse_);
    }

    // optional double field_of_view_horizontal = 4;
    if (has_field_of_view_horizontal()) {
      total_size += 1 + 8;
    }

    // optional double field_of_view_vertical = 5;
    if (has_field_of_view_vertical()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltrasonicSensorViewConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicSensorViewConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UltrasonicSensorViewConfiguration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UltrasonicSensorViewConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicSensorViewConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicSensorViewConfiguration)
    MergeFrom(*source);
  }
}

void UltrasonicSensorViewConfiguration::MergeFrom(const UltrasonicSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicSensorViewConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensor_id()) {
      mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
    }
    if (from.has_mounting_position()) {
      mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
    }
    if (from.has_mounting_position_rmse()) {
      mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
    }
    if (from.has_field_of_view_horizontal()) {
      set_field_of_view_horizontal(from.field_of_view_horizontal());
    }
    if (from.has_field_of_view_vertical()) {
      set_field_of_view_vertical(from.field_of_view_vertical());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UltrasonicSensorViewConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicSensorViewConfiguration::CopyFrom(const UltrasonicSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicSensorViewConfiguration::IsInitialized() const {

  return true;
}

void UltrasonicSensorViewConfiguration::Swap(UltrasonicSensorViewConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UltrasonicSensorViewConfiguration::InternalSwap(UltrasonicSensorViewConfiguration* other) {
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(mounting_position_, other->mounting_position_);
  std::swap(mounting_position_rmse_, other->mounting_position_rmse_);
  std::swap(field_of_view_horizontal_, other->field_of_view_horizontal_);
  std::swap(field_of_view_vertical_, other->field_of_view_vertical_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UltrasonicSensorViewConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UltrasonicSensorViewConfiguration_descriptor_;
  metadata.reflection = UltrasonicSensorViewConfiguration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UltrasonicSensorViewConfiguration

// optional .osi3.Identifier sensor_id = 1;
bool UltrasonicSensorViewConfiguration::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UltrasonicSensorViewConfiguration::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UltrasonicSensorViewConfiguration::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UltrasonicSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
const ::osi3::Identifier& UltrasonicSensorViewConfiguration::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSensorViewConfiguration.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
::osi3::Identifier* UltrasonicSensorViewConfiguration::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.UltrasonicSensorViewConfiguration.sensor_id)
  return sensor_id_;
}
::osi3::Identifier* UltrasonicSensorViewConfiguration::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.UltrasonicSensorViewConfiguration.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
void UltrasonicSensorViewConfiguration::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.UltrasonicSensorViewConfiguration.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 2;
bool UltrasonicSensorViewConfiguration::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UltrasonicSensorViewConfiguration::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000002u;
}
void UltrasonicSensorViewConfiguration::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void UltrasonicSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
const ::osi3::MountingPosition& UltrasonicSensorViewConfiguration::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSensorViewConfiguration.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
::osi3::MountingPosition* UltrasonicSensorViewConfiguration::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.UltrasonicSensorViewConfiguration.mounting_position)
  return mounting_position_;
}
::osi3::MountingPosition* UltrasonicSensorViewConfiguration::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.UltrasonicSensorViewConfiguration.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
void UltrasonicSensorViewConfiguration::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.UltrasonicSensorViewConfiguration.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 3;
bool UltrasonicSensorViewConfiguration::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UltrasonicSensorViewConfiguration::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000004u;
}
void UltrasonicSensorViewConfiguration::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000004u;
}
void UltrasonicSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
const ::osi3::MountingPosition& UltrasonicSensorViewConfiguration::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
::osi3::MountingPosition* UltrasonicSensorViewConfiguration::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.UltrasonicSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_;
}
::osi3::MountingPosition* UltrasonicSensorViewConfiguration::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.UltrasonicSensorViewConfiguration.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
void UltrasonicSensorViewConfiguration::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.UltrasonicSensorViewConfiguration.mounting_position_rmse)
}

// optional double field_of_view_horizontal = 4;
bool UltrasonicSensorViewConfiguration::has_field_of_view_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UltrasonicSensorViewConfiguration::set_has_field_of_view_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
void UltrasonicSensorViewConfiguration::clear_has_field_of_view_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
void UltrasonicSensorViewConfiguration::clear_field_of_view_horizontal() {
  field_of_view_horizontal_ = 0;
  clear_has_field_of_view_horizontal();
}
 double UltrasonicSensorViewConfiguration::field_of_view_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSensorViewConfiguration.field_of_view_horizontal)
  return field_of_view_horizontal_;
}
 void UltrasonicSensorViewConfiguration::set_field_of_view_horizontal(double value) {
  set_has_field_of_view_horizontal();
  field_of_view_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.UltrasonicSensorViewConfiguration.field_of_view_horizontal)
}

// optional double field_of_view_vertical = 5;
bool UltrasonicSensorViewConfiguration::has_field_of_view_vertical() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UltrasonicSensorViewConfiguration::set_has_field_of_view_vertical() {
  _has_bits_[0] |= 0x00000010u;
}
void UltrasonicSensorViewConfiguration::clear_has_field_of_view_vertical() {
  _has_bits_[0] &= ~0x00000010u;
}
void UltrasonicSensorViewConfiguration::clear_field_of_view_vertical() {
  field_of_view_vertical_ = 0;
  clear_has_field_of_view_vertical();
}
 double UltrasonicSensorViewConfiguration::field_of_view_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSensorViewConfiguration.field_of_view_vertical)
  return field_of_view_vertical_;
}
 void UltrasonicSensorViewConfiguration::set_field_of_view_vertical(double value) {
  set_has_field_of_view_vertical();
  field_of_view_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.UltrasonicSensorViewConfiguration.field_of_view_vertical)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
