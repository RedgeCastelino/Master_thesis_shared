// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensordata.proto

#ifndef PROTOBUF_osi_5fsensordata_2eproto__INCLUDED
#define PROTOBUF_osi_5fsensordata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_version.pb.h"
#include "osi_common.pb.h"
#include "osi_detectedtrafficsign.pb.h"
#include "osi_detectedtrafficlight.pb.h"
#include "osi_detectedroadmarking.pb.h"
#include "osi_detectedlane.pb.h"
#include "osi_detectedobject.pb.h"
#include "osi_detectedoccupant.pb.h"
#include "osi_sensorview.pb.h"
#include "osi_featuredata.pb.h"
// @@protoc_insertion_point(includes)

namespace osi3 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_osi_5fsensordata_2eproto();
void protobuf_AssignDesc_osi_5fsensordata_2eproto();
void protobuf_ShutdownFile_osi_5fsensordata_2eproto();

class DetectedEntityHeader;
class SensorData;

enum DetectedEntityHeader_DataQualifier {
  DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_UNKNOWN = 0,
  DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_OTHER = 1,
  DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_AVAILABLE = 2,
  DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_AVAILABLE_REDUCED = 3,
  DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_NOT_AVAILABLE = 4,
  DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_BLINDNESS = 5,
  DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_TEMPORARY_AVAILABLE = 6
};
bool DetectedEntityHeader_DataQualifier_IsValid(int value);
const DetectedEntityHeader_DataQualifier DetectedEntityHeader_DataQualifier_DataQualifier_MIN = DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_UNKNOWN;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader_DataQualifier_DataQualifier_MAX = DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_TEMPORARY_AVAILABLE;
const int DetectedEntityHeader_DataQualifier_DataQualifier_ARRAYSIZE = DetectedEntityHeader_DataQualifier_DataQualifier_MAX + 1;

const ::google::protobuf::EnumDescriptor* DetectedEntityHeader_DataQualifier_descriptor();
inline const ::std::string& DetectedEntityHeader_DataQualifier_Name(DetectedEntityHeader_DataQualifier value) {
  return ::google::protobuf::internal::NameOfEnum(
    DetectedEntityHeader_DataQualifier_descriptor(), value);
}
inline bool DetectedEntityHeader_DataQualifier_Parse(
    const ::std::string& name, DetectedEntityHeader_DataQualifier* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetectedEntityHeader_DataQualifier>(
    DetectedEntityHeader_DataQualifier_descriptor(), name, value);
}
// ===================================================================

class DetectedEntityHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.DetectedEntityHeader) */ {
 public:
  DetectedEntityHeader();
  virtual ~DetectedEntityHeader();

  DetectedEntityHeader(const DetectedEntityHeader& from);

  inline DetectedEntityHeader& operator=(const DetectedEntityHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectedEntityHeader& default_instance();

  void Swap(DetectedEntityHeader* other);

  // implements Message ----------------------------------------------

  inline DetectedEntityHeader* New() const { return New(NULL); }

  DetectedEntityHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectedEntityHeader& from);
  void MergeFrom(const DetectedEntityHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DetectedEntityHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DetectedEntityHeader_DataQualifier DataQualifier;
  static const DataQualifier DATA_QUALIFIER_UNKNOWN =
    DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_UNKNOWN;
  static const DataQualifier DATA_QUALIFIER_OTHER =
    DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_OTHER;
  static const DataQualifier DATA_QUALIFIER_AVAILABLE =
    DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_AVAILABLE;
  static const DataQualifier DATA_QUALIFIER_AVAILABLE_REDUCED =
    DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_AVAILABLE_REDUCED;
  static const DataQualifier DATA_QUALIFIER_NOT_AVAILABLE =
    DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_NOT_AVAILABLE;
  static const DataQualifier DATA_QUALIFIER_BLINDNESS =
    DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_BLINDNESS;
  static const DataQualifier DATA_QUALIFIER_TEMPORARY_AVAILABLE =
    DetectedEntityHeader_DataQualifier_DATA_QUALIFIER_TEMPORARY_AVAILABLE;
  static inline bool DataQualifier_IsValid(int value) {
    return DetectedEntityHeader_DataQualifier_IsValid(value);
  }
  static const DataQualifier DataQualifier_MIN =
    DetectedEntityHeader_DataQualifier_DataQualifier_MIN;
  static const DataQualifier DataQualifier_MAX =
    DetectedEntityHeader_DataQualifier_DataQualifier_MAX;
  static const int DataQualifier_ARRAYSIZE =
    DetectedEntityHeader_DataQualifier_DataQualifier_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataQualifier_descriptor() {
    return DetectedEntityHeader_DataQualifier_descriptor();
  }
  static inline const ::std::string& DataQualifier_Name(DataQualifier value) {
    return DetectedEntityHeader_DataQualifier_Name(value);
  }
  static inline bool DataQualifier_Parse(const ::std::string& name,
      DataQualifier* value) {
    return DetectedEntityHeader_DataQualifier_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.Timestamp measurement_time = 1;
  bool has_measurement_time() const;
  void clear_measurement_time();
  static const int kMeasurementTimeFieldNumber = 1;
  const ::osi3::Timestamp& measurement_time() const;
  ::osi3::Timestamp* mutable_measurement_time();
  ::osi3::Timestamp* release_measurement_time();
  void set_allocated_measurement_time(::osi3::Timestamp* measurement_time);

  // optional uint64 cycle_counter = 2;
  bool has_cycle_counter() const;
  void clear_cycle_counter();
  static const int kCycleCounterFieldNumber = 2;
  ::google::protobuf::uint64 cycle_counter() const;
  void set_cycle_counter(::google::protobuf::uint64 value);

  // optional .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
  bool has_data_qualifier() const;
  void clear_data_qualifier();
  static const int kDataQualifierFieldNumber = 3;
  ::osi3::DetectedEntityHeader_DataQualifier data_qualifier() const;
  void set_data_qualifier(::osi3::DetectedEntityHeader_DataQualifier value);

  // @@protoc_insertion_point(class_scope:osi3.DetectedEntityHeader)
 private:
  inline void set_has_measurement_time();
  inline void clear_has_measurement_time();
  inline void set_has_cycle_counter();
  inline void clear_has_cycle_counter();
  inline void set_has_data_qualifier();
  inline void clear_has_data_qualifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Timestamp* measurement_time_;
  ::google::protobuf::uint64 cycle_counter_;
  int data_qualifier_;
  friend void  protobuf_AddDesc_osi_5fsensordata_2eproto();
  friend void protobuf_AssignDesc_osi_5fsensordata_2eproto();
  friend void protobuf_ShutdownFile_osi_5fsensordata_2eproto();

  void InitAsDefaultInstance();
  static DetectedEntityHeader* default_instance_;
};
// -------------------------------------------------------------------

class SensorData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.SensorData) */ {
 public:
  SensorData();
  virtual ~SensorData();

  SensorData(const SensorData& from);

  inline SensorData& operator=(const SensorData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorData& default_instance();

  void Swap(SensorData* other);

  // implements Message ----------------------------------------------

  inline SensorData* New() const { return New(NULL); }

  SensorData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorData& from);
  void MergeFrom(const SensorData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.InterfaceVersion version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::osi3::InterfaceVersion& version() const;
  ::osi3::InterfaceVersion* mutable_version();
  ::osi3::InterfaceVersion* release_version();
  void set_allocated_version(::osi3::InterfaceVersion* version);

  // optional .osi3.Timestamp timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::osi3::Timestamp& timestamp() const;
  ::osi3::Timestamp* mutable_timestamp();
  ::osi3::Timestamp* release_timestamp();
  void set_allocated_timestamp(::osi3::Timestamp* timestamp);

  // optional .osi3.BaseMoving host_vehicle_location = 3;
  bool has_host_vehicle_location() const;
  void clear_host_vehicle_location();
  static const int kHostVehicleLocationFieldNumber = 3;
  const ::osi3::BaseMoving& host_vehicle_location() const;
  ::osi3::BaseMoving* mutable_host_vehicle_location();
  ::osi3::BaseMoving* release_host_vehicle_location();
  void set_allocated_host_vehicle_location(::osi3::BaseMoving* host_vehicle_location);

  // optional .osi3.BaseMoving host_vehicle_location_rmse = 4;
  bool has_host_vehicle_location_rmse() const;
  void clear_host_vehicle_location_rmse();
  static const int kHostVehicleLocationRmseFieldNumber = 4;
  const ::osi3::BaseMoving& host_vehicle_location_rmse() const;
  ::osi3::BaseMoving* mutable_host_vehicle_location_rmse();
  ::osi3::BaseMoving* release_host_vehicle_location_rmse();
  void set_allocated_host_vehicle_location_rmse(::osi3::BaseMoving* host_vehicle_location_rmse);

  // optional .osi3.Identifier sensor_id = 5;
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 5;
  const ::osi3::Identifier& sensor_id() const;
  ::osi3::Identifier* mutable_sensor_id();
  ::osi3::Identifier* release_sensor_id();
  void set_allocated_sensor_id(::osi3::Identifier* sensor_id);

  // optional .osi3.MountingPosition mounting_position = 6;
  bool has_mounting_position() const;
  void clear_mounting_position();
  static const int kMountingPositionFieldNumber = 6;
  const ::osi3::MountingPosition& mounting_position() const;
  ::osi3::MountingPosition* mutable_mounting_position();
  ::osi3::MountingPosition* release_mounting_position();
  void set_allocated_mounting_position(::osi3::MountingPosition* mounting_position);

  // optional .osi3.MountingPosition mounting_position_rmse = 7;
  bool has_mounting_position_rmse() const;
  void clear_mounting_position_rmse();
  static const int kMountingPositionRmseFieldNumber = 7;
  const ::osi3::MountingPosition& mounting_position_rmse() const;
  ::osi3::MountingPosition* mutable_mounting_position_rmse();
  ::osi3::MountingPosition* release_mounting_position_rmse();
  void set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse);

  // repeated .osi3.SensorView sensor_view = 8;
  int sensor_view_size() const;
  void clear_sensor_view();
  static const int kSensorViewFieldNumber = 8;
  const ::osi3::SensorView& sensor_view(int index) const;
  ::osi3::SensorView* mutable_sensor_view(int index);
  ::osi3::SensorView* add_sensor_view();
  ::google::protobuf::RepeatedPtrField< ::osi3::SensorView >*
      mutable_sensor_view();
  const ::google::protobuf::RepeatedPtrField< ::osi3::SensorView >&
      sensor_view() const;

  // optional .osi3.Timestamp last_measurement_time = 9;
  bool has_last_measurement_time() const;
  void clear_last_measurement_time();
  static const int kLastMeasurementTimeFieldNumber = 9;
  const ::osi3::Timestamp& last_measurement_time() const;
  ::osi3::Timestamp* mutable_last_measurement_time();
  ::osi3::Timestamp* release_last_measurement_time();
  void set_allocated_last_measurement_time(::osi3::Timestamp* last_measurement_time);

  // optional .osi3.DetectedEntityHeader stationary_object_header = 10;
  bool has_stationary_object_header() const;
  void clear_stationary_object_header();
  static const int kStationaryObjectHeaderFieldNumber = 10;
  const ::osi3::DetectedEntityHeader& stationary_object_header() const;
  ::osi3::DetectedEntityHeader* mutable_stationary_object_header();
  ::osi3::DetectedEntityHeader* release_stationary_object_header();
  void set_allocated_stationary_object_header(::osi3::DetectedEntityHeader* stationary_object_header);

  // repeated .osi3.DetectedStationaryObject stationary_object = 11;
  int stationary_object_size() const;
  void clear_stationary_object();
  static const int kStationaryObjectFieldNumber = 11;
  const ::osi3::DetectedStationaryObject& stationary_object(int index) const;
  ::osi3::DetectedStationaryObject* mutable_stationary_object(int index);
  ::osi3::DetectedStationaryObject* add_stationary_object();
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedStationaryObject >*
      mutable_stationary_object();
  const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedStationaryObject >&
      stationary_object() const;

  // optional .osi3.DetectedEntityHeader moving_object_header = 12;
  bool has_moving_object_header() const;
  void clear_moving_object_header();
  static const int kMovingObjectHeaderFieldNumber = 12;
  const ::osi3::DetectedEntityHeader& moving_object_header() const;
  ::osi3::DetectedEntityHeader* mutable_moving_object_header();
  ::osi3::DetectedEntityHeader* release_moving_object_header();
  void set_allocated_moving_object_header(::osi3::DetectedEntityHeader* moving_object_header);

  // repeated .osi3.DetectedMovingObject moving_object = 13;
  int moving_object_size() const;
  void clear_moving_object();
  static const int kMovingObjectFieldNumber = 13;
  const ::osi3::DetectedMovingObject& moving_object(int index) const;
  ::osi3::DetectedMovingObject* mutable_moving_object(int index);
  ::osi3::DetectedMovingObject* add_moving_object();
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedMovingObject >*
      mutable_moving_object();
  const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedMovingObject >&
      moving_object() const;

  // optional .osi3.DetectedEntityHeader traffic_sign_header = 14;
  bool has_traffic_sign_header() const;
  void clear_traffic_sign_header();
  static const int kTrafficSignHeaderFieldNumber = 14;
  const ::osi3::DetectedEntityHeader& traffic_sign_header() const;
  ::osi3::DetectedEntityHeader* mutable_traffic_sign_header();
  ::osi3::DetectedEntityHeader* release_traffic_sign_header();
  void set_allocated_traffic_sign_header(::osi3::DetectedEntityHeader* traffic_sign_header);

  // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
  int traffic_sign_size() const;
  void clear_traffic_sign();
  static const int kTrafficSignFieldNumber = 15;
  const ::osi3::DetectedTrafficSign& traffic_sign(int index) const;
  ::osi3::DetectedTrafficSign* mutable_traffic_sign(int index);
  ::osi3::DetectedTrafficSign* add_traffic_sign();
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficSign >*
      mutable_traffic_sign();
  const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficSign >&
      traffic_sign() const;

  // optional .osi3.DetectedEntityHeader traffic_light_header = 16;
  bool has_traffic_light_header() const;
  void clear_traffic_light_header();
  static const int kTrafficLightHeaderFieldNumber = 16;
  const ::osi3::DetectedEntityHeader& traffic_light_header() const;
  ::osi3::DetectedEntityHeader* mutable_traffic_light_header();
  ::osi3::DetectedEntityHeader* release_traffic_light_header();
  void set_allocated_traffic_light_header(::osi3::DetectedEntityHeader* traffic_light_header);

  // repeated .osi3.DetectedTrafficLight traffic_light = 17;
  int traffic_light_size() const;
  void clear_traffic_light();
  static const int kTrafficLightFieldNumber = 17;
  const ::osi3::DetectedTrafficLight& traffic_light(int index) const;
  ::osi3::DetectedTrafficLight* mutable_traffic_light(int index);
  ::osi3::DetectedTrafficLight* add_traffic_light();
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficLight >*
      mutable_traffic_light();
  const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficLight >&
      traffic_light() const;

  // optional .osi3.DetectedEntityHeader road_marking_header = 18;
  bool has_road_marking_header() const;
  void clear_road_marking_header();
  static const int kRoadMarkingHeaderFieldNumber = 18;
  const ::osi3::DetectedEntityHeader& road_marking_header() const;
  ::osi3::DetectedEntityHeader* mutable_road_marking_header();
  ::osi3::DetectedEntityHeader* release_road_marking_header();
  void set_allocated_road_marking_header(::osi3::DetectedEntityHeader* road_marking_header);

  // repeated .osi3.DetectedRoadMarking road_marking = 19;
  int road_marking_size() const;
  void clear_road_marking();
  static const int kRoadMarkingFieldNumber = 19;
  const ::osi3::DetectedRoadMarking& road_marking(int index) const;
  ::osi3::DetectedRoadMarking* mutable_road_marking(int index);
  ::osi3::DetectedRoadMarking* add_road_marking();
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedRoadMarking >*
      mutable_road_marking();
  const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedRoadMarking >&
      road_marking() const;

  // optional .osi3.DetectedEntityHeader lane_boundary_header = 20;
  bool has_lane_boundary_header() const;
  void clear_lane_boundary_header();
  static const int kLaneBoundaryHeaderFieldNumber = 20;
  const ::osi3::DetectedEntityHeader& lane_boundary_header() const;
  ::osi3::DetectedEntityHeader* mutable_lane_boundary_header();
  ::osi3::DetectedEntityHeader* release_lane_boundary_header();
  void set_allocated_lane_boundary_header(::osi3::DetectedEntityHeader* lane_boundary_header);

  // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
  int lane_boundary_size() const;
  void clear_lane_boundary();
  static const int kLaneBoundaryFieldNumber = 21;
  const ::osi3::DetectedLaneBoundary& lane_boundary(int index) const;
  ::osi3::DetectedLaneBoundary* mutable_lane_boundary(int index);
  ::osi3::DetectedLaneBoundary* add_lane_boundary();
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLaneBoundary >*
      mutable_lane_boundary();
  const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLaneBoundary >&
      lane_boundary() const;

  // optional .osi3.DetectedEntityHeader lane_header = 22;
  bool has_lane_header() const;
  void clear_lane_header();
  static const int kLaneHeaderFieldNumber = 22;
  const ::osi3::DetectedEntityHeader& lane_header() const;
  ::osi3::DetectedEntityHeader* mutable_lane_header();
  ::osi3::DetectedEntityHeader* release_lane_header();
  void set_allocated_lane_header(::osi3::DetectedEntityHeader* lane_header);

  // repeated .osi3.DetectedLane lane = 23;
  int lane_size() const;
  void clear_lane();
  static const int kLaneFieldNumber = 23;
  const ::osi3::DetectedLane& lane(int index) const;
  ::osi3::DetectedLane* mutable_lane(int index);
  ::osi3::DetectedLane* add_lane();
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLane >*
      mutable_lane();
  const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLane >&
      lane() const;

  // optional .osi3.DetectedEntityHeader occupant_header = 24;
  bool has_occupant_header() const;
  void clear_occupant_header();
  static const int kOccupantHeaderFieldNumber = 24;
  const ::osi3::DetectedEntityHeader& occupant_header() const;
  ::osi3::DetectedEntityHeader* mutable_occupant_header();
  ::osi3::DetectedEntityHeader* release_occupant_header();
  void set_allocated_occupant_header(::osi3::DetectedEntityHeader* occupant_header);

  // repeated .osi3.DetectedOccupant occupant = 25;
  int occupant_size() const;
  void clear_occupant();
  static const int kOccupantFieldNumber = 25;
  const ::osi3::DetectedOccupant& occupant(int index) const;
  ::osi3::DetectedOccupant* mutable_occupant(int index);
  ::osi3::DetectedOccupant* add_occupant();
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedOccupant >*
      mutable_occupant();
  const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedOccupant >&
      occupant() const;

  // optional .osi3.FeatureData feature_data = 26;
  bool has_feature_data() const;
  void clear_feature_data();
  static const int kFeatureDataFieldNumber = 26;
  const ::osi3::FeatureData& feature_data() const;
  ::osi3::FeatureData* mutable_feature_data();
  ::osi3::FeatureData* release_feature_data();
  void set_allocated_feature_data(::osi3::FeatureData* feature_data);

  // @@protoc_insertion_point(class_scope:osi3.SensorData)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_host_vehicle_location();
  inline void clear_has_host_vehicle_location();
  inline void set_has_host_vehicle_location_rmse();
  inline void clear_has_host_vehicle_location_rmse();
  inline void set_has_sensor_id();
  inline void clear_has_sensor_id();
  inline void set_has_mounting_position();
  inline void clear_has_mounting_position();
  inline void set_has_mounting_position_rmse();
  inline void clear_has_mounting_position_rmse();
  inline void set_has_last_measurement_time();
  inline void clear_has_last_measurement_time();
  inline void set_has_stationary_object_header();
  inline void clear_has_stationary_object_header();
  inline void set_has_moving_object_header();
  inline void clear_has_moving_object_header();
  inline void set_has_traffic_sign_header();
  inline void clear_has_traffic_sign_header();
  inline void set_has_traffic_light_header();
  inline void clear_has_traffic_light_header();
  inline void set_has_road_marking_header();
  inline void clear_has_road_marking_header();
  inline void set_has_lane_boundary_header();
  inline void clear_has_lane_boundary_header();
  inline void set_has_lane_header();
  inline void clear_has_lane_header();
  inline void set_has_occupant_header();
  inline void clear_has_occupant_header();
  inline void set_has_feature_data();
  inline void clear_has_feature_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::InterfaceVersion* version_;
  ::osi3::Timestamp* timestamp_;
  ::osi3::BaseMoving* host_vehicle_location_;
  ::osi3::BaseMoving* host_vehicle_location_rmse_;
  ::osi3::Identifier* sensor_id_;
  ::osi3::MountingPosition* mounting_position_;
  ::osi3::MountingPosition* mounting_position_rmse_;
  ::google::protobuf::RepeatedPtrField< ::osi3::SensorView > sensor_view_;
  ::osi3::Timestamp* last_measurement_time_;
  ::osi3::DetectedEntityHeader* stationary_object_header_;
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedStationaryObject > stationary_object_;
  ::osi3::DetectedEntityHeader* moving_object_header_;
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedMovingObject > moving_object_;
  ::osi3::DetectedEntityHeader* traffic_sign_header_;
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficSign > traffic_sign_;
  ::osi3::DetectedEntityHeader* traffic_light_header_;
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficLight > traffic_light_;
  ::osi3::DetectedEntityHeader* road_marking_header_;
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedRoadMarking > road_marking_;
  ::osi3::DetectedEntityHeader* lane_boundary_header_;
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLaneBoundary > lane_boundary_;
  ::osi3::DetectedEntityHeader* lane_header_;
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLane > lane_;
  ::osi3::DetectedEntityHeader* occupant_header_;
  ::google::protobuf::RepeatedPtrField< ::osi3::DetectedOccupant > occupant_;
  ::osi3::FeatureData* feature_data_;
  friend void  protobuf_AddDesc_osi_5fsensordata_2eproto();
  friend void protobuf_AssignDesc_osi_5fsensordata_2eproto();
  friend void protobuf_ShutdownFile_osi_5fsensordata_2eproto();

  void InitAsDefaultInstance();
  static SensorData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectedEntityHeader

// optional .osi3.Timestamp measurement_time = 1;
inline bool DetectedEntityHeader::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectedEntityHeader::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectedEntityHeader::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectedEntityHeader::clear_measurement_time() {
  if (measurement_time_ != NULL) measurement_time_->::osi3::Timestamp::Clear();
  clear_has_measurement_time();
}
inline const ::osi3::Timestamp& DetectedEntityHeader::measurement_time() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedEntityHeader.measurement_time)
  return measurement_time_ != NULL ? *measurement_time_ : *default_instance_->measurement_time_;
}
inline ::osi3::Timestamp* DetectedEntityHeader::mutable_measurement_time() {
  set_has_measurement_time();
  if (measurement_time_ == NULL) {
    measurement_time_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedEntityHeader.measurement_time)
  return measurement_time_;
}
inline ::osi3::Timestamp* DetectedEntityHeader::release_measurement_time() {
  // @@protoc_insertion_point(field_release:osi3.DetectedEntityHeader.measurement_time)
  clear_has_measurement_time();
  ::osi3::Timestamp* temp = measurement_time_;
  measurement_time_ = NULL;
  return temp;
}
inline void DetectedEntityHeader::set_allocated_measurement_time(::osi3::Timestamp* measurement_time) {
  delete measurement_time_;
  measurement_time_ = measurement_time;
  if (measurement_time) {
    set_has_measurement_time();
  } else {
    clear_has_measurement_time();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedEntityHeader.measurement_time)
}

// optional uint64 cycle_counter = 2;
inline bool DetectedEntityHeader::has_cycle_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectedEntityHeader::set_has_cycle_counter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectedEntityHeader::clear_has_cycle_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectedEntityHeader::clear_cycle_counter() {
  cycle_counter_ = GOOGLE_ULONGLONG(0);
  clear_has_cycle_counter();
}
inline ::google::protobuf::uint64 DetectedEntityHeader::cycle_counter() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedEntityHeader.cycle_counter)
  return cycle_counter_;
}
inline void DetectedEntityHeader::set_cycle_counter(::google::protobuf::uint64 value) {
  set_has_cycle_counter();
  cycle_counter_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedEntityHeader.cycle_counter)
}

// optional .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
inline bool DetectedEntityHeader::has_data_qualifier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectedEntityHeader::set_has_data_qualifier() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectedEntityHeader::clear_has_data_qualifier() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectedEntityHeader::clear_data_qualifier() {
  data_qualifier_ = 0;
  clear_has_data_qualifier();
}
inline ::osi3::DetectedEntityHeader_DataQualifier DetectedEntityHeader::data_qualifier() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedEntityHeader.data_qualifier)
  return static_cast< ::osi3::DetectedEntityHeader_DataQualifier >(data_qualifier_);
}
inline void DetectedEntityHeader::set_data_qualifier(::osi3::DetectedEntityHeader_DataQualifier value) {
  assert(::osi3::DetectedEntityHeader_DataQualifier_IsValid(value));
  set_has_data_qualifier();
  data_qualifier_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedEntityHeader.data_qualifier)
}

// -------------------------------------------------------------------

// SensorData

// optional .osi3.InterfaceVersion version = 1;
inline bool SensorData::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorData::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorData::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SensorData::clear_version() {
  if (version_ != NULL) version_->::osi3::InterfaceVersion::Clear();
  clear_has_version();
}
inline const ::osi3::InterfaceVersion& SensorData::version() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
inline ::osi3::InterfaceVersion* SensorData::mutable_version() {
  set_has_version();
  if (version_ == NULL) {
    version_ = new ::osi3::InterfaceVersion;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.version)
  return version_;
}
inline ::osi3::InterfaceVersion* SensorData::release_version() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.version)
  clear_has_version();
  ::osi3::InterfaceVersion* temp = version_;
  version_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_version(::osi3::InterfaceVersion* version) {
  delete version_;
  version_ = version;
  if (version) {
    set_has_version();
  } else {
    clear_has_version();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.version)
}

// optional .osi3.Timestamp timestamp = 2;
inline bool SensorData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SensorData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SensorData::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::osi3::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::osi3::Timestamp& SensorData::timestamp() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::osi3::Timestamp* SensorData::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.timestamp)
  return timestamp_;
}
inline ::osi3::Timestamp* SensorData::release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.timestamp)
  clear_has_timestamp();
  ::osi3::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.timestamp)
}

// optional .osi3.BaseMoving host_vehicle_location = 3;
inline bool SensorData::has_host_vehicle_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorData::set_has_host_vehicle_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SensorData::clear_has_host_vehicle_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SensorData::clear_host_vehicle_location() {
  if (host_vehicle_location_ != NULL) host_vehicle_location_->::osi3::BaseMoving::Clear();
  clear_has_host_vehicle_location();
}
inline const ::osi3::BaseMoving& SensorData::host_vehicle_location() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.host_vehicle_location)
  return host_vehicle_location_ != NULL ? *host_vehicle_location_ : *default_instance_->host_vehicle_location_;
}
inline ::osi3::BaseMoving* SensorData::mutable_host_vehicle_location() {
  set_has_host_vehicle_location();
  if (host_vehicle_location_ == NULL) {
    host_vehicle_location_ = new ::osi3::BaseMoving;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.host_vehicle_location)
  return host_vehicle_location_;
}
inline ::osi3::BaseMoving* SensorData::release_host_vehicle_location() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.host_vehicle_location)
  clear_has_host_vehicle_location();
  ::osi3::BaseMoving* temp = host_vehicle_location_;
  host_vehicle_location_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_host_vehicle_location(::osi3::BaseMoving* host_vehicle_location) {
  delete host_vehicle_location_;
  host_vehicle_location_ = host_vehicle_location;
  if (host_vehicle_location) {
    set_has_host_vehicle_location();
  } else {
    clear_has_host_vehicle_location();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.host_vehicle_location)
}

// optional .osi3.BaseMoving host_vehicle_location_rmse = 4;
inline bool SensorData::has_host_vehicle_location_rmse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorData::set_has_host_vehicle_location_rmse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SensorData::clear_has_host_vehicle_location_rmse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SensorData::clear_host_vehicle_location_rmse() {
  if (host_vehicle_location_rmse_ != NULL) host_vehicle_location_rmse_->::osi3::BaseMoving::Clear();
  clear_has_host_vehicle_location_rmse();
}
inline const ::osi3::BaseMoving& SensorData::host_vehicle_location_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.host_vehicle_location_rmse)
  return host_vehicle_location_rmse_ != NULL ? *host_vehicle_location_rmse_ : *default_instance_->host_vehicle_location_rmse_;
}
inline ::osi3::BaseMoving* SensorData::mutable_host_vehicle_location_rmse() {
  set_has_host_vehicle_location_rmse();
  if (host_vehicle_location_rmse_ == NULL) {
    host_vehicle_location_rmse_ = new ::osi3::BaseMoving;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.host_vehicle_location_rmse)
  return host_vehicle_location_rmse_;
}
inline ::osi3::BaseMoving* SensorData::release_host_vehicle_location_rmse() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.host_vehicle_location_rmse)
  clear_has_host_vehicle_location_rmse();
  ::osi3::BaseMoving* temp = host_vehicle_location_rmse_;
  host_vehicle_location_rmse_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_host_vehicle_location_rmse(::osi3::BaseMoving* host_vehicle_location_rmse) {
  delete host_vehicle_location_rmse_;
  host_vehicle_location_rmse_ = host_vehicle_location_rmse;
  if (host_vehicle_location_rmse) {
    set_has_host_vehicle_location_rmse();
  } else {
    clear_has_host_vehicle_location_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.host_vehicle_location_rmse)
}

// optional .osi3.Identifier sensor_id = 5;
inline bool SensorData::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorData::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SensorData::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SensorData::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
inline const ::osi3::Identifier& SensorData::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
inline ::osi3::Identifier* SensorData::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.sensor_id)
  return sensor_id_;
}
inline ::osi3::Identifier* SensorData::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 6;
inline bool SensorData::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorData::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SensorData::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SensorData::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
inline const ::osi3::MountingPosition& SensorData::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
inline ::osi3::MountingPosition* SensorData::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.mounting_position)
  return mounting_position_;
}
inline ::osi3::MountingPosition* SensorData::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 7;
inline bool SensorData::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorData::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SensorData::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SensorData::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
inline const ::osi3::MountingPosition& SensorData::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
inline ::osi3::MountingPosition* SensorData::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.mounting_position_rmse)
  return mounting_position_rmse_;
}
inline ::osi3::MountingPosition* SensorData::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.mounting_position_rmse)
}

// repeated .osi3.SensorView sensor_view = 8;
inline int SensorData::sensor_view_size() const {
  return sensor_view_.size();
}
inline void SensorData::clear_sensor_view() {
  sensor_view_.Clear();
}
inline const ::osi3::SensorView& SensorData::sensor_view(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.sensor_view)
  return sensor_view_.Get(index);
}
inline ::osi3::SensorView* SensorData::mutable_sensor_view(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.sensor_view)
  return sensor_view_.Mutable(index);
}
inline ::osi3::SensorView* SensorData::add_sensor_view() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.sensor_view)
  return sensor_view_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::SensorView >*
SensorData::mutable_sensor_view() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.sensor_view)
  return &sensor_view_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::SensorView >&
SensorData::sensor_view() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.sensor_view)
  return sensor_view_;
}

// optional .osi3.Timestamp last_measurement_time = 9;
inline bool SensorData::has_last_measurement_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SensorData::set_has_last_measurement_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SensorData::clear_has_last_measurement_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SensorData::clear_last_measurement_time() {
  if (last_measurement_time_ != NULL) last_measurement_time_->::osi3::Timestamp::Clear();
  clear_has_last_measurement_time();
}
inline const ::osi3::Timestamp& SensorData::last_measurement_time() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.last_measurement_time)
  return last_measurement_time_ != NULL ? *last_measurement_time_ : *default_instance_->last_measurement_time_;
}
inline ::osi3::Timestamp* SensorData::mutable_last_measurement_time() {
  set_has_last_measurement_time();
  if (last_measurement_time_ == NULL) {
    last_measurement_time_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.last_measurement_time)
  return last_measurement_time_;
}
inline ::osi3::Timestamp* SensorData::release_last_measurement_time() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.last_measurement_time)
  clear_has_last_measurement_time();
  ::osi3::Timestamp* temp = last_measurement_time_;
  last_measurement_time_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_last_measurement_time(::osi3::Timestamp* last_measurement_time) {
  delete last_measurement_time_;
  last_measurement_time_ = last_measurement_time;
  if (last_measurement_time) {
    set_has_last_measurement_time();
  } else {
    clear_has_last_measurement_time();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.last_measurement_time)
}

// optional .osi3.DetectedEntityHeader stationary_object_header = 10;
inline bool SensorData::has_stationary_object_header() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SensorData::set_has_stationary_object_header() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SensorData::clear_has_stationary_object_header() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SensorData::clear_stationary_object_header() {
  if (stationary_object_header_ != NULL) stationary_object_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_stationary_object_header();
}
inline const ::osi3::DetectedEntityHeader& SensorData::stationary_object_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.stationary_object_header)
  return stationary_object_header_ != NULL ? *stationary_object_header_ : *default_instance_->stationary_object_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::mutable_stationary_object_header() {
  set_has_stationary_object_header();
  if (stationary_object_header_ == NULL) {
    stationary_object_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.stationary_object_header)
  return stationary_object_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::release_stationary_object_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.stationary_object_header)
  clear_has_stationary_object_header();
  ::osi3::DetectedEntityHeader* temp = stationary_object_header_;
  stationary_object_header_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_stationary_object_header(::osi3::DetectedEntityHeader* stationary_object_header) {
  delete stationary_object_header_;
  stationary_object_header_ = stationary_object_header;
  if (stationary_object_header) {
    set_has_stationary_object_header();
  } else {
    clear_has_stationary_object_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.stationary_object_header)
}

// repeated .osi3.DetectedStationaryObject stationary_object = 11;
inline int SensorData::stationary_object_size() const {
  return stationary_object_.size();
}
inline void SensorData::clear_stationary_object() {
  stationary_object_.Clear();
}
inline const ::osi3::DetectedStationaryObject& SensorData::stationary_object(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.stationary_object)
  return stationary_object_.Get(index);
}
inline ::osi3::DetectedStationaryObject* SensorData::mutable_stationary_object(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.stationary_object)
  return stationary_object_.Mutable(index);
}
inline ::osi3::DetectedStationaryObject* SensorData::add_stationary_object() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.stationary_object)
  return stationary_object_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::DetectedStationaryObject >*
SensorData::mutable_stationary_object() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.stationary_object)
  return &stationary_object_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedStationaryObject >&
SensorData::stationary_object() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.stationary_object)
  return stationary_object_;
}

// optional .osi3.DetectedEntityHeader moving_object_header = 12;
inline bool SensorData::has_moving_object_header() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SensorData::set_has_moving_object_header() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SensorData::clear_has_moving_object_header() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SensorData::clear_moving_object_header() {
  if (moving_object_header_ != NULL) moving_object_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_moving_object_header();
}
inline const ::osi3::DetectedEntityHeader& SensorData::moving_object_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.moving_object_header)
  return moving_object_header_ != NULL ? *moving_object_header_ : *default_instance_->moving_object_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::mutable_moving_object_header() {
  set_has_moving_object_header();
  if (moving_object_header_ == NULL) {
    moving_object_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.moving_object_header)
  return moving_object_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::release_moving_object_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.moving_object_header)
  clear_has_moving_object_header();
  ::osi3::DetectedEntityHeader* temp = moving_object_header_;
  moving_object_header_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_moving_object_header(::osi3::DetectedEntityHeader* moving_object_header) {
  delete moving_object_header_;
  moving_object_header_ = moving_object_header;
  if (moving_object_header) {
    set_has_moving_object_header();
  } else {
    clear_has_moving_object_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.moving_object_header)
}

// repeated .osi3.DetectedMovingObject moving_object = 13;
inline int SensorData::moving_object_size() const {
  return moving_object_.size();
}
inline void SensorData::clear_moving_object() {
  moving_object_.Clear();
}
inline const ::osi3::DetectedMovingObject& SensorData::moving_object(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.moving_object)
  return moving_object_.Get(index);
}
inline ::osi3::DetectedMovingObject* SensorData::mutable_moving_object(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.moving_object)
  return moving_object_.Mutable(index);
}
inline ::osi3::DetectedMovingObject* SensorData::add_moving_object() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.moving_object)
  return moving_object_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::DetectedMovingObject >*
SensorData::mutable_moving_object() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.moving_object)
  return &moving_object_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedMovingObject >&
SensorData::moving_object() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.moving_object)
  return moving_object_;
}

// optional .osi3.DetectedEntityHeader traffic_sign_header = 14;
inline bool SensorData::has_traffic_sign_header() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SensorData::set_has_traffic_sign_header() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SensorData::clear_has_traffic_sign_header() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SensorData::clear_traffic_sign_header() {
  if (traffic_sign_header_ != NULL) traffic_sign_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_traffic_sign_header();
}
inline const ::osi3::DetectedEntityHeader& SensorData::traffic_sign_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.traffic_sign_header)
  return traffic_sign_header_ != NULL ? *traffic_sign_header_ : *default_instance_->traffic_sign_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::mutable_traffic_sign_header() {
  set_has_traffic_sign_header();
  if (traffic_sign_header_ == NULL) {
    traffic_sign_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.traffic_sign_header)
  return traffic_sign_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::release_traffic_sign_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.traffic_sign_header)
  clear_has_traffic_sign_header();
  ::osi3::DetectedEntityHeader* temp = traffic_sign_header_;
  traffic_sign_header_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_traffic_sign_header(::osi3::DetectedEntityHeader* traffic_sign_header) {
  delete traffic_sign_header_;
  traffic_sign_header_ = traffic_sign_header;
  if (traffic_sign_header) {
    set_has_traffic_sign_header();
  } else {
    clear_has_traffic_sign_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.traffic_sign_header)
}

// repeated .osi3.DetectedTrafficSign traffic_sign = 15;
inline int SensorData::traffic_sign_size() const {
  return traffic_sign_.size();
}
inline void SensorData::clear_traffic_sign() {
  traffic_sign_.Clear();
}
inline const ::osi3::DetectedTrafficSign& SensorData::traffic_sign(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.traffic_sign)
  return traffic_sign_.Get(index);
}
inline ::osi3::DetectedTrafficSign* SensorData::mutable_traffic_sign(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.traffic_sign)
  return traffic_sign_.Mutable(index);
}
inline ::osi3::DetectedTrafficSign* SensorData::add_traffic_sign() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.traffic_sign)
  return traffic_sign_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficSign >*
SensorData::mutable_traffic_sign() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.traffic_sign)
  return &traffic_sign_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficSign >&
SensorData::traffic_sign() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.traffic_sign)
  return traffic_sign_;
}

// optional .osi3.DetectedEntityHeader traffic_light_header = 16;
inline bool SensorData::has_traffic_light_header() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SensorData::set_has_traffic_light_header() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SensorData::clear_has_traffic_light_header() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SensorData::clear_traffic_light_header() {
  if (traffic_light_header_ != NULL) traffic_light_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_traffic_light_header();
}
inline const ::osi3::DetectedEntityHeader& SensorData::traffic_light_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.traffic_light_header)
  return traffic_light_header_ != NULL ? *traffic_light_header_ : *default_instance_->traffic_light_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::mutable_traffic_light_header() {
  set_has_traffic_light_header();
  if (traffic_light_header_ == NULL) {
    traffic_light_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.traffic_light_header)
  return traffic_light_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::release_traffic_light_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.traffic_light_header)
  clear_has_traffic_light_header();
  ::osi3::DetectedEntityHeader* temp = traffic_light_header_;
  traffic_light_header_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_traffic_light_header(::osi3::DetectedEntityHeader* traffic_light_header) {
  delete traffic_light_header_;
  traffic_light_header_ = traffic_light_header;
  if (traffic_light_header) {
    set_has_traffic_light_header();
  } else {
    clear_has_traffic_light_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.traffic_light_header)
}

// repeated .osi3.DetectedTrafficLight traffic_light = 17;
inline int SensorData::traffic_light_size() const {
  return traffic_light_.size();
}
inline void SensorData::clear_traffic_light() {
  traffic_light_.Clear();
}
inline const ::osi3::DetectedTrafficLight& SensorData::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.traffic_light)
  return traffic_light_.Get(index);
}
inline ::osi3::DetectedTrafficLight* SensorData::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.traffic_light)
  return traffic_light_.Mutable(index);
}
inline ::osi3::DetectedTrafficLight* SensorData::add_traffic_light() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.traffic_light)
  return traffic_light_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficLight >*
SensorData::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.traffic_light)
  return &traffic_light_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficLight >&
SensorData::traffic_light() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.traffic_light)
  return traffic_light_;
}

// optional .osi3.DetectedEntityHeader road_marking_header = 18;
inline bool SensorData::has_road_marking_header() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SensorData::set_has_road_marking_header() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SensorData::clear_has_road_marking_header() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SensorData::clear_road_marking_header() {
  if (road_marking_header_ != NULL) road_marking_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_road_marking_header();
}
inline const ::osi3::DetectedEntityHeader& SensorData::road_marking_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.road_marking_header)
  return road_marking_header_ != NULL ? *road_marking_header_ : *default_instance_->road_marking_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::mutable_road_marking_header() {
  set_has_road_marking_header();
  if (road_marking_header_ == NULL) {
    road_marking_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.road_marking_header)
  return road_marking_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::release_road_marking_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.road_marking_header)
  clear_has_road_marking_header();
  ::osi3::DetectedEntityHeader* temp = road_marking_header_;
  road_marking_header_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_road_marking_header(::osi3::DetectedEntityHeader* road_marking_header) {
  delete road_marking_header_;
  road_marking_header_ = road_marking_header;
  if (road_marking_header) {
    set_has_road_marking_header();
  } else {
    clear_has_road_marking_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.road_marking_header)
}

// repeated .osi3.DetectedRoadMarking road_marking = 19;
inline int SensorData::road_marking_size() const {
  return road_marking_.size();
}
inline void SensorData::clear_road_marking() {
  road_marking_.Clear();
}
inline const ::osi3::DetectedRoadMarking& SensorData::road_marking(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.road_marking)
  return road_marking_.Get(index);
}
inline ::osi3::DetectedRoadMarking* SensorData::mutable_road_marking(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.road_marking)
  return road_marking_.Mutable(index);
}
inline ::osi3::DetectedRoadMarking* SensorData::add_road_marking() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.road_marking)
  return road_marking_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::DetectedRoadMarking >*
SensorData::mutable_road_marking() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.road_marking)
  return &road_marking_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedRoadMarking >&
SensorData::road_marking() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.road_marking)
  return road_marking_;
}

// optional .osi3.DetectedEntityHeader lane_boundary_header = 20;
inline bool SensorData::has_lane_boundary_header() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SensorData::set_has_lane_boundary_header() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SensorData::clear_has_lane_boundary_header() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SensorData::clear_lane_boundary_header() {
  if (lane_boundary_header_ != NULL) lane_boundary_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_lane_boundary_header();
}
inline const ::osi3::DetectedEntityHeader& SensorData::lane_boundary_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.lane_boundary_header)
  return lane_boundary_header_ != NULL ? *lane_boundary_header_ : *default_instance_->lane_boundary_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::mutable_lane_boundary_header() {
  set_has_lane_boundary_header();
  if (lane_boundary_header_ == NULL) {
    lane_boundary_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.lane_boundary_header)
  return lane_boundary_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::release_lane_boundary_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.lane_boundary_header)
  clear_has_lane_boundary_header();
  ::osi3::DetectedEntityHeader* temp = lane_boundary_header_;
  lane_boundary_header_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_lane_boundary_header(::osi3::DetectedEntityHeader* lane_boundary_header) {
  delete lane_boundary_header_;
  lane_boundary_header_ = lane_boundary_header;
  if (lane_boundary_header) {
    set_has_lane_boundary_header();
  } else {
    clear_has_lane_boundary_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.lane_boundary_header)
}

// repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
inline int SensorData::lane_boundary_size() const {
  return lane_boundary_.size();
}
inline void SensorData::clear_lane_boundary() {
  lane_boundary_.Clear();
}
inline const ::osi3::DetectedLaneBoundary& SensorData::lane_boundary(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.lane_boundary)
  return lane_boundary_.Get(index);
}
inline ::osi3::DetectedLaneBoundary* SensorData::mutable_lane_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.lane_boundary)
  return lane_boundary_.Mutable(index);
}
inline ::osi3::DetectedLaneBoundary* SensorData::add_lane_boundary() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.lane_boundary)
  return lane_boundary_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLaneBoundary >*
SensorData::mutable_lane_boundary() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.lane_boundary)
  return &lane_boundary_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLaneBoundary >&
SensorData::lane_boundary() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.lane_boundary)
  return lane_boundary_;
}

// optional .osi3.DetectedEntityHeader lane_header = 22;
inline bool SensorData::has_lane_header() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SensorData::set_has_lane_header() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SensorData::clear_has_lane_header() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SensorData::clear_lane_header() {
  if (lane_header_ != NULL) lane_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_lane_header();
}
inline const ::osi3::DetectedEntityHeader& SensorData::lane_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.lane_header)
  return lane_header_ != NULL ? *lane_header_ : *default_instance_->lane_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::mutable_lane_header() {
  set_has_lane_header();
  if (lane_header_ == NULL) {
    lane_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.lane_header)
  return lane_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::release_lane_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.lane_header)
  clear_has_lane_header();
  ::osi3::DetectedEntityHeader* temp = lane_header_;
  lane_header_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_lane_header(::osi3::DetectedEntityHeader* lane_header) {
  delete lane_header_;
  lane_header_ = lane_header;
  if (lane_header) {
    set_has_lane_header();
  } else {
    clear_has_lane_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.lane_header)
}

// repeated .osi3.DetectedLane lane = 23;
inline int SensorData::lane_size() const {
  return lane_.size();
}
inline void SensorData::clear_lane() {
  lane_.Clear();
}
inline const ::osi3::DetectedLane& SensorData::lane(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.lane)
  return lane_.Get(index);
}
inline ::osi3::DetectedLane* SensorData::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.lane)
  return lane_.Mutable(index);
}
inline ::osi3::DetectedLane* SensorData::add_lane() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.lane)
  return lane_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLane >*
SensorData::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.lane)
  return &lane_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLane >&
SensorData::lane() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.lane)
  return lane_;
}

// optional .osi3.DetectedEntityHeader occupant_header = 24;
inline bool SensorData::has_occupant_header() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SensorData::set_has_occupant_header() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SensorData::clear_has_occupant_header() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SensorData::clear_occupant_header() {
  if (occupant_header_ != NULL) occupant_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_occupant_header();
}
inline const ::osi3::DetectedEntityHeader& SensorData::occupant_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.occupant_header)
  return occupant_header_ != NULL ? *occupant_header_ : *default_instance_->occupant_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::mutable_occupant_header() {
  set_has_occupant_header();
  if (occupant_header_ == NULL) {
    occupant_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.occupant_header)
  return occupant_header_;
}
inline ::osi3::DetectedEntityHeader* SensorData::release_occupant_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.occupant_header)
  clear_has_occupant_header();
  ::osi3::DetectedEntityHeader* temp = occupant_header_;
  occupant_header_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_occupant_header(::osi3::DetectedEntityHeader* occupant_header) {
  delete occupant_header_;
  occupant_header_ = occupant_header;
  if (occupant_header) {
    set_has_occupant_header();
  } else {
    clear_has_occupant_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.occupant_header)
}

// repeated .osi3.DetectedOccupant occupant = 25;
inline int SensorData::occupant_size() const {
  return occupant_.size();
}
inline void SensorData::clear_occupant() {
  occupant_.Clear();
}
inline const ::osi3::DetectedOccupant& SensorData::occupant(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.occupant)
  return occupant_.Get(index);
}
inline ::osi3::DetectedOccupant* SensorData::mutable_occupant(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.occupant)
  return occupant_.Mutable(index);
}
inline ::osi3::DetectedOccupant* SensorData::add_occupant() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.occupant)
  return occupant_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::DetectedOccupant >*
SensorData::mutable_occupant() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.occupant)
  return &occupant_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedOccupant >&
SensorData::occupant() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.occupant)
  return occupant_;
}

// optional .osi3.FeatureData feature_data = 26;
inline bool SensorData::has_feature_data() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SensorData::set_has_feature_data() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SensorData::clear_has_feature_data() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SensorData::clear_feature_data() {
  if (feature_data_ != NULL) feature_data_->::osi3::FeatureData::Clear();
  clear_has_feature_data();
}
inline const ::osi3::FeatureData& SensorData::feature_data() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.feature_data)
  return feature_data_ != NULL ? *feature_data_ : *default_instance_->feature_data_;
}
inline ::osi3::FeatureData* SensorData::mutable_feature_data() {
  set_has_feature_data();
  if (feature_data_ == NULL) {
    feature_data_ = new ::osi3::FeatureData;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.feature_data)
  return feature_data_;
}
inline ::osi3::FeatureData* SensorData::release_feature_data() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.feature_data)
  clear_has_feature_data();
  ::osi3::FeatureData* temp = feature_data_;
  feature_data_ = NULL;
  return temp;
}
inline void SensorData::set_allocated_feature_data(::osi3::FeatureData* feature_data) {
  delete feature_data_;
  feature_data_ = feature_data;
  if (feature_data) {
    set_has_feature_data();
  } else {
    clear_has_feature_data();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.feature_data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::osi3::DetectedEntityHeader_DataQualifier> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::DetectedEntityHeader_DataQualifier>() {
  return ::osi3::DetectedEntityHeader_DataQualifier_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osi_5fsensordata_2eproto__INCLUDED
