// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_trafficlight.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_trafficlight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* TrafficLight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLight_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficLight_Classification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLight_Classification_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TrafficLight_Classification_Color_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TrafficLight_Classification_Icon_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TrafficLight_Classification_Mode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5ftrafficlight_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5ftrafficlight_2eproto() {
  protobuf_AddDesc_osi_5ftrafficlight_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_trafficlight.proto");
  GOOGLE_CHECK(file != NULL);
  TrafficLight_descriptor_ = file->message_type(0);
  static const int TrafficLight_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, classification_),
  };
  TrafficLight_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficLight_descriptor_,
      TrafficLight::default_instance_,
      TrafficLight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrafficLight),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _internal_metadata_),
      -1);
  TrafficLight_Classification_descriptor_ = TrafficLight_descriptor_->nested_type(0);
  static const int TrafficLight_Classification_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight_Classification, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight_Classification, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight_Classification, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight_Classification, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight_Classification, assigned_lane_id_),
  };
  TrafficLight_Classification_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficLight_Classification_descriptor_,
      TrafficLight_Classification::default_instance_,
      TrafficLight_Classification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight_Classification, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrafficLight_Classification),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight_Classification, _internal_metadata_),
      -1);
  TrafficLight_Classification_Color_descriptor_ = TrafficLight_Classification_descriptor_->enum_type(0);
  TrafficLight_Classification_Icon_descriptor_ = TrafficLight_Classification_descriptor_->enum_type(1);
  TrafficLight_Classification_Mode_descriptor_ = TrafficLight_Classification_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5ftrafficlight_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficLight_descriptor_, &TrafficLight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficLight_Classification_descriptor_, &TrafficLight_Classification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5ftrafficlight_2eproto() {
  delete TrafficLight::default_instance_;
  delete TrafficLight_reflection_;
  delete TrafficLight_Classification::default_instance_;
  delete TrafficLight_Classification_reflection_;
}

void protobuf_AddDesc_osi_5ftrafficlight_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5ftrafficlight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::osi3::protobuf_AddDesc_osi_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026osi_trafficlight.proto\022\004osi3\032\020osi_comm"
    "on.proto\"\304\t\n\014TrafficLight\022\034\n\002id\030\001 \001(\0132\020."
    "osi3.Identifier\022\"\n\004base\030\002 \001(\0132\024.osi3.Bas"
    "eStationary\0229\n\016classification\030\003 \001(\0132!.os"
    "i3.TrafficLight.Classification\032\266\010\n\016Class"
    "ification\0226\n\005color\030\001 \001(\0162\'.osi3.TrafficL"
    "ight.Classification.Color\0224\n\004icon\030\002 \001(\0162"
    "&.osi3.TrafficLight.Classification.Icon\022"
    "4\n\004mode\030\003 \001(\0162&.osi3.TrafficLight.Classi"
    "fication.Mode\022\017\n\007counter\030\004 \001(\001\022*\n\020assign"
    "ed_lane_id\030\005 \003(\0132\020.osi3.Identifier\"~\n\005Co"
    "lor\022\021\n\rCOLOR_UNKNOWN\020\000\022\017\n\013COLOR_OTHER\020\001\022"
    "\r\n\tCOLOR_RED\020\002\022\020\n\014COLOR_YELLOW\020\003\022\017\n\013COLO"
    "R_GREEN\020\004\022\016\n\nCOLOR_BLUE\020\005\022\017\n\013COLOR_WHITE"
    "\020\006\"\321\004\n\004Icon\022\020\n\014ICON_UNKNOWN\020\000\022\016\n\nICON_OT"
    "HER\020\001\022\r\n\tICON_NONE\020\002\022\035\n\031ICON_ARROW_STRAI"
    "GHT_AHEAD\020\003\022\023\n\017ICON_ARROW_LEFT\020\004\022\030\n\024ICON"
    "_ARROW_DIAG_LEFT\020\005\022\"\n\036ICON_ARROW_STRAIGH"
    "T_AHEAD_LEFT\020\006\022\024\n\020ICON_ARROW_RIGHT\020\007\022\031\n\025"
    "ICON_ARROW_DIAG_RIGHT\020\010\022#\n\037ICON_ARROW_ST"
    "RAIGHT_AHEAD_RIGHT\020\t\022\031\n\025ICON_ARROW_LEFT_"
    "RIGHT\020\n\022\023\n\017ICON_ARROW_DOWN\020\013\022\030\n\024ICON_ARR"
    "OW_DOWN_LEFT\020\014\022\031\n\025ICON_ARROW_DOWN_RIGHT\020"
    "\r\022\024\n\020ICON_ARROW_CROSS\020\016\022\023\n\017ICON_PEDESTRI"
    "AN\020\017\022\r\n\tICON_WALK\020\020\022\022\n\016ICON_DONT_WALK\020\021\022"
    "\020\n\014ICON_BICYCLE\020\022\022\037\n\033ICON_PEDESTRIAN_AND"
    "_BICYCLE\020\023\022\032\n\026ICON_COUNTDOWN_SECONDS\020\024\022\032"
    "\n\026ICON_COUNTDOWN_PERCENT\020\025\022\r\n\tICON_TRAM\020"
    "\026\022\014\n\010ICON_BUS\020\027\022\025\n\021ICON_BUS_AND_TRAM\020\030\"o"
    "\n\004Mode\022\020\n\014MODE_UNKNOWN\020\000\022\016\n\nMODE_OTHER\020\001"
    "\022\014\n\010MODE_OFF\020\002\022\021\n\rMODE_CONSTANT\020\003\022\021\n\rMOD"
    "E_FLASHING\020\004\022\021\n\rMODE_COUNTING\020\005B\002H\001", 1275);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_trafficlight.proto", &protobuf_RegisterTypes);
  TrafficLight::default_instance_ = new TrafficLight();
  TrafficLight_Classification::default_instance_ = new TrafficLight_Classification();
  TrafficLight::default_instance_->InitAsDefaultInstance();
  TrafficLight_Classification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5ftrafficlight_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5ftrafficlight_2eproto {
  StaticDescriptorInitializer_osi_5ftrafficlight_2eproto() {
    protobuf_AddDesc_osi_5ftrafficlight_2eproto();
  }
} static_descriptor_initializer_osi_5ftrafficlight_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* TrafficLight_Classification_Color_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLight_Classification_Color_descriptor_;
}
bool TrafficLight_Classification_Color_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_UNKNOWN;
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_OTHER;
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_RED;
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_YELLOW;
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_GREEN;
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_BLUE;
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_WHITE;
const TrafficLight_Classification_Color TrafficLight_Classification::Color_MIN;
const TrafficLight_Classification_Color TrafficLight_Classification::Color_MAX;
const int TrafficLight_Classification::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLight_Classification_Icon_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLight_Classification_Icon_descriptor_;
}
bool TrafficLight_Classification_Icon_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_UNKNOWN;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_OTHER;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_NONE;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_LEFT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DIAG_LEFT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD_LEFT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_RIGHT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DIAG_RIGHT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD_RIGHT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_LEFT_RIGHT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN_LEFT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN_RIGHT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_CROSS;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_PEDESTRIAN;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_WALK;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_DONT_WALK;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BICYCLE;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_PEDESTRIAN_AND_BICYCLE;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_COUNTDOWN_SECONDS;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_COUNTDOWN_PERCENT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_TRAM;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BUS;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BUS_AND_TRAM;
const TrafficLight_Classification_Icon TrafficLight_Classification::Icon_MIN;
const TrafficLight_Classification_Icon TrafficLight_Classification::Icon_MAX;
const int TrafficLight_Classification::Icon_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLight_Classification_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLight_Classification_Mode_descriptor_;
}
bool TrafficLight_Classification_Mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Classification_Mode TrafficLight_Classification::MODE_UNKNOWN;
const TrafficLight_Classification_Mode TrafficLight_Classification::MODE_OTHER;
const TrafficLight_Classification_Mode TrafficLight_Classification::MODE_OFF;
const TrafficLight_Classification_Mode TrafficLight_Classification::MODE_CONSTANT;
const TrafficLight_Classification_Mode TrafficLight_Classification::MODE_FLASHING;
const TrafficLight_Classification_Mode TrafficLight_Classification::MODE_COUNTING;
const TrafficLight_Classification_Mode TrafficLight_Classification::Mode_MIN;
const TrafficLight_Classification_Mode TrafficLight_Classification::Mode_MAX;
const int TrafficLight_Classification::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight_Classification::kColorFieldNumber;
const int TrafficLight_Classification::kIconFieldNumber;
const int TrafficLight_Classification::kModeFieldNumber;
const int TrafficLight_Classification::kCounterFieldNumber;
const int TrafficLight_Classification::kAssignedLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight_Classification::TrafficLight_Classification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficLight.Classification)
}

void TrafficLight_Classification::InitAsDefaultInstance() {
}

TrafficLight_Classification::TrafficLight_Classification(const TrafficLight_Classification& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficLight.Classification)
}

void TrafficLight_Classification::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0;
  icon_ = 0;
  mode_ = 0;
  counter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficLight_Classification::~TrafficLight_Classification() {
  // @@protoc_insertion_point(destructor:osi3.TrafficLight.Classification)
  SharedDtor();
}

void TrafficLight_Classification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrafficLight_Classification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight_Classification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLight_Classification_descriptor_;
}

const TrafficLight_Classification& TrafficLight_Classification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5ftrafficlight_2eproto();
  return *default_instance_;
}

TrafficLight_Classification* TrafficLight_Classification::default_instance_ = NULL;

TrafficLight_Classification* TrafficLight_Classification::New(::google::protobuf::Arena* arena) const {
  TrafficLight_Classification* n = new TrafficLight_Classification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficLight.Classification)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrafficLight_Classification, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrafficLight_Classification*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(color_, counter_);
    mode_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  assigned_lane_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrafficLight_Classification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficLight.Classification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.TrafficLight.Classification.Color color = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::TrafficLight_Classification_Color_IsValid(value)) {
            set_color(static_cast< ::osi3::TrafficLight_Classification_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_icon;
        break;
      }

      // optional .osi3.TrafficLight.Classification.Icon icon = 2;
      case 2: {
        if (tag == 16) {
         parse_icon:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::TrafficLight_Classification_Icon_IsValid(value)) {
            set_icon(static_cast< ::osi3::TrafficLight_Classification_Icon >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional .osi3.TrafficLight.Classification.Mode mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::TrafficLight_Classification_Mode_IsValid(value)) {
            set_mode(static_cast< ::osi3::TrafficLight_Classification_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_counter;
        break;
      }

      // optional double counter = 4;
      case 4: {
        if (tag == 33) {
         parse_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &counter_)));
          set_has_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_assigned_lane_id;
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 5;
      case 5: {
        if (tag == 42) {
         parse_assigned_lane_id:
          DO_(input->IncrementRecursionDepth());
         parse_loop_assigned_lane_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_assigned_lane_id;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficLight.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficLight.Classification)
  return false;
#undef DO_
}

void TrafficLight_Classification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficLight.Classification)
  // optional .osi3.TrafficLight.Classification.Color color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // optional .osi3.TrafficLight.Classification.Icon icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->icon(), output);
  }

  // optional .osi3.TrafficLight.Classification.Mode mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // optional double counter = 4;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->counter(), output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned int i = 0, n = this->assigned_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->assigned_lane_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficLight.Classification)
}

::google::protobuf::uint8* TrafficLight_Classification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficLight.Classification)
  // optional .osi3.TrafficLight.Classification.Color color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // optional .osi3.TrafficLight.Classification.Icon icon = 2;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->icon(), target);
  }

  // optional .osi3.TrafficLight.Classification.Mode mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // optional double counter = 4;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->counter(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned int i = 0, n = this->assigned_lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->assigned_lane_id(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficLight.Classification)
  return target;
}

int TrafficLight_Classification::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficLight.Classification)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .osi3.TrafficLight.Classification.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional .osi3.TrafficLight.Classification.Icon icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->icon());
    }

    // optional .osi3.TrafficLight.Classification.Mode mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional double counter = 4;
    if (has_counter()) {
      total_size += 1 + 8;
    }

  }
  // repeated .osi3.Identifier assigned_lane_id = 5;
  total_size += 1 * this->assigned_lane_id_size();
  for (int i = 0; i < this->assigned_lane_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assigned_lane_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight_Classification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficLight.Classification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrafficLight_Classification* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight_Classification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficLight.Classification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficLight.Classification)
    MergeFrom(*source);
  }
}

void TrafficLight_Classification::MergeFrom(const TrafficLight_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficLight.Classification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_counter()) {
      set_counter(from.counter());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrafficLight_Classification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficLight.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight_Classification::CopyFrom(const TrafficLight_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficLight.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight_Classification::IsInitialized() const {

  return true;
}

void TrafficLight_Classification::Swap(TrafficLight_Classification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight_Classification::InternalSwap(TrafficLight_Classification* other) {
  std::swap(color_, other->color_);
  std::swap(icon_, other->icon_);
  std::swap(mode_, other->mode_);
  std::swap(counter_, other->counter_);
  assigned_lane_id_.UnsafeArenaSwap(&other->assigned_lane_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight_Classification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLight_Classification_descriptor_;
  metadata.reflection = TrafficLight_Classification_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kIdFieldNumber;
const int TrafficLight::kBaseFieldNumber;
const int TrafficLight::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficLight)
}

void TrafficLight::InitAsDefaultInstance() {
  id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  base_ = const_cast< ::osi3::BaseStationary*>(&::osi3::BaseStationary::default_instance());
  classification_ = const_cast< ::osi3::TrafficLight_Classification*>(&::osi3::TrafficLight_Classification::default_instance());
}

TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficLight)
}

void TrafficLight::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  base_ = NULL;
  classification_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:osi3.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete base_;
    delete classification_;
  }
}

void TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLight_descriptor_;
}

const TrafficLight& TrafficLight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5ftrafficlight_2eproto();
  return *default_instance_;
}

TrafficLight* TrafficLight::default_instance_ = NULL;

TrafficLight* TrafficLight::New(::google::protobuf::Arena* arena) const {
  TrafficLight* n = new TrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficLight)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      if (id_ != NULL) id_->::osi3::Identifier::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
    }
    if (has_classification()) {
      if (classification_ != NULL) classification_->::osi3::TrafficLight_Classification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Identifier id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .osi3.BaseStationary base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_classification;
        break;
      }

      // optional .osi3.TrafficLight.Classification classification = 3;
      case 3: {
        if (tag == 26) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficLight)
  // optional .osi3.Identifier id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .osi3.BaseStationary base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // optional .osi3.TrafficLight.Classification classification = 3;
  if (has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->classification_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficLight)
  // optional .osi3.Identifier id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // optional .osi3.BaseStationary base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->base_, false, target);
  }

  // optional .osi3.TrafficLight.Classification classification = 3;
  if (has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->classification_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficLight)
  return target;
}

int TrafficLight::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficLight)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .osi3.Identifier id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .osi3.BaseStationary base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_);
    }

    // optional .osi3.TrafficLight.Classification classification = 3;
    if (has_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->classification_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficLight)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrafficLight* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficLight)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::osi3::Identifier::MergeFrom(from.id());
    }
    if (from.has_base()) {
      mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
    }
    if (from.has_classification()) {
      mutable_classification()->::osi3::TrafficLight_Classification::MergeFrom(from.classification());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {

  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  std::swap(id_, other->id_);
  std::swap(base_, other->base_);
  std::swap(classification_, other->classification_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLight_descriptor_;
  metadata.reflection = TrafficLight_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLight_Classification

// optional .osi3.TrafficLight.Classification.Color color = 1;
bool TrafficLight_Classification::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLight_Classification::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLight_Classification::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLight_Classification::clear_color() {
  color_ = 0;
  clear_has_color();
}
 ::osi3::TrafficLight_Classification_Color TrafficLight_Classification::color() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.Classification.color)
  return static_cast< ::osi3::TrafficLight_Classification_Color >(color_);
}
 void TrafficLight_Classification::set_color(::osi3::TrafficLight_Classification_Color value) {
  assert(::osi3::TrafficLight_Classification_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficLight.Classification.color)
}

// optional .osi3.TrafficLight.Classification.Icon icon = 2;
bool TrafficLight_Classification::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLight_Classification::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLight_Classification::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLight_Classification::clear_icon() {
  icon_ = 0;
  clear_has_icon();
}
 ::osi3::TrafficLight_Classification_Icon TrafficLight_Classification::icon() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.Classification.icon)
  return static_cast< ::osi3::TrafficLight_Classification_Icon >(icon_);
}
 void TrafficLight_Classification::set_icon(::osi3::TrafficLight_Classification_Icon value) {
  assert(::osi3::TrafficLight_Classification_Icon_IsValid(value));
  set_has_icon();
  icon_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficLight.Classification.icon)
}

// optional .osi3.TrafficLight.Classification.Mode mode = 3;
bool TrafficLight_Classification::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLight_Classification::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLight_Classification::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLight_Classification::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 ::osi3::TrafficLight_Classification_Mode TrafficLight_Classification::mode() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.Classification.mode)
  return static_cast< ::osi3::TrafficLight_Classification_Mode >(mode_);
}
 void TrafficLight_Classification::set_mode(::osi3::TrafficLight_Classification_Mode value) {
  assert(::osi3::TrafficLight_Classification_Mode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficLight.Classification.mode)
}

// optional double counter = 4;
bool TrafficLight_Classification::has_counter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLight_Classification::set_has_counter() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLight_Classification::clear_has_counter() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLight_Classification::clear_counter() {
  counter_ = 0;
  clear_has_counter();
}
 double TrafficLight_Classification::counter() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.Classification.counter)
  return counter_;
}
 void TrafficLight_Classification::set_counter(double value) {
  set_has_counter();
  counter_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficLight.Classification.counter)
}

// repeated .osi3.Identifier assigned_lane_id = 5;
int TrafficLight_Classification::assigned_lane_id_size() const {
  return assigned_lane_id_.size();
}
void TrafficLight_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
const ::osi3::Identifier& TrafficLight_Classification::assigned_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.Classification.assigned_lane_id)
  return assigned_lane_id_.Get(index);
}
::osi3::Identifier* TrafficLight_Classification::mutable_assigned_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficLight.Classification.assigned_lane_id)
  return assigned_lane_id_.Mutable(index);
}
::osi3::Identifier* TrafficLight_Classification::add_assigned_lane_id() {
  // @@protoc_insertion_point(field_add:osi3.TrafficLight.Classification.assigned_lane_id)
  return assigned_lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
TrafficLight_Classification::mutable_assigned_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.TrafficLight.Classification.assigned_lane_id)
  return &assigned_lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
TrafficLight_Classification::assigned_lane_id() const {
  // @@protoc_insertion_point(field_list:osi3.TrafficLight.Classification.assigned_lane_id)
  return assigned_lane_id_;
}

// -------------------------------------------------------------------

// TrafficLight

// optional .osi3.Identifier id = 1;
bool TrafficLight::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLight::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLight::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLight::clear_id() {
  if (id_ != NULL) id_->::osi3::Identifier::Clear();
  clear_has_id();
}
const ::osi3::Identifier& TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::osi3::Identifier* TrafficLight::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.TrafficLight.id)
  return id_;
}
::osi3::Identifier* TrafficLight::release_id() {
  // @@protoc_insertion_point(field_release:osi3.TrafficLight.id)
  clear_has_id();
  ::osi3::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
void TrafficLight::set_allocated_id(::osi3::Identifier* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficLight.id)
}

// optional .osi3.BaseStationary base = 2;
bool TrafficLight::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLight::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLight::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLight::clear_base() {
  if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
  clear_has_base();
}
const ::osi3::BaseStationary& TrafficLight::base() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::osi3::BaseStationary* TrafficLight::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::osi3::BaseStationary;
  }
  // @@protoc_insertion_point(field_mutable:osi3.TrafficLight.base)
  return base_;
}
::osi3::BaseStationary* TrafficLight::release_base() {
  // @@protoc_insertion_point(field_release:osi3.TrafficLight.base)
  clear_has_base();
  ::osi3::BaseStationary* temp = base_;
  base_ = NULL;
  return temp;
}
void TrafficLight::set_allocated_base(::osi3::BaseStationary* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficLight.base)
}

// optional .osi3.TrafficLight.Classification classification = 3;
bool TrafficLight::has_classification() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLight::set_has_classification() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLight::clear_has_classification() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLight::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::TrafficLight_Classification::Clear();
  clear_has_classification();
}
const ::osi3::TrafficLight_Classification& TrafficLight::classification() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
::osi3::TrafficLight_Classification* TrafficLight::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::TrafficLight_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.TrafficLight.classification)
  return classification_;
}
::osi3::TrafficLight_Classification* TrafficLight::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.TrafficLight.classification)
  clear_has_classification();
  ::osi3::TrafficLight_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
void TrafficLight::set_allocated_classification(::osi3::TrafficLight_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficLight.classification)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
