// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_environment.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_environment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* EnvironmentalConditions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnvironmentalConditions_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnvironmentalConditions_TimeOfDay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnvironmentalConditions_TimeOfDay_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EnvironmentalConditions_Precipitation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnvironmentalConditions_Fog_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnvironmentalConditions_AmbientIllumination_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5fenvironment_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5fenvironment_2eproto() {
  protobuf_AddDesc_osi_5fenvironment_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_environment.proto");
  GOOGLE_CHECK(file != NULL);
  EnvironmentalConditions_descriptor_ = file->message_type(0);
  static const int EnvironmentalConditions_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentalConditions, ambient_illumination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentalConditions, time_of_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentalConditions, atmospheric_pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentalConditions, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentalConditions, relative_humidity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentalConditions, precipitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentalConditions, fog_),
  };
  EnvironmentalConditions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnvironmentalConditions_descriptor_,
      EnvironmentalConditions::default_instance_,
      EnvironmentalConditions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentalConditions, _has_bits_[0]),
      -1,
      -1,
      sizeof(EnvironmentalConditions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentalConditions, _internal_metadata_),
      -1);
  EnvironmentalConditions_TimeOfDay_descriptor_ = EnvironmentalConditions_descriptor_->nested_type(0);
  static const int EnvironmentalConditions_TimeOfDay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentalConditions_TimeOfDay, seconds_since_midnight_),
  };
  EnvironmentalConditions_TimeOfDay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnvironmentalConditions_TimeOfDay_descriptor_,
      EnvironmentalConditions_TimeOfDay::default_instance_,
      EnvironmentalConditions_TimeOfDay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentalConditions_TimeOfDay, _has_bits_[0]),
      -1,
      -1,
      sizeof(EnvironmentalConditions_TimeOfDay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentalConditions_TimeOfDay, _internal_metadata_),
      -1);
  EnvironmentalConditions_Precipitation_descriptor_ = EnvironmentalConditions_descriptor_->enum_type(0);
  EnvironmentalConditions_Fog_descriptor_ = EnvironmentalConditions_descriptor_->enum_type(1);
  EnvironmentalConditions_AmbientIllumination_descriptor_ = EnvironmentalConditions_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5fenvironment_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnvironmentalConditions_descriptor_, &EnvironmentalConditions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnvironmentalConditions_TimeOfDay_descriptor_, &EnvironmentalConditions_TimeOfDay::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5fenvironment_2eproto() {
  delete EnvironmentalConditions::default_instance_;
  delete EnvironmentalConditions_reflection_;
  delete EnvironmentalConditions_TimeOfDay::default_instance_;
  delete EnvironmentalConditions_TimeOfDay_reflection_;
}

void protobuf_AddDesc_osi_5fenvironment_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5fenvironment_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025osi_environment.proto\022\004osi3\"\354\t\n\027Enviro"
    "nmentalConditions\022O\n\024ambient_illuminatio"
    "n\030\001 \001(\01621.osi3.EnvironmentalConditions.A"
    "mbientIllumination\022<\n\013time_of_day\030\002 \001(\0132"
    "\'.osi3.EnvironmentalConditions.TimeOfDay"
    "\022\034\n\024atmospheric_pressure\030\003 \001(\001\022\023\n\013temper"
    "ature\030\004 \001(\001\022\031\n\021relative_humidity\030\005 \001(\001\022B"
    "\n\rprecipitation\030\006 \001(\0162+.osi3.Environment"
    "alConditions.Precipitation\022.\n\003fog\030\007 \001(\0162"
    "!.osi3.EnvironmentalConditions.Fog\032+\n\tTi"
    "meOfDay\022\036\n\026seconds_since_midnight\030\001 \001(\r\""
    "\200\002\n\rPrecipitation\022\031\n\025PRECIPITATION_UNKNO"
    "WN\020\000\022\027\n\023PRECIPITATION_OTHER\020\001\022\026\n\022PRECIPI"
    "TATION_NONE\020\002\022\034\n\030PRECIPITATION_VERY_LIGH"
    "T\020\003\022\027\n\023PRECIPITATION_LIGHT\020\004\022\032\n\026PRECIPIT"
    "ATION_MODERATE\020\005\022\027\n\023PRECIPITATION_HEAVY\020"
    "\006\022\034\n\030PRECIPITATION_VERY_HEAVY\020\007\022\031\n\025PRECI"
    "PITATION_EXTREME\020\010\"\314\001\n\003Fog\022\016\n\nFOG_UNKOWN"
    "\020\000\022\r\n\tFOG_OTHER\020\001\022\034\n\030FOG_EXCELLENT_VISIB"
    "ILITY\020\002\022\027\n\023FOG_GOOD_VISIBILITY\020\003\022\033\n\027FOG_"
    "MODERATE_VISIBILITY\020\004\022\027\n\023FOG_POOR_VISIBI"
    "LITY\020\005\022\014\n\010FOG_MIST\020\006\022\r\n\tFOG_LIGHT\020\007\022\r\n\tF"
    "OG_THICK\020\010\022\r\n\tFOG_DENSE\020\t\"\200\003\n\023AmbientIll"
    "umination\022 \n\034AMBIENT_ILLUMINATION_UNKNOW"
    "N\020\000\022\036\n\032AMBIENT_ILLUMINATION_OTHER\020\001\022\037\n\033A"
    "MBIENT_ILLUMINATION_LEVEL1\020\002\022\037\n\033AMBIENT_"
    "ILLUMINATION_LEVEL2\020\003\022\037\n\033AMBIENT_ILLUMIN"
    "ATION_LEVEL3\020\004\022\037\n\033AMBIENT_ILLUMINATION_L"
    "EVEL4\020\005\022\037\n\033AMBIENT_ILLUMINATION_LEVEL5\020\006"
    "\022\037\n\033AMBIENT_ILLUMINATION_LEVEL6\020\007\022\037\n\033AMB"
    "IENT_ILLUMINATION_LEVEL7\020\010\022\037\n\033AMBIENT_IL"
    "LUMINATION_LEVEL8\020\t\022\037\n\033AMBIENT_ILLUMINAT"
    "ION_LEVEL9\020\nB\002H\001", 1296);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_environment.proto", &protobuf_RegisterTypes);
  EnvironmentalConditions::default_instance_ = new EnvironmentalConditions();
  EnvironmentalConditions_TimeOfDay::default_instance_ = new EnvironmentalConditions_TimeOfDay();
  EnvironmentalConditions::default_instance_->InitAsDefaultInstance();
  EnvironmentalConditions_TimeOfDay::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5fenvironment_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5fenvironment_2eproto {
  StaticDescriptorInitializer_osi_5fenvironment_2eproto() {
    protobuf_AddDesc_osi_5fenvironment_2eproto();
  }
} static_descriptor_initializer_osi_5fenvironment_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* EnvironmentalConditions_Precipitation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentalConditions_Precipitation_descriptor_;
}
bool EnvironmentalConditions_Precipitation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_UNKNOWN;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_OTHER;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_NONE;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_VERY_LIGHT;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_LIGHT;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_MODERATE;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_HEAVY;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_VERY_HEAVY;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_EXTREME;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::Precipitation_MIN;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::Precipitation_MAX;
const int EnvironmentalConditions::Precipitation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnvironmentalConditions_Fog_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentalConditions_Fog_descriptor_;
}
bool EnvironmentalConditions_Fog_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_UNKOWN;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_OTHER;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_EXCELLENT_VISIBILITY;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_GOOD_VISIBILITY;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_MODERATE_VISIBILITY;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_POOR_VISIBILITY;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_MIST;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_LIGHT;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_THICK;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_DENSE;
const EnvironmentalConditions_Fog EnvironmentalConditions::Fog_MIN;
const EnvironmentalConditions_Fog EnvironmentalConditions::Fog_MAX;
const int EnvironmentalConditions::Fog_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnvironmentalConditions_AmbientIllumination_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentalConditions_AmbientIllumination_descriptor_;
}
bool EnvironmentalConditions_AmbientIllumination_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_UNKNOWN;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_OTHER;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL1;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL2;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL3;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL4;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL5;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL6;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL7;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL8;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL9;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AmbientIllumination_MIN;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AmbientIllumination_MAX;
const int EnvironmentalConditions::AmbientIllumination_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvironmentalConditions_TimeOfDay::kSecondsSinceMidnightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.EnvironmentalConditions.TimeOfDay)
}

void EnvironmentalConditions_TimeOfDay::InitAsDefaultInstance() {
}

EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay(const EnvironmentalConditions_TimeOfDay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions.TimeOfDay)
}

void EnvironmentalConditions_TimeOfDay::SharedCtor() {
  _cached_size_ = 0;
  seconds_since_midnight_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvironmentalConditions_TimeOfDay::~EnvironmentalConditions_TimeOfDay() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions.TimeOfDay)
  SharedDtor();
}

void EnvironmentalConditions_TimeOfDay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnvironmentalConditions_TimeOfDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvironmentalConditions_TimeOfDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentalConditions_TimeOfDay_descriptor_;
}

const EnvironmentalConditions_TimeOfDay& EnvironmentalConditions_TimeOfDay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fenvironment_2eproto();
  return *default_instance_;
}

EnvironmentalConditions_TimeOfDay* EnvironmentalConditions_TimeOfDay::default_instance_ = NULL;

EnvironmentalConditions_TimeOfDay* EnvironmentalConditions_TimeOfDay::New(::google::protobuf::Arena* arena) const {
  EnvironmentalConditions_TimeOfDay* n = new EnvironmentalConditions_TimeOfDay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnvironmentalConditions_TimeOfDay::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions.TimeOfDay)
  seconds_since_midnight_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EnvironmentalConditions_TimeOfDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.EnvironmentalConditions.TimeOfDay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seconds_since_midnight = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_since_midnight_)));
          set_has_seconds_since_midnight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.EnvironmentalConditions.TimeOfDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.EnvironmentalConditions.TimeOfDay)
  return false;
#undef DO_
}

void EnvironmentalConditions_TimeOfDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.EnvironmentalConditions.TimeOfDay)
  // optional uint32 seconds_since_midnight = 1;
  if (has_seconds_since_midnight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seconds_since_midnight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.EnvironmentalConditions.TimeOfDay)
}

::google::protobuf::uint8* EnvironmentalConditions_TimeOfDay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions.TimeOfDay)
  // optional uint32 seconds_since_midnight = 1;
  if (has_seconds_since_midnight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seconds_since_midnight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions.TimeOfDay)
  return target;
}

int EnvironmentalConditions_TimeOfDay::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions.TimeOfDay)
  int total_size = 0;

  // optional uint32 seconds_since_midnight = 1;
  if (has_seconds_since_midnight()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seconds_since_midnight());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvironmentalConditions_TimeOfDay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EnvironmentalConditions_TimeOfDay* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvironmentalConditions_TimeOfDay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.EnvironmentalConditions.TimeOfDay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.EnvironmentalConditions.TimeOfDay)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions_TimeOfDay::MergeFrom(const EnvironmentalConditions_TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds_since_midnight()) {
      set_seconds_since_midnight(from.seconds_since_midnight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EnvironmentalConditions_TimeOfDay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions_TimeOfDay::CopyFrom(const EnvironmentalConditions_TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_TimeOfDay::IsInitialized() const {

  return true;
}

void EnvironmentalConditions_TimeOfDay::Swap(EnvironmentalConditions_TimeOfDay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvironmentalConditions_TimeOfDay::InternalSwap(EnvironmentalConditions_TimeOfDay* other) {
  std::swap(seconds_since_midnight_, other->seconds_since_midnight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnvironmentalConditions_TimeOfDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnvironmentalConditions_TimeOfDay_descriptor_;
  metadata.reflection = EnvironmentalConditions_TimeOfDay_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvironmentalConditions::kAmbientIlluminationFieldNumber;
const int EnvironmentalConditions::kTimeOfDayFieldNumber;
const int EnvironmentalConditions::kAtmosphericPressureFieldNumber;
const int EnvironmentalConditions::kTemperatureFieldNumber;
const int EnvironmentalConditions::kRelativeHumidityFieldNumber;
const int EnvironmentalConditions::kPrecipitationFieldNumber;
const int EnvironmentalConditions::kFogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvironmentalConditions::EnvironmentalConditions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.EnvironmentalConditions)
}

void EnvironmentalConditions::InitAsDefaultInstance() {
  time_of_day_ = const_cast< ::osi3::EnvironmentalConditions_TimeOfDay*>(&::osi3::EnvironmentalConditions_TimeOfDay::default_instance());
}

EnvironmentalConditions::EnvironmentalConditions(const EnvironmentalConditions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions)
}

void EnvironmentalConditions::SharedCtor() {
  _cached_size_ = 0;
  ambient_illumination_ = 0;
  time_of_day_ = NULL;
  atmospheric_pressure_ = 0;
  temperature_ = 0;
  relative_humidity_ = 0;
  precipitation_ = 0;
  fog_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvironmentalConditions::~EnvironmentalConditions() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions)
  SharedDtor();
}

void EnvironmentalConditions::SharedDtor() {
  if (this != default_instance_) {
    delete time_of_day_;
  }
}

void EnvironmentalConditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvironmentalConditions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentalConditions_descriptor_;
}

const EnvironmentalConditions& EnvironmentalConditions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fenvironment_2eproto();
  return *default_instance_;
}

EnvironmentalConditions* EnvironmentalConditions::default_instance_ = NULL;

EnvironmentalConditions* EnvironmentalConditions::New(::google::protobuf::Arena* arena) const {
  EnvironmentalConditions* n = new EnvironmentalConditions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnvironmentalConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EnvironmentalConditions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EnvironmentalConditions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(atmospheric_pressure_, fog_);
    if (has_time_of_day()) {
      if (time_of_day_ != NULL) time_of_day_->::osi3::EnvironmentalConditions_TimeOfDay::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EnvironmentalConditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.EnvironmentalConditions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::EnvironmentalConditions_AmbientIllumination_IsValid(value)) {
            set_ambient_illumination(static_cast< ::osi3::EnvironmentalConditions_AmbientIllumination >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time_of_day;
        break;
      }

      // optional .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
      case 2: {
        if (tag == 18) {
         parse_time_of_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_of_day()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_atmospheric_pressure;
        break;
      }

      // optional double atmospheric_pressure = 3;
      case 3: {
        if (tag == 25) {
         parse_atmospheric_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &atmospheric_pressure_)));
          set_has_atmospheric_pressure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_temperature;
        break;
      }

      // optional double temperature = 4;
      case 4: {
        if (tag == 33) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_relative_humidity;
        break;
      }

      // optional double relative_humidity = 5;
      case 5: {
        if (tag == 41) {
         parse_relative_humidity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_humidity_)));
          set_has_relative_humidity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_precipitation;
        break;
      }

      // optional .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
      case 6: {
        if (tag == 48) {
         parse_precipitation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::EnvironmentalConditions_Precipitation_IsValid(value)) {
            set_precipitation(static_cast< ::osi3::EnvironmentalConditions_Precipitation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fog;
        break;
      }

      // optional .osi3.EnvironmentalConditions.Fog fog = 7;
      case 7: {
        if (tag == 56) {
         parse_fog:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::EnvironmentalConditions_Fog_IsValid(value)) {
            set_fog(static_cast< ::osi3::EnvironmentalConditions_Fog >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.EnvironmentalConditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.EnvironmentalConditions)
  return false;
#undef DO_
}

void EnvironmentalConditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.EnvironmentalConditions)
  // optional .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
  if (has_ambient_illumination()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ambient_illumination(), output);
  }

  // optional .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
  if (has_time_of_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->time_of_day_, output);
  }

  // optional double atmospheric_pressure = 3;
  if (has_atmospheric_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->atmospheric_pressure(), output);
  }

  // optional double temperature = 4;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->temperature(), output);
  }

  // optional double relative_humidity = 5;
  if (has_relative_humidity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->relative_humidity(), output);
  }

  // optional .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
  if (has_precipitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->precipitation(), output);
  }

  // optional .osi3.EnvironmentalConditions.Fog fog = 7;
  if (has_fog()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->fog(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.EnvironmentalConditions)
}

::google::protobuf::uint8* EnvironmentalConditions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions)
  // optional .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
  if (has_ambient_illumination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ambient_illumination(), target);
  }

  // optional .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
  if (has_time_of_day()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->time_of_day_, false, target);
  }

  // optional double atmospheric_pressure = 3;
  if (has_atmospheric_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->atmospheric_pressure(), target);
  }

  // optional double temperature = 4;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->temperature(), target);
  }

  // optional double relative_humidity = 5;
  if (has_relative_humidity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->relative_humidity(), target);
  }

  // optional .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
  if (has_precipitation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->precipitation(), target);
  }

  // optional .osi3.EnvironmentalConditions.Fog fog = 7;
  if (has_fog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->fog(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions)
  return target;
}

int EnvironmentalConditions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
    if (has_ambient_illumination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ambient_illumination());
    }

    // optional .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
    if (has_time_of_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_of_day_);
    }

    // optional double atmospheric_pressure = 3;
    if (has_atmospheric_pressure()) {
      total_size += 1 + 8;
    }

    // optional double temperature = 4;
    if (has_temperature()) {
      total_size += 1 + 8;
    }

    // optional double relative_humidity = 5;
    if (has_relative_humidity()) {
      total_size += 1 + 8;
    }

    // optional .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
    if (has_precipitation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->precipitation());
    }

    // optional .osi3.EnvironmentalConditions.Fog fog = 7;
    if (has_fog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fog());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvironmentalConditions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.EnvironmentalConditions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EnvironmentalConditions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvironmentalConditions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.EnvironmentalConditions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.EnvironmentalConditions)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions::MergeFrom(const EnvironmentalConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ambient_illumination()) {
      set_ambient_illumination(from.ambient_illumination());
    }
    if (from.has_time_of_day()) {
      mutable_time_of_day()->::osi3::EnvironmentalConditions_TimeOfDay::MergeFrom(from.time_of_day());
    }
    if (from.has_atmospheric_pressure()) {
      set_atmospheric_pressure(from.atmospheric_pressure());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_relative_humidity()) {
      set_relative_humidity(from.relative_humidity());
    }
    if (from.has_precipitation()) {
      set_precipitation(from.precipitation());
    }
    if (from.has_fog()) {
      set_fog(from.fog());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EnvironmentalConditions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.EnvironmentalConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions::CopyFrom(const EnvironmentalConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions::IsInitialized() const {

  return true;
}

void EnvironmentalConditions::Swap(EnvironmentalConditions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvironmentalConditions::InternalSwap(EnvironmentalConditions* other) {
  std::swap(ambient_illumination_, other->ambient_illumination_);
  std::swap(time_of_day_, other->time_of_day_);
  std::swap(atmospheric_pressure_, other->atmospheric_pressure_);
  std::swap(temperature_, other->temperature_);
  std::swap(relative_humidity_, other->relative_humidity_);
  std::swap(precipitation_, other->precipitation_);
  std::swap(fog_, other->fog_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnvironmentalConditions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnvironmentalConditions_descriptor_;
  metadata.reflection = EnvironmentalConditions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnvironmentalConditions_TimeOfDay

// optional uint32 seconds_since_midnight = 1;
bool EnvironmentalConditions_TimeOfDay::has_seconds_since_midnight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnvironmentalConditions_TimeOfDay::set_has_seconds_since_midnight() {
  _has_bits_[0] |= 0x00000001u;
}
void EnvironmentalConditions_TimeOfDay::clear_has_seconds_since_midnight() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnvironmentalConditions_TimeOfDay::clear_seconds_since_midnight() {
  seconds_since_midnight_ = 0u;
  clear_has_seconds_since_midnight();
}
 ::google::protobuf::uint32 EnvironmentalConditions_TimeOfDay::seconds_since_midnight() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.TimeOfDay.seconds_since_midnight)
  return seconds_since_midnight_;
}
 void EnvironmentalConditions_TimeOfDay::set_seconds_since_midnight(::google::protobuf::uint32 value) {
  set_has_seconds_since_midnight();
  seconds_since_midnight_ = value;
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.TimeOfDay.seconds_since_midnight)
}

// -------------------------------------------------------------------

// EnvironmentalConditions

// optional .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
bool EnvironmentalConditions::has_ambient_illumination() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnvironmentalConditions::set_has_ambient_illumination() {
  _has_bits_[0] |= 0x00000001u;
}
void EnvironmentalConditions::clear_has_ambient_illumination() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnvironmentalConditions::clear_ambient_illumination() {
  ambient_illumination_ = 0;
  clear_has_ambient_illumination();
}
 ::osi3::EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::ambient_illumination() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.ambient_illumination)
  return static_cast< ::osi3::EnvironmentalConditions_AmbientIllumination >(ambient_illumination_);
}
 void EnvironmentalConditions::set_ambient_illumination(::osi3::EnvironmentalConditions_AmbientIllumination value) {
  assert(::osi3::EnvironmentalConditions_AmbientIllumination_IsValid(value));
  set_has_ambient_illumination();
  ambient_illumination_ = value;
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.ambient_illumination)
}

// optional .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
bool EnvironmentalConditions::has_time_of_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnvironmentalConditions::set_has_time_of_day() {
  _has_bits_[0] |= 0x00000002u;
}
void EnvironmentalConditions::clear_has_time_of_day() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnvironmentalConditions::clear_time_of_day() {
  if (time_of_day_ != NULL) time_of_day_->::osi3::EnvironmentalConditions_TimeOfDay::Clear();
  clear_has_time_of_day();
}
const ::osi3::EnvironmentalConditions_TimeOfDay& EnvironmentalConditions::time_of_day() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.time_of_day)
  return time_of_day_ != NULL ? *time_of_day_ : *default_instance_->time_of_day_;
}
::osi3::EnvironmentalConditions_TimeOfDay* EnvironmentalConditions::mutable_time_of_day() {
  set_has_time_of_day();
  if (time_of_day_ == NULL) {
    time_of_day_ = new ::osi3::EnvironmentalConditions_TimeOfDay;
  }
  // @@protoc_insertion_point(field_mutable:osi3.EnvironmentalConditions.time_of_day)
  return time_of_day_;
}
::osi3::EnvironmentalConditions_TimeOfDay* EnvironmentalConditions::release_time_of_day() {
  // @@protoc_insertion_point(field_release:osi3.EnvironmentalConditions.time_of_day)
  clear_has_time_of_day();
  ::osi3::EnvironmentalConditions_TimeOfDay* temp = time_of_day_;
  time_of_day_ = NULL;
  return temp;
}
void EnvironmentalConditions::set_allocated_time_of_day(::osi3::EnvironmentalConditions_TimeOfDay* time_of_day) {
  delete time_of_day_;
  time_of_day_ = time_of_day;
  if (time_of_day) {
    set_has_time_of_day();
  } else {
    clear_has_time_of_day();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.EnvironmentalConditions.time_of_day)
}

// optional double atmospheric_pressure = 3;
bool EnvironmentalConditions::has_atmospheric_pressure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EnvironmentalConditions::set_has_atmospheric_pressure() {
  _has_bits_[0] |= 0x00000004u;
}
void EnvironmentalConditions::clear_has_atmospheric_pressure() {
  _has_bits_[0] &= ~0x00000004u;
}
void EnvironmentalConditions::clear_atmospheric_pressure() {
  atmospheric_pressure_ = 0;
  clear_has_atmospheric_pressure();
}
 double EnvironmentalConditions::atmospheric_pressure() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.atmospheric_pressure)
  return atmospheric_pressure_;
}
 void EnvironmentalConditions::set_atmospheric_pressure(double value) {
  set_has_atmospheric_pressure();
  atmospheric_pressure_ = value;
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.atmospheric_pressure)
}

// optional double temperature = 4;
bool EnvironmentalConditions::has_temperature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EnvironmentalConditions::set_has_temperature() {
  _has_bits_[0] |= 0x00000008u;
}
void EnvironmentalConditions::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000008u;
}
void EnvironmentalConditions::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
 double EnvironmentalConditions::temperature() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.temperature)
  return temperature_;
}
 void EnvironmentalConditions::set_temperature(double value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.temperature)
}

// optional double relative_humidity = 5;
bool EnvironmentalConditions::has_relative_humidity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EnvironmentalConditions::set_has_relative_humidity() {
  _has_bits_[0] |= 0x00000010u;
}
void EnvironmentalConditions::clear_has_relative_humidity() {
  _has_bits_[0] &= ~0x00000010u;
}
void EnvironmentalConditions::clear_relative_humidity() {
  relative_humidity_ = 0;
  clear_has_relative_humidity();
}
 double EnvironmentalConditions::relative_humidity() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.relative_humidity)
  return relative_humidity_;
}
 void EnvironmentalConditions::set_relative_humidity(double value) {
  set_has_relative_humidity();
  relative_humidity_ = value;
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.relative_humidity)
}

// optional .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
bool EnvironmentalConditions::has_precipitation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EnvironmentalConditions::set_has_precipitation() {
  _has_bits_[0] |= 0x00000020u;
}
void EnvironmentalConditions::clear_has_precipitation() {
  _has_bits_[0] &= ~0x00000020u;
}
void EnvironmentalConditions::clear_precipitation() {
  precipitation_ = 0;
  clear_has_precipitation();
}
 ::osi3::EnvironmentalConditions_Precipitation EnvironmentalConditions::precipitation() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.precipitation)
  return static_cast< ::osi3::EnvironmentalConditions_Precipitation >(precipitation_);
}
 void EnvironmentalConditions::set_precipitation(::osi3::EnvironmentalConditions_Precipitation value) {
  assert(::osi3::EnvironmentalConditions_Precipitation_IsValid(value));
  set_has_precipitation();
  precipitation_ = value;
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.precipitation)
}

// optional .osi3.EnvironmentalConditions.Fog fog = 7;
bool EnvironmentalConditions::has_fog() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EnvironmentalConditions::set_has_fog() {
  _has_bits_[0] |= 0x00000040u;
}
void EnvironmentalConditions::clear_has_fog() {
  _has_bits_[0] &= ~0x00000040u;
}
void EnvironmentalConditions::clear_fog() {
  fog_ = 0;
  clear_has_fog();
}
 ::osi3::EnvironmentalConditions_Fog EnvironmentalConditions::fog() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.fog)
  return static_cast< ::osi3::EnvironmentalConditions_Fog >(fog_);
}
 void EnvironmentalConditions::set_fog(::osi3::EnvironmentalConditions_Fog value) {
  assert(::osi3::EnvironmentalConditions_Fog_IsValid(value));
  set_has_fog();
  fog_ = value;
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.fog)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
