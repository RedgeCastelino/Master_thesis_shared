// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* Vector3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Timestamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Timestamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dimension3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dimension3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Orientation3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Orientation3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Identifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Identifier_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountingPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountingPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Spherical3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spherical3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseStationary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseStationary_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseMoving_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseMoving_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5fcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5fcommon_2eproto() {
  protobuf_AddDesc_osi_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_common.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3d_descriptor_ = file->message_type(0);
  static const int Vector3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, z_),
  };
  Vector3d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3d_descriptor_,
      Vector3d::default_instance_,
      Vector3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _has_bits_[0]),
      -1,
      -1,
      sizeof(Vector3d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _internal_metadata_),
      -1);
  Vector2d_descriptor_ = file->message_type(1);
  static const int Vector2d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, y_),
  };
  Vector2d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector2d_descriptor_,
      Vector2d::default_instance_,
      Vector2d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, _has_bits_[0]),
      -1,
      -1,
      sizeof(Vector2d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, _internal_metadata_),
      -1);
  Timestamp_descriptor_ = file->message_type(2);
  static const int Timestamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, nanos_),
  };
  Timestamp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Timestamp_descriptor_,
      Timestamp::default_instance_,
      Timestamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Timestamp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _internal_metadata_),
      -1);
  Dimension3d_descriptor_ = file->message_type(3);
  static const int Dimension3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dimension3d, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dimension3d, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dimension3d, height_),
  };
  Dimension3d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Dimension3d_descriptor_,
      Dimension3d::default_instance_,
      Dimension3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dimension3d, _has_bits_[0]),
      -1,
      -1,
      sizeof(Dimension3d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dimension3d, _internal_metadata_),
      -1);
  Orientation3d_descriptor_ = file->message_type(4);
  static const int Orientation3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation3d, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation3d, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation3d, yaw_),
  };
  Orientation3d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Orientation3d_descriptor_,
      Orientation3d::default_instance_,
      Orientation3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation3d, _has_bits_[0]),
      -1,
      -1,
      sizeof(Orientation3d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation3d, _internal_metadata_),
      -1);
  Identifier_descriptor_ = file->message_type(5);
  static const int Identifier_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, value_),
  };
  Identifier_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Identifier_descriptor_,
      Identifier::default_instance_,
      Identifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, _has_bits_[0]),
      -1,
      -1,
      sizeof(Identifier),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, _internal_metadata_),
      -1);
  MountingPosition_descriptor_ = file->message_type(6);
  static const int MountingPosition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountingPosition, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountingPosition, orientation_),
  };
  MountingPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MountingPosition_descriptor_,
      MountingPosition::default_instance_,
      MountingPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountingPosition, _has_bits_[0]),
      -1,
      -1,
      sizeof(MountingPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountingPosition, _internal_metadata_),
      -1);
  Spherical3d_descriptor_ = file->message_type(7);
  static const int Spherical3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spherical3d, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spherical3d, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spherical3d, elevation_),
  };
  Spherical3d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Spherical3d_descriptor_,
      Spherical3d::default_instance_,
      Spherical3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spherical3d, _has_bits_[0]),
      -1,
      -1,
      sizeof(Spherical3d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spherical3d, _internal_metadata_),
      -1);
  BaseStationary_descriptor_ = file->message_type(8);
  static const int BaseStationary_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationary, dimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationary, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationary, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationary, base_polygon_),
  };
  BaseStationary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BaseStationary_descriptor_,
      BaseStationary::default_instance_,
      BaseStationary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationary, _has_bits_[0]),
      -1,
      -1,
      sizeof(BaseStationary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationary, _internal_metadata_),
      -1);
  BaseMoving_descriptor_ = file->message_type(9);
  static const int BaseMoving_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMoving, dimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMoving, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMoving, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMoving, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMoving, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMoving, orientation_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMoving, base_polygon_),
  };
  BaseMoving_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BaseMoving_descriptor_,
      BaseMoving::default_instance_,
      BaseMoving_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMoving, _has_bits_[0]),
      -1,
      -1,
      sizeof(BaseMoving),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMoving, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3d_descriptor_, &Vector3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector2d_descriptor_, &Vector2d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Timestamp_descriptor_, &Timestamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Dimension3d_descriptor_, &Dimension3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Orientation3d_descriptor_, &Orientation3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Identifier_descriptor_, &Identifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MountingPosition_descriptor_, &MountingPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Spherical3d_descriptor_, &Spherical3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BaseStationary_descriptor_, &BaseStationary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BaseMoving_descriptor_, &BaseMoving::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5fcommon_2eproto() {
  delete Vector3d::default_instance_;
  delete Vector3d_reflection_;
  delete Vector2d::default_instance_;
  delete Vector2d_reflection_;
  delete Timestamp::default_instance_;
  delete Timestamp_reflection_;
  delete Dimension3d::default_instance_;
  delete Dimension3d_reflection_;
  delete Orientation3d::default_instance_;
  delete Orientation3d_reflection_;
  delete Identifier::default_instance_;
  delete Identifier_reflection_;
  delete MountingPosition::default_instance_;
  delete MountingPosition_reflection_;
  delete Spherical3d::default_instance_;
  delete Spherical3d_reflection_;
  delete BaseStationary::default_instance_;
  delete BaseStationary_reflection_;
  delete BaseMoving::default_instance_;
  delete BaseMoving_reflection_;
}

void protobuf_AddDesc_osi_5fcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020osi_common.proto\022\004osi3\"+\n\010Vector3d\022\t\n\001"
    "x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\" \n\010Vector2"
    "d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"+\n\tTimestamp\022\017\n\007"
    "seconds\030\001 \001(\003\022\r\n\005nanos\030\002 \001(\r\"<\n\013Dimensio"
    "n3d\022\016\n\006length\030\001 \001(\001\022\r\n\005width\030\002 \001(\001\022\016\n\006he"
    "ight\030\003 \001(\001\"9\n\rOrientation3d\022\014\n\004roll\030\001 \001("
    "\001\022\r\n\005pitch\030\002 \001(\001\022\013\n\003yaw\030\003 \001(\001\"\033\n\nIdentif"
    "ier\022\r\n\005value\030\001 \001(\004\"^\n\020MountingPosition\022 "
    "\n\010position\030\001 \001(\0132\016.osi3.Vector3d\022(\n\013orie"
    "ntation\030\002 \001(\0132\023.osi3.Orientation3d\"C\n\013Sp"
    "herical3d\022\020\n\010distance\030\001 \001(\001\022\017\n\007azimuth\030\002"
    " \001(\001\022\021\n\televation\030\003 \001(\001\"\250\001\n\016BaseStationa"
    "ry\022$\n\tdimension\030\001 \001(\0132\021.osi3.Dimension3d"
    "\022 \n\010position\030\002 \001(\0132\016.osi3.Vector3d\022(\n\013or"
    "ientation\030\003 \001(\0132\023.osi3.Orientation3d\022$\n\014"
    "base_polygon\030\004 \003(\0132\016.osi3.Vector2d\"\233\002\n\nB"
    "aseMoving\022$\n\tdimension\030\001 \001(\0132\021.osi3.Dime"
    "nsion3d\022 \n\010position\030\002 \001(\0132\016.osi3.Vector3"
    "d\022(\n\013orientation\030\003 \001(\0132\023.osi3.Orientatio"
    "n3d\022 \n\010velocity\030\004 \001(\0132\016.osi3.Vector3d\022$\n"
    "\014acceleration\030\005 \001(\0132\016.osi3.Vector3d\022-\n\020o"
    "rientation_rate\030\006 \001(\0132\023.osi3.Orientation"
    "3d\022$\n\014base_polygon\030\007 \003(\0132\016.osi3.Vector2d"
    "B\002H\001", 924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_common.proto", &protobuf_RegisterTypes);
  Vector3d::default_instance_ = new Vector3d();
  Vector2d::default_instance_ = new Vector2d();
  Timestamp::default_instance_ = new Timestamp();
  Dimension3d::default_instance_ = new Dimension3d();
  Orientation3d::default_instance_ = new Orientation3d();
  Identifier::default_instance_ = new Identifier();
  MountingPosition::default_instance_ = new MountingPosition();
  Spherical3d::default_instance_ = new Spherical3d();
  BaseStationary::default_instance_ = new BaseStationary();
  BaseMoving::default_instance_ = new BaseMoving();
  Vector3d::default_instance_->InitAsDefaultInstance();
  Vector2d::default_instance_->InitAsDefaultInstance();
  Timestamp::default_instance_->InitAsDefaultInstance();
  Dimension3d::default_instance_->InitAsDefaultInstance();
  Orientation3d::default_instance_->InitAsDefaultInstance();
  Identifier::default_instance_->InitAsDefaultInstance();
  MountingPosition::default_instance_->InitAsDefaultInstance();
  Spherical3d::default_instance_->InitAsDefaultInstance();
  BaseStationary::default_instance_->InitAsDefaultInstance();
  BaseMoving::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5fcommon_2eproto {
  StaticDescriptorInitializer_osi_5fcommon_2eproto() {
    protobuf_AddDesc_osi_5fcommon_2eproto();
  }
} static_descriptor_initializer_osi_5fcommon_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3d::kXFieldNumber;
const int Vector3d::kYFieldNumber;
const int Vector3d::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3d::Vector3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Vector3d)
}

void Vector3d::InitAsDefaultInstance() {
}

Vector3d::Vector3d(const Vector3d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.Vector3d)
}

void Vector3d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:osi3.Vector3d)
  SharedDtor();
}

void Vector3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3d_descriptor_;
}

const Vector3d& Vector3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fcommon_2eproto();
  return *default_instance_;
}

Vector3d* Vector3d::default_instance_ = NULL;

Vector3d* Vector3d::New(::google::protobuf::Arena* arena) const {
  Vector3d* n = new Vector3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Vector3d)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3d, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3d*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Vector3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Vector3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Vector3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Vector3d)
  return false;
#undef DO_
}

void Vector3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Vector3d)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Vector3d)
}

::google::protobuf::uint8* Vector3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Vector3d)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Vector3d)
  return target;
}

int Vector3d::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Vector3d)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Vector3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector3d* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Vector3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Vector3d)
    MergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Vector3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Vector3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {

  return true;
}

void Vector3d::Swap(Vector3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3d::InternalSwap(Vector3d* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3d_descriptor_;
  metadata.reflection = Vector3d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3d

// optional double x = 1;
bool Vector3d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector3d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector3d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector3d::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:osi3.Vector3d.x)
  return x_;
}
 void Vector3d::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector3d.x)
}

// optional double y = 2;
bool Vector3d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector3d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector3d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector3d::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:osi3.Vector3d.y)
  return y_;
}
 void Vector3d::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector3d.y)
}

// optional double z = 3;
bool Vector3d::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector3d::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector3d::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector3d::clear_z() {
  z_ = 0;
  clear_has_z();
}
 double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:osi3.Vector3d.z)
  return z_;
}
 void Vector3d::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector3d.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2d::kXFieldNumber;
const int Vector2d::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2d::Vector2d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Vector2d)
}

void Vector2d::InitAsDefaultInstance() {
}

Vector2d::Vector2d(const Vector2d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.Vector2d)
}

void Vector2d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector2d::~Vector2d() {
  // @@protoc_insertion_point(destructor:osi3.Vector2d)
  SharedDtor();
}

void Vector2d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2d_descriptor_;
}

const Vector2d& Vector2d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fcommon_2eproto();
  return *default_instance_;
}

Vector2d* Vector2d::default_instance_ = NULL;

Vector2d* Vector2d::New(::google::protobuf::Arena* arena) const {
  Vector2d* n = new Vector2d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector2d::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Vector2d)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector2d, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector2d*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Vector2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Vector2d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Vector2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Vector2d)
  return false;
#undef DO_
}

void Vector2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Vector2d)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Vector2d)
}

::google::protobuf::uint8* Vector2d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Vector2d)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Vector2d)
  return target;
}

int Vector2d::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Vector2d)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Vector2d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector2d* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Vector2d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Vector2d)
    MergeFrom(*source);
  }
}

void Vector2d::MergeFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Vector2d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Vector2d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Vector2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2d::CopyFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Vector2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2d::IsInitialized() const {

  return true;
}

void Vector2d::Swap(Vector2d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2d::InternalSwap(Vector2d* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2d_descriptor_;
  metadata.reflection = Vector2d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector2d

// optional double x = 1;
bool Vector2d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector2d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector2d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector2d::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double Vector2d::x() const {
  // @@protoc_insertion_point(field_get:osi3.Vector2d.x)
  return x_;
}
 void Vector2d::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector2d.x)
}

// optional double y = 2;
bool Vector2d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector2d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector2d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector2d::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double Vector2d::y() const {
  // @@protoc_insertion_point(field_get:osi3.Vector2d.y)
  return y_;
}
 void Vector2d::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector2d.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timestamp::kSecondsFieldNumber;
const int Timestamp::kNanosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timestamp::Timestamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Timestamp)
}

void Timestamp::InitAsDefaultInstance() {
}

Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.Timestamp)
}

void Timestamp::SharedCtor() {
  _cached_size_ = 0;
  seconds_ = GOOGLE_LONGLONG(0);
  nanos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:osi3.Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Timestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timestamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Timestamp_descriptor_;
}

const Timestamp& Timestamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fcommon_2eproto();
  return *default_instance_;
}

Timestamp* Timestamp::default_instance_ = NULL;

Timestamp* Timestamp::New(::google::protobuf::Arena* arena) const {
  Timestamp* n = new Timestamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Timestamp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Timestamp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Timestamp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seconds_, nanos_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Timestamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 seconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nanos;
        break;
      }

      // optional uint32 nanos = 2;
      case 2: {
        if (tag == 16) {
         parse_nanos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nanos_)));
          set_has_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Timestamp)
  return false;
#undef DO_
}

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Timestamp)
  // optional int64 seconds = 1;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->seconds(), output);
  }

  // optional uint32 nanos = 2;
  if (has_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nanos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Timestamp)
}

::google::protobuf::uint8* Timestamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Timestamp)
  // optional int64 seconds = 1;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->seconds(), target);
  }

  // optional uint32 nanos = 2;
  if (has_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nanos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Timestamp)
  return target;
}

int Timestamp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Timestamp)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 seconds = 1;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seconds());
    }

    // optional uint32 nanos = 2;
    if (has_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nanos());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Timestamp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Timestamp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Timestamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Timestamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Timestamp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_nanos()) {
      set_nanos(from.nanos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {

  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timestamp::InternalSwap(Timestamp* other) {
  std::swap(seconds_, other->seconds_);
  std::swap(nanos_, other->nanos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Timestamp_descriptor_;
  metadata.reflection = Timestamp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Timestamp

// optional int64 seconds = 1;
bool Timestamp::has_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Timestamp::set_has_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
void Timestamp::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
void Timestamp::clear_seconds() {
  seconds_ = GOOGLE_LONGLONG(0);
  clear_has_seconds();
}
 ::google::protobuf::int64 Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:osi3.Timestamp.seconds)
  return seconds_;
}
 void Timestamp::set_seconds(::google::protobuf::int64 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:osi3.Timestamp.seconds)
}

// optional uint32 nanos = 2;
bool Timestamp::has_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Timestamp::set_has_nanos() {
  _has_bits_[0] |= 0x00000002u;
}
void Timestamp::clear_has_nanos() {
  _has_bits_[0] &= ~0x00000002u;
}
void Timestamp::clear_nanos() {
  nanos_ = 0u;
  clear_has_nanos();
}
 ::google::protobuf::uint32 Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:osi3.Timestamp.nanos)
  return nanos_;
}
 void Timestamp::set_nanos(::google::protobuf::uint32 value) {
  set_has_nanos();
  nanos_ = value;
  // @@protoc_insertion_point(field_set:osi3.Timestamp.nanos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dimension3d::kLengthFieldNumber;
const int Dimension3d::kWidthFieldNumber;
const int Dimension3d::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dimension3d::Dimension3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Dimension3d)
}

void Dimension3d::InitAsDefaultInstance() {
}

Dimension3d::Dimension3d(const Dimension3d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.Dimension3d)
}

void Dimension3d::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dimension3d::~Dimension3d() {
  // @@protoc_insertion_point(destructor:osi3.Dimension3d)
  SharedDtor();
}

void Dimension3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dimension3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dimension3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dimension3d_descriptor_;
}

const Dimension3d& Dimension3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fcommon_2eproto();
  return *default_instance_;
}

Dimension3d* Dimension3d::default_instance_ = NULL;

Dimension3d* Dimension3d::New(::google::protobuf::Arena* arena) const {
  Dimension3d* n = new Dimension3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dimension3d::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Dimension3d)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Dimension3d, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Dimension3d*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(length_, height_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Dimension3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Dimension3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double length = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_width;
        break;
      }

      // optional double width = 2;
      case 2: {
        if (tag == 17) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_height;
        break;
      }

      // optional double height = 3;
      case 3: {
        if (tag == 25) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Dimension3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Dimension3d)
  return false;
#undef DO_
}

void Dimension3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Dimension3d)
  // optional double length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->length(), output);
  }

  // optional double width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->width(), output);
  }

  // optional double height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Dimension3d)
}

::google::protobuf::uint8* Dimension3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Dimension3d)
  // optional double length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->length(), target);
  }

  // optional double width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->width(), target);
  }

  // optional double height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Dimension3d)
  return target;
}

int Dimension3d::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Dimension3d)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double length = 1;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double width = 2;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 3;
    if (has_height()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dimension3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Dimension3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Dimension3d* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Dimension3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Dimension3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Dimension3d)
    MergeFrom(*source);
  }
}

void Dimension3d::MergeFrom(const Dimension3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Dimension3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Dimension3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Dimension3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dimension3d::CopyFrom(const Dimension3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Dimension3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimension3d::IsInitialized() const {

  return true;
}

void Dimension3d::Swap(Dimension3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dimension3d::InternalSwap(Dimension3d* other) {
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Dimension3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dimension3d_descriptor_;
  metadata.reflection = Dimension3d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dimension3d

// optional double length = 1;
bool Dimension3d::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dimension3d::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
void Dimension3d::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dimension3d::clear_length() {
  length_ = 0;
  clear_has_length();
}
 double Dimension3d::length() const {
  // @@protoc_insertion_point(field_get:osi3.Dimension3d.length)
  return length_;
}
 void Dimension3d::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:osi3.Dimension3d.length)
}

// optional double width = 2;
bool Dimension3d::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dimension3d::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void Dimension3d::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dimension3d::clear_width() {
  width_ = 0;
  clear_has_width();
}
 double Dimension3d::width() const {
  // @@protoc_insertion_point(field_get:osi3.Dimension3d.width)
  return width_;
}
 void Dimension3d::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:osi3.Dimension3d.width)
}

// optional double height = 3;
bool Dimension3d::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dimension3d::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void Dimension3d::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dimension3d::clear_height() {
  height_ = 0;
  clear_has_height();
}
 double Dimension3d::height() const {
  // @@protoc_insertion_point(field_get:osi3.Dimension3d.height)
  return height_;
}
 void Dimension3d::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:osi3.Dimension3d.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Orientation3d::kRollFieldNumber;
const int Orientation3d::kPitchFieldNumber;
const int Orientation3d::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Orientation3d::Orientation3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Orientation3d)
}

void Orientation3d::InitAsDefaultInstance() {
}

Orientation3d::Orientation3d(const Orientation3d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.Orientation3d)
}

void Orientation3d::SharedCtor() {
  _cached_size_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Orientation3d::~Orientation3d() {
  // @@protoc_insertion_point(destructor:osi3.Orientation3d)
  SharedDtor();
}

void Orientation3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Orientation3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Orientation3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Orientation3d_descriptor_;
}

const Orientation3d& Orientation3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fcommon_2eproto();
  return *default_instance_;
}

Orientation3d* Orientation3d::default_instance_ = NULL;

Orientation3d* Orientation3d::New(::google::protobuf::Arena* arena) const {
  Orientation3d* n = new Orientation3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Orientation3d::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Orientation3d)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Orientation3d, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Orientation3d*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(roll_, yaw_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Orientation3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Orientation3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double roll = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_pitch;
        break;
      }

      // optional double pitch = 2;
      case 2: {
        if (tag == 17) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_yaw;
        break;
      }

      // optional double yaw = 3;
      case 3: {
        if (tag == 25) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Orientation3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Orientation3d)
  return false;
#undef DO_
}

void Orientation3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Orientation3d)
  // optional double roll = 1;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->roll(), output);
  }

  // optional double pitch = 2;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pitch(), output);
  }

  // optional double yaw = 3;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yaw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Orientation3d)
}

::google::protobuf::uint8* Orientation3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Orientation3d)
  // optional double roll = 1;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->roll(), target);
  }

  // optional double pitch = 2;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pitch(), target);
  }

  // optional double yaw = 3;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->yaw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Orientation3d)
  return target;
}

int Orientation3d::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Orientation3d)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double roll = 1;
    if (has_roll()) {
      total_size += 1 + 8;
    }

    // optional double pitch = 2;
    if (has_pitch()) {
      total_size += 1 + 8;
    }

    // optional double yaw = 3;
    if (has_yaw()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Orientation3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Orientation3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Orientation3d* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Orientation3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Orientation3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Orientation3d)
    MergeFrom(*source);
  }
}

void Orientation3d::MergeFrom(const Orientation3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Orientation3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Orientation3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Orientation3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Orientation3d::CopyFrom(const Orientation3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Orientation3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation3d::IsInitialized() const {

  return true;
}

void Orientation3d::Swap(Orientation3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Orientation3d::InternalSwap(Orientation3d* other) {
  std::swap(roll_, other->roll_);
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_, other->yaw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Orientation3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Orientation3d_descriptor_;
  metadata.reflection = Orientation3d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Orientation3d

// optional double roll = 1;
bool Orientation3d::has_roll() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Orientation3d::set_has_roll() {
  _has_bits_[0] |= 0x00000001u;
}
void Orientation3d::clear_has_roll() {
  _has_bits_[0] &= ~0x00000001u;
}
void Orientation3d::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
 double Orientation3d::roll() const {
  // @@protoc_insertion_point(field_get:osi3.Orientation3d.roll)
  return roll_;
}
 void Orientation3d::set_roll(double value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:osi3.Orientation3d.roll)
}

// optional double pitch = 2;
bool Orientation3d::has_pitch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Orientation3d::set_has_pitch() {
  _has_bits_[0] |= 0x00000002u;
}
void Orientation3d::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000002u;
}
void Orientation3d::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
 double Orientation3d::pitch() const {
  // @@protoc_insertion_point(field_get:osi3.Orientation3d.pitch)
  return pitch_;
}
 void Orientation3d::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:osi3.Orientation3d.pitch)
}

// optional double yaw = 3;
bool Orientation3d::has_yaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Orientation3d::set_has_yaw() {
  _has_bits_[0] |= 0x00000004u;
}
void Orientation3d::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000004u;
}
void Orientation3d::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
 double Orientation3d::yaw() const {
  // @@protoc_insertion_point(field_get:osi3.Orientation3d.yaw)
  return yaw_;
}
 void Orientation3d::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:osi3.Orientation3d.yaw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Identifier::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Identifier::Identifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Identifier)
}

void Identifier::InitAsDefaultInstance() {
}

Identifier::Identifier(const Identifier& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.Identifier)
}

void Identifier::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Identifier::~Identifier() {
  // @@protoc_insertion_point(destructor:osi3.Identifier)
  SharedDtor();
}

void Identifier::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Identifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Identifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Identifier_descriptor_;
}

const Identifier& Identifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fcommon_2eproto();
  return *default_instance_;
}

Identifier* Identifier::default_instance_ = NULL;

Identifier* Identifier::New(::google::protobuf::Arena* arena) const {
  Identifier* n = new Identifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Identifier::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Identifier)
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Identifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Identifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Identifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Identifier)
  return false;
#undef DO_
}

void Identifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Identifier)
  // optional uint64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Identifier)
}

::google::protobuf::uint8* Identifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Identifier)
  // optional uint64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Identifier)
  return target;
}

int Identifier::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Identifier)
  int total_size = 0;

  // optional uint64 value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Identifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Identifier)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Identifier* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Identifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Identifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Identifier)
    MergeFrom(*source);
  }
}

void Identifier::MergeFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Identifier)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Identifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identifier::CopyFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identifier::IsInitialized() const {

  return true;
}

void Identifier::Swap(Identifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Identifier::InternalSwap(Identifier* other) {
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Identifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Identifier_descriptor_;
  metadata.reflection = Identifier_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Identifier

// optional uint64 value = 1;
bool Identifier::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Identifier::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void Identifier::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void Identifier::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
 ::google::protobuf::uint64 Identifier::value() const {
  // @@protoc_insertion_point(field_get:osi3.Identifier.value)
  return value_;
}
 void Identifier::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:osi3.Identifier.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MountingPosition::kPositionFieldNumber;
const int MountingPosition::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MountingPosition::MountingPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MountingPosition)
}

void MountingPosition::InitAsDefaultInstance() {
  position_ = const_cast< ::osi3::Vector3d*>(&::osi3::Vector3d::default_instance());
  orientation_ = const_cast< ::osi3::Orientation3d*>(&::osi3::Orientation3d::default_instance());
}

MountingPosition::MountingPosition(const MountingPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.MountingPosition)
}

void MountingPosition::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  orientation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountingPosition::~MountingPosition() {
  // @@protoc_insertion_point(destructor:osi3.MountingPosition)
  SharedDtor();
}

void MountingPosition::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete orientation_;
  }
}

void MountingPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountingPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountingPosition_descriptor_;
}

const MountingPosition& MountingPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fcommon_2eproto();
  return *default_instance_;
}

MountingPosition* MountingPosition::default_instance_ = NULL;

MountingPosition* MountingPosition::New(::google::protobuf::Arena* arena) const {
  MountingPosition* n = new MountingPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MountingPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MountingPosition)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_position()) {
      if (position_ != NULL) position_->::osi3::Vector3d::Clear();
    }
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::osi3::Orientation3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MountingPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MountingPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Vector3d position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orientation;
        break;
      }

      // optional .osi3.Orientation3d orientation = 2;
      case 2: {
        if (tag == 18) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MountingPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MountingPosition)
  return false;
#undef DO_
}

void MountingPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MountingPosition)
  // optional .osi3.Vector3d position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional .osi3.Orientation3d orientation = 2;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MountingPosition)
}

::google::protobuf::uint8* MountingPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MountingPosition)
  // optional .osi3.Vector3d position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, false, target);
  }

  // optional .osi3.Orientation3d orientation = 2;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orientation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MountingPosition)
  return target;
}

int MountingPosition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MountingPosition)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .osi3.Vector3d position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .osi3.Orientation3d orientation = 2;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orientation_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountingPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MountingPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MountingPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MountingPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MountingPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MountingPosition)
    MergeFrom(*source);
  }
}

void MountingPosition::MergeFrom(const MountingPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MountingPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::osi3::Vector3d::MergeFrom(from.position());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::osi3::Orientation3d::MergeFrom(from.orientation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MountingPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MountingPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountingPosition::CopyFrom(const MountingPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MountingPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountingPosition::IsInitialized() const {

  return true;
}

void MountingPosition::Swap(MountingPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MountingPosition::InternalSwap(MountingPosition* other) {
  std::swap(position_, other->position_);
  std::swap(orientation_, other->orientation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MountingPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountingPosition_descriptor_;
  metadata.reflection = MountingPosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MountingPosition

// optional .osi3.Vector3d position = 1;
bool MountingPosition::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MountingPosition::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void MountingPosition::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void MountingPosition::clear_position() {
  if (position_ != NULL) position_->::osi3::Vector3d::Clear();
  clear_has_position();
}
const ::osi3::Vector3d& MountingPosition::position() const {
  // @@protoc_insertion_point(field_get:osi3.MountingPosition.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::osi3::Vector3d* MountingPosition::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MountingPosition.position)
  return position_;
}
::osi3::Vector3d* MountingPosition::release_position() {
  // @@protoc_insertion_point(field_release:osi3.MountingPosition.position)
  clear_has_position();
  ::osi3::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
void MountingPosition::set_allocated_position(::osi3::Vector3d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MountingPosition.position)
}

// optional .osi3.Orientation3d orientation = 2;
bool MountingPosition::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MountingPosition::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
void MountingPosition::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
void MountingPosition::clear_orientation() {
  if (orientation_ != NULL) orientation_->::osi3::Orientation3d::Clear();
  clear_has_orientation();
}
const ::osi3::Orientation3d& MountingPosition::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.MountingPosition.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::osi3::Orientation3d* MountingPosition::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MountingPosition.orientation)
  return orientation_;
}
::osi3::Orientation3d* MountingPosition::release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.MountingPosition.orientation)
  clear_has_orientation();
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void MountingPosition::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MountingPosition.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Spherical3d::kDistanceFieldNumber;
const int Spherical3d::kAzimuthFieldNumber;
const int Spherical3d::kElevationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Spherical3d::Spherical3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Spherical3d)
}

void Spherical3d::InitAsDefaultInstance() {
}

Spherical3d::Spherical3d(const Spherical3d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.Spherical3d)
}

void Spherical3d::SharedCtor() {
  _cached_size_ = 0;
  distance_ = 0;
  azimuth_ = 0;
  elevation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Spherical3d::~Spherical3d() {
  // @@protoc_insertion_point(destructor:osi3.Spherical3d)
  SharedDtor();
}

void Spherical3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Spherical3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Spherical3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spherical3d_descriptor_;
}

const Spherical3d& Spherical3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fcommon_2eproto();
  return *default_instance_;
}

Spherical3d* Spherical3d::default_instance_ = NULL;

Spherical3d* Spherical3d::New(::google::protobuf::Arena* arena) const {
  Spherical3d* n = new Spherical3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Spherical3d::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Spherical3d)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Spherical3d, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Spherical3d*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(distance_, elevation_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Spherical3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Spherical3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_azimuth;
        break;
      }

      // optional double azimuth = 2;
      case 2: {
        if (tag == 17) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_elevation;
        break;
      }

      // optional double elevation = 3;
      case 3: {
        if (tag == 25) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Spherical3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Spherical3d)
  return false;
#undef DO_
}

void Spherical3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Spherical3d)
  // optional double distance = 1;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance(), output);
  }

  // optional double azimuth = 2;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->azimuth(), output);
  }

  // optional double elevation = 3;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->elevation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Spherical3d)
}

::google::protobuf::uint8* Spherical3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Spherical3d)
  // optional double distance = 1;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance(), target);
  }

  // optional double azimuth = 2;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->azimuth(), target);
  }

  // optional double elevation = 3;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->elevation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Spherical3d)
  return target;
}

int Spherical3d::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Spherical3d)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double distance = 1;
    if (has_distance()) {
      total_size += 1 + 8;
    }

    // optional double azimuth = 2;
    if (has_azimuth()) {
      total_size += 1 + 8;
    }

    // optional double elevation = 3;
    if (has_elevation()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Spherical3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Spherical3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Spherical3d* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Spherical3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Spherical3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Spherical3d)
    MergeFrom(*source);
  }
}

void Spherical3d::MergeFrom(const Spherical3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Spherical3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Spherical3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Spherical3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spherical3d::CopyFrom(const Spherical3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Spherical3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spherical3d::IsInitialized() const {

  return true;
}

void Spherical3d::Swap(Spherical3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Spherical3d::InternalSwap(Spherical3d* other) {
  std::swap(distance_, other->distance_);
  std::swap(azimuth_, other->azimuth_);
  std::swap(elevation_, other->elevation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Spherical3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spherical3d_descriptor_;
  metadata.reflection = Spherical3d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Spherical3d

// optional double distance = 1;
bool Spherical3d::has_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Spherical3d::set_has_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void Spherical3d::clear_has_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void Spherical3d::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
 double Spherical3d::distance() const {
  // @@protoc_insertion_point(field_get:osi3.Spherical3d.distance)
  return distance_;
}
 void Spherical3d::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:osi3.Spherical3d.distance)
}

// optional double azimuth = 2;
bool Spherical3d::has_azimuth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Spherical3d::set_has_azimuth() {
  _has_bits_[0] |= 0x00000002u;
}
void Spherical3d::clear_has_azimuth() {
  _has_bits_[0] &= ~0x00000002u;
}
void Spherical3d::clear_azimuth() {
  azimuth_ = 0;
  clear_has_azimuth();
}
 double Spherical3d::azimuth() const {
  // @@protoc_insertion_point(field_get:osi3.Spherical3d.azimuth)
  return azimuth_;
}
 void Spherical3d::set_azimuth(double value) {
  set_has_azimuth();
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:osi3.Spherical3d.azimuth)
}

// optional double elevation = 3;
bool Spherical3d::has_elevation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Spherical3d::set_has_elevation() {
  _has_bits_[0] |= 0x00000004u;
}
void Spherical3d::clear_has_elevation() {
  _has_bits_[0] &= ~0x00000004u;
}
void Spherical3d::clear_elevation() {
  elevation_ = 0;
  clear_has_elevation();
}
 double Spherical3d::elevation() const {
  // @@protoc_insertion_point(field_get:osi3.Spherical3d.elevation)
  return elevation_;
}
 void Spherical3d::set_elevation(double value) {
  set_has_elevation();
  elevation_ = value;
  // @@protoc_insertion_point(field_set:osi3.Spherical3d.elevation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseStationary::kDimensionFieldNumber;
const int BaseStationary::kPositionFieldNumber;
const int BaseStationary::kOrientationFieldNumber;
const int BaseStationary::kBasePolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseStationary::BaseStationary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.BaseStationary)
}

void BaseStationary::InitAsDefaultInstance() {
  dimension_ = const_cast< ::osi3::Dimension3d*>(&::osi3::Dimension3d::default_instance());
  position_ = const_cast< ::osi3::Vector3d*>(&::osi3::Vector3d::default_instance());
  orientation_ = const_cast< ::osi3::Orientation3d*>(&::osi3::Orientation3d::default_instance());
}

BaseStationary::BaseStationary(const BaseStationary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.BaseStationary)
}

void BaseStationary::SharedCtor() {
  _cached_size_ = 0;
  dimension_ = NULL;
  position_ = NULL;
  orientation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseStationary::~BaseStationary() {
  // @@protoc_insertion_point(destructor:osi3.BaseStationary)
  SharedDtor();
}

void BaseStationary::SharedDtor() {
  if (this != default_instance_) {
    delete dimension_;
    delete position_;
    delete orientation_;
  }
}

void BaseStationary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseStationary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseStationary_descriptor_;
}

const BaseStationary& BaseStationary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fcommon_2eproto();
  return *default_instance_;
}

BaseStationary* BaseStationary::default_instance_ = NULL;

BaseStationary* BaseStationary::New(::google::protobuf::Arena* arena) const {
  BaseStationary* n = new BaseStationary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseStationary::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.BaseStationary)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_dimension()) {
      if (dimension_ != NULL) dimension_->::osi3::Dimension3d::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::osi3::Vector3d::Clear();
    }
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::osi3::Orientation3d::Clear();
    }
  }
  base_polygon_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BaseStationary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.BaseStationary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Dimension3d dimension = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dimension()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .osi3.Vector3d position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_orientation;
        break;
      }

      // optional .osi3.Orientation3d orientation = 3;
      case 3: {
        if (tag == 26) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_base_polygon;
        break;
      }

      // repeated .osi3.Vector2d base_polygon = 4;
      case 4: {
        if (tag == 34) {
         parse_base_polygon:
          DO_(input->IncrementRecursionDepth());
         parse_loop_base_polygon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_base_polygon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_base_polygon;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.BaseStationary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.BaseStationary)
  return false;
#undef DO_
}

void BaseStationary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.BaseStationary)
  // optional .osi3.Dimension3d dimension = 1;
  if (has_dimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->dimension_, output);
  }

  // optional .osi3.Vector3d position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional .osi3.Orientation3d orientation = 3;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->orientation_, output);
  }

  // repeated .osi3.Vector2d base_polygon = 4;
  for (unsigned int i = 0, n = this->base_polygon_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->base_polygon(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.BaseStationary)
}

::google::protobuf::uint8* BaseStationary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.BaseStationary)
  // optional .osi3.Dimension3d dimension = 1;
  if (has_dimension()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->dimension_, false, target);
  }

  // optional .osi3.Vector3d position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, false, target);
  }

  // optional .osi3.Orientation3d orientation = 3;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->orientation_, false, target);
  }

  // repeated .osi3.Vector2d base_polygon = 4;
  for (unsigned int i = 0, n = this->base_polygon_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->base_polygon(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.BaseStationary)
  return target;
}

int BaseStationary::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.BaseStationary)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .osi3.Dimension3d dimension = 1;
    if (has_dimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dimension_);
    }

    // optional .osi3.Vector3d position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .osi3.Orientation3d orientation = 3;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orientation_);
    }

  }
  // repeated .osi3.Vector2d base_polygon = 4;
  total_size += 1 * this->base_polygon_size();
  for (int i = 0; i < this->base_polygon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_polygon(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseStationary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.BaseStationary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BaseStationary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseStationary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.BaseStationary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.BaseStationary)
    MergeFrom(*source);
  }
}

void BaseStationary::MergeFrom(const BaseStationary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.BaseStationary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  base_polygon_.MergeFrom(from.base_polygon_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dimension()) {
      mutable_dimension()->::osi3::Dimension3d::MergeFrom(from.dimension());
    }
    if (from.has_position()) {
      mutable_position()->::osi3::Vector3d::MergeFrom(from.position());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::osi3::Orientation3d::MergeFrom(from.orientation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BaseStationary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.BaseStationary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseStationary::CopyFrom(const BaseStationary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.BaseStationary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseStationary::IsInitialized() const {

  return true;
}

void BaseStationary::Swap(BaseStationary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseStationary::InternalSwap(BaseStationary* other) {
  std::swap(dimension_, other->dimension_);
  std::swap(position_, other->position_);
  std::swap(orientation_, other->orientation_);
  base_polygon_.UnsafeArenaSwap(&other->base_polygon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseStationary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseStationary_descriptor_;
  metadata.reflection = BaseStationary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseStationary

// optional .osi3.Dimension3d dimension = 1;
bool BaseStationary::has_dimension() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BaseStationary::set_has_dimension() {
  _has_bits_[0] |= 0x00000001u;
}
void BaseStationary::clear_has_dimension() {
  _has_bits_[0] &= ~0x00000001u;
}
void BaseStationary::clear_dimension() {
  if (dimension_ != NULL) dimension_->::osi3::Dimension3d::Clear();
  clear_has_dimension();
}
const ::osi3::Dimension3d& BaseStationary::dimension() const {
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.dimension)
  return dimension_ != NULL ? *dimension_ : *default_instance_->dimension_;
}
::osi3::Dimension3d* BaseStationary::mutable_dimension() {
  set_has_dimension();
  if (dimension_ == NULL) {
    dimension_ = new ::osi3::Dimension3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.dimension)
  return dimension_;
}
::osi3::Dimension3d* BaseStationary::release_dimension() {
  // @@protoc_insertion_point(field_release:osi3.BaseStationary.dimension)
  clear_has_dimension();
  ::osi3::Dimension3d* temp = dimension_;
  dimension_ = NULL;
  return temp;
}
void BaseStationary::set_allocated_dimension(::osi3::Dimension3d* dimension) {
  delete dimension_;
  dimension_ = dimension;
  if (dimension) {
    set_has_dimension();
  } else {
    clear_has_dimension();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseStationary.dimension)
}

// optional .osi3.Vector3d position = 2;
bool BaseStationary::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BaseStationary::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void BaseStationary::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void BaseStationary::clear_position() {
  if (position_ != NULL) position_->::osi3::Vector3d::Clear();
  clear_has_position();
}
const ::osi3::Vector3d& BaseStationary::position() const {
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::osi3::Vector3d* BaseStationary::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.position)
  return position_;
}
::osi3::Vector3d* BaseStationary::release_position() {
  // @@protoc_insertion_point(field_release:osi3.BaseStationary.position)
  clear_has_position();
  ::osi3::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
void BaseStationary::set_allocated_position(::osi3::Vector3d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseStationary.position)
}

// optional .osi3.Orientation3d orientation = 3;
bool BaseStationary::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BaseStationary::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
void BaseStationary::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
void BaseStationary::clear_orientation() {
  if (orientation_ != NULL) orientation_->::osi3::Orientation3d::Clear();
  clear_has_orientation();
}
const ::osi3::Orientation3d& BaseStationary::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::osi3::Orientation3d* BaseStationary::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.orientation)
  return orientation_;
}
::osi3::Orientation3d* BaseStationary::release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.BaseStationary.orientation)
  clear_has_orientation();
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void BaseStationary::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseStationary.orientation)
}

// repeated .osi3.Vector2d base_polygon = 4;
int BaseStationary::base_polygon_size() const {
  return base_polygon_.size();
}
void BaseStationary::clear_base_polygon() {
  base_polygon_.Clear();
}
const ::osi3::Vector2d& BaseStationary::base_polygon(int index) const {
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.base_polygon)
  return base_polygon_.Get(index);
}
::osi3::Vector2d* BaseStationary::mutable_base_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.base_polygon)
  return base_polygon_.Mutable(index);
}
::osi3::Vector2d* BaseStationary::add_base_polygon() {
  // @@protoc_insertion_point(field_add:osi3.BaseStationary.base_polygon)
  return base_polygon_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >*
BaseStationary::mutable_base_polygon() {
  // @@protoc_insertion_point(field_mutable_list:osi3.BaseStationary.base_polygon)
  return &base_polygon_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >&
BaseStationary::base_polygon() const {
  // @@protoc_insertion_point(field_list:osi3.BaseStationary.base_polygon)
  return base_polygon_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseMoving::kDimensionFieldNumber;
const int BaseMoving::kPositionFieldNumber;
const int BaseMoving::kOrientationFieldNumber;
const int BaseMoving::kVelocityFieldNumber;
const int BaseMoving::kAccelerationFieldNumber;
const int BaseMoving::kOrientationRateFieldNumber;
const int BaseMoving::kBasePolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseMoving::BaseMoving()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.BaseMoving)
}

void BaseMoving::InitAsDefaultInstance() {
  dimension_ = const_cast< ::osi3::Dimension3d*>(&::osi3::Dimension3d::default_instance());
  position_ = const_cast< ::osi3::Vector3d*>(&::osi3::Vector3d::default_instance());
  orientation_ = const_cast< ::osi3::Orientation3d*>(&::osi3::Orientation3d::default_instance());
  velocity_ = const_cast< ::osi3::Vector3d*>(&::osi3::Vector3d::default_instance());
  acceleration_ = const_cast< ::osi3::Vector3d*>(&::osi3::Vector3d::default_instance());
  orientation_rate_ = const_cast< ::osi3::Orientation3d*>(&::osi3::Orientation3d::default_instance());
}

BaseMoving::BaseMoving(const BaseMoving& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.BaseMoving)
}

void BaseMoving::SharedCtor() {
  _cached_size_ = 0;
  dimension_ = NULL;
  position_ = NULL;
  orientation_ = NULL;
  velocity_ = NULL;
  acceleration_ = NULL;
  orientation_rate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseMoving::~BaseMoving() {
  // @@protoc_insertion_point(destructor:osi3.BaseMoving)
  SharedDtor();
}

void BaseMoving::SharedDtor() {
  if (this != default_instance_) {
    delete dimension_;
    delete position_;
    delete orientation_;
    delete velocity_;
    delete acceleration_;
    delete orientation_rate_;
  }
}

void BaseMoving::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseMoving::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseMoving_descriptor_;
}

const BaseMoving& BaseMoving::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fcommon_2eproto();
  return *default_instance_;
}

BaseMoving* BaseMoving::default_instance_ = NULL;

BaseMoving* BaseMoving::New(::google::protobuf::Arena* arena) const {
  BaseMoving* n = new BaseMoving;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseMoving::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.BaseMoving)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_dimension()) {
      if (dimension_ != NULL) dimension_->::osi3::Dimension3d::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::osi3::Vector3d::Clear();
    }
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::osi3::Orientation3d::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::osi3::Vector3d::Clear();
    }
    if (has_acceleration()) {
      if (acceleration_ != NULL) acceleration_->::osi3::Vector3d::Clear();
    }
    if (has_orientation_rate()) {
      if (orientation_rate_ != NULL) orientation_rate_->::osi3::Orientation3d::Clear();
    }
  }
  base_polygon_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BaseMoving::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.BaseMoving)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Dimension3d dimension = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dimension()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .osi3.Vector3d position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_orientation;
        break;
      }

      // optional .osi3.Orientation3d orientation = 3;
      case 3: {
        if (tag == 26) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_velocity;
        break;
      }

      // optional .osi3.Vector3d velocity = 4;
      case 4: {
        if (tag == 34) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_acceleration;
        break;
      }

      // optional .osi3.Vector3d acceleration = 5;
      case 5: {
        if (tag == 42) {
         parse_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_orientation_rate;
        break;
      }

      // optional .osi3.Orientation3d orientation_rate = 6;
      case 6: {
        if (tag == 50) {
         parse_orientation_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation_rate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_base_polygon;
        break;
      }

      // repeated .osi3.Vector2d base_polygon = 7;
      case 7: {
        if (tag == 58) {
         parse_base_polygon:
          DO_(input->IncrementRecursionDepth());
         parse_loop_base_polygon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_base_polygon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_base_polygon;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.BaseMoving)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.BaseMoving)
  return false;
#undef DO_
}

void BaseMoving::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.BaseMoving)
  // optional .osi3.Dimension3d dimension = 1;
  if (has_dimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->dimension_, output);
  }

  // optional .osi3.Vector3d position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional .osi3.Orientation3d orientation = 3;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->orientation_, output);
  }

  // optional .osi3.Vector3d velocity = 4;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->velocity_, output);
  }

  // optional .osi3.Vector3d acceleration = 5;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->acceleration_, output);
  }

  // optional .osi3.Orientation3d orientation_rate = 6;
  if (has_orientation_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->orientation_rate_, output);
  }

  // repeated .osi3.Vector2d base_polygon = 7;
  for (unsigned int i = 0, n = this->base_polygon_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->base_polygon(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.BaseMoving)
}

::google::protobuf::uint8* BaseMoving::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.BaseMoving)
  // optional .osi3.Dimension3d dimension = 1;
  if (has_dimension()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->dimension_, false, target);
  }

  // optional .osi3.Vector3d position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, false, target);
  }

  // optional .osi3.Orientation3d orientation = 3;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->orientation_, false, target);
  }

  // optional .osi3.Vector3d velocity = 4;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->velocity_, false, target);
  }

  // optional .osi3.Vector3d acceleration = 5;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->acceleration_, false, target);
  }

  // optional .osi3.Orientation3d orientation_rate = 6;
  if (has_orientation_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->orientation_rate_, false, target);
  }

  // repeated .osi3.Vector2d base_polygon = 7;
  for (unsigned int i = 0, n = this->base_polygon_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->base_polygon(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.BaseMoving)
  return target;
}

int BaseMoving::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.BaseMoving)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .osi3.Dimension3d dimension = 1;
    if (has_dimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dimension_);
    }

    // optional .osi3.Vector3d position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .osi3.Orientation3d orientation = 3;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orientation_);
    }

    // optional .osi3.Vector3d velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional .osi3.Vector3d acceleration = 5;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->acceleration_);
    }

    // optional .osi3.Orientation3d orientation_rate = 6;
    if (has_orientation_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orientation_rate_);
    }

  }
  // repeated .osi3.Vector2d base_polygon = 7;
  total_size += 1 * this->base_polygon_size();
  for (int i = 0; i < this->base_polygon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_polygon(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseMoving::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.BaseMoving)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BaseMoving* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseMoving>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.BaseMoving)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.BaseMoving)
    MergeFrom(*source);
  }
}

void BaseMoving::MergeFrom(const BaseMoving& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.BaseMoving)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  base_polygon_.MergeFrom(from.base_polygon_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dimension()) {
      mutable_dimension()->::osi3::Dimension3d::MergeFrom(from.dimension());
    }
    if (from.has_position()) {
      mutable_position()->::osi3::Vector3d::MergeFrom(from.position());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::osi3::Orientation3d::MergeFrom(from.orientation());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::osi3::Vector3d::MergeFrom(from.velocity());
    }
    if (from.has_acceleration()) {
      mutable_acceleration()->::osi3::Vector3d::MergeFrom(from.acceleration());
    }
    if (from.has_orientation_rate()) {
      mutable_orientation_rate()->::osi3::Orientation3d::MergeFrom(from.orientation_rate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BaseMoving::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.BaseMoving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseMoving::CopyFrom(const BaseMoving& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.BaseMoving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseMoving::IsInitialized() const {

  return true;
}

void BaseMoving::Swap(BaseMoving* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseMoving::InternalSwap(BaseMoving* other) {
  std::swap(dimension_, other->dimension_);
  std::swap(position_, other->position_);
  std::swap(orientation_, other->orientation_);
  std::swap(velocity_, other->velocity_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(orientation_rate_, other->orientation_rate_);
  base_polygon_.UnsafeArenaSwap(&other->base_polygon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseMoving::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseMoving_descriptor_;
  metadata.reflection = BaseMoving_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseMoving

// optional .osi3.Dimension3d dimension = 1;
bool BaseMoving::has_dimension() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BaseMoving::set_has_dimension() {
  _has_bits_[0] |= 0x00000001u;
}
void BaseMoving::clear_has_dimension() {
  _has_bits_[0] &= ~0x00000001u;
}
void BaseMoving::clear_dimension() {
  if (dimension_ != NULL) dimension_->::osi3::Dimension3d::Clear();
  clear_has_dimension();
}
const ::osi3::Dimension3d& BaseMoving::dimension() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.dimension)
  return dimension_ != NULL ? *dimension_ : *default_instance_->dimension_;
}
::osi3::Dimension3d* BaseMoving::mutable_dimension() {
  set_has_dimension();
  if (dimension_ == NULL) {
    dimension_ = new ::osi3::Dimension3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.dimension)
  return dimension_;
}
::osi3::Dimension3d* BaseMoving::release_dimension() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.dimension)
  clear_has_dimension();
  ::osi3::Dimension3d* temp = dimension_;
  dimension_ = NULL;
  return temp;
}
void BaseMoving::set_allocated_dimension(::osi3::Dimension3d* dimension) {
  delete dimension_;
  dimension_ = dimension;
  if (dimension) {
    set_has_dimension();
  } else {
    clear_has_dimension();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.dimension)
}

// optional .osi3.Vector3d position = 2;
bool BaseMoving::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BaseMoving::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void BaseMoving::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void BaseMoving::clear_position() {
  if (position_ != NULL) position_->::osi3::Vector3d::Clear();
  clear_has_position();
}
const ::osi3::Vector3d& BaseMoving::position() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::osi3::Vector3d* BaseMoving::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.position)
  return position_;
}
::osi3::Vector3d* BaseMoving::release_position() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.position)
  clear_has_position();
  ::osi3::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
void BaseMoving::set_allocated_position(::osi3::Vector3d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.position)
}

// optional .osi3.Orientation3d orientation = 3;
bool BaseMoving::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BaseMoving::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
void BaseMoving::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
void BaseMoving::clear_orientation() {
  if (orientation_ != NULL) orientation_->::osi3::Orientation3d::Clear();
  clear_has_orientation();
}
const ::osi3::Orientation3d& BaseMoving::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::osi3::Orientation3d* BaseMoving::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.orientation)
  return orientation_;
}
::osi3::Orientation3d* BaseMoving::release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.orientation)
  clear_has_orientation();
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void BaseMoving::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.orientation)
}

// optional .osi3.Vector3d velocity = 4;
bool BaseMoving::has_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BaseMoving::set_has_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
void BaseMoving::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
void BaseMoving::clear_velocity() {
  if (velocity_ != NULL) velocity_->::osi3::Vector3d::Clear();
  clear_has_velocity();
}
const ::osi3::Vector3d& BaseMoving::velocity() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
::osi3::Vector3d* BaseMoving::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.velocity)
  return velocity_;
}
::osi3::Vector3d* BaseMoving::release_velocity() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.velocity)
  clear_has_velocity();
  ::osi3::Vector3d* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void BaseMoving::set_allocated_velocity(::osi3::Vector3d* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.velocity)
}

// optional .osi3.Vector3d acceleration = 5;
bool BaseMoving::has_acceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BaseMoving::set_has_acceleration() {
  _has_bits_[0] |= 0x00000010u;
}
void BaseMoving::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
void BaseMoving::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::osi3::Vector3d::Clear();
  clear_has_acceleration();
}
const ::osi3::Vector3d& BaseMoving::acceleration() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.acceleration)
  return acceleration_ != NULL ? *acceleration_ : *default_instance_->acceleration_;
}
::osi3::Vector3d* BaseMoving::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    acceleration_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.acceleration)
  return acceleration_;
}
::osi3::Vector3d* BaseMoving::release_acceleration() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.acceleration)
  clear_has_acceleration();
  ::osi3::Vector3d* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
void BaseMoving::set_allocated_acceleration(::osi3::Vector3d* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.acceleration)
}

// optional .osi3.Orientation3d orientation_rate = 6;
bool BaseMoving::has_orientation_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BaseMoving::set_has_orientation_rate() {
  _has_bits_[0] |= 0x00000020u;
}
void BaseMoving::clear_has_orientation_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
void BaseMoving::clear_orientation_rate() {
  if (orientation_rate_ != NULL) orientation_rate_->::osi3::Orientation3d::Clear();
  clear_has_orientation_rate();
}
const ::osi3::Orientation3d& BaseMoving::orientation_rate() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.orientation_rate)
  return orientation_rate_ != NULL ? *orientation_rate_ : *default_instance_->orientation_rate_;
}
::osi3::Orientation3d* BaseMoving::mutable_orientation_rate() {
  set_has_orientation_rate();
  if (orientation_rate_ == NULL) {
    orientation_rate_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.orientation_rate)
  return orientation_rate_;
}
::osi3::Orientation3d* BaseMoving::release_orientation_rate() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.orientation_rate)
  clear_has_orientation_rate();
  ::osi3::Orientation3d* temp = orientation_rate_;
  orientation_rate_ = NULL;
  return temp;
}
void BaseMoving::set_allocated_orientation_rate(::osi3::Orientation3d* orientation_rate) {
  delete orientation_rate_;
  orientation_rate_ = orientation_rate;
  if (orientation_rate) {
    set_has_orientation_rate();
  } else {
    clear_has_orientation_rate();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.orientation_rate)
}

// repeated .osi3.Vector2d base_polygon = 7;
int BaseMoving::base_polygon_size() const {
  return base_polygon_.size();
}
void BaseMoving::clear_base_polygon() {
  base_polygon_.Clear();
}
const ::osi3::Vector2d& BaseMoving::base_polygon(int index) const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.base_polygon)
  return base_polygon_.Get(index);
}
::osi3::Vector2d* BaseMoving::mutable_base_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.base_polygon)
  return base_polygon_.Mutable(index);
}
::osi3::Vector2d* BaseMoving::add_base_polygon() {
  // @@protoc_insertion_point(field_add:osi3.BaseMoving.base_polygon)
  return base_polygon_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >*
BaseMoving::mutable_base_polygon() {
  // @@protoc_insertion_point(field_mutable_list:osi3.BaseMoving.base_polygon)
  return &base_polygon_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >&
BaseMoving::base_polygon() const {
  // @@protoc_insertion_point(field_list:osi3.BaseMoving.base_polygon)
  return base_polygon_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
