// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_lane.proto

#ifndef PROTOBUF_osi_5flane_2eproto__INCLUDED
#define PROTOBUF_osi_5flane_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)

namespace osi3 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_osi_5flane_2eproto();
void protobuf_AssignDesc_osi_5flane_2eproto();
void protobuf_ShutdownFile_osi_5flane_2eproto();

class Lane;
class LaneBoundary;
class LaneBoundary_BoundaryPoint;
class LaneBoundary_Classification;
class Lane_Classification;
class Lane_Classification_LanePairing;
class Lane_Classification_RoadCondition;

enum Lane_Classification_Type {
  Lane_Classification_Type_TYPE_UNKNOWN = 0,
  Lane_Classification_Type_TYPE_OTHER = 1,
  Lane_Classification_Type_TYPE_DRIVING = 2,
  Lane_Classification_Type_TYPE_NONDRIVING = 3,
  Lane_Classification_Type_TYPE_INTERSECTION = 4
};
bool Lane_Classification_Type_IsValid(int value);
const Lane_Classification_Type Lane_Classification_Type_Type_MIN = Lane_Classification_Type_TYPE_UNKNOWN;
const Lane_Classification_Type Lane_Classification_Type_Type_MAX = Lane_Classification_Type_TYPE_INTERSECTION;
const int Lane_Classification_Type_Type_ARRAYSIZE = Lane_Classification_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_Classification_Type_descriptor();
inline const ::std::string& Lane_Classification_Type_Name(Lane_Classification_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lane_Classification_Type_descriptor(), value);
}
inline bool Lane_Classification_Type_Parse(
    const ::std::string& name, Lane_Classification_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lane_Classification_Type>(
    Lane_Classification_Type_descriptor(), name, value);
}
enum LaneBoundary_Classification_Type {
  LaneBoundary_Classification_Type_TYPE_UNKNOWN = 0,
  LaneBoundary_Classification_Type_TYPE_OTHER = 1,
  LaneBoundary_Classification_Type_TYPE_NO_LINE = 2,
  LaneBoundary_Classification_Type_TYPE_SOLID_LINE = 3,
  LaneBoundary_Classification_Type_TYPE_DASHED_LINE = 4,
  LaneBoundary_Classification_Type_TYPE_BOTTS_DOTS = 5,
  LaneBoundary_Classification_Type_TYPE_ROAD_EDGE = 6,
  LaneBoundary_Classification_Type_TYPE_SNOW_EDGE = 7,
  LaneBoundary_Classification_Type_TYPE_GRASS_EDGE = 8,
  LaneBoundary_Classification_Type_TYPE_GRAVEL_EDGE = 9,
  LaneBoundary_Classification_Type_TYPE_SOIL_EDGE = 10,
  LaneBoundary_Classification_Type_TYPE_GUARD_RAIL = 11,
  LaneBoundary_Classification_Type_TYPE_CURB = 12,
  LaneBoundary_Classification_Type_TYPE_STRUCTURE = 13
};
bool LaneBoundary_Classification_Type_IsValid(int value);
const LaneBoundary_Classification_Type LaneBoundary_Classification_Type_Type_MIN = LaneBoundary_Classification_Type_TYPE_UNKNOWN;
const LaneBoundary_Classification_Type LaneBoundary_Classification_Type_Type_MAX = LaneBoundary_Classification_Type_TYPE_STRUCTURE;
const int LaneBoundary_Classification_Type_Type_ARRAYSIZE = LaneBoundary_Classification_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneBoundary_Classification_Type_descriptor();
inline const ::std::string& LaneBoundary_Classification_Type_Name(LaneBoundary_Classification_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneBoundary_Classification_Type_descriptor(), value);
}
inline bool LaneBoundary_Classification_Type_Parse(
    const ::std::string& name, LaneBoundary_Classification_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneBoundary_Classification_Type>(
    LaneBoundary_Classification_Type_descriptor(), name, value);
}
enum LaneBoundary_Classification_Color {
  LaneBoundary_Classification_Color_COLOR_UNKNOWN = 0,
  LaneBoundary_Classification_Color_COLOR_OTHER = 1,
  LaneBoundary_Classification_Color_COLOR_NONE = 2,
  LaneBoundary_Classification_Color_COLOR_WHITE = 3,
  LaneBoundary_Classification_Color_COLOR_YELLOW = 4,
  LaneBoundary_Classification_Color_COLOR_RED = 5,
  LaneBoundary_Classification_Color_COLOR_BLUE = 6,
  LaneBoundary_Classification_Color_COLOR_GREEN = 7,
  LaneBoundary_Classification_Color_COLOR_VIOLET = 8
};
bool LaneBoundary_Classification_Color_IsValid(int value);
const LaneBoundary_Classification_Color LaneBoundary_Classification_Color_Color_MIN = LaneBoundary_Classification_Color_COLOR_UNKNOWN;
const LaneBoundary_Classification_Color LaneBoundary_Classification_Color_Color_MAX = LaneBoundary_Classification_Color_COLOR_VIOLET;
const int LaneBoundary_Classification_Color_Color_ARRAYSIZE = LaneBoundary_Classification_Color_Color_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneBoundary_Classification_Color_descriptor();
inline const ::std::string& LaneBoundary_Classification_Color_Name(LaneBoundary_Classification_Color value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneBoundary_Classification_Color_descriptor(), value);
}
inline bool LaneBoundary_Classification_Color_Parse(
    const ::std::string& name, LaneBoundary_Classification_Color* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneBoundary_Classification_Color>(
    LaneBoundary_Classification_Color_descriptor(), name, value);
}
// ===================================================================

class Lane_Classification_RoadCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Lane.Classification.RoadCondition) */ {
 public:
  Lane_Classification_RoadCondition();
  virtual ~Lane_Classification_RoadCondition();

  Lane_Classification_RoadCondition(const Lane_Classification_RoadCondition& from);

  inline Lane_Classification_RoadCondition& operator=(const Lane_Classification_RoadCondition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lane_Classification_RoadCondition& default_instance();

  void Swap(Lane_Classification_RoadCondition* other);

  // implements Message ----------------------------------------------

  inline Lane_Classification_RoadCondition* New() const { return New(NULL); }

  Lane_Classification_RoadCondition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lane_Classification_RoadCondition& from);
  void MergeFrom(const Lane_Classification_RoadCondition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lane_Classification_RoadCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double surface_temperature = 1;
  bool has_surface_temperature() const;
  void clear_surface_temperature();
  static const int kSurfaceTemperatureFieldNumber = 1;
  double surface_temperature() const;
  void set_surface_temperature(double value);

  // optional double surface_water_film = 2;
  bool has_surface_water_film() const;
  void clear_surface_water_film();
  static const int kSurfaceWaterFilmFieldNumber = 2;
  double surface_water_film() const;
  void set_surface_water_film(double value);

  // optional double surface_freezing_point = 3;
  bool has_surface_freezing_point() const;
  void clear_surface_freezing_point();
  static const int kSurfaceFreezingPointFieldNumber = 3;
  double surface_freezing_point() const;
  void set_surface_freezing_point(double value);

  // optional double surface_ice = 4;
  bool has_surface_ice() const;
  void clear_surface_ice();
  static const int kSurfaceIceFieldNumber = 4;
  double surface_ice() const;
  void set_surface_ice(double value);

  // optional double surface_roughness = 5;
  bool has_surface_roughness() const;
  void clear_surface_roughness();
  static const int kSurfaceRoughnessFieldNumber = 5;
  double surface_roughness() const;
  void set_surface_roughness(double value);

  // optional double surface_texture = 6;
  bool has_surface_texture() const;
  void clear_surface_texture();
  static const int kSurfaceTextureFieldNumber = 6;
  double surface_texture() const;
  void set_surface_texture(double value);

  // @@protoc_insertion_point(class_scope:osi3.Lane.Classification.RoadCondition)
 private:
  inline void set_has_surface_temperature();
  inline void clear_has_surface_temperature();
  inline void set_has_surface_water_film();
  inline void clear_has_surface_water_film();
  inline void set_has_surface_freezing_point();
  inline void clear_has_surface_freezing_point();
  inline void set_has_surface_ice();
  inline void clear_has_surface_ice();
  inline void set_has_surface_roughness();
  inline void clear_has_surface_roughness();
  inline void set_has_surface_texture();
  inline void clear_has_surface_texture();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double surface_temperature_;
  double surface_water_film_;
  double surface_freezing_point_;
  double surface_ice_;
  double surface_roughness_;
  double surface_texture_;
  friend void  protobuf_AddDesc_osi_5flane_2eproto();
  friend void protobuf_AssignDesc_osi_5flane_2eproto();
  friend void protobuf_ShutdownFile_osi_5flane_2eproto();

  void InitAsDefaultInstance();
  static Lane_Classification_RoadCondition* default_instance_;
};
// -------------------------------------------------------------------

class Lane_Classification_LanePairing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Lane.Classification.LanePairing) */ {
 public:
  Lane_Classification_LanePairing();
  virtual ~Lane_Classification_LanePairing();

  Lane_Classification_LanePairing(const Lane_Classification_LanePairing& from);

  inline Lane_Classification_LanePairing& operator=(const Lane_Classification_LanePairing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lane_Classification_LanePairing& default_instance();

  void Swap(Lane_Classification_LanePairing* other);

  // implements Message ----------------------------------------------

  inline Lane_Classification_LanePairing* New() const { return New(NULL); }

  Lane_Classification_LanePairing* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lane_Classification_LanePairing& from);
  void MergeFrom(const Lane_Classification_LanePairing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lane_Classification_LanePairing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier antecessor_lane_id = 1;
  bool has_antecessor_lane_id() const;
  void clear_antecessor_lane_id();
  static const int kAntecessorLaneIdFieldNumber = 1;
  const ::osi3::Identifier& antecessor_lane_id() const;
  ::osi3::Identifier* mutable_antecessor_lane_id();
  ::osi3::Identifier* release_antecessor_lane_id();
  void set_allocated_antecessor_lane_id(::osi3::Identifier* antecessor_lane_id);

  // optional .osi3.Identifier successor_lane_id = 2;
  bool has_successor_lane_id() const;
  void clear_successor_lane_id();
  static const int kSuccessorLaneIdFieldNumber = 2;
  const ::osi3::Identifier& successor_lane_id() const;
  ::osi3::Identifier* mutable_successor_lane_id();
  ::osi3::Identifier* release_successor_lane_id();
  void set_allocated_successor_lane_id(::osi3::Identifier* successor_lane_id);

  // @@protoc_insertion_point(class_scope:osi3.Lane.Classification.LanePairing)
 private:
  inline void set_has_antecessor_lane_id();
  inline void clear_has_antecessor_lane_id();
  inline void set_has_successor_lane_id();
  inline void clear_has_successor_lane_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* antecessor_lane_id_;
  ::osi3::Identifier* successor_lane_id_;
  friend void  protobuf_AddDesc_osi_5flane_2eproto();
  friend void protobuf_AssignDesc_osi_5flane_2eproto();
  friend void protobuf_ShutdownFile_osi_5flane_2eproto();

  void InitAsDefaultInstance();
  static Lane_Classification_LanePairing* default_instance_;
};
// -------------------------------------------------------------------

class Lane_Classification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Lane.Classification) */ {
 public:
  Lane_Classification();
  virtual ~Lane_Classification();

  Lane_Classification(const Lane_Classification& from);

  inline Lane_Classification& operator=(const Lane_Classification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lane_Classification& default_instance();

  void Swap(Lane_Classification* other);

  // implements Message ----------------------------------------------

  inline Lane_Classification* New() const { return New(NULL); }

  Lane_Classification* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lane_Classification& from);
  void MergeFrom(const Lane_Classification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lane_Classification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Lane_Classification_RoadCondition RoadCondition;
  typedef Lane_Classification_LanePairing LanePairing;

  typedef Lane_Classification_Type Type;
  static const Type TYPE_UNKNOWN =
    Lane_Classification_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    Lane_Classification_Type_TYPE_OTHER;
  static const Type TYPE_DRIVING =
    Lane_Classification_Type_TYPE_DRIVING;
  static const Type TYPE_NONDRIVING =
    Lane_Classification_Type_TYPE_NONDRIVING;
  static const Type TYPE_INTERSECTION =
    Lane_Classification_Type_TYPE_INTERSECTION;
  static inline bool Type_IsValid(int value) {
    return Lane_Classification_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Lane_Classification_Type_Type_MIN;
  static const Type Type_MAX =
    Lane_Classification_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Lane_Classification_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Lane_Classification_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Lane_Classification_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Lane_Classification_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.Lane.Classification.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::osi3::Lane_Classification_Type type() const;
  void set_type(::osi3::Lane_Classification_Type value);

  // optional bool is_host_vehicle_lane = 2;
  bool has_is_host_vehicle_lane() const;
  void clear_is_host_vehicle_lane();
  static const int kIsHostVehicleLaneFieldNumber = 2;
  bool is_host_vehicle_lane() const;
  void set_is_host_vehicle_lane(bool value);

  // repeated .osi3.Vector3d centerline = 3;
  int centerline_size() const;
  void clear_centerline();
  static const int kCenterlineFieldNumber = 3;
  const ::osi3::Vector3d& centerline(int index) const;
  ::osi3::Vector3d* mutable_centerline(int index);
  ::osi3::Vector3d* add_centerline();
  ::google::protobuf::RepeatedPtrField< ::osi3::Vector3d >*
      mutable_centerline();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Vector3d >&
      centerline() const;

  // optional bool centerline_is_driving_direction = 4;
  bool has_centerline_is_driving_direction() const;
  void clear_centerline_is_driving_direction();
  static const int kCenterlineIsDrivingDirectionFieldNumber = 4;
  bool centerline_is_driving_direction() const;
  void set_centerline_is_driving_direction(bool value);

  // repeated .osi3.Identifier left_adjacent_lane_id = 5;
  int left_adjacent_lane_id_size() const;
  void clear_left_adjacent_lane_id();
  static const int kLeftAdjacentLaneIdFieldNumber = 5;
  const ::osi3::Identifier& left_adjacent_lane_id(int index) const;
  ::osi3::Identifier* mutable_left_adjacent_lane_id(int index);
  ::osi3::Identifier* add_left_adjacent_lane_id();
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
      mutable_left_adjacent_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
      left_adjacent_lane_id() const;

  // repeated .osi3.Identifier right_adjacent_lane_id = 6;
  int right_adjacent_lane_id_size() const;
  void clear_right_adjacent_lane_id();
  static const int kRightAdjacentLaneIdFieldNumber = 6;
  const ::osi3::Identifier& right_adjacent_lane_id(int index) const;
  ::osi3::Identifier* mutable_right_adjacent_lane_id(int index);
  ::osi3::Identifier* add_right_adjacent_lane_id();
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
      mutable_right_adjacent_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
      right_adjacent_lane_id() const;

  // repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
  int lane_pairing_size() const;
  void clear_lane_pairing();
  static const int kLanePairingFieldNumber = 7;
  const ::osi3::Lane_Classification_LanePairing& lane_pairing(int index) const;
  ::osi3::Lane_Classification_LanePairing* mutable_lane_pairing(int index);
  ::osi3::Lane_Classification_LanePairing* add_lane_pairing();
  ::google::protobuf::RepeatedPtrField< ::osi3::Lane_Classification_LanePairing >*
      mutable_lane_pairing();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Lane_Classification_LanePairing >&
      lane_pairing() const;

  // repeated .osi3.Identifier right_lane_boundary_id = 8;
  int right_lane_boundary_id_size() const;
  void clear_right_lane_boundary_id();
  static const int kRightLaneBoundaryIdFieldNumber = 8;
  const ::osi3::Identifier& right_lane_boundary_id(int index) const;
  ::osi3::Identifier* mutable_right_lane_boundary_id(int index);
  ::osi3::Identifier* add_right_lane_boundary_id();
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
      mutable_right_lane_boundary_id();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
      right_lane_boundary_id() const;

  // repeated .osi3.Identifier left_lane_boundary_id = 9;
  int left_lane_boundary_id_size() const;
  void clear_left_lane_boundary_id();
  static const int kLeftLaneBoundaryIdFieldNumber = 9;
  const ::osi3::Identifier& left_lane_boundary_id(int index) const;
  ::osi3::Identifier* mutable_left_lane_boundary_id(int index);
  ::osi3::Identifier* add_left_lane_boundary_id();
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
      mutable_left_lane_boundary_id();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
      left_lane_boundary_id() const;

  // repeated .osi3.Identifier free_lane_boundary_id = 10;
  int free_lane_boundary_id_size() const;
  void clear_free_lane_boundary_id();
  static const int kFreeLaneBoundaryIdFieldNumber = 10;
  const ::osi3::Identifier& free_lane_boundary_id(int index) const;
  ::osi3::Identifier* mutable_free_lane_boundary_id(int index);
  ::osi3::Identifier* add_free_lane_boundary_id();
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
      mutable_free_lane_boundary_id();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
      free_lane_boundary_id() const;

  // optional .osi3.Lane.Classification.RoadCondition road_condition = 11;
  bool has_road_condition() const;
  void clear_road_condition();
  static const int kRoadConditionFieldNumber = 11;
  const ::osi3::Lane_Classification_RoadCondition& road_condition() const;
  ::osi3::Lane_Classification_RoadCondition* mutable_road_condition();
  ::osi3::Lane_Classification_RoadCondition* release_road_condition();
  void set_allocated_road_condition(::osi3::Lane_Classification_RoadCondition* road_condition);

  // @@protoc_insertion_point(class_scope:osi3.Lane.Classification)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_host_vehicle_lane();
  inline void clear_has_is_host_vehicle_lane();
  inline void set_has_centerline_is_driving_direction();
  inline void clear_has_centerline_is_driving_direction();
  inline void set_has_road_condition();
  inline void clear_has_road_condition();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  bool is_host_vehicle_lane_;
  bool centerline_is_driving_direction_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Vector3d > centerline_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier > left_adjacent_lane_id_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier > right_adjacent_lane_id_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Lane_Classification_LanePairing > lane_pairing_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier > right_lane_boundary_id_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier > left_lane_boundary_id_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier > free_lane_boundary_id_;
  ::osi3::Lane_Classification_RoadCondition* road_condition_;
  friend void  protobuf_AddDesc_osi_5flane_2eproto();
  friend void protobuf_AssignDesc_osi_5flane_2eproto();
  friend void protobuf_ShutdownFile_osi_5flane_2eproto();

  void InitAsDefaultInstance();
  static Lane_Classification* default_instance_;
};
// -------------------------------------------------------------------

class Lane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Lane) */ {
 public:
  Lane();
  virtual ~Lane();

  Lane(const Lane& from);

  inline Lane& operator=(const Lane& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lane& default_instance();

  void Swap(Lane* other);

  // implements Message ----------------------------------------------

  inline Lane* New() const { return New(NULL); }

  Lane* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lane& from);
  void MergeFrom(const Lane& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Lane_Classification Classification;

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::osi3::Identifier& id() const;
  ::osi3::Identifier* mutable_id();
  ::osi3::Identifier* release_id();
  void set_allocated_id(::osi3::Identifier* id);

  // optional .osi3.Lane.Classification classification = 2;
  bool has_classification() const;
  void clear_classification();
  static const int kClassificationFieldNumber = 2;
  const ::osi3::Lane_Classification& classification() const;
  ::osi3::Lane_Classification* mutable_classification();
  ::osi3::Lane_Classification* release_classification();
  void set_allocated_classification(::osi3::Lane_Classification* classification);

  // @@protoc_insertion_point(class_scope:osi3.Lane)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_classification();
  inline void clear_has_classification();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* id_;
  ::osi3::Lane_Classification* classification_;
  friend void  protobuf_AddDesc_osi_5flane_2eproto();
  friend void protobuf_AssignDesc_osi_5flane_2eproto();
  friend void protobuf_ShutdownFile_osi_5flane_2eproto();

  void InitAsDefaultInstance();
  static Lane* default_instance_;
};
// -------------------------------------------------------------------

class LaneBoundary_BoundaryPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.LaneBoundary.BoundaryPoint) */ {
 public:
  LaneBoundary_BoundaryPoint();
  virtual ~LaneBoundary_BoundaryPoint();

  LaneBoundary_BoundaryPoint(const LaneBoundary_BoundaryPoint& from);

  inline LaneBoundary_BoundaryPoint& operator=(const LaneBoundary_BoundaryPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneBoundary_BoundaryPoint& default_instance();

  void Swap(LaneBoundary_BoundaryPoint* other);

  // implements Message ----------------------------------------------

  inline LaneBoundary_BoundaryPoint* New() const { return New(NULL); }

  LaneBoundary_BoundaryPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneBoundary_BoundaryPoint& from);
  void MergeFrom(const LaneBoundary_BoundaryPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LaneBoundary_BoundaryPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.Vector3d position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* mutable_position();
  ::osi3::Vector3d* release_position();
  void set_allocated_position(::osi3::Vector3d* position);

  // optional double width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  double width() const;
  void set_width(double value);

  // optional double height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  double height() const;
  void set_height(double value);

  // @@protoc_insertion_point(class_scope:osi3.LaneBoundary.BoundaryPoint)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Vector3d* position_;
  double width_;
  double height_;
  friend void  protobuf_AddDesc_osi_5flane_2eproto();
  friend void protobuf_AssignDesc_osi_5flane_2eproto();
  friend void protobuf_ShutdownFile_osi_5flane_2eproto();

  void InitAsDefaultInstance();
  static LaneBoundary_BoundaryPoint* default_instance_;
};
// -------------------------------------------------------------------

class LaneBoundary_Classification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.LaneBoundary.Classification) */ {
 public:
  LaneBoundary_Classification();
  virtual ~LaneBoundary_Classification();

  LaneBoundary_Classification(const LaneBoundary_Classification& from);

  inline LaneBoundary_Classification& operator=(const LaneBoundary_Classification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneBoundary_Classification& default_instance();

  void Swap(LaneBoundary_Classification* other);

  // implements Message ----------------------------------------------

  inline LaneBoundary_Classification* New() const { return New(NULL); }

  LaneBoundary_Classification* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneBoundary_Classification& from);
  void MergeFrom(const LaneBoundary_Classification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LaneBoundary_Classification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LaneBoundary_Classification_Type Type;
  static const Type TYPE_UNKNOWN =
    LaneBoundary_Classification_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    LaneBoundary_Classification_Type_TYPE_OTHER;
  static const Type TYPE_NO_LINE =
    LaneBoundary_Classification_Type_TYPE_NO_LINE;
  static const Type TYPE_SOLID_LINE =
    LaneBoundary_Classification_Type_TYPE_SOLID_LINE;
  static const Type TYPE_DASHED_LINE =
    LaneBoundary_Classification_Type_TYPE_DASHED_LINE;
  static const Type TYPE_BOTTS_DOTS =
    LaneBoundary_Classification_Type_TYPE_BOTTS_DOTS;
  static const Type TYPE_ROAD_EDGE =
    LaneBoundary_Classification_Type_TYPE_ROAD_EDGE;
  static const Type TYPE_SNOW_EDGE =
    LaneBoundary_Classification_Type_TYPE_SNOW_EDGE;
  static const Type TYPE_GRASS_EDGE =
    LaneBoundary_Classification_Type_TYPE_GRASS_EDGE;
  static const Type TYPE_GRAVEL_EDGE =
    LaneBoundary_Classification_Type_TYPE_GRAVEL_EDGE;
  static const Type TYPE_SOIL_EDGE =
    LaneBoundary_Classification_Type_TYPE_SOIL_EDGE;
  static const Type TYPE_GUARD_RAIL =
    LaneBoundary_Classification_Type_TYPE_GUARD_RAIL;
  static const Type TYPE_CURB =
    LaneBoundary_Classification_Type_TYPE_CURB;
  static const Type TYPE_STRUCTURE =
    LaneBoundary_Classification_Type_TYPE_STRUCTURE;
  static inline bool Type_IsValid(int value) {
    return LaneBoundary_Classification_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LaneBoundary_Classification_Type_Type_MIN;
  static const Type Type_MAX =
    LaneBoundary_Classification_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LaneBoundary_Classification_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LaneBoundary_Classification_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LaneBoundary_Classification_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LaneBoundary_Classification_Type_Parse(name, value);
  }

  typedef LaneBoundary_Classification_Color Color;
  static const Color COLOR_UNKNOWN =
    LaneBoundary_Classification_Color_COLOR_UNKNOWN;
  static const Color COLOR_OTHER =
    LaneBoundary_Classification_Color_COLOR_OTHER;
  static const Color COLOR_NONE =
    LaneBoundary_Classification_Color_COLOR_NONE;
  static const Color COLOR_WHITE =
    LaneBoundary_Classification_Color_COLOR_WHITE;
  static const Color COLOR_YELLOW =
    LaneBoundary_Classification_Color_COLOR_YELLOW;
  static const Color COLOR_RED =
    LaneBoundary_Classification_Color_COLOR_RED;
  static const Color COLOR_BLUE =
    LaneBoundary_Classification_Color_COLOR_BLUE;
  static const Color COLOR_GREEN =
    LaneBoundary_Classification_Color_COLOR_GREEN;
  static const Color COLOR_VIOLET =
    LaneBoundary_Classification_Color_COLOR_VIOLET;
  static inline bool Color_IsValid(int value) {
    return LaneBoundary_Classification_Color_IsValid(value);
  }
  static const Color Color_MIN =
    LaneBoundary_Classification_Color_Color_MIN;
  static const Color Color_MAX =
    LaneBoundary_Classification_Color_Color_MAX;
  static const int Color_ARRAYSIZE =
    LaneBoundary_Classification_Color_Color_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Color_descriptor() {
    return LaneBoundary_Classification_Color_descriptor();
  }
  static inline const ::std::string& Color_Name(Color value) {
    return LaneBoundary_Classification_Color_Name(value);
  }
  static inline bool Color_Parse(const ::std::string& name,
      Color* value) {
    return LaneBoundary_Classification_Color_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.LaneBoundary.Classification.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::osi3::LaneBoundary_Classification_Type type() const;
  void set_type(::osi3::LaneBoundary_Classification_Type value);

  // optional .osi3.LaneBoundary.Classification.Color color = 2;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 2;
  ::osi3::LaneBoundary_Classification_Color color() const;
  void set_color(::osi3::LaneBoundary_Classification_Color value);

  // repeated .osi3.Identifier limiting_structure_id = 3;
  int limiting_structure_id_size() const;
  void clear_limiting_structure_id();
  static const int kLimitingStructureIdFieldNumber = 3;
  const ::osi3::Identifier& limiting_structure_id(int index) const;
  ::osi3::Identifier* mutable_limiting_structure_id(int index);
  ::osi3::Identifier* add_limiting_structure_id();
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
      mutable_limiting_structure_id();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
      limiting_structure_id() const;

  // @@protoc_insertion_point(class_scope:osi3.LaneBoundary.Classification)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int color_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier > limiting_structure_id_;
  friend void  protobuf_AddDesc_osi_5flane_2eproto();
  friend void protobuf_AssignDesc_osi_5flane_2eproto();
  friend void protobuf_ShutdownFile_osi_5flane_2eproto();

  void InitAsDefaultInstance();
  static LaneBoundary_Classification* default_instance_;
};
// -------------------------------------------------------------------

class LaneBoundary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.LaneBoundary) */ {
 public:
  LaneBoundary();
  virtual ~LaneBoundary();

  LaneBoundary(const LaneBoundary& from);

  inline LaneBoundary& operator=(const LaneBoundary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneBoundary& default_instance();

  void Swap(LaneBoundary* other);

  // implements Message ----------------------------------------------

  inline LaneBoundary* New() const { return New(NULL); }

  LaneBoundary* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneBoundary& from);
  void MergeFrom(const LaneBoundary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LaneBoundary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LaneBoundary_BoundaryPoint BoundaryPoint;
  typedef LaneBoundary_Classification Classification;

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::osi3::Identifier& id() const;
  ::osi3::Identifier* mutable_id();
  ::osi3::Identifier* release_id();
  void set_allocated_id(::osi3::Identifier* id);

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
  int boundary_line_size() const;
  void clear_boundary_line();
  static const int kBoundaryLineFieldNumber = 2;
  const ::osi3::LaneBoundary_BoundaryPoint& boundary_line(int index) const;
  ::osi3::LaneBoundary_BoundaryPoint* mutable_boundary_line(int index);
  ::osi3::LaneBoundary_BoundaryPoint* add_boundary_line();
  ::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary_BoundaryPoint >*
      mutable_boundary_line();
  const ::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary_BoundaryPoint >&
      boundary_line() const;

  // optional .osi3.LaneBoundary.Classification classification = 3;
  bool has_classification() const;
  void clear_classification();
  static const int kClassificationFieldNumber = 3;
  const ::osi3::LaneBoundary_Classification& classification() const;
  ::osi3::LaneBoundary_Classification* mutable_classification();
  ::osi3::LaneBoundary_Classification* release_classification();
  void set_allocated_classification(::osi3::LaneBoundary_Classification* classification);

  // @@protoc_insertion_point(class_scope:osi3.LaneBoundary)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_classification();
  inline void clear_has_classification();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* id_;
  ::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary_BoundaryPoint > boundary_line_;
  ::osi3::LaneBoundary_Classification* classification_;
  friend void  protobuf_AddDesc_osi_5flane_2eproto();
  friend void protobuf_AssignDesc_osi_5flane_2eproto();
  friend void protobuf_ShutdownFile_osi_5flane_2eproto();

  void InitAsDefaultInstance();
  static LaneBoundary* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Lane_Classification_RoadCondition

// optional double surface_temperature = 1;
inline bool Lane_Classification_RoadCondition::has_surface_temperature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lane_Classification_RoadCondition::set_has_surface_temperature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lane_Classification_RoadCondition::clear_has_surface_temperature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lane_Classification_RoadCondition::clear_surface_temperature() {
  surface_temperature_ = 0;
  clear_has_surface_temperature();
}
inline double Lane_Classification_RoadCondition::surface_temperature() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.RoadCondition.surface_temperature)
  return surface_temperature_;
}
inline void Lane_Classification_RoadCondition::set_surface_temperature(double value) {
  set_has_surface_temperature();
  surface_temperature_ = value;
  // @@protoc_insertion_point(field_set:osi3.Lane.Classification.RoadCondition.surface_temperature)
}

// optional double surface_water_film = 2;
inline bool Lane_Classification_RoadCondition::has_surface_water_film() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lane_Classification_RoadCondition::set_has_surface_water_film() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lane_Classification_RoadCondition::clear_has_surface_water_film() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lane_Classification_RoadCondition::clear_surface_water_film() {
  surface_water_film_ = 0;
  clear_has_surface_water_film();
}
inline double Lane_Classification_RoadCondition::surface_water_film() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.RoadCondition.surface_water_film)
  return surface_water_film_;
}
inline void Lane_Classification_RoadCondition::set_surface_water_film(double value) {
  set_has_surface_water_film();
  surface_water_film_ = value;
  // @@protoc_insertion_point(field_set:osi3.Lane.Classification.RoadCondition.surface_water_film)
}

// optional double surface_freezing_point = 3;
inline bool Lane_Classification_RoadCondition::has_surface_freezing_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lane_Classification_RoadCondition::set_has_surface_freezing_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lane_Classification_RoadCondition::clear_has_surface_freezing_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lane_Classification_RoadCondition::clear_surface_freezing_point() {
  surface_freezing_point_ = 0;
  clear_has_surface_freezing_point();
}
inline double Lane_Classification_RoadCondition::surface_freezing_point() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.RoadCondition.surface_freezing_point)
  return surface_freezing_point_;
}
inline void Lane_Classification_RoadCondition::set_surface_freezing_point(double value) {
  set_has_surface_freezing_point();
  surface_freezing_point_ = value;
  // @@protoc_insertion_point(field_set:osi3.Lane.Classification.RoadCondition.surface_freezing_point)
}

// optional double surface_ice = 4;
inline bool Lane_Classification_RoadCondition::has_surface_ice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lane_Classification_RoadCondition::set_has_surface_ice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lane_Classification_RoadCondition::clear_has_surface_ice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lane_Classification_RoadCondition::clear_surface_ice() {
  surface_ice_ = 0;
  clear_has_surface_ice();
}
inline double Lane_Classification_RoadCondition::surface_ice() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.RoadCondition.surface_ice)
  return surface_ice_;
}
inline void Lane_Classification_RoadCondition::set_surface_ice(double value) {
  set_has_surface_ice();
  surface_ice_ = value;
  // @@protoc_insertion_point(field_set:osi3.Lane.Classification.RoadCondition.surface_ice)
}

// optional double surface_roughness = 5;
inline bool Lane_Classification_RoadCondition::has_surface_roughness() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Lane_Classification_RoadCondition::set_has_surface_roughness() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Lane_Classification_RoadCondition::clear_has_surface_roughness() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Lane_Classification_RoadCondition::clear_surface_roughness() {
  surface_roughness_ = 0;
  clear_has_surface_roughness();
}
inline double Lane_Classification_RoadCondition::surface_roughness() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.RoadCondition.surface_roughness)
  return surface_roughness_;
}
inline void Lane_Classification_RoadCondition::set_surface_roughness(double value) {
  set_has_surface_roughness();
  surface_roughness_ = value;
  // @@protoc_insertion_point(field_set:osi3.Lane.Classification.RoadCondition.surface_roughness)
}

// optional double surface_texture = 6;
inline bool Lane_Classification_RoadCondition::has_surface_texture() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Lane_Classification_RoadCondition::set_has_surface_texture() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Lane_Classification_RoadCondition::clear_has_surface_texture() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Lane_Classification_RoadCondition::clear_surface_texture() {
  surface_texture_ = 0;
  clear_has_surface_texture();
}
inline double Lane_Classification_RoadCondition::surface_texture() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.RoadCondition.surface_texture)
  return surface_texture_;
}
inline void Lane_Classification_RoadCondition::set_surface_texture(double value) {
  set_has_surface_texture();
  surface_texture_ = value;
  // @@protoc_insertion_point(field_set:osi3.Lane.Classification.RoadCondition.surface_texture)
}

// -------------------------------------------------------------------

// Lane_Classification_LanePairing

// optional .osi3.Identifier antecessor_lane_id = 1;
inline bool Lane_Classification_LanePairing::has_antecessor_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lane_Classification_LanePairing::set_has_antecessor_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lane_Classification_LanePairing::clear_has_antecessor_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lane_Classification_LanePairing::clear_antecessor_lane_id() {
  if (antecessor_lane_id_ != NULL) antecessor_lane_id_->::osi3::Identifier::Clear();
  clear_has_antecessor_lane_id();
}
inline const ::osi3::Identifier& Lane_Classification_LanePairing::antecessor_lane_id() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.LanePairing.antecessor_lane_id)
  return antecessor_lane_id_ != NULL ? *antecessor_lane_id_ : *default_instance_->antecessor_lane_id_;
}
inline ::osi3::Identifier* Lane_Classification_LanePairing::mutable_antecessor_lane_id() {
  set_has_antecessor_lane_id();
  if (antecessor_lane_id_ == NULL) {
    antecessor_lane_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.Lane.Classification.LanePairing.antecessor_lane_id)
  return antecessor_lane_id_;
}
inline ::osi3::Identifier* Lane_Classification_LanePairing::release_antecessor_lane_id() {
  // @@protoc_insertion_point(field_release:osi3.Lane.Classification.LanePairing.antecessor_lane_id)
  clear_has_antecessor_lane_id();
  ::osi3::Identifier* temp = antecessor_lane_id_;
  antecessor_lane_id_ = NULL;
  return temp;
}
inline void Lane_Classification_LanePairing::set_allocated_antecessor_lane_id(::osi3::Identifier* antecessor_lane_id) {
  delete antecessor_lane_id_;
  antecessor_lane_id_ = antecessor_lane_id;
  if (antecessor_lane_id) {
    set_has_antecessor_lane_id();
  } else {
    clear_has_antecessor_lane_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.Lane.Classification.LanePairing.antecessor_lane_id)
}

// optional .osi3.Identifier successor_lane_id = 2;
inline bool Lane_Classification_LanePairing::has_successor_lane_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lane_Classification_LanePairing::set_has_successor_lane_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lane_Classification_LanePairing::clear_has_successor_lane_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lane_Classification_LanePairing::clear_successor_lane_id() {
  if (successor_lane_id_ != NULL) successor_lane_id_->::osi3::Identifier::Clear();
  clear_has_successor_lane_id();
}
inline const ::osi3::Identifier& Lane_Classification_LanePairing::successor_lane_id() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.LanePairing.successor_lane_id)
  return successor_lane_id_ != NULL ? *successor_lane_id_ : *default_instance_->successor_lane_id_;
}
inline ::osi3::Identifier* Lane_Classification_LanePairing::mutable_successor_lane_id() {
  set_has_successor_lane_id();
  if (successor_lane_id_ == NULL) {
    successor_lane_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.Lane.Classification.LanePairing.successor_lane_id)
  return successor_lane_id_;
}
inline ::osi3::Identifier* Lane_Classification_LanePairing::release_successor_lane_id() {
  // @@protoc_insertion_point(field_release:osi3.Lane.Classification.LanePairing.successor_lane_id)
  clear_has_successor_lane_id();
  ::osi3::Identifier* temp = successor_lane_id_;
  successor_lane_id_ = NULL;
  return temp;
}
inline void Lane_Classification_LanePairing::set_allocated_successor_lane_id(::osi3::Identifier* successor_lane_id) {
  delete successor_lane_id_;
  successor_lane_id_ = successor_lane_id;
  if (successor_lane_id) {
    set_has_successor_lane_id();
  } else {
    clear_has_successor_lane_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.Lane.Classification.LanePairing.successor_lane_id)
}

// -------------------------------------------------------------------

// Lane_Classification

// optional .osi3.Lane.Classification.Type type = 1;
inline bool Lane_Classification::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lane_Classification::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lane_Classification::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lane_Classification::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::osi3::Lane_Classification_Type Lane_Classification::type() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.type)
  return static_cast< ::osi3::Lane_Classification_Type >(type_);
}
inline void Lane_Classification::set_type(::osi3::Lane_Classification_Type value) {
  assert(::osi3::Lane_Classification_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.Lane.Classification.type)
}

// optional bool is_host_vehicle_lane = 2;
inline bool Lane_Classification::has_is_host_vehicle_lane() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lane_Classification::set_has_is_host_vehicle_lane() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lane_Classification::clear_has_is_host_vehicle_lane() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lane_Classification::clear_is_host_vehicle_lane() {
  is_host_vehicle_lane_ = false;
  clear_has_is_host_vehicle_lane();
}
inline bool Lane_Classification::is_host_vehicle_lane() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.is_host_vehicle_lane)
  return is_host_vehicle_lane_;
}
inline void Lane_Classification::set_is_host_vehicle_lane(bool value) {
  set_has_is_host_vehicle_lane();
  is_host_vehicle_lane_ = value;
  // @@protoc_insertion_point(field_set:osi3.Lane.Classification.is_host_vehicle_lane)
}

// repeated .osi3.Vector3d centerline = 3;
inline int Lane_Classification::centerline_size() const {
  return centerline_.size();
}
inline void Lane_Classification::clear_centerline() {
  centerline_.Clear();
}
inline const ::osi3::Vector3d& Lane_Classification::centerline(int index) const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.centerline)
  return centerline_.Get(index);
}
inline ::osi3::Vector3d* Lane_Classification::mutable_centerline(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.Lane.Classification.centerline)
  return centerline_.Mutable(index);
}
inline ::osi3::Vector3d* Lane_Classification::add_centerline() {
  // @@protoc_insertion_point(field_add:osi3.Lane.Classification.centerline)
  return centerline_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Vector3d >*
Lane_Classification::mutable_centerline() {
  // @@protoc_insertion_point(field_mutable_list:osi3.Lane.Classification.centerline)
  return &centerline_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Vector3d >&
Lane_Classification::centerline() const {
  // @@protoc_insertion_point(field_list:osi3.Lane.Classification.centerline)
  return centerline_;
}

// optional bool centerline_is_driving_direction = 4;
inline bool Lane_Classification::has_centerline_is_driving_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lane_Classification::set_has_centerline_is_driving_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lane_Classification::clear_has_centerline_is_driving_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lane_Classification::clear_centerline_is_driving_direction() {
  centerline_is_driving_direction_ = false;
  clear_has_centerline_is_driving_direction();
}
inline bool Lane_Classification::centerline_is_driving_direction() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.centerline_is_driving_direction)
  return centerline_is_driving_direction_;
}
inline void Lane_Classification::set_centerline_is_driving_direction(bool value) {
  set_has_centerline_is_driving_direction();
  centerline_is_driving_direction_ = value;
  // @@protoc_insertion_point(field_set:osi3.Lane.Classification.centerline_is_driving_direction)
}

// repeated .osi3.Identifier left_adjacent_lane_id = 5;
inline int Lane_Classification::left_adjacent_lane_id_size() const {
  return left_adjacent_lane_id_.size();
}
inline void Lane_Classification::clear_left_adjacent_lane_id() {
  left_adjacent_lane_id_.Clear();
}
inline const ::osi3::Identifier& Lane_Classification::left_adjacent_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.left_adjacent_lane_id)
  return left_adjacent_lane_id_.Get(index);
}
inline ::osi3::Identifier* Lane_Classification::mutable_left_adjacent_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.Lane.Classification.left_adjacent_lane_id)
  return left_adjacent_lane_id_.Mutable(index);
}
inline ::osi3::Identifier* Lane_Classification::add_left_adjacent_lane_id() {
  // @@protoc_insertion_point(field_add:osi3.Lane.Classification.left_adjacent_lane_id)
  return left_adjacent_lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
Lane_Classification::mutable_left_adjacent_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.Lane.Classification.left_adjacent_lane_id)
  return &left_adjacent_lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
Lane_Classification::left_adjacent_lane_id() const {
  // @@protoc_insertion_point(field_list:osi3.Lane.Classification.left_adjacent_lane_id)
  return left_adjacent_lane_id_;
}

// repeated .osi3.Identifier right_adjacent_lane_id = 6;
inline int Lane_Classification::right_adjacent_lane_id_size() const {
  return right_adjacent_lane_id_.size();
}
inline void Lane_Classification::clear_right_adjacent_lane_id() {
  right_adjacent_lane_id_.Clear();
}
inline const ::osi3::Identifier& Lane_Classification::right_adjacent_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.right_adjacent_lane_id)
  return right_adjacent_lane_id_.Get(index);
}
inline ::osi3::Identifier* Lane_Classification::mutable_right_adjacent_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.Lane.Classification.right_adjacent_lane_id)
  return right_adjacent_lane_id_.Mutable(index);
}
inline ::osi3::Identifier* Lane_Classification::add_right_adjacent_lane_id() {
  // @@protoc_insertion_point(field_add:osi3.Lane.Classification.right_adjacent_lane_id)
  return right_adjacent_lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
Lane_Classification::mutable_right_adjacent_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.Lane.Classification.right_adjacent_lane_id)
  return &right_adjacent_lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
Lane_Classification::right_adjacent_lane_id() const {
  // @@protoc_insertion_point(field_list:osi3.Lane.Classification.right_adjacent_lane_id)
  return right_adjacent_lane_id_;
}

// repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
inline int Lane_Classification::lane_pairing_size() const {
  return lane_pairing_.size();
}
inline void Lane_Classification::clear_lane_pairing() {
  lane_pairing_.Clear();
}
inline const ::osi3::Lane_Classification_LanePairing& Lane_Classification::lane_pairing(int index) const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.lane_pairing)
  return lane_pairing_.Get(index);
}
inline ::osi3::Lane_Classification_LanePairing* Lane_Classification::mutable_lane_pairing(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.Lane.Classification.lane_pairing)
  return lane_pairing_.Mutable(index);
}
inline ::osi3::Lane_Classification_LanePairing* Lane_Classification::add_lane_pairing() {
  // @@protoc_insertion_point(field_add:osi3.Lane.Classification.lane_pairing)
  return lane_pairing_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Lane_Classification_LanePairing >*
Lane_Classification::mutable_lane_pairing() {
  // @@protoc_insertion_point(field_mutable_list:osi3.Lane.Classification.lane_pairing)
  return &lane_pairing_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Lane_Classification_LanePairing >&
Lane_Classification::lane_pairing() const {
  // @@protoc_insertion_point(field_list:osi3.Lane.Classification.lane_pairing)
  return lane_pairing_;
}

// repeated .osi3.Identifier right_lane_boundary_id = 8;
inline int Lane_Classification::right_lane_boundary_id_size() const {
  return right_lane_boundary_id_.size();
}
inline void Lane_Classification::clear_right_lane_boundary_id() {
  right_lane_boundary_id_.Clear();
}
inline const ::osi3::Identifier& Lane_Classification::right_lane_boundary_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.right_lane_boundary_id)
  return right_lane_boundary_id_.Get(index);
}
inline ::osi3::Identifier* Lane_Classification::mutable_right_lane_boundary_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.Lane.Classification.right_lane_boundary_id)
  return right_lane_boundary_id_.Mutable(index);
}
inline ::osi3::Identifier* Lane_Classification::add_right_lane_boundary_id() {
  // @@protoc_insertion_point(field_add:osi3.Lane.Classification.right_lane_boundary_id)
  return right_lane_boundary_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
Lane_Classification::mutable_right_lane_boundary_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.Lane.Classification.right_lane_boundary_id)
  return &right_lane_boundary_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
Lane_Classification::right_lane_boundary_id() const {
  // @@protoc_insertion_point(field_list:osi3.Lane.Classification.right_lane_boundary_id)
  return right_lane_boundary_id_;
}

// repeated .osi3.Identifier left_lane_boundary_id = 9;
inline int Lane_Classification::left_lane_boundary_id_size() const {
  return left_lane_boundary_id_.size();
}
inline void Lane_Classification::clear_left_lane_boundary_id() {
  left_lane_boundary_id_.Clear();
}
inline const ::osi3::Identifier& Lane_Classification::left_lane_boundary_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.left_lane_boundary_id)
  return left_lane_boundary_id_.Get(index);
}
inline ::osi3::Identifier* Lane_Classification::mutable_left_lane_boundary_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.Lane.Classification.left_lane_boundary_id)
  return left_lane_boundary_id_.Mutable(index);
}
inline ::osi3::Identifier* Lane_Classification::add_left_lane_boundary_id() {
  // @@protoc_insertion_point(field_add:osi3.Lane.Classification.left_lane_boundary_id)
  return left_lane_boundary_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
Lane_Classification::mutable_left_lane_boundary_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.Lane.Classification.left_lane_boundary_id)
  return &left_lane_boundary_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
Lane_Classification::left_lane_boundary_id() const {
  // @@protoc_insertion_point(field_list:osi3.Lane.Classification.left_lane_boundary_id)
  return left_lane_boundary_id_;
}

// repeated .osi3.Identifier free_lane_boundary_id = 10;
inline int Lane_Classification::free_lane_boundary_id_size() const {
  return free_lane_boundary_id_.size();
}
inline void Lane_Classification::clear_free_lane_boundary_id() {
  free_lane_boundary_id_.Clear();
}
inline const ::osi3::Identifier& Lane_Classification::free_lane_boundary_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.free_lane_boundary_id)
  return free_lane_boundary_id_.Get(index);
}
inline ::osi3::Identifier* Lane_Classification::mutable_free_lane_boundary_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.Lane.Classification.free_lane_boundary_id)
  return free_lane_boundary_id_.Mutable(index);
}
inline ::osi3::Identifier* Lane_Classification::add_free_lane_boundary_id() {
  // @@protoc_insertion_point(field_add:osi3.Lane.Classification.free_lane_boundary_id)
  return free_lane_boundary_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
Lane_Classification::mutable_free_lane_boundary_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.Lane.Classification.free_lane_boundary_id)
  return &free_lane_boundary_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
Lane_Classification::free_lane_boundary_id() const {
  // @@protoc_insertion_point(field_list:osi3.Lane.Classification.free_lane_boundary_id)
  return free_lane_boundary_id_;
}

// optional .osi3.Lane.Classification.RoadCondition road_condition = 11;
inline bool Lane_Classification::has_road_condition() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Lane_Classification::set_has_road_condition() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Lane_Classification::clear_has_road_condition() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Lane_Classification::clear_road_condition() {
  if (road_condition_ != NULL) road_condition_->::osi3::Lane_Classification_RoadCondition::Clear();
  clear_has_road_condition();
}
inline const ::osi3::Lane_Classification_RoadCondition& Lane_Classification::road_condition() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.Classification.road_condition)
  return road_condition_ != NULL ? *road_condition_ : *default_instance_->road_condition_;
}
inline ::osi3::Lane_Classification_RoadCondition* Lane_Classification::mutable_road_condition() {
  set_has_road_condition();
  if (road_condition_ == NULL) {
    road_condition_ = new ::osi3::Lane_Classification_RoadCondition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.Lane.Classification.road_condition)
  return road_condition_;
}
inline ::osi3::Lane_Classification_RoadCondition* Lane_Classification::release_road_condition() {
  // @@protoc_insertion_point(field_release:osi3.Lane.Classification.road_condition)
  clear_has_road_condition();
  ::osi3::Lane_Classification_RoadCondition* temp = road_condition_;
  road_condition_ = NULL;
  return temp;
}
inline void Lane_Classification::set_allocated_road_condition(::osi3::Lane_Classification_RoadCondition* road_condition) {
  delete road_condition_;
  road_condition_ = road_condition;
  if (road_condition) {
    set_has_road_condition();
  } else {
    clear_has_road_condition();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.Lane.Classification.road_condition)
}

// -------------------------------------------------------------------

// Lane

// optional .osi3.Identifier id = 1;
inline bool Lane::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lane::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lane::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lane::clear_id() {
  if (id_ != NULL) id_->::osi3::Identifier::Clear();
  clear_has_id();
}
inline const ::osi3::Identifier& Lane::id() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::osi3::Identifier* Lane::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.Lane.id)
  return id_;
}
inline ::osi3::Identifier* Lane::release_id() {
  // @@protoc_insertion_point(field_release:osi3.Lane.id)
  clear_has_id();
  ::osi3::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Lane::set_allocated_id(::osi3::Identifier* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.Lane.id)
}

// optional .osi3.Lane.Classification classification = 2;
inline bool Lane::has_classification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lane::set_has_classification() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lane::clear_has_classification() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lane::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::Lane_Classification::Clear();
  clear_has_classification();
}
inline const ::osi3::Lane_Classification& Lane::classification() const {
  // @@protoc_insertion_point(field_get:osi3.Lane.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
inline ::osi3::Lane_Classification* Lane::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::Lane_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.Lane.classification)
  return classification_;
}
inline ::osi3::Lane_Classification* Lane::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.Lane.classification)
  clear_has_classification();
  ::osi3::Lane_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
inline void Lane::set_allocated_classification(::osi3::Lane_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.Lane.classification)
}

// -------------------------------------------------------------------

// LaneBoundary_BoundaryPoint

// optional .osi3.Vector3d position = 1;
inline bool LaneBoundary_BoundaryPoint::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneBoundary_BoundaryPoint::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneBoundary_BoundaryPoint::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneBoundary_BoundaryPoint::clear_position() {
  if (position_ != NULL) position_->::osi3::Vector3d::Clear();
  clear_has_position();
}
inline const ::osi3::Vector3d& LaneBoundary_BoundaryPoint::position() const {
  // @@protoc_insertion_point(field_get:osi3.LaneBoundary.BoundaryPoint.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::osi3::Vector3d* LaneBoundary_BoundaryPoint::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LaneBoundary.BoundaryPoint.position)
  return position_;
}
inline ::osi3::Vector3d* LaneBoundary_BoundaryPoint::release_position() {
  // @@protoc_insertion_point(field_release:osi3.LaneBoundary.BoundaryPoint.position)
  clear_has_position();
  ::osi3::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline void LaneBoundary_BoundaryPoint::set_allocated_position(::osi3::Vector3d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LaneBoundary.BoundaryPoint.position)
}

// optional double width = 2;
inline bool LaneBoundary_BoundaryPoint::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneBoundary_BoundaryPoint::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneBoundary_BoundaryPoint::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneBoundary_BoundaryPoint::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double LaneBoundary_BoundaryPoint::width() const {
  // @@protoc_insertion_point(field_get:osi3.LaneBoundary.BoundaryPoint.width)
  return width_;
}
inline void LaneBoundary_BoundaryPoint::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:osi3.LaneBoundary.BoundaryPoint.width)
}

// optional double height = 3;
inline bool LaneBoundary_BoundaryPoint::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneBoundary_BoundaryPoint::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneBoundary_BoundaryPoint::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneBoundary_BoundaryPoint::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double LaneBoundary_BoundaryPoint::height() const {
  // @@protoc_insertion_point(field_get:osi3.LaneBoundary.BoundaryPoint.height)
  return height_;
}
inline void LaneBoundary_BoundaryPoint::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:osi3.LaneBoundary.BoundaryPoint.height)
}

// -------------------------------------------------------------------

// LaneBoundary_Classification

// optional .osi3.LaneBoundary.Classification.Type type = 1;
inline bool LaneBoundary_Classification::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneBoundary_Classification::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneBoundary_Classification::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneBoundary_Classification::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::osi3::LaneBoundary_Classification_Type LaneBoundary_Classification::type() const {
  // @@protoc_insertion_point(field_get:osi3.LaneBoundary.Classification.type)
  return static_cast< ::osi3::LaneBoundary_Classification_Type >(type_);
}
inline void LaneBoundary_Classification::set_type(::osi3::LaneBoundary_Classification_Type value) {
  assert(::osi3::LaneBoundary_Classification_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.LaneBoundary.Classification.type)
}

// optional .osi3.LaneBoundary.Classification.Color color = 2;
inline bool LaneBoundary_Classification::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneBoundary_Classification::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneBoundary_Classification::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneBoundary_Classification::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::osi3::LaneBoundary_Classification_Color LaneBoundary_Classification::color() const {
  // @@protoc_insertion_point(field_get:osi3.LaneBoundary.Classification.color)
  return static_cast< ::osi3::LaneBoundary_Classification_Color >(color_);
}
inline void LaneBoundary_Classification::set_color(::osi3::LaneBoundary_Classification_Color value) {
  assert(::osi3::LaneBoundary_Classification_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:osi3.LaneBoundary.Classification.color)
}

// repeated .osi3.Identifier limiting_structure_id = 3;
inline int LaneBoundary_Classification::limiting_structure_id_size() const {
  return limiting_structure_id_.size();
}
inline void LaneBoundary_Classification::clear_limiting_structure_id() {
  limiting_structure_id_.Clear();
}
inline const ::osi3::Identifier& LaneBoundary_Classification::limiting_structure_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LaneBoundary.Classification.limiting_structure_id)
  return limiting_structure_id_.Get(index);
}
inline ::osi3::Identifier* LaneBoundary_Classification::mutable_limiting_structure_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LaneBoundary.Classification.limiting_structure_id)
  return limiting_structure_id_.Mutable(index);
}
inline ::osi3::Identifier* LaneBoundary_Classification::add_limiting_structure_id() {
  // @@protoc_insertion_point(field_add:osi3.LaneBoundary.Classification.limiting_structure_id)
  return limiting_structure_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
LaneBoundary_Classification::mutable_limiting_structure_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LaneBoundary.Classification.limiting_structure_id)
  return &limiting_structure_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
LaneBoundary_Classification::limiting_structure_id() const {
  // @@protoc_insertion_point(field_list:osi3.LaneBoundary.Classification.limiting_structure_id)
  return limiting_structure_id_;
}

// -------------------------------------------------------------------

// LaneBoundary

// optional .osi3.Identifier id = 1;
inline bool LaneBoundary::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneBoundary::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneBoundary::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneBoundary::clear_id() {
  if (id_ != NULL) id_->::osi3::Identifier::Clear();
  clear_has_id();
}
inline const ::osi3::Identifier& LaneBoundary::id() const {
  // @@protoc_insertion_point(field_get:osi3.LaneBoundary.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::osi3::Identifier* LaneBoundary::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LaneBoundary.id)
  return id_;
}
inline ::osi3::Identifier* LaneBoundary::release_id() {
  // @@protoc_insertion_point(field_release:osi3.LaneBoundary.id)
  clear_has_id();
  ::osi3::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline void LaneBoundary::set_allocated_id(::osi3::Identifier* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LaneBoundary.id)
}

// repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
inline int LaneBoundary::boundary_line_size() const {
  return boundary_line_.size();
}
inline void LaneBoundary::clear_boundary_line() {
  boundary_line_.Clear();
}
inline const ::osi3::LaneBoundary_BoundaryPoint& LaneBoundary::boundary_line(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LaneBoundary.boundary_line)
  return boundary_line_.Get(index);
}
inline ::osi3::LaneBoundary_BoundaryPoint* LaneBoundary::mutable_boundary_line(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LaneBoundary.boundary_line)
  return boundary_line_.Mutable(index);
}
inline ::osi3::LaneBoundary_BoundaryPoint* LaneBoundary::add_boundary_line() {
  // @@protoc_insertion_point(field_add:osi3.LaneBoundary.boundary_line)
  return boundary_line_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary_BoundaryPoint >*
LaneBoundary::mutable_boundary_line() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LaneBoundary.boundary_line)
  return &boundary_line_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary_BoundaryPoint >&
LaneBoundary::boundary_line() const {
  // @@protoc_insertion_point(field_list:osi3.LaneBoundary.boundary_line)
  return boundary_line_;
}

// optional .osi3.LaneBoundary.Classification classification = 3;
inline bool LaneBoundary::has_classification() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneBoundary::set_has_classification() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneBoundary::clear_has_classification() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneBoundary::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::LaneBoundary_Classification::Clear();
  clear_has_classification();
}
inline const ::osi3::LaneBoundary_Classification& LaneBoundary::classification() const {
  // @@protoc_insertion_point(field_get:osi3.LaneBoundary.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
inline ::osi3::LaneBoundary_Classification* LaneBoundary::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::LaneBoundary_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LaneBoundary.classification)
  return classification_;
}
inline ::osi3::LaneBoundary_Classification* LaneBoundary::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.LaneBoundary.classification)
  clear_has_classification();
  ::osi3::LaneBoundary_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
inline void LaneBoundary::set_allocated_classification(::osi3::LaneBoundary_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LaneBoundary.classification)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::osi3::Lane_Classification_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::Lane_Classification_Type>() {
  return ::osi3::Lane_Classification_Type_descriptor();
}
template <> struct is_proto_enum< ::osi3::LaneBoundary_Classification_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::LaneBoundary_Classification_Type>() {
  return ::osi3::LaneBoundary_Classification_Type_descriptor();
}
template <> struct is_proto_enum< ::osi3::LaneBoundary_Classification_Color> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::LaneBoundary_Classification_Color>() {
  return ::osi3::LaneBoundary_Classification_Color_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osi_5flane_2eproto__INCLUDED
