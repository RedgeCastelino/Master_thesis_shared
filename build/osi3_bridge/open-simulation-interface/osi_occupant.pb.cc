// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_occupant.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_occupant.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* Occupant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Occupant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Occupant_Classification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Occupant_Classification_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Occupant_Classification_Seat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Occupant_Classification_SteeringControl_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5foccupant_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5foccupant_2eproto() {
  protobuf_AddDesc_osi_5foccupant_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_occupant.proto");
  GOOGLE_CHECK(file != NULL);
  Occupant_descriptor_ = file->message_type(0);
  static const int Occupant_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Occupant, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Occupant, classification_),
  };
  Occupant_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Occupant_descriptor_,
      Occupant::default_instance_,
      Occupant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Occupant, _has_bits_[0]),
      -1,
      -1,
      sizeof(Occupant),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Occupant, _internal_metadata_),
      -1);
  Occupant_Classification_descriptor_ = Occupant_descriptor_->nested_type(0);
  static const int Occupant_Classification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Occupant_Classification, is_driver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Occupant_Classification, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Occupant_Classification, steering_control_),
  };
  Occupant_Classification_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Occupant_Classification_descriptor_,
      Occupant_Classification::default_instance_,
      Occupant_Classification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Occupant_Classification, _has_bits_[0]),
      -1,
      -1,
      sizeof(Occupant_Classification),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Occupant_Classification, _internal_metadata_),
      -1);
  Occupant_Classification_Seat_descriptor_ = Occupant_Classification_descriptor_->enum_type(0);
  Occupant_Classification_SteeringControl_descriptor_ = Occupant_Classification_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5foccupant_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Occupant_descriptor_, &Occupant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Occupant_Classification_descriptor_, &Occupant_Classification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5foccupant_2eproto() {
  delete Occupant::default_instance_;
  delete Occupant_reflection_;
  delete Occupant_Classification::default_instance_;
  delete Occupant_Classification_reflection_;
}

void protobuf_AddDesc_osi_5foccupant_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5foccupant_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::osi3::protobuf_AddDesc_osi_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022osi_occupant.proto\022\004osi3\032\020osi_common.p"
    "roto\"\347\005\n\010Occupant\022\034\n\002id\030\001 \001(\0132\020.osi3.Ide"
    "ntifier\0225\n\016classification\030\002 \001(\0132\035.osi3.O"
    "ccupant.Classification\032\205\005\n\016Classificatio"
    "n\022\021\n\tis_driver\030\002 \001(\010\0220\n\004seat\030\003 \001(\0162\".osi"
    "3.Occupant.Classification.Seat\022G\n\020steeri"
    "ng_control\030\004 \001(\0162-.osi3.Occupant.Classif"
    "ication.SteeringControl\"\367\001\n\004Seat\022\020\n\014SEAT"
    "_UNKNOWN\020\000\022\016\n\nSEAT_OTHER\020\001\022\023\n\017SEAT_FRONT"
    "_LEFT\020\002\022\024\n\020SEAT_FRONT_RIGHT\020\003\022\025\n\021SEAT_FR"
    "ONT_MIDDLE\020\004\022\022\n\016SEAT_BACK_LEFT\020\005\022\023\n\017SEAT"
    "_BACK_RIGHT\020\006\022\024\n\020SEAT_BACK_MIDDLE\020\007\022\027\n\023S"
    "EAT_THIRD_ROW_LEFT\020\010\022\030\n\024SEAT_THIRD_ROW_R"
    "IGHT\020\t\022\031\n\025SEAT_THIRD_ROW_MIDDLE\020\n\"\352\001\n\017St"
    "eeringControl\022\034\n\030STEERING_CONTROL_UNKNOW"
    "N\020\000\022\032\n\026STEERING_CONTROL_OTHER\020\001\022\034\n\030STEER"
    "ING_CONTROL_NO_HAND\020\002\022\035\n\031STEERING_CONTRO"
    "L_ONE_HAND\020\003\022\037\n\033STEERING_CONTROL_BOTH_HA"
    "NDS\020\004\022\036\n\032STEERING_CONTROL_LEFT_HAND\020\005\022\037\n"
    "\033STEERING_CONTROL_RIGHT_HAND\020\006B\002H\001", 794);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_occupant.proto", &protobuf_RegisterTypes);
  Occupant::default_instance_ = new Occupant();
  Occupant_Classification::default_instance_ = new Occupant_Classification();
  Occupant::default_instance_->InitAsDefaultInstance();
  Occupant_Classification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5foccupant_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5foccupant_2eproto {
  StaticDescriptorInitializer_osi_5foccupant_2eproto() {
    protobuf_AddDesc_osi_5foccupant_2eproto();
  }
} static_descriptor_initializer_osi_5foccupant_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Occupant_Classification_Seat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Occupant_Classification_Seat_descriptor_;
}
bool Occupant_Classification_Seat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Occupant_Classification_Seat Occupant_Classification::SEAT_UNKNOWN;
const Occupant_Classification_Seat Occupant_Classification::SEAT_OTHER;
const Occupant_Classification_Seat Occupant_Classification::SEAT_FRONT_LEFT;
const Occupant_Classification_Seat Occupant_Classification::SEAT_FRONT_RIGHT;
const Occupant_Classification_Seat Occupant_Classification::SEAT_FRONT_MIDDLE;
const Occupant_Classification_Seat Occupant_Classification::SEAT_BACK_LEFT;
const Occupant_Classification_Seat Occupant_Classification::SEAT_BACK_RIGHT;
const Occupant_Classification_Seat Occupant_Classification::SEAT_BACK_MIDDLE;
const Occupant_Classification_Seat Occupant_Classification::SEAT_THIRD_ROW_LEFT;
const Occupant_Classification_Seat Occupant_Classification::SEAT_THIRD_ROW_RIGHT;
const Occupant_Classification_Seat Occupant_Classification::SEAT_THIRD_ROW_MIDDLE;
const Occupant_Classification_Seat Occupant_Classification::Seat_MIN;
const Occupant_Classification_Seat Occupant_Classification::Seat_MAX;
const int Occupant_Classification::Seat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Occupant_Classification_SteeringControl_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Occupant_Classification_SteeringControl_descriptor_;
}
bool Occupant_Classification_SteeringControl_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Occupant_Classification_SteeringControl Occupant_Classification::STEERING_CONTROL_UNKNOWN;
const Occupant_Classification_SteeringControl Occupant_Classification::STEERING_CONTROL_OTHER;
const Occupant_Classification_SteeringControl Occupant_Classification::STEERING_CONTROL_NO_HAND;
const Occupant_Classification_SteeringControl Occupant_Classification::STEERING_CONTROL_ONE_HAND;
const Occupant_Classification_SteeringControl Occupant_Classification::STEERING_CONTROL_BOTH_HANDS;
const Occupant_Classification_SteeringControl Occupant_Classification::STEERING_CONTROL_LEFT_HAND;
const Occupant_Classification_SteeringControl Occupant_Classification::STEERING_CONTROL_RIGHT_HAND;
const Occupant_Classification_SteeringControl Occupant_Classification::SteeringControl_MIN;
const Occupant_Classification_SteeringControl Occupant_Classification::SteeringControl_MAX;
const int Occupant_Classification::SteeringControl_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Occupant_Classification::kIsDriverFieldNumber;
const int Occupant_Classification::kSeatFieldNumber;
const int Occupant_Classification::kSteeringControlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Occupant_Classification::Occupant_Classification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Occupant.Classification)
}

void Occupant_Classification::InitAsDefaultInstance() {
}

Occupant_Classification::Occupant_Classification(const Occupant_Classification& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.Occupant.Classification)
}

void Occupant_Classification::SharedCtor() {
  _cached_size_ = 0;
  is_driver_ = false;
  seat_ = 0;
  steering_control_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Occupant_Classification::~Occupant_Classification() {
  // @@protoc_insertion_point(destructor:osi3.Occupant.Classification)
  SharedDtor();
}

void Occupant_Classification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Occupant_Classification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Occupant_Classification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Occupant_Classification_descriptor_;
}

const Occupant_Classification& Occupant_Classification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5foccupant_2eproto();
  return *default_instance_;
}

Occupant_Classification* Occupant_Classification::default_instance_ = NULL;

Occupant_Classification* Occupant_Classification::New(::google::protobuf::Arena* arena) const {
  Occupant_Classification* n = new Occupant_Classification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Occupant_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Occupant.Classification)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Occupant_Classification, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Occupant_Classification*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_driver_, steering_control_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Occupant_Classification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Occupant.Classification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_driver = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_driver_)));
          set_has_is_driver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seat;
        break;
      }

      // optional .osi3.Occupant.Classification.Seat seat = 3;
      case 3: {
        if (tag == 24) {
         parse_seat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::Occupant_Classification_Seat_IsValid(value)) {
            set_seat(static_cast< ::osi3::Occupant_Classification_Seat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_steering_control;
        break;
      }

      // optional .osi3.Occupant.Classification.SteeringControl steering_control = 4;
      case 4: {
        if (tag == 32) {
         parse_steering_control:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::Occupant_Classification_SteeringControl_IsValid(value)) {
            set_steering_control(static_cast< ::osi3::Occupant_Classification_SteeringControl >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Occupant.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Occupant.Classification)
  return false;
#undef DO_
}

void Occupant_Classification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Occupant.Classification)
  // optional bool is_driver = 2;
  if (has_is_driver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_driver(), output);
  }

  // optional .osi3.Occupant.Classification.Seat seat = 3;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->seat(), output);
  }

  // optional .osi3.Occupant.Classification.SteeringControl steering_control = 4;
  if (has_steering_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->steering_control(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Occupant.Classification)
}

::google::protobuf::uint8* Occupant_Classification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Occupant.Classification)
  // optional bool is_driver = 2;
  if (has_is_driver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_driver(), target);
  }

  // optional .osi3.Occupant.Classification.Seat seat = 3;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->seat(), target);
  }

  // optional .osi3.Occupant.Classification.SteeringControl steering_control = 4;
  if (has_steering_control()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->steering_control(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Occupant.Classification)
  return target;
}

int Occupant_Classification::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Occupant.Classification)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool is_driver = 2;
    if (has_is_driver()) {
      total_size += 1 + 1;
    }

    // optional .osi3.Occupant.Classification.Seat seat = 3;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->seat());
    }

    // optional .osi3.Occupant.Classification.SteeringControl steering_control = 4;
    if (has_steering_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->steering_control());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Occupant_Classification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Occupant.Classification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Occupant_Classification* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Occupant_Classification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Occupant.Classification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Occupant.Classification)
    MergeFrom(*source);
  }
}

void Occupant_Classification::MergeFrom(const Occupant_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Occupant.Classification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_driver()) {
      set_is_driver(from.is_driver());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_steering_control()) {
      set_steering_control(from.steering_control());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Occupant_Classification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Occupant.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Occupant_Classification::CopyFrom(const Occupant_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Occupant.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Occupant_Classification::IsInitialized() const {

  return true;
}

void Occupant_Classification::Swap(Occupant_Classification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Occupant_Classification::InternalSwap(Occupant_Classification* other) {
  std::swap(is_driver_, other->is_driver_);
  std::swap(seat_, other->seat_);
  std::swap(steering_control_, other->steering_control_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Occupant_Classification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Occupant_Classification_descriptor_;
  metadata.reflection = Occupant_Classification_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Occupant::kIdFieldNumber;
const int Occupant::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Occupant::Occupant()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Occupant)
}

void Occupant::InitAsDefaultInstance() {
  id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  classification_ = const_cast< ::osi3::Occupant_Classification*>(&::osi3::Occupant_Classification::default_instance());
}

Occupant::Occupant(const Occupant& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.Occupant)
}

void Occupant::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  classification_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Occupant::~Occupant() {
  // @@protoc_insertion_point(destructor:osi3.Occupant)
  SharedDtor();
}

void Occupant::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete classification_;
  }
}

void Occupant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Occupant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Occupant_descriptor_;
}

const Occupant& Occupant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5foccupant_2eproto();
  return *default_instance_;
}

Occupant* Occupant::default_instance_ = NULL;

Occupant* Occupant::New(::google::protobuf::Arena* arena) const {
  Occupant* n = new Occupant;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Occupant::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Occupant)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      if (id_ != NULL) id_->::osi3::Identifier::Clear();
    }
    if (has_classification()) {
      if (classification_ != NULL) classification_->::osi3::Occupant_Classification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Occupant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Occupant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Identifier id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_classification;
        break;
      }

      // optional .osi3.Occupant.Classification classification = 2;
      case 2: {
        if (tag == 18) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Occupant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Occupant)
  return false;
#undef DO_
}

void Occupant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Occupant)
  // optional .osi3.Identifier id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .osi3.Occupant.Classification classification = 2;
  if (has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classification_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Occupant)
}

::google::protobuf::uint8* Occupant::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Occupant)
  // optional .osi3.Identifier id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // optional .osi3.Occupant.Classification classification = 2;
  if (has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->classification_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Occupant)
  return target;
}

int Occupant::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Occupant)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .osi3.Identifier id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .osi3.Occupant.Classification classification = 2;
    if (has_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->classification_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Occupant::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Occupant)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Occupant* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Occupant>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Occupant)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Occupant)
    MergeFrom(*source);
  }
}

void Occupant::MergeFrom(const Occupant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Occupant)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::osi3::Identifier::MergeFrom(from.id());
    }
    if (from.has_classification()) {
      mutable_classification()->::osi3::Occupant_Classification::MergeFrom(from.classification());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Occupant::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Occupant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Occupant::CopyFrom(const Occupant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Occupant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Occupant::IsInitialized() const {

  return true;
}

void Occupant::Swap(Occupant* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Occupant::InternalSwap(Occupant* other) {
  std::swap(id_, other->id_);
  std::swap(classification_, other->classification_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Occupant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Occupant_descriptor_;
  metadata.reflection = Occupant_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Occupant_Classification

// optional bool is_driver = 2;
bool Occupant_Classification::has_is_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Occupant_Classification::set_has_is_driver() {
  _has_bits_[0] |= 0x00000001u;
}
void Occupant_Classification::clear_has_is_driver() {
  _has_bits_[0] &= ~0x00000001u;
}
void Occupant_Classification::clear_is_driver() {
  is_driver_ = false;
  clear_has_is_driver();
}
 bool Occupant_Classification::is_driver() const {
  // @@protoc_insertion_point(field_get:osi3.Occupant.Classification.is_driver)
  return is_driver_;
}
 void Occupant_Classification::set_is_driver(bool value) {
  set_has_is_driver();
  is_driver_ = value;
  // @@protoc_insertion_point(field_set:osi3.Occupant.Classification.is_driver)
}

// optional .osi3.Occupant.Classification.Seat seat = 3;
bool Occupant_Classification::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Occupant_Classification::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
void Occupant_Classification::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
void Occupant_Classification::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
 ::osi3::Occupant_Classification_Seat Occupant_Classification::seat() const {
  // @@protoc_insertion_point(field_get:osi3.Occupant.Classification.seat)
  return static_cast< ::osi3::Occupant_Classification_Seat >(seat_);
}
 void Occupant_Classification::set_seat(::osi3::Occupant_Classification_Seat value) {
  assert(::osi3::Occupant_Classification_Seat_IsValid(value));
  set_has_seat();
  seat_ = value;
  // @@protoc_insertion_point(field_set:osi3.Occupant.Classification.seat)
}

// optional .osi3.Occupant.Classification.SteeringControl steering_control = 4;
bool Occupant_Classification::has_steering_control() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Occupant_Classification::set_has_steering_control() {
  _has_bits_[0] |= 0x00000004u;
}
void Occupant_Classification::clear_has_steering_control() {
  _has_bits_[0] &= ~0x00000004u;
}
void Occupant_Classification::clear_steering_control() {
  steering_control_ = 0;
  clear_has_steering_control();
}
 ::osi3::Occupant_Classification_SteeringControl Occupant_Classification::steering_control() const {
  // @@protoc_insertion_point(field_get:osi3.Occupant.Classification.steering_control)
  return static_cast< ::osi3::Occupant_Classification_SteeringControl >(steering_control_);
}
 void Occupant_Classification::set_steering_control(::osi3::Occupant_Classification_SteeringControl value) {
  assert(::osi3::Occupant_Classification_SteeringControl_IsValid(value));
  set_has_steering_control();
  steering_control_ = value;
  // @@protoc_insertion_point(field_set:osi3.Occupant.Classification.steering_control)
}

// -------------------------------------------------------------------

// Occupant

// optional .osi3.Identifier id = 1;
bool Occupant::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Occupant::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Occupant::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Occupant::clear_id() {
  if (id_ != NULL) id_->::osi3::Identifier::Clear();
  clear_has_id();
}
const ::osi3::Identifier& Occupant::id() const {
  // @@protoc_insertion_point(field_get:osi3.Occupant.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::osi3::Identifier* Occupant::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.Occupant.id)
  return id_;
}
::osi3::Identifier* Occupant::release_id() {
  // @@protoc_insertion_point(field_release:osi3.Occupant.id)
  clear_has_id();
  ::osi3::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
void Occupant::set_allocated_id(::osi3::Identifier* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.Occupant.id)
}

// optional .osi3.Occupant.Classification classification = 2;
bool Occupant::has_classification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Occupant::set_has_classification() {
  _has_bits_[0] |= 0x00000002u;
}
void Occupant::clear_has_classification() {
  _has_bits_[0] &= ~0x00000002u;
}
void Occupant::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::Occupant_Classification::Clear();
  clear_has_classification();
}
const ::osi3::Occupant_Classification& Occupant::classification() const {
  // @@protoc_insertion_point(field_get:osi3.Occupant.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
::osi3::Occupant_Classification* Occupant::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::Occupant_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.Occupant.classification)
  return classification_;
}
::osi3::Occupant_Classification* Occupant::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.Occupant.classification)
  clear_has_classification();
  ::osi3::Occupant_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
void Occupant::set_allocated_classification(::osi3::Occupant_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.Occupant.classification)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
