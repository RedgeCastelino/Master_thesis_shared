// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_featuredata.proto

#ifndef PROTOBUF_osi_5ffeaturedata_2eproto__INCLUDED
#define PROTOBUF_osi_5ffeaturedata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_version.pb.h"
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)

namespace osi3 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_osi_5ffeaturedata_2eproto();
void protobuf_AssignDesc_osi_5ffeaturedata_2eproto();
void protobuf_ShutdownFile_osi_5ffeaturedata_2eproto();

class FeatureData;
class LidarDetection;
class LidarDetectionData;
class RadarDetection;
class RadarDetectionData;
class SensorDetectionHeader;

enum SensorDetectionHeader_DataQualifier {
  SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_UNKNOWN = 0,
  SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_OTHER = 1,
  SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_AVAILABLE = 2,
  SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_AVAILABLE_REDUCED = 3,
  SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_NOT_AVAILABLE = 4,
  SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_BLINDNESS = 5,
  SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_TEMPORARY_AVAILABLE = 6
};
bool SensorDetectionHeader_DataQualifier_IsValid(int value);
const SensorDetectionHeader_DataQualifier SensorDetectionHeader_DataQualifier_DataQualifier_MIN = SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_UNKNOWN;
const SensorDetectionHeader_DataQualifier SensorDetectionHeader_DataQualifier_DataQualifier_MAX = SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_TEMPORARY_AVAILABLE;
const int SensorDetectionHeader_DataQualifier_DataQualifier_ARRAYSIZE = SensorDetectionHeader_DataQualifier_DataQualifier_MAX + 1;

const ::google::protobuf::EnumDescriptor* SensorDetectionHeader_DataQualifier_descriptor();
inline const ::std::string& SensorDetectionHeader_DataQualifier_Name(SensorDetectionHeader_DataQualifier value) {
  return ::google::protobuf::internal::NameOfEnum(
    SensorDetectionHeader_DataQualifier_descriptor(), value);
}
inline bool SensorDetectionHeader_DataQualifier_Parse(
    const ::std::string& name, SensorDetectionHeader_DataQualifier* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorDetectionHeader_DataQualifier>(
    SensorDetectionHeader_DataQualifier_descriptor(), name, value);
}
enum DetectionClassification {
  DETECTION_CLASSIFICATION_UNKNOWN = 0,
  DETECTION_CLASSIFICATION_OTHER = 1,
  DETECTION_CLASSIFICATION_INVALID = 2,
  DETECTION_CLASSIFICATION_CLUTTER = 3,
  DETECTION_CLASSIFICATION_OVERDRIVABLE = 4,
  DETECTION_CLASSIFICATION_UNDERDRIVABLE = 5
};
bool DetectionClassification_IsValid(int value);
const DetectionClassification DetectionClassification_MIN = DETECTION_CLASSIFICATION_UNKNOWN;
const DetectionClassification DetectionClassification_MAX = DETECTION_CLASSIFICATION_UNDERDRIVABLE;
const int DetectionClassification_ARRAYSIZE = DetectionClassification_MAX + 1;

const ::google::protobuf::EnumDescriptor* DetectionClassification_descriptor();
inline const ::std::string& DetectionClassification_Name(DetectionClassification value) {
  return ::google::protobuf::internal::NameOfEnum(
    DetectionClassification_descriptor(), value);
}
inline bool DetectionClassification_Parse(
    const ::std::string& name, DetectionClassification* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetectionClassification>(
    DetectionClassification_descriptor(), name, value);
}
// ===================================================================

class FeatureData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.FeatureData) */ {
 public:
  FeatureData();
  virtual ~FeatureData();

  FeatureData(const FeatureData& from);

  inline FeatureData& operator=(const FeatureData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureData& default_instance();

  void Swap(FeatureData* other);

  // implements Message ----------------------------------------------

  inline FeatureData* New() const { return New(NULL); }

  FeatureData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureData& from);
  void MergeFrom(const FeatureData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.InterfaceVersion version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::osi3::InterfaceVersion& version() const;
  ::osi3::InterfaceVersion* mutable_version();
  ::osi3::InterfaceVersion* release_version();
  void set_allocated_version(::osi3::InterfaceVersion* version);

  // repeated .osi3.RadarDetectionData radar_sensor = 2;
  int radar_sensor_size() const;
  void clear_radar_sensor();
  static const int kRadarSensorFieldNumber = 2;
  const ::osi3::RadarDetectionData& radar_sensor(int index) const;
  ::osi3::RadarDetectionData* mutable_radar_sensor(int index);
  ::osi3::RadarDetectionData* add_radar_sensor();
  ::google::protobuf::RepeatedPtrField< ::osi3::RadarDetectionData >*
      mutable_radar_sensor();
  const ::google::protobuf::RepeatedPtrField< ::osi3::RadarDetectionData >&
      radar_sensor() const;

  // repeated .osi3.LidarDetectionData lidar_sensor = 3;
  int lidar_sensor_size() const;
  void clear_lidar_sensor();
  static const int kLidarSensorFieldNumber = 3;
  const ::osi3::LidarDetectionData& lidar_sensor(int index) const;
  ::osi3::LidarDetectionData* mutable_lidar_sensor(int index);
  ::osi3::LidarDetectionData* add_lidar_sensor();
  ::google::protobuf::RepeatedPtrField< ::osi3::LidarDetectionData >*
      mutable_lidar_sensor();
  const ::google::protobuf::RepeatedPtrField< ::osi3::LidarDetectionData >&
      lidar_sensor() const;

  // @@protoc_insertion_point(class_scope:osi3.FeatureData)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::InterfaceVersion* version_;
  ::google::protobuf::RepeatedPtrField< ::osi3::RadarDetectionData > radar_sensor_;
  ::google::protobuf::RepeatedPtrField< ::osi3::LidarDetectionData > lidar_sensor_;
  friend void  protobuf_AddDesc_osi_5ffeaturedata_2eproto();
  friend void protobuf_AssignDesc_osi_5ffeaturedata_2eproto();
  friend void protobuf_ShutdownFile_osi_5ffeaturedata_2eproto();

  void InitAsDefaultInstance();
  static FeatureData* default_instance_;
};
// -------------------------------------------------------------------

class SensorDetectionHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.SensorDetectionHeader) */ {
 public:
  SensorDetectionHeader();
  virtual ~SensorDetectionHeader();

  SensorDetectionHeader(const SensorDetectionHeader& from);

  inline SensorDetectionHeader& operator=(const SensorDetectionHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorDetectionHeader& default_instance();

  void Swap(SensorDetectionHeader* other);

  // implements Message ----------------------------------------------

  inline SensorDetectionHeader* New() const { return New(NULL); }

  SensorDetectionHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorDetectionHeader& from);
  void MergeFrom(const SensorDetectionHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorDetectionHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SensorDetectionHeader_DataQualifier DataQualifier;
  static const DataQualifier DATA_QUALIFIER_UNKNOWN =
    SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_UNKNOWN;
  static const DataQualifier DATA_QUALIFIER_OTHER =
    SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_OTHER;
  static const DataQualifier DATA_QUALIFIER_AVAILABLE =
    SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_AVAILABLE;
  static const DataQualifier DATA_QUALIFIER_AVAILABLE_REDUCED =
    SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_AVAILABLE_REDUCED;
  static const DataQualifier DATA_QUALIFIER_NOT_AVAILABLE =
    SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_NOT_AVAILABLE;
  static const DataQualifier DATA_QUALIFIER_BLINDNESS =
    SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_BLINDNESS;
  static const DataQualifier DATA_QUALIFIER_TEMPORARY_AVAILABLE =
    SensorDetectionHeader_DataQualifier_DATA_QUALIFIER_TEMPORARY_AVAILABLE;
  static inline bool DataQualifier_IsValid(int value) {
    return SensorDetectionHeader_DataQualifier_IsValid(value);
  }
  static const DataQualifier DataQualifier_MIN =
    SensorDetectionHeader_DataQualifier_DataQualifier_MIN;
  static const DataQualifier DataQualifier_MAX =
    SensorDetectionHeader_DataQualifier_DataQualifier_MAX;
  static const int DataQualifier_ARRAYSIZE =
    SensorDetectionHeader_DataQualifier_DataQualifier_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataQualifier_descriptor() {
    return SensorDetectionHeader_DataQualifier_descriptor();
  }
  static inline const ::std::string& DataQualifier_Name(DataQualifier value) {
    return SensorDetectionHeader_DataQualifier_Name(value);
  }
  static inline bool DataQualifier_Parse(const ::std::string& name,
      DataQualifier* value) {
    return SensorDetectionHeader_DataQualifier_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.Timestamp measurement_time = 1;
  bool has_measurement_time() const;
  void clear_measurement_time();
  static const int kMeasurementTimeFieldNumber = 1;
  const ::osi3::Timestamp& measurement_time() const;
  ::osi3::Timestamp* mutable_measurement_time();
  ::osi3::Timestamp* release_measurement_time();
  void set_allocated_measurement_time(::osi3::Timestamp* measurement_time);

  // optional uint64 cycle_counter = 2;
  bool has_cycle_counter() const;
  void clear_cycle_counter();
  static const int kCycleCounterFieldNumber = 2;
  ::google::protobuf::uint64 cycle_counter() const;
  void set_cycle_counter(::google::protobuf::uint64 value);

  // optional .osi3.MountingPosition mounting_position = 3;
  bool has_mounting_position() const;
  void clear_mounting_position();
  static const int kMountingPositionFieldNumber = 3;
  const ::osi3::MountingPosition& mounting_position() const;
  ::osi3::MountingPosition* mutable_mounting_position();
  ::osi3::MountingPosition* release_mounting_position();
  void set_allocated_mounting_position(::osi3::MountingPosition* mounting_position);

  // optional .osi3.MountingPosition mounting_position_rmse = 4;
  bool has_mounting_position_rmse() const;
  void clear_mounting_position_rmse();
  static const int kMountingPositionRmseFieldNumber = 4;
  const ::osi3::MountingPosition& mounting_position_rmse() const;
  ::osi3::MountingPosition* mutable_mounting_position_rmse();
  ::osi3::MountingPosition* release_mounting_position_rmse();
  void set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse);

  // optional .osi3.SensorDetectionHeader.DataQualifier data_qualifier = 5;
  bool has_data_qualifier() const;
  void clear_data_qualifier();
  static const int kDataQualifierFieldNumber = 5;
  ::osi3::SensorDetectionHeader_DataQualifier data_qualifier() const;
  void set_data_qualifier(::osi3::SensorDetectionHeader_DataQualifier value);

  // optional uint32 number_of_valid_detections = 6;
  bool has_number_of_valid_detections() const;
  void clear_number_of_valid_detections();
  static const int kNumberOfValidDetectionsFieldNumber = 6;
  ::google::protobuf::uint32 number_of_valid_detections() const;
  void set_number_of_valid_detections(::google::protobuf::uint32 value);

  // optional .osi3.Identifier sensor_id = 7;
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 7;
  const ::osi3::Identifier& sensor_id() const;
  ::osi3::Identifier* mutable_sensor_id();
  ::osi3::Identifier* release_sensor_id();
  void set_allocated_sensor_id(::osi3::Identifier* sensor_id);

  // @@protoc_insertion_point(class_scope:osi3.SensorDetectionHeader)
 private:
  inline void set_has_measurement_time();
  inline void clear_has_measurement_time();
  inline void set_has_cycle_counter();
  inline void clear_has_cycle_counter();
  inline void set_has_mounting_position();
  inline void clear_has_mounting_position();
  inline void set_has_mounting_position_rmse();
  inline void clear_has_mounting_position_rmse();
  inline void set_has_data_qualifier();
  inline void clear_has_data_qualifier();
  inline void set_has_number_of_valid_detections();
  inline void clear_has_number_of_valid_detections();
  inline void set_has_sensor_id();
  inline void clear_has_sensor_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Timestamp* measurement_time_;
  ::google::protobuf::uint64 cycle_counter_;
  ::osi3::MountingPosition* mounting_position_;
  ::osi3::MountingPosition* mounting_position_rmse_;
  int data_qualifier_;
  ::google::protobuf::uint32 number_of_valid_detections_;
  ::osi3::Identifier* sensor_id_;
  friend void  protobuf_AddDesc_osi_5ffeaturedata_2eproto();
  friend void protobuf_AssignDesc_osi_5ffeaturedata_2eproto();
  friend void protobuf_ShutdownFile_osi_5ffeaturedata_2eproto();

  void InitAsDefaultInstance();
  static SensorDetectionHeader* default_instance_;
};
// -------------------------------------------------------------------

class RadarDetectionData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.RadarDetectionData) */ {
 public:
  RadarDetectionData();
  virtual ~RadarDetectionData();

  RadarDetectionData(const RadarDetectionData& from);

  inline RadarDetectionData& operator=(const RadarDetectionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarDetectionData& default_instance();

  void Swap(RadarDetectionData* other);

  // implements Message ----------------------------------------------

  inline RadarDetectionData* New() const { return New(NULL); }

  RadarDetectionData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarDetectionData& from);
  void MergeFrom(const RadarDetectionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadarDetectionData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.SensorDetectionHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::osi3::SensorDetectionHeader& header() const;
  ::osi3::SensorDetectionHeader* mutable_header();
  ::osi3::SensorDetectionHeader* release_header();
  void set_allocated_header(::osi3::SensorDetectionHeader* header);

  // repeated .osi3.RadarDetection detection = 2;
  int detection_size() const;
  void clear_detection();
  static const int kDetectionFieldNumber = 2;
  const ::osi3::RadarDetection& detection(int index) const;
  ::osi3::RadarDetection* mutable_detection(int index);
  ::osi3::RadarDetection* add_detection();
  ::google::protobuf::RepeatedPtrField< ::osi3::RadarDetection >*
      mutable_detection();
  const ::google::protobuf::RepeatedPtrField< ::osi3::RadarDetection >&
      detection() const;

  // @@protoc_insertion_point(class_scope:osi3.RadarDetectionData)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::SensorDetectionHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::osi3::RadarDetection > detection_;
  friend void  protobuf_AddDesc_osi_5ffeaturedata_2eproto();
  friend void protobuf_AssignDesc_osi_5ffeaturedata_2eproto();
  friend void protobuf_ShutdownFile_osi_5ffeaturedata_2eproto();

  void InitAsDefaultInstance();
  static RadarDetectionData* default_instance_;
};
// -------------------------------------------------------------------

class RadarDetection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.RadarDetection) */ {
 public:
  RadarDetection();
  virtual ~RadarDetection();

  RadarDetection(const RadarDetection& from);

  inline RadarDetection& operator=(const RadarDetection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarDetection& default_instance();

  void Swap(RadarDetection* other);

  // implements Message ----------------------------------------------

  inline RadarDetection* New() const { return New(NULL); }

  RadarDetection* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarDetection& from);
  void MergeFrom(const RadarDetection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadarDetection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double existence_probability = 1;
  bool has_existence_probability() const;
  void clear_existence_probability();
  static const int kExistenceProbabilityFieldNumber = 1;
  double existence_probability() const;
  void set_existence_probability(double value);

  // optional .osi3.Identifier object_id = 2;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  const ::osi3::Identifier& object_id() const;
  ::osi3::Identifier* mutable_object_id();
  ::osi3::Identifier* release_object_id();
  void set_allocated_object_id(::osi3::Identifier* object_id);

  // optional .osi3.Spherical3d position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::osi3::Spherical3d& position() const;
  ::osi3::Spherical3d* mutable_position();
  ::osi3::Spherical3d* release_position();
  void set_allocated_position(::osi3::Spherical3d* position);

  // optional .osi3.Spherical3d position_rmse = 4;
  bool has_position_rmse() const;
  void clear_position_rmse();
  static const int kPositionRmseFieldNumber = 4;
  const ::osi3::Spherical3d& position_rmse() const;
  ::osi3::Spherical3d* mutable_position_rmse();
  ::osi3::Spherical3d* release_position_rmse();
  void set_allocated_position_rmse(::osi3::Spherical3d* position_rmse);

  // optional double radial_velocity = 5;
  bool has_radial_velocity() const;
  void clear_radial_velocity();
  static const int kRadialVelocityFieldNumber = 5;
  double radial_velocity() const;
  void set_radial_velocity(double value);

  // optional double radial_velocity_rmse = 6;
  bool has_radial_velocity_rmse() const;
  void clear_radial_velocity_rmse();
  static const int kRadialVelocityRmseFieldNumber = 6;
  double radial_velocity_rmse() const;
  void set_radial_velocity_rmse(double value);

  // optional double rcs = 7;
  bool has_rcs() const;
  void clear_rcs();
  static const int kRcsFieldNumber = 7;
  double rcs() const;
  void set_rcs(double value);

  // optional double snr = 8;
  bool has_snr() const;
  void clear_snr();
  static const int kSnrFieldNumber = 8;
  double snr() const;
  void set_snr(double value);

  // optional double point_target_probability = 9;
  bool has_point_target_probability() const;
  void clear_point_target_probability();
  static const int kPointTargetProbabilityFieldNumber = 9;
  double point_target_probability() const;
  void set_point_target_probability(double value);

  // optional .osi3.Identifier ambiguity_id = 10;
  bool has_ambiguity_id() const;
  void clear_ambiguity_id();
  static const int kAmbiguityIdFieldNumber = 10;
  const ::osi3::Identifier& ambiguity_id() const;
  ::osi3::Identifier* mutable_ambiguity_id();
  ::osi3::Identifier* release_ambiguity_id();
  void set_allocated_ambiguity_id(::osi3::Identifier* ambiguity_id);

  // optional .osi3.DetectionClassification classification = 11;
  bool has_classification() const;
  void clear_classification();
  static const int kClassificationFieldNumber = 11;
  ::osi3::DetectionClassification classification() const;
  void set_classification(::osi3::DetectionClassification value);

  // @@protoc_insertion_point(class_scope:osi3.RadarDetection)
 private:
  inline void set_has_existence_probability();
  inline void clear_has_existence_probability();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_position_rmse();
  inline void clear_has_position_rmse();
  inline void set_has_radial_velocity();
  inline void clear_has_radial_velocity();
  inline void set_has_radial_velocity_rmse();
  inline void clear_has_radial_velocity_rmse();
  inline void set_has_rcs();
  inline void clear_has_rcs();
  inline void set_has_snr();
  inline void clear_has_snr();
  inline void set_has_point_target_probability();
  inline void clear_has_point_target_probability();
  inline void set_has_ambiguity_id();
  inline void clear_has_ambiguity_id();
  inline void set_has_classification();
  inline void clear_has_classification();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double existence_probability_;
  ::osi3::Identifier* object_id_;
  ::osi3::Spherical3d* position_;
  ::osi3::Spherical3d* position_rmse_;
  double radial_velocity_;
  double radial_velocity_rmse_;
  double rcs_;
  double snr_;
  double point_target_probability_;
  ::osi3::Identifier* ambiguity_id_;
  int classification_;
  friend void  protobuf_AddDesc_osi_5ffeaturedata_2eproto();
  friend void protobuf_AssignDesc_osi_5ffeaturedata_2eproto();
  friend void protobuf_ShutdownFile_osi_5ffeaturedata_2eproto();

  void InitAsDefaultInstance();
  static RadarDetection* default_instance_;
};
// -------------------------------------------------------------------

class LidarDetectionData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.LidarDetectionData) */ {
 public:
  LidarDetectionData();
  virtual ~LidarDetectionData();

  LidarDetectionData(const LidarDetectionData& from);

  inline LidarDetectionData& operator=(const LidarDetectionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarDetectionData& default_instance();

  void Swap(LidarDetectionData* other);

  // implements Message ----------------------------------------------

  inline LidarDetectionData* New() const { return New(NULL); }

  LidarDetectionData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LidarDetectionData& from);
  void MergeFrom(const LidarDetectionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LidarDetectionData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.SensorDetectionHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::osi3::SensorDetectionHeader& header() const;
  ::osi3::SensorDetectionHeader* mutable_header();
  ::osi3::SensorDetectionHeader* release_header();
  void set_allocated_header(::osi3::SensorDetectionHeader* header);

  // repeated .osi3.LidarDetection detection = 2;
  int detection_size() const;
  void clear_detection();
  static const int kDetectionFieldNumber = 2;
  const ::osi3::LidarDetection& detection(int index) const;
  ::osi3::LidarDetection* mutable_detection(int index);
  ::osi3::LidarDetection* add_detection();
  ::google::protobuf::RepeatedPtrField< ::osi3::LidarDetection >*
      mutable_detection();
  const ::google::protobuf::RepeatedPtrField< ::osi3::LidarDetection >&
      detection() const;

  // @@protoc_insertion_point(class_scope:osi3.LidarDetectionData)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::SensorDetectionHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::osi3::LidarDetection > detection_;
  friend void  protobuf_AddDesc_osi_5ffeaturedata_2eproto();
  friend void protobuf_AssignDesc_osi_5ffeaturedata_2eproto();
  friend void protobuf_ShutdownFile_osi_5ffeaturedata_2eproto();

  void InitAsDefaultInstance();
  static LidarDetectionData* default_instance_;
};
// -------------------------------------------------------------------

class LidarDetection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.LidarDetection) */ {
 public:
  LidarDetection();
  virtual ~LidarDetection();

  LidarDetection(const LidarDetection& from);

  inline LidarDetection& operator=(const LidarDetection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarDetection& default_instance();

  void Swap(LidarDetection* other);

  // implements Message ----------------------------------------------

  inline LidarDetection* New() const { return New(NULL); }

  LidarDetection* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LidarDetection& from);
  void MergeFrom(const LidarDetection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LidarDetection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double existence_probability = 1;
  bool has_existence_probability() const;
  void clear_existence_probability();
  static const int kExistenceProbabilityFieldNumber = 1;
  double existence_probability() const;
  void set_existence_probability(double value);

  // optional .osi3.Identifier object_id = 2;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  const ::osi3::Identifier& object_id() const;
  ::osi3::Identifier* mutable_object_id();
  ::osi3::Identifier* release_object_id();
  void set_allocated_object_id(::osi3::Identifier* object_id);

  // optional .osi3.Spherical3d position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::osi3::Spherical3d& position() const;
  ::osi3::Spherical3d* mutable_position();
  ::osi3::Spherical3d* release_position();
  void set_allocated_position(::osi3::Spherical3d* position);

  // optional .osi3.Spherical3d position_rmse = 4;
  bool has_position_rmse() const;
  void clear_position_rmse();
  static const int kPositionRmseFieldNumber = 4;
  const ::osi3::Spherical3d& position_rmse() const;
  ::osi3::Spherical3d* mutable_position_rmse();
  ::osi3::Spherical3d* release_position_rmse();
  void set_allocated_position_rmse(::osi3::Spherical3d* position_rmse);

  // optional double height = 5;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  double height() const;
  void set_height(double value);

  // optional double height_rmse = 6;
  bool has_height_rmse() const;
  void clear_height_rmse();
  static const int kHeightRmseFieldNumber = 6;
  double height_rmse() const;
  void set_height_rmse(double value);

  // optional double intensity = 7;
  bool has_intensity() const;
  void clear_intensity();
  static const int kIntensityFieldNumber = 7;
  double intensity() const;
  void set_intensity(double value);

  // optional double free_space_probability = 8;
  bool has_free_space_probability() const;
  void clear_free_space_probability();
  static const int kFreeSpaceProbabilityFieldNumber = 8;
  double free_space_probability() const;
  void set_free_space_probability(double value);

  // optional .osi3.DetectionClassification classification = 9;
  bool has_classification() const;
  void clear_classification();
  static const int kClassificationFieldNumber = 9;
  ::osi3::DetectionClassification classification() const;
  void set_classification(::osi3::DetectionClassification value);

  // @@protoc_insertion_point(class_scope:osi3.LidarDetection)
 private:
  inline void set_has_existence_probability();
  inline void clear_has_existence_probability();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_position_rmse();
  inline void clear_has_position_rmse();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_height_rmse();
  inline void clear_has_height_rmse();
  inline void set_has_intensity();
  inline void clear_has_intensity();
  inline void set_has_free_space_probability();
  inline void clear_has_free_space_probability();
  inline void set_has_classification();
  inline void clear_has_classification();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double existence_probability_;
  ::osi3::Identifier* object_id_;
  ::osi3::Spherical3d* position_;
  ::osi3::Spherical3d* position_rmse_;
  double height_;
  double height_rmse_;
  double intensity_;
  double free_space_probability_;
  int classification_;
  friend void  protobuf_AddDesc_osi_5ffeaturedata_2eproto();
  friend void protobuf_AssignDesc_osi_5ffeaturedata_2eproto();
  friend void protobuf_ShutdownFile_osi_5ffeaturedata_2eproto();

  void InitAsDefaultInstance();
  static LidarDetection* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureData

// optional .osi3.InterfaceVersion version = 1;
inline bool FeatureData::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureData::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureData::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureData::clear_version() {
  if (version_ != NULL) version_->::osi3::InterfaceVersion::Clear();
  clear_has_version();
}
inline const ::osi3::InterfaceVersion& FeatureData::version() const {
  // @@protoc_insertion_point(field_get:osi3.FeatureData.version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
inline ::osi3::InterfaceVersion* FeatureData::mutable_version() {
  set_has_version();
  if (version_ == NULL) {
    version_ = new ::osi3::InterfaceVersion;
  }
  // @@protoc_insertion_point(field_mutable:osi3.FeatureData.version)
  return version_;
}
inline ::osi3::InterfaceVersion* FeatureData::release_version() {
  // @@protoc_insertion_point(field_release:osi3.FeatureData.version)
  clear_has_version();
  ::osi3::InterfaceVersion* temp = version_;
  version_ = NULL;
  return temp;
}
inline void FeatureData::set_allocated_version(::osi3::InterfaceVersion* version) {
  delete version_;
  version_ = version;
  if (version) {
    set_has_version();
  } else {
    clear_has_version();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.FeatureData.version)
}

// repeated .osi3.RadarDetectionData radar_sensor = 2;
inline int FeatureData::radar_sensor_size() const {
  return radar_sensor_.size();
}
inline void FeatureData::clear_radar_sensor() {
  radar_sensor_.Clear();
}
inline const ::osi3::RadarDetectionData& FeatureData::radar_sensor(int index) const {
  // @@protoc_insertion_point(field_get:osi3.FeatureData.radar_sensor)
  return radar_sensor_.Get(index);
}
inline ::osi3::RadarDetectionData* FeatureData::mutable_radar_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.FeatureData.radar_sensor)
  return radar_sensor_.Mutable(index);
}
inline ::osi3::RadarDetectionData* FeatureData::add_radar_sensor() {
  // @@protoc_insertion_point(field_add:osi3.FeatureData.radar_sensor)
  return radar_sensor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::RadarDetectionData >*
FeatureData::mutable_radar_sensor() {
  // @@protoc_insertion_point(field_mutable_list:osi3.FeatureData.radar_sensor)
  return &radar_sensor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::RadarDetectionData >&
FeatureData::radar_sensor() const {
  // @@protoc_insertion_point(field_list:osi3.FeatureData.radar_sensor)
  return radar_sensor_;
}

// repeated .osi3.LidarDetectionData lidar_sensor = 3;
inline int FeatureData::lidar_sensor_size() const {
  return lidar_sensor_.size();
}
inline void FeatureData::clear_lidar_sensor() {
  lidar_sensor_.Clear();
}
inline const ::osi3::LidarDetectionData& FeatureData::lidar_sensor(int index) const {
  // @@protoc_insertion_point(field_get:osi3.FeatureData.lidar_sensor)
  return lidar_sensor_.Get(index);
}
inline ::osi3::LidarDetectionData* FeatureData::mutable_lidar_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.FeatureData.lidar_sensor)
  return lidar_sensor_.Mutable(index);
}
inline ::osi3::LidarDetectionData* FeatureData::add_lidar_sensor() {
  // @@protoc_insertion_point(field_add:osi3.FeatureData.lidar_sensor)
  return lidar_sensor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::LidarDetectionData >*
FeatureData::mutable_lidar_sensor() {
  // @@protoc_insertion_point(field_mutable_list:osi3.FeatureData.lidar_sensor)
  return &lidar_sensor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::LidarDetectionData >&
FeatureData::lidar_sensor() const {
  // @@protoc_insertion_point(field_list:osi3.FeatureData.lidar_sensor)
  return lidar_sensor_;
}

// -------------------------------------------------------------------

// SensorDetectionHeader

// optional .osi3.Timestamp measurement_time = 1;
inline bool SensorDetectionHeader::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorDetectionHeader::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorDetectionHeader::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SensorDetectionHeader::clear_measurement_time() {
  if (measurement_time_ != NULL) measurement_time_->::osi3::Timestamp::Clear();
  clear_has_measurement_time();
}
inline const ::osi3::Timestamp& SensorDetectionHeader::measurement_time() const {
  // @@protoc_insertion_point(field_get:osi3.SensorDetectionHeader.measurement_time)
  return measurement_time_ != NULL ? *measurement_time_ : *default_instance_->measurement_time_;
}
inline ::osi3::Timestamp* SensorDetectionHeader::mutable_measurement_time() {
  set_has_measurement_time();
  if (measurement_time_ == NULL) {
    measurement_time_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorDetectionHeader.measurement_time)
  return measurement_time_;
}
inline ::osi3::Timestamp* SensorDetectionHeader::release_measurement_time() {
  // @@protoc_insertion_point(field_release:osi3.SensorDetectionHeader.measurement_time)
  clear_has_measurement_time();
  ::osi3::Timestamp* temp = measurement_time_;
  measurement_time_ = NULL;
  return temp;
}
inline void SensorDetectionHeader::set_allocated_measurement_time(::osi3::Timestamp* measurement_time) {
  delete measurement_time_;
  measurement_time_ = measurement_time;
  if (measurement_time) {
    set_has_measurement_time();
  } else {
    clear_has_measurement_time();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorDetectionHeader.measurement_time)
}

// optional uint64 cycle_counter = 2;
inline bool SensorDetectionHeader::has_cycle_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorDetectionHeader::set_has_cycle_counter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SensorDetectionHeader::clear_has_cycle_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SensorDetectionHeader::clear_cycle_counter() {
  cycle_counter_ = GOOGLE_ULONGLONG(0);
  clear_has_cycle_counter();
}
inline ::google::protobuf::uint64 SensorDetectionHeader::cycle_counter() const {
  // @@protoc_insertion_point(field_get:osi3.SensorDetectionHeader.cycle_counter)
  return cycle_counter_;
}
inline void SensorDetectionHeader::set_cycle_counter(::google::protobuf::uint64 value) {
  set_has_cycle_counter();
  cycle_counter_ = value;
  // @@protoc_insertion_point(field_set:osi3.SensorDetectionHeader.cycle_counter)
}

// optional .osi3.MountingPosition mounting_position = 3;
inline bool SensorDetectionHeader::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorDetectionHeader::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SensorDetectionHeader::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SensorDetectionHeader::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
inline const ::osi3::MountingPosition& SensorDetectionHeader::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.SensorDetectionHeader.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
inline ::osi3::MountingPosition* SensorDetectionHeader::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorDetectionHeader.mounting_position)
  return mounting_position_;
}
inline ::osi3::MountingPosition* SensorDetectionHeader::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.SensorDetectionHeader.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
inline void SensorDetectionHeader::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorDetectionHeader.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 4;
inline bool SensorDetectionHeader::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorDetectionHeader::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SensorDetectionHeader::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SensorDetectionHeader::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
inline const ::osi3::MountingPosition& SensorDetectionHeader::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.SensorDetectionHeader.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
inline ::osi3::MountingPosition* SensorDetectionHeader::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorDetectionHeader.mounting_position_rmse)
  return mounting_position_rmse_;
}
inline ::osi3::MountingPosition* SensorDetectionHeader::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.SensorDetectionHeader.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
inline void SensorDetectionHeader::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorDetectionHeader.mounting_position_rmse)
}

// optional .osi3.SensorDetectionHeader.DataQualifier data_qualifier = 5;
inline bool SensorDetectionHeader::has_data_qualifier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorDetectionHeader::set_has_data_qualifier() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SensorDetectionHeader::clear_has_data_qualifier() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SensorDetectionHeader::clear_data_qualifier() {
  data_qualifier_ = 0;
  clear_has_data_qualifier();
}
inline ::osi3::SensorDetectionHeader_DataQualifier SensorDetectionHeader::data_qualifier() const {
  // @@protoc_insertion_point(field_get:osi3.SensorDetectionHeader.data_qualifier)
  return static_cast< ::osi3::SensorDetectionHeader_DataQualifier >(data_qualifier_);
}
inline void SensorDetectionHeader::set_data_qualifier(::osi3::SensorDetectionHeader_DataQualifier value) {
  assert(::osi3::SensorDetectionHeader_DataQualifier_IsValid(value));
  set_has_data_qualifier();
  data_qualifier_ = value;
  // @@protoc_insertion_point(field_set:osi3.SensorDetectionHeader.data_qualifier)
}

// optional uint32 number_of_valid_detections = 6;
inline bool SensorDetectionHeader::has_number_of_valid_detections() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorDetectionHeader::set_has_number_of_valid_detections() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SensorDetectionHeader::clear_has_number_of_valid_detections() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SensorDetectionHeader::clear_number_of_valid_detections() {
  number_of_valid_detections_ = 0u;
  clear_has_number_of_valid_detections();
}
inline ::google::protobuf::uint32 SensorDetectionHeader::number_of_valid_detections() const {
  // @@protoc_insertion_point(field_get:osi3.SensorDetectionHeader.number_of_valid_detections)
  return number_of_valid_detections_;
}
inline void SensorDetectionHeader::set_number_of_valid_detections(::google::protobuf::uint32 value) {
  set_has_number_of_valid_detections();
  number_of_valid_detections_ = value;
  // @@protoc_insertion_point(field_set:osi3.SensorDetectionHeader.number_of_valid_detections)
}

// optional .osi3.Identifier sensor_id = 7;
inline bool SensorDetectionHeader::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorDetectionHeader::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SensorDetectionHeader::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SensorDetectionHeader::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
inline const ::osi3::Identifier& SensorDetectionHeader::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.SensorDetectionHeader.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
inline ::osi3::Identifier* SensorDetectionHeader::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorDetectionHeader.sensor_id)
  return sensor_id_;
}
inline ::osi3::Identifier* SensorDetectionHeader::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.SensorDetectionHeader.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
inline void SensorDetectionHeader::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorDetectionHeader.sensor_id)
}

// -------------------------------------------------------------------

// RadarDetectionData

// optional .osi3.SensorDetectionHeader header = 1;
inline bool RadarDetectionData::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarDetectionData::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarDetectionData::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarDetectionData::clear_header() {
  if (header_ != NULL) header_->::osi3::SensorDetectionHeader::Clear();
  clear_has_header();
}
inline const ::osi3::SensorDetectionHeader& RadarDetectionData::header() const {
  // @@protoc_insertion_point(field_get:osi3.RadarDetectionData.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::osi3::SensorDetectionHeader* RadarDetectionData::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::osi3::SensorDetectionHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RadarDetectionData.header)
  return header_;
}
inline ::osi3::SensorDetectionHeader* RadarDetectionData::release_header() {
  // @@protoc_insertion_point(field_release:osi3.RadarDetectionData.header)
  clear_has_header();
  ::osi3::SensorDetectionHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RadarDetectionData::set_allocated_header(::osi3::SensorDetectionHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RadarDetectionData.header)
}

// repeated .osi3.RadarDetection detection = 2;
inline int RadarDetectionData::detection_size() const {
  return detection_.size();
}
inline void RadarDetectionData::clear_detection() {
  detection_.Clear();
}
inline const ::osi3::RadarDetection& RadarDetectionData::detection(int index) const {
  // @@protoc_insertion_point(field_get:osi3.RadarDetectionData.detection)
  return detection_.Get(index);
}
inline ::osi3::RadarDetection* RadarDetectionData::mutable_detection(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.RadarDetectionData.detection)
  return detection_.Mutable(index);
}
inline ::osi3::RadarDetection* RadarDetectionData::add_detection() {
  // @@protoc_insertion_point(field_add:osi3.RadarDetectionData.detection)
  return detection_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::RadarDetection >*
RadarDetectionData::mutable_detection() {
  // @@protoc_insertion_point(field_mutable_list:osi3.RadarDetectionData.detection)
  return &detection_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::RadarDetection >&
RadarDetectionData::detection() const {
  // @@protoc_insertion_point(field_list:osi3.RadarDetectionData.detection)
  return detection_;
}

// -------------------------------------------------------------------

// RadarDetection

// optional double existence_probability = 1;
inline bool RadarDetection::has_existence_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarDetection::set_has_existence_probability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarDetection::clear_has_existence_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarDetection::clear_existence_probability() {
  existence_probability_ = 0;
  clear_has_existence_probability();
}
inline double RadarDetection::existence_probability() const {
  // @@protoc_insertion_point(field_get:osi3.RadarDetection.existence_probability)
  return existence_probability_;
}
inline void RadarDetection::set_existence_probability(double value) {
  set_has_existence_probability();
  existence_probability_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarDetection.existence_probability)
}

// optional .osi3.Identifier object_id = 2;
inline bool RadarDetection::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarDetection::set_has_object_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarDetection::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarDetection::clear_object_id() {
  if (object_id_ != NULL) object_id_->::osi3::Identifier::Clear();
  clear_has_object_id();
}
inline const ::osi3::Identifier& RadarDetection::object_id() const {
  // @@protoc_insertion_point(field_get:osi3.RadarDetection.object_id)
  return object_id_ != NULL ? *object_id_ : *default_instance_->object_id_;
}
inline ::osi3::Identifier* RadarDetection::mutable_object_id() {
  set_has_object_id();
  if (object_id_ == NULL) {
    object_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RadarDetection.object_id)
  return object_id_;
}
inline ::osi3::Identifier* RadarDetection::release_object_id() {
  // @@protoc_insertion_point(field_release:osi3.RadarDetection.object_id)
  clear_has_object_id();
  ::osi3::Identifier* temp = object_id_;
  object_id_ = NULL;
  return temp;
}
inline void RadarDetection::set_allocated_object_id(::osi3::Identifier* object_id) {
  delete object_id_;
  object_id_ = object_id;
  if (object_id) {
    set_has_object_id();
  } else {
    clear_has_object_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RadarDetection.object_id)
}

// optional .osi3.Spherical3d position = 3;
inline bool RadarDetection::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarDetection::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarDetection::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarDetection::clear_position() {
  if (position_ != NULL) position_->::osi3::Spherical3d::Clear();
  clear_has_position();
}
inline const ::osi3::Spherical3d& RadarDetection::position() const {
  // @@protoc_insertion_point(field_get:osi3.RadarDetection.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::osi3::Spherical3d* RadarDetection::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::osi3::Spherical3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RadarDetection.position)
  return position_;
}
inline ::osi3::Spherical3d* RadarDetection::release_position() {
  // @@protoc_insertion_point(field_release:osi3.RadarDetection.position)
  clear_has_position();
  ::osi3::Spherical3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline void RadarDetection::set_allocated_position(::osi3::Spherical3d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RadarDetection.position)
}

// optional .osi3.Spherical3d position_rmse = 4;
inline bool RadarDetection::has_position_rmse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarDetection::set_has_position_rmse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarDetection::clear_has_position_rmse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarDetection::clear_position_rmse() {
  if (position_rmse_ != NULL) position_rmse_->::osi3::Spherical3d::Clear();
  clear_has_position_rmse();
}
inline const ::osi3::Spherical3d& RadarDetection::position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.RadarDetection.position_rmse)
  return position_rmse_ != NULL ? *position_rmse_ : *default_instance_->position_rmse_;
}
inline ::osi3::Spherical3d* RadarDetection::mutable_position_rmse() {
  set_has_position_rmse();
  if (position_rmse_ == NULL) {
    position_rmse_ = new ::osi3::Spherical3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RadarDetection.position_rmse)
  return position_rmse_;
}
inline ::osi3::Spherical3d* RadarDetection::release_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.RadarDetection.position_rmse)
  clear_has_position_rmse();
  ::osi3::Spherical3d* temp = position_rmse_;
  position_rmse_ = NULL;
  return temp;
}
inline void RadarDetection::set_allocated_position_rmse(::osi3::Spherical3d* position_rmse) {
  delete position_rmse_;
  position_rmse_ = position_rmse;
  if (position_rmse) {
    set_has_position_rmse();
  } else {
    clear_has_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RadarDetection.position_rmse)
}

// optional double radial_velocity = 5;
inline bool RadarDetection::has_radial_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarDetection::set_has_radial_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarDetection::clear_has_radial_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarDetection::clear_radial_velocity() {
  radial_velocity_ = 0;
  clear_has_radial_velocity();
}
inline double RadarDetection::radial_velocity() const {
  // @@protoc_insertion_point(field_get:osi3.RadarDetection.radial_velocity)
  return radial_velocity_;
}
inline void RadarDetection::set_radial_velocity(double value) {
  set_has_radial_velocity();
  radial_velocity_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarDetection.radial_velocity)
}

// optional double radial_velocity_rmse = 6;
inline bool RadarDetection::has_radial_velocity_rmse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarDetection::set_has_radial_velocity_rmse() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarDetection::clear_has_radial_velocity_rmse() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarDetection::clear_radial_velocity_rmse() {
  radial_velocity_rmse_ = 0;
  clear_has_radial_velocity_rmse();
}
inline double RadarDetection::radial_velocity_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.RadarDetection.radial_velocity_rmse)
  return radial_velocity_rmse_;
}
inline void RadarDetection::set_radial_velocity_rmse(double value) {
  set_has_radial_velocity_rmse();
  radial_velocity_rmse_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarDetection.radial_velocity_rmse)
}

// optional double rcs = 7;
inline bool RadarDetection::has_rcs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarDetection::set_has_rcs() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarDetection::clear_has_rcs() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarDetection::clear_rcs() {
  rcs_ = 0;
  clear_has_rcs();
}
inline double RadarDetection::rcs() const {
  // @@protoc_insertion_point(field_get:osi3.RadarDetection.rcs)
  return rcs_;
}
inline void RadarDetection::set_rcs(double value) {
  set_has_rcs();
  rcs_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarDetection.rcs)
}

// optional double snr = 8;
inline bool RadarDetection::has_snr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarDetection::set_has_snr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarDetection::clear_has_snr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarDetection::clear_snr() {
  snr_ = 0;
  clear_has_snr();
}
inline double RadarDetection::snr() const {
  // @@protoc_insertion_point(field_get:osi3.RadarDetection.snr)
  return snr_;
}
inline void RadarDetection::set_snr(double value) {
  set_has_snr();
  snr_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarDetection.snr)
}

// optional double point_target_probability = 9;
inline bool RadarDetection::has_point_target_probability() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarDetection::set_has_point_target_probability() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarDetection::clear_has_point_target_probability() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarDetection::clear_point_target_probability() {
  point_target_probability_ = 0;
  clear_has_point_target_probability();
}
inline double RadarDetection::point_target_probability() const {
  // @@protoc_insertion_point(field_get:osi3.RadarDetection.point_target_probability)
  return point_target_probability_;
}
inline void RadarDetection::set_point_target_probability(double value) {
  set_has_point_target_probability();
  point_target_probability_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarDetection.point_target_probability)
}

// optional .osi3.Identifier ambiguity_id = 10;
inline bool RadarDetection::has_ambiguity_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarDetection::set_has_ambiguity_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarDetection::clear_has_ambiguity_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarDetection::clear_ambiguity_id() {
  if (ambiguity_id_ != NULL) ambiguity_id_->::osi3::Identifier::Clear();
  clear_has_ambiguity_id();
}
inline const ::osi3::Identifier& RadarDetection::ambiguity_id() const {
  // @@protoc_insertion_point(field_get:osi3.RadarDetection.ambiguity_id)
  return ambiguity_id_ != NULL ? *ambiguity_id_ : *default_instance_->ambiguity_id_;
}
inline ::osi3::Identifier* RadarDetection::mutable_ambiguity_id() {
  set_has_ambiguity_id();
  if (ambiguity_id_ == NULL) {
    ambiguity_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RadarDetection.ambiguity_id)
  return ambiguity_id_;
}
inline ::osi3::Identifier* RadarDetection::release_ambiguity_id() {
  // @@protoc_insertion_point(field_release:osi3.RadarDetection.ambiguity_id)
  clear_has_ambiguity_id();
  ::osi3::Identifier* temp = ambiguity_id_;
  ambiguity_id_ = NULL;
  return temp;
}
inline void RadarDetection::set_allocated_ambiguity_id(::osi3::Identifier* ambiguity_id) {
  delete ambiguity_id_;
  ambiguity_id_ = ambiguity_id;
  if (ambiguity_id) {
    set_has_ambiguity_id();
  } else {
    clear_has_ambiguity_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RadarDetection.ambiguity_id)
}

// optional .osi3.DetectionClassification classification = 11;
inline bool RadarDetection::has_classification() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarDetection::set_has_classification() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarDetection::clear_has_classification() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarDetection::clear_classification() {
  classification_ = 0;
  clear_has_classification();
}
inline ::osi3::DetectionClassification RadarDetection::classification() const {
  // @@protoc_insertion_point(field_get:osi3.RadarDetection.classification)
  return static_cast< ::osi3::DetectionClassification >(classification_);
}
inline void RadarDetection::set_classification(::osi3::DetectionClassification value) {
  assert(::osi3::DetectionClassification_IsValid(value));
  set_has_classification();
  classification_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarDetection.classification)
}

// -------------------------------------------------------------------

// LidarDetectionData

// optional .osi3.SensorDetectionHeader header = 1;
inline bool LidarDetectionData::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LidarDetectionData::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LidarDetectionData::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LidarDetectionData::clear_header() {
  if (header_ != NULL) header_->::osi3::SensorDetectionHeader::Clear();
  clear_has_header();
}
inline const ::osi3::SensorDetectionHeader& LidarDetectionData::header() const {
  // @@protoc_insertion_point(field_get:osi3.LidarDetectionData.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::osi3::SensorDetectionHeader* LidarDetectionData::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::osi3::SensorDetectionHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LidarDetectionData.header)
  return header_;
}
inline ::osi3::SensorDetectionHeader* LidarDetectionData::release_header() {
  // @@protoc_insertion_point(field_release:osi3.LidarDetectionData.header)
  clear_has_header();
  ::osi3::SensorDetectionHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void LidarDetectionData::set_allocated_header(::osi3::SensorDetectionHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LidarDetectionData.header)
}

// repeated .osi3.LidarDetection detection = 2;
inline int LidarDetectionData::detection_size() const {
  return detection_.size();
}
inline void LidarDetectionData::clear_detection() {
  detection_.Clear();
}
inline const ::osi3::LidarDetection& LidarDetectionData::detection(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LidarDetectionData.detection)
  return detection_.Get(index);
}
inline ::osi3::LidarDetection* LidarDetectionData::mutable_detection(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LidarDetectionData.detection)
  return detection_.Mutable(index);
}
inline ::osi3::LidarDetection* LidarDetectionData::add_detection() {
  // @@protoc_insertion_point(field_add:osi3.LidarDetectionData.detection)
  return detection_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::LidarDetection >*
LidarDetectionData::mutable_detection() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LidarDetectionData.detection)
  return &detection_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::LidarDetection >&
LidarDetectionData::detection() const {
  // @@protoc_insertion_point(field_list:osi3.LidarDetectionData.detection)
  return detection_;
}

// -------------------------------------------------------------------

// LidarDetection

// optional double existence_probability = 1;
inline bool LidarDetection::has_existence_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LidarDetection::set_has_existence_probability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LidarDetection::clear_has_existence_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LidarDetection::clear_existence_probability() {
  existence_probability_ = 0;
  clear_has_existence_probability();
}
inline double LidarDetection::existence_probability() const {
  // @@protoc_insertion_point(field_get:osi3.LidarDetection.existence_probability)
  return existence_probability_;
}
inline void LidarDetection::set_existence_probability(double value) {
  set_has_existence_probability();
  existence_probability_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarDetection.existence_probability)
}

// optional .osi3.Identifier object_id = 2;
inline bool LidarDetection::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LidarDetection::set_has_object_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LidarDetection::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LidarDetection::clear_object_id() {
  if (object_id_ != NULL) object_id_->::osi3::Identifier::Clear();
  clear_has_object_id();
}
inline const ::osi3::Identifier& LidarDetection::object_id() const {
  // @@protoc_insertion_point(field_get:osi3.LidarDetection.object_id)
  return object_id_ != NULL ? *object_id_ : *default_instance_->object_id_;
}
inline ::osi3::Identifier* LidarDetection::mutable_object_id() {
  set_has_object_id();
  if (object_id_ == NULL) {
    object_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LidarDetection.object_id)
  return object_id_;
}
inline ::osi3::Identifier* LidarDetection::release_object_id() {
  // @@protoc_insertion_point(field_release:osi3.LidarDetection.object_id)
  clear_has_object_id();
  ::osi3::Identifier* temp = object_id_;
  object_id_ = NULL;
  return temp;
}
inline void LidarDetection::set_allocated_object_id(::osi3::Identifier* object_id) {
  delete object_id_;
  object_id_ = object_id;
  if (object_id) {
    set_has_object_id();
  } else {
    clear_has_object_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LidarDetection.object_id)
}

// optional .osi3.Spherical3d position = 3;
inline bool LidarDetection::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LidarDetection::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LidarDetection::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LidarDetection::clear_position() {
  if (position_ != NULL) position_->::osi3::Spherical3d::Clear();
  clear_has_position();
}
inline const ::osi3::Spherical3d& LidarDetection::position() const {
  // @@protoc_insertion_point(field_get:osi3.LidarDetection.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::osi3::Spherical3d* LidarDetection::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::osi3::Spherical3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LidarDetection.position)
  return position_;
}
inline ::osi3::Spherical3d* LidarDetection::release_position() {
  // @@protoc_insertion_point(field_release:osi3.LidarDetection.position)
  clear_has_position();
  ::osi3::Spherical3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline void LidarDetection::set_allocated_position(::osi3::Spherical3d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LidarDetection.position)
}

// optional .osi3.Spherical3d position_rmse = 4;
inline bool LidarDetection::has_position_rmse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LidarDetection::set_has_position_rmse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LidarDetection::clear_has_position_rmse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LidarDetection::clear_position_rmse() {
  if (position_rmse_ != NULL) position_rmse_->::osi3::Spherical3d::Clear();
  clear_has_position_rmse();
}
inline const ::osi3::Spherical3d& LidarDetection::position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.LidarDetection.position_rmse)
  return position_rmse_ != NULL ? *position_rmse_ : *default_instance_->position_rmse_;
}
inline ::osi3::Spherical3d* LidarDetection::mutable_position_rmse() {
  set_has_position_rmse();
  if (position_rmse_ == NULL) {
    position_rmse_ = new ::osi3::Spherical3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LidarDetection.position_rmse)
  return position_rmse_;
}
inline ::osi3::Spherical3d* LidarDetection::release_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.LidarDetection.position_rmse)
  clear_has_position_rmse();
  ::osi3::Spherical3d* temp = position_rmse_;
  position_rmse_ = NULL;
  return temp;
}
inline void LidarDetection::set_allocated_position_rmse(::osi3::Spherical3d* position_rmse) {
  delete position_rmse_;
  position_rmse_ = position_rmse;
  if (position_rmse) {
    set_has_position_rmse();
  } else {
    clear_has_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LidarDetection.position_rmse)
}

// optional double height = 5;
inline bool LidarDetection::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LidarDetection::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LidarDetection::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LidarDetection::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double LidarDetection::height() const {
  // @@protoc_insertion_point(field_get:osi3.LidarDetection.height)
  return height_;
}
inline void LidarDetection::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarDetection.height)
}

// optional double height_rmse = 6;
inline bool LidarDetection::has_height_rmse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LidarDetection::set_has_height_rmse() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LidarDetection::clear_has_height_rmse() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LidarDetection::clear_height_rmse() {
  height_rmse_ = 0;
  clear_has_height_rmse();
}
inline double LidarDetection::height_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.LidarDetection.height_rmse)
  return height_rmse_;
}
inline void LidarDetection::set_height_rmse(double value) {
  set_has_height_rmse();
  height_rmse_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarDetection.height_rmse)
}

// optional double intensity = 7;
inline bool LidarDetection::has_intensity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LidarDetection::set_has_intensity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LidarDetection::clear_has_intensity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LidarDetection::clear_intensity() {
  intensity_ = 0;
  clear_has_intensity();
}
inline double LidarDetection::intensity() const {
  // @@protoc_insertion_point(field_get:osi3.LidarDetection.intensity)
  return intensity_;
}
inline void LidarDetection::set_intensity(double value) {
  set_has_intensity();
  intensity_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarDetection.intensity)
}

// optional double free_space_probability = 8;
inline bool LidarDetection::has_free_space_probability() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LidarDetection::set_has_free_space_probability() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LidarDetection::clear_has_free_space_probability() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LidarDetection::clear_free_space_probability() {
  free_space_probability_ = 0;
  clear_has_free_space_probability();
}
inline double LidarDetection::free_space_probability() const {
  // @@protoc_insertion_point(field_get:osi3.LidarDetection.free_space_probability)
  return free_space_probability_;
}
inline void LidarDetection::set_free_space_probability(double value) {
  set_has_free_space_probability();
  free_space_probability_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarDetection.free_space_probability)
}

// optional .osi3.DetectionClassification classification = 9;
inline bool LidarDetection::has_classification() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LidarDetection::set_has_classification() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LidarDetection::clear_has_classification() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LidarDetection::clear_classification() {
  classification_ = 0;
  clear_has_classification();
}
inline ::osi3::DetectionClassification LidarDetection::classification() const {
  // @@protoc_insertion_point(field_get:osi3.LidarDetection.classification)
  return static_cast< ::osi3::DetectionClassification >(classification_);
}
inline void LidarDetection::set_classification(::osi3::DetectionClassification value) {
  assert(::osi3::DetectionClassification_IsValid(value));
  set_has_classification();
  classification_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarDetection.classification)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::osi3::SensorDetectionHeader_DataQualifier> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::SensorDetectionHeader_DataQualifier>() {
  return ::osi3::SensorDetectionHeader_DataQualifier_descriptor();
}
template <> struct is_proto_enum< ::osi3::DetectionClassification> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::DetectionClassification>() {
  return ::osi3::DetectionClassification_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osi_5ffeaturedata_2eproto__INCLUDED
