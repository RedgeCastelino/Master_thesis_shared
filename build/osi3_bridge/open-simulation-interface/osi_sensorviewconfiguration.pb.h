// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensorviewconfiguration.proto

#ifndef PROTOBUF_osi_5fsensorviewconfiguration_2eproto__INCLUDED
#define PROTOBUF_osi_5fsensorviewconfiguration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
#include "osi_version.pb.h"
// @@protoc_insertion_point(includes)

namespace osi3 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
void protobuf_AssignDesc_osi_5fsensorviewconfiguration_2eproto();
void protobuf_ShutdownFile_osi_5fsensorviewconfiguration_2eproto();

class CameraSensorViewConfiguration;
class GenericSensorViewConfiguration;
class LidarSensorViewConfiguration;
class RadarSensorViewConfiguration;
class RadarSensorViewConfiguration_AntennaDiagramEntry;
class SensorViewConfiguration;
class UltrasonicSensorViewConfiguration;

enum CameraSensorViewConfiguration_ChannelFormat {
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_UNKNOWN = 0,
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_OTHER = 1,
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_MONO_U8_LIN = 2,
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_MONO_U16_LIN = 3,
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_MONO_U32_LIN = 4,
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_MONO_F32_LIN = 5,
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_RGB_U8_LIN = 6,
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_RGB_U16_LIN = 7,
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_RGB_U32_LIN = 8,
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_RGB_F32_LIN = 9,
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_BAYER_BGGR_U8_LIN = 10,
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_BAYER_BGGR_U16_LIN = 11,
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_BAYER_BGGR_U32_LIN = 12,
  CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_BAYER_BGGR_F32_LIN = 13
};
bool CameraSensorViewConfiguration_ChannelFormat_IsValid(int value);
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration_ChannelFormat_ChannelFormat_MIN = CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_UNKNOWN;
const CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration_ChannelFormat_ChannelFormat_MAX = CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_BAYER_BGGR_F32_LIN;
const int CameraSensorViewConfiguration_ChannelFormat_ChannelFormat_ARRAYSIZE = CameraSensorViewConfiguration_ChannelFormat_ChannelFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraSensorViewConfiguration_ChannelFormat_descriptor();
inline const ::std::string& CameraSensorViewConfiguration_ChannelFormat_Name(CameraSensorViewConfiguration_ChannelFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraSensorViewConfiguration_ChannelFormat_descriptor(), value);
}
inline bool CameraSensorViewConfiguration_ChannelFormat_Parse(
    const ::std::string& name, CameraSensorViewConfiguration_ChannelFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraSensorViewConfiguration_ChannelFormat>(
    CameraSensorViewConfiguration_ChannelFormat_descriptor(), name, value);
}
// ===================================================================

class SensorViewConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.SensorViewConfiguration) */ {
 public:
  SensorViewConfiguration();
  virtual ~SensorViewConfiguration();

  SensorViewConfiguration(const SensorViewConfiguration& from);

  inline SensorViewConfiguration& operator=(const SensorViewConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorViewConfiguration& default_instance();

  void Swap(SensorViewConfiguration* other);

  // implements Message ----------------------------------------------

  inline SensorViewConfiguration* New() const { return New(NULL); }

  SensorViewConfiguration* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorViewConfiguration& from);
  void MergeFrom(const SensorViewConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorViewConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.InterfaceVersion version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::osi3::InterfaceVersion& version() const;
  ::osi3::InterfaceVersion* mutable_version();
  ::osi3::InterfaceVersion* release_version();
  void set_allocated_version(::osi3::InterfaceVersion* version);

  // optional .osi3.Identifier sensor_id = 2;
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 2;
  const ::osi3::Identifier& sensor_id() const;
  ::osi3::Identifier* mutable_sensor_id();
  ::osi3::Identifier* release_sensor_id();
  void set_allocated_sensor_id(::osi3::Identifier* sensor_id);

  // optional .osi3.MountingPosition mounting_position = 3;
  bool has_mounting_position() const;
  void clear_mounting_position();
  static const int kMountingPositionFieldNumber = 3;
  const ::osi3::MountingPosition& mounting_position() const;
  ::osi3::MountingPosition* mutable_mounting_position();
  ::osi3::MountingPosition* release_mounting_position();
  void set_allocated_mounting_position(::osi3::MountingPosition* mounting_position);

  // optional .osi3.MountingPosition mounting_position_rmse = 4;
  bool has_mounting_position_rmse() const;
  void clear_mounting_position_rmse();
  static const int kMountingPositionRmseFieldNumber = 4;
  const ::osi3::MountingPosition& mounting_position_rmse() const;
  ::osi3::MountingPosition* mutable_mounting_position_rmse();
  ::osi3::MountingPosition* release_mounting_position_rmse();
  void set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse);

  // optional double field_of_view_horizontal = 5;
  bool has_field_of_view_horizontal() const;
  void clear_field_of_view_horizontal();
  static const int kFieldOfViewHorizontalFieldNumber = 5;
  double field_of_view_horizontal() const;
  void set_field_of_view_horizontal(double value);

  // optional double field_of_view_vertical = 6;
  bool has_field_of_view_vertical() const;
  void clear_field_of_view_vertical();
  static const int kFieldOfViewVerticalFieldNumber = 6;
  double field_of_view_vertical() const;
  void set_field_of_view_vertical(double value);

  // optional double range = 7;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 7;
  double range() const;
  void set_range(double value);

  // optional .osi3.Timestamp update_cycle_time = 8;
  bool has_update_cycle_time() const;
  void clear_update_cycle_time();
  static const int kUpdateCycleTimeFieldNumber = 8;
  const ::osi3::Timestamp& update_cycle_time() const;
  ::osi3::Timestamp* mutable_update_cycle_time();
  ::osi3::Timestamp* release_update_cycle_time();
  void set_allocated_update_cycle_time(::osi3::Timestamp* update_cycle_time);

  // optional .osi3.Timestamp update_cycle_offset = 9;
  bool has_update_cycle_offset() const;
  void clear_update_cycle_offset();
  static const int kUpdateCycleOffsetFieldNumber = 9;
  const ::osi3::Timestamp& update_cycle_offset() const;
  ::osi3::Timestamp* mutable_update_cycle_offset();
  ::osi3::Timestamp* release_update_cycle_offset();
  void set_allocated_update_cycle_offset(::osi3::Timestamp* update_cycle_offset);

  // optional .osi3.Timestamp simulation_start_time = 10;
  bool has_simulation_start_time() const;
  void clear_simulation_start_time();
  static const int kSimulationStartTimeFieldNumber = 10;
  const ::osi3::Timestamp& simulation_start_time() const;
  ::osi3::Timestamp* mutable_simulation_start_time();
  ::osi3::Timestamp* release_simulation_start_time();
  void set_allocated_simulation_start_time(::osi3::Timestamp* simulation_start_time);

  // repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
  int generic_sensor_view_configuration_size() const;
  void clear_generic_sensor_view_configuration();
  static const int kGenericSensorViewConfigurationFieldNumber = 1000;
  const ::osi3::GenericSensorViewConfiguration& generic_sensor_view_configuration(int index) const;
  ::osi3::GenericSensorViewConfiguration* mutable_generic_sensor_view_configuration(int index);
  ::osi3::GenericSensorViewConfiguration* add_generic_sensor_view_configuration();
  ::google::protobuf::RepeatedPtrField< ::osi3::GenericSensorViewConfiguration >*
      mutable_generic_sensor_view_configuration();
  const ::google::protobuf::RepeatedPtrField< ::osi3::GenericSensorViewConfiguration >&
      generic_sensor_view_configuration() const;

  // repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
  int radar_sensor_view_configuration_size() const;
  void clear_radar_sensor_view_configuration();
  static const int kRadarSensorViewConfigurationFieldNumber = 1001;
  const ::osi3::RadarSensorViewConfiguration& radar_sensor_view_configuration(int index) const;
  ::osi3::RadarSensorViewConfiguration* mutable_radar_sensor_view_configuration(int index);
  ::osi3::RadarSensorViewConfiguration* add_radar_sensor_view_configuration();
  ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration >*
      mutable_radar_sensor_view_configuration();
  const ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration >&
      radar_sensor_view_configuration() const;

  // repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
  int lidar_sensor_view_configuration_size() const;
  void clear_lidar_sensor_view_configuration();
  static const int kLidarSensorViewConfigurationFieldNumber = 1002;
  const ::osi3::LidarSensorViewConfiguration& lidar_sensor_view_configuration(int index) const;
  ::osi3::LidarSensorViewConfiguration* mutable_lidar_sensor_view_configuration(int index);
  ::osi3::LidarSensorViewConfiguration* add_lidar_sensor_view_configuration();
  ::google::protobuf::RepeatedPtrField< ::osi3::LidarSensorViewConfiguration >*
      mutable_lidar_sensor_view_configuration();
  const ::google::protobuf::RepeatedPtrField< ::osi3::LidarSensorViewConfiguration >&
      lidar_sensor_view_configuration() const;

  // repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
  int camera_sensor_view_configuration_size() const;
  void clear_camera_sensor_view_configuration();
  static const int kCameraSensorViewConfigurationFieldNumber = 1003;
  const ::osi3::CameraSensorViewConfiguration& camera_sensor_view_configuration(int index) const;
  ::osi3::CameraSensorViewConfiguration* mutable_camera_sensor_view_configuration(int index);
  ::osi3::CameraSensorViewConfiguration* add_camera_sensor_view_configuration();
  ::google::protobuf::RepeatedPtrField< ::osi3::CameraSensorViewConfiguration >*
      mutable_camera_sensor_view_configuration();
  const ::google::protobuf::RepeatedPtrField< ::osi3::CameraSensorViewConfiguration >&
      camera_sensor_view_configuration() const;

  // repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
  int ultrasonic_sensor_view_configuration_size() const;
  void clear_ultrasonic_sensor_view_configuration();
  static const int kUltrasonicSensorViewConfigurationFieldNumber = 1004;
  const ::osi3::UltrasonicSensorViewConfiguration& ultrasonic_sensor_view_configuration(int index) const;
  ::osi3::UltrasonicSensorViewConfiguration* mutable_ultrasonic_sensor_view_configuration(int index);
  ::osi3::UltrasonicSensorViewConfiguration* add_ultrasonic_sensor_view_configuration();
  ::google::protobuf::RepeatedPtrField< ::osi3::UltrasonicSensorViewConfiguration >*
      mutable_ultrasonic_sensor_view_configuration();
  const ::google::protobuf::RepeatedPtrField< ::osi3::UltrasonicSensorViewConfiguration >&
      ultrasonic_sensor_view_configuration() const;

  // @@protoc_insertion_point(class_scope:osi3.SensorViewConfiguration)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_sensor_id();
  inline void clear_has_sensor_id();
  inline void set_has_mounting_position();
  inline void clear_has_mounting_position();
  inline void set_has_mounting_position_rmse();
  inline void clear_has_mounting_position_rmse();
  inline void set_has_field_of_view_horizontal();
  inline void clear_has_field_of_view_horizontal();
  inline void set_has_field_of_view_vertical();
  inline void clear_has_field_of_view_vertical();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_update_cycle_time();
  inline void clear_has_update_cycle_time();
  inline void set_has_update_cycle_offset();
  inline void clear_has_update_cycle_offset();
  inline void set_has_simulation_start_time();
  inline void clear_has_simulation_start_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::InterfaceVersion* version_;
  ::osi3::Identifier* sensor_id_;
  ::osi3::MountingPosition* mounting_position_;
  ::osi3::MountingPosition* mounting_position_rmse_;
  double field_of_view_horizontal_;
  double field_of_view_vertical_;
  double range_;
  ::osi3::Timestamp* update_cycle_time_;
  ::osi3::Timestamp* update_cycle_offset_;
  ::osi3::Timestamp* simulation_start_time_;
  ::google::protobuf::RepeatedPtrField< ::osi3::GenericSensorViewConfiguration > generic_sensor_view_configuration_;
  ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration > radar_sensor_view_configuration_;
  ::google::protobuf::RepeatedPtrField< ::osi3::LidarSensorViewConfiguration > lidar_sensor_view_configuration_;
  ::google::protobuf::RepeatedPtrField< ::osi3::CameraSensorViewConfiguration > camera_sensor_view_configuration_;
  ::google::protobuf::RepeatedPtrField< ::osi3::UltrasonicSensorViewConfiguration > ultrasonic_sensor_view_configuration_;
  friend void  protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_AssignDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_ShutdownFile_osi_5fsensorviewconfiguration_2eproto();

  void InitAsDefaultInstance();
  static SensorViewConfiguration* default_instance_;
};
// -------------------------------------------------------------------

class GenericSensorViewConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.GenericSensorViewConfiguration) */ {
 public:
  GenericSensorViewConfiguration();
  virtual ~GenericSensorViewConfiguration();

  GenericSensorViewConfiguration(const GenericSensorViewConfiguration& from);

  inline GenericSensorViewConfiguration& operator=(const GenericSensorViewConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericSensorViewConfiguration& default_instance();

  void Swap(GenericSensorViewConfiguration* other);

  // implements Message ----------------------------------------------

  inline GenericSensorViewConfiguration* New() const { return New(NULL); }

  GenericSensorViewConfiguration* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenericSensorViewConfiguration& from);
  void MergeFrom(const GenericSensorViewConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenericSensorViewConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier sensor_id = 1;
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  const ::osi3::Identifier& sensor_id() const;
  ::osi3::Identifier* mutable_sensor_id();
  ::osi3::Identifier* release_sensor_id();
  void set_allocated_sensor_id(::osi3::Identifier* sensor_id);

  // optional .osi3.MountingPosition mounting_position = 2;
  bool has_mounting_position() const;
  void clear_mounting_position();
  static const int kMountingPositionFieldNumber = 2;
  const ::osi3::MountingPosition& mounting_position() const;
  ::osi3::MountingPosition* mutable_mounting_position();
  ::osi3::MountingPosition* release_mounting_position();
  void set_allocated_mounting_position(::osi3::MountingPosition* mounting_position);

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  bool has_mounting_position_rmse() const;
  void clear_mounting_position_rmse();
  static const int kMountingPositionRmseFieldNumber = 3;
  const ::osi3::MountingPosition& mounting_position_rmse() const;
  ::osi3::MountingPosition* mutable_mounting_position_rmse();
  ::osi3::MountingPosition* release_mounting_position_rmse();
  void set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse);

  // optional double field_of_view_horizontal = 4;
  bool has_field_of_view_horizontal() const;
  void clear_field_of_view_horizontal();
  static const int kFieldOfViewHorizontalFieldNumber = 4;
  double field_of_view_horizontal() const;
  void set_field_of_view_horizontal(double value);

  // optional double field_of_view_vertical = 5;
  bool has_field_of_view_vertical() const;
  void clear_field_of_view_vertical();
  static const int kFieldOfViewVerticalFieldNumber = 5;
  double field_of_view_vertical() const;
  void set_field_of_view_vertical(double value);

  // @@protoc_insertion_point(class_scope:osi3.GenericSensorViewConfiguration)
 private:
  inline void set_has_sensor_id();
  inline void clear_has_sensor_id();
  inline void set_has_mounting_position();
  inline void clear_has_mounting_position();
  inline void set_has_mounting_position_rmse();
  inline void clear_has_mounting_position_rmse();
  inline void set_has_field_of_view_horizontal();
  inline void clear_has_field_of_view_horizontal();
  inline void set_has_field_of_view_vertical();
  inline void clear_has_field_of_view_vertical();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* sensor_id_;
  ::osi3::MountingPosition* mounting_position_;
  ::osi3::MountingPosition* mounting_position_rmse_;
  double field_of_view_horizontal_;
  double field_of_view_vertical_;
  friend void  protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_AssignDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_ShutdownFile_osi_5fsensorviewconfiguration_2eproto();

  void InitAsDefaultInstance();
  static GenericSensorViewConfiguration* default_instance_;
};
// -------------------------------------------------------------------

class RadarSensorViewConfiguration_AntennaDiagramEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry) */ {
 public:
  RadarSensorViewConfiguration_AntennaDiagramEntry();
  virtual ~RadarSensorViewConfiguration_AntennaDiagramEntry();

  RadarSensorViewConfiguration_AntennaDiagramEntry(const RadarSensorViewConfiguration_AntennaDiagramEntry& from);

  inline RadarSensorViewConfiguration_AntennaDiagramEntry& operator=(const RadarSensorViewConfiguration_AntennaDiagramEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarSensorViewConfiguration_AntennaDiagramEntry& default_instance();

  void Swap(RadarSensorViewConfiguration_AntennaDiagramEntry* other);

  // implements Message ----------------------------------------------

  inline RadarSensorViewConfiguration_AntennaDiagramEntry* New() const { return New(NULL); }

  RadarSensorViewConfiguration_AntennaDiagramEntry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarSensorViewConfiguration_AntennaDiagramEntry& from);
  void MergeFrom(const RadarSensorViewConfiguration_AntennaDiagramEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadarSensorViewConfiguration_AntennaDiagramEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double horizontal_angle = 1;
  bool has_horizontal_angle() const;
  void clear_horizontal_angle();
  static const int kHorizontalAngleFieldNumber = 1;
  double horizontal_angle() const;
  void set_horizontal_angle(double value);

  // optional double vertical_angle = 2;
  bool has_vertical_angle() const;
  void clear_vertical_angle();
  static const int kVerticalAngleFieldNumber = 2;
  double vertical_angle() const;
  void set_vertical_angle(double value);

  // optional double response = 3;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 3;
  double response() const;
  void set_response(double value);

  // @@protoc_insertion_point(class_scope:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
 private:
  inline void set_has_horizontal_angle();
  inline void clear_has_horizontal_angle();
  inline void set_has_vertical_angle();
  inline void clear_has_vertical_angle();
  inline void set_has_response();
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double horizontal_angle_;
  double vertical_angle_;
  double response_;
  friend void  protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_AssignDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_ShutdownFile_osi_5fsensorviewconfiguration_2eproto();

  void InitAsDefaultInstance();
  static RadarSensorViewConfiguration_AntennaDiagramEntry* default_instance_;
};
// -------------------------------------------------------------------

class RadarSensorViewConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.RadarSensorViewConfiguration) */ {
 public:
  RadarSensorViewConfiguration();
  virtual ~RadarSensorViewConfiguration();

  RadarSensorViewConfiguration(const RadarSensorViewConfiguration& from);

  inline RadarSensorViewConfiguration& operator=(const RadarSensorViewConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarSensorViewConfiguration& default_instance();

  void Swap(RadarSensorViewConfiguration* other);

  // implements Message ----------------------------------------------

  inline RadarSensorViewConfiguration* New() const { return New(NULL); }

  RadarSensorViewConfiguration* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarSensorViewConfiguration& from);
  void MergeFrom(const RadarSensorViewConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadarSensorViewConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RadarSensorViewConfiguration_AntennaDiagramEntry AntennaDiagramEntry;

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier sensor_id = 1;
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  const ::osi3::Identifier& sensor_id() const;
  ::osi3::Identifier* mutable_sensor_id();
  ::osi3::Identifier* release_sensor_id();
  void set_allocated_sensor_id(::osi3::Identifier* sensor_id);

  // optional .osi3.MountingPosition mounting_position = 2;
  bool has_mounting_position() const;
  void clear_mounting_position();
  static const int kMountingPositionFieldNumber = 2;
  const ::osi3::MountingPosition& mounting_position() const;
  ::osi3::MountingPosition* mutable_mounting_position();
  ::osi3::MountingPosition* release_mounting_position();
  void set_allocated_mounting_position(::osi3::MountingPosition* mounting_position);

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  bool has_mounting_position_rmse() const;
  void clear_mounting_position_rmse();
  static const int kMountingPositionRmseFieldNumber = 3;
  const ::osi3::MountingPosition& mounting_position_rmse() const;
  ::osi3::MountingPosition* mutable_mounting_position_rmse();
  ::osi3::MountingPosition* release_mounting_position_rmse();
  void set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse);

  // optional double field_of_view_horizontal = 4;
  bool has_field_of_view_horizontal() const;
  void clear_field_of_view_horizontal();
  static const int kFieldOfViewHorizontalFieldNumber = 4;
  double field_of_view_horizontal() const;
  void set_field_of_view_horizontal(double value);

  // optional double field_of_view_vertical = 5;
  bool has_field_of_view_vertical() const;
  void clear_field_of_view_vertical();
  static const int kFieldOfViewVerticalFieldNumber = 5;
  double field_of_view_vertical() const;
  void set_field_of_view_vertical(double value);

  // optional uint32 number_of_rays_horizontal = 6;
  bool has_number_of_rays_horizontal() const;
  void clear_number_of_rays_horizontal();
  static const int kNumberOfRaysHorizontalFieldNumber = 6;
  ::google::protobuf::uint32 number_of_rays_horizontal() const;
  void set_number_of_rays_horizontal(::google::protobuf::uint32 value);

  // optional uint32 number_of_rays_vertical = 7;
  bool has_number_of_rays_vertical() const;
  void clear_number_of_rays_vertical();
  static const int kNumberOfRaysVerticalFieldNumber = 7;
  ::google::protobuf::uint32 number_of_rays_vertical() const;
  void set_number_of_rays_vertical(::google::protobuf::uint32 value);

  // optional uint32 max_number_of_interactions = 8;
  bool has_max_number_of_interactions() const;
  void clear_max_number_of_interactions();
  static const int kMaxNumberOfInteractionsFieldNumber = 8;
  ::google::protobuf::uint32 max_number_of_interactions() const;
  void set_max_number_of_interactions(::google::protobuf::uint32 value);

  // optional double emitter_frequency = 9;
  bool has_emitter_frequency() const;
  void clear_emitter_frequency();
  static const int kEmitterFrequencyFieldNumber = 9;
  double emitter_frequency() const;
  void set_emitter_frequency(double value);

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
  int tx_antenna_diagram_size() const;
  void clear_tx_antenna_diagram();
  static const int kTxAntennaDiagramFieldNumber = 10;
  const ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry& tx_antenna_diagram(int index) const;
  ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* mutable_tx_antenna_diagram(int index);
  ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* add_tx_antenna_diagram();
  ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >*
      mutable_tx_antenna_diagram();
  const ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >&
      tx_antenna_diagram() const;

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
  int rx_antenna_diagram_size() const;
  void clear_rx_antenna_diagram();
  static const int kRxAntennaDiagramFieldNumber = 11;
  const ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry& rx_antenna_diagram(int index) const;
  ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* mutable_rx_antenna_diagram(int index);
  ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* add_rx_antenna_diagram();
  ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >*
      mutable_rx_antenna_diagram();
  const ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >&
      rx_antenna_diagram() const;

  // @@protoc_insertion_point(class_scope:osi3.RadarSensorViewConfiguration)
 private:
  inline void set_has_sensor_id();
  inline void clear_has_sensor_id();
  inline void set_has_mounting_position();
  inline void clear_has_mounting_position();
  inline void set_has_mounting_position_rmse();
  inline void clear_has_mounting_position_rmse();
  inline void set_has_field_of_view_horizontal();
  inline void clear_has_field_of_view_horizontal();
  inline void set_has_field_of_view_vertical();
  inline void clear_has_field_of_view_vertical();
  inline void set_has_number_of_rays_horizontal();
  inline void clear_has_number_of_rays_horizontal();
  inline void set_has_number_of_rays_vertical();
  inline void clear_has_number_of_rays_vertical();
  inline void set_has_max_number_of_interactions();
  inline void clear_has_max_number_of_interactions();
  inline void set_has_emitter_frequency();
  inline void clear_has_emitter_frequency();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* sensor_id_;
  ::osi3::MountingPosition* mounting_position_;
  ::osi3::MountingPosition* mounting_position_rmse_;
  double field_of_view_horizontal_;
  double field_of_view_vertical_;
  ::google::protobuf::uint32 number_of_rays_horizontal_;
  ::google::protobuf::uint32 number_of_rays_vertical_;
  double emitter_frequency_;
  ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry > tx_antenna_diagram_;
  ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry > rx_antenna_diagram_;
  ::google::protobuf::uint32 max_number_of_interactions_;
  friend void  protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_AssignDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_ShutdownFile_osi_5fsensorviewconfiguration_2eproto();

  void InitAsDefaultInstance();
  static RadarSensorViewConfiguration* default_instance_;
};
// -------------------------------------------------------------------

class LidarSensorViewConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.LidarSensorViewConfiguration) */ {
 public:
  LidarSensorViewConfiguration();
  virtual ~LidarSensorViewConfiguration();

  LidarSensorViewConfiguration(const LidarSensorViewConfiguration& from);

  inline LidarSensorViewConfiguration& operator=(const LidarSensorViewConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarSensorViewConfiguration& default_instance();

  void Swap(LidarSensorViewConfiguration* other);

  // implements Message ----------------------------------------------

  inline LidarSensorViewConfiguration* New() const { return New(NULL); }

  LidarSensorViewConfiguration* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LidarSensorViewConfiguration& from);
  void MergeFrom(const LidarSensorViewConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LidarSensorViewConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier sensor_id = 1;
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  const ::osi3::Identifier& sensor_id() const;
  ::osi3::Identifier* mutable_sensor_id();
  ::osi3::Identifier* release_sensor_id();
  void set_allocated_sensor_id(::osi3::Identifier* sensor_id);

  // optional .osi3.MountingPosition mounting_position = 2;
  bool has_mounting_position() const;
  void clear_mounting_position();
  static const int kMountingPositionFieldNumber = 2;
  const ::osi3::MountingPosition& mounting_position() const;
  ::osi3::MountingPosition* mutable_mounting_position();
  ::osi3::MountingPosition* release_mounting_position();
  void set_allocated_mounting_position(::osi3::MountingPosition* mounting_position);

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  bool has_mounting_position_rmse() const;
  void clear_mounting_position_rmse();
  static const int kMountingPositionRmseFieldNumber = 3;
  const ::osi3::MountingPosition& mounting_position_rmse() const;
  ::osi3::MountingPosition* mutable_mounting_position_rmse();
  ::osi3::MountingPosition* release_mounting_position_rmse();
  void set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse);

  // optional double field_of_view_horizontal = 4;
  bool has_field_of_view_horizontal() const;
  void clear_field_of_view_horizontal();
  static const int kFieldOfViewHorizontalFieldNumber = 4;
  double field_of_view_horizontal() const;
  void set_field_of_view_horizontal(double value);

  // optional double field_of_view_vertical = 5;
  bool has_field_of_view_vertical() const;
  void clear_field_of_view_vertical();
  static const int kFieldOfViewVerticalFieldNumber = 5;
  double field_of_view_vertical() const;
  void set_field_of_view_vertical(double value);

  // optional uint32 number_of_rays_horizontal = 6;
  bool has_number_of_rays_horizontal() const;
  void clear_number_of_rays_horizontal();
  static const int kNumberOfRaysHorizontalFieldNumber = 6;
  ::google::protobuf::uint32 number_of_rays_horizontal() const;
  void set_number_of_rays_horizontal(::google::protobuf::uint32 value);

  // optional uint32 number_of_rays_vertical = 7;
  bool has_number_of_rays_vertical() const;
  void clear_number_of_rays_vertical();
  static const int kNumberOfRaysVerticalFieldNumber = 7;
  ::google::protobuf::uint32 number_of_rays_vertical() const;
  void set_number_of_rays_vertical(::google::protobuf::uint32 value);

  // optional uint32 max_number_of_interactions = 8;
  bool has_max_number_of_interactions() const;
  void clear_max_number_of_interactions();
  static const int kMaxNumberOfInteractionsFieldNumber = 8;
  ::google::protobuf::uint32 max_number_of_interactions() const;
  void set_max_number_of_interactions(::google::protobuf::uint32 value);

  // optional double emitter_frequency = 9;
  bool has_emitter_frequency() const;
  void clear_emitter_frequency();
  static const int kEmitterFrequencyFieldNumber = 9;
  double emitter_frequency() const;
  void set_emitter_frequency(double value);

  // @@protoc_insertion_point(class_scope:osi3.LidarSensorViewConfiguration)
 private:
  inline void set_has_sensor_id();
  inline void clear_has_sensor_id();
  inline void set_has_mounting_position();
  inline void clear_has_mounting_position();
  inline void set_has_mounting_position_rmse();
  inline void clear_has_mounting_position_rmse();
  inline void set_has_field_of_view_horizontal();
  inline void clear_has_field_of_view_horizontal();
  inline void set_has_field_of_view_vertical();
  inline void clear_has_field_of_view_vertical();
  inline void set_has_number_of_rays_horizontal();
  inline void clear_has_number_of_rays_horizontal();
  inline void set_has_number_of_rays_vertical();
  inline void clear_has_number_of_rays_vertical();
  inline void set_has_max_number_of_interactions();
  inline void clear_has_max_number_of_interactions();
  inline void set_has_emitter_frequency();
  inline void clear_has_emitter_frequency();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* sensor_id_;
  ::osi3::MountingPosition* mounting_position_;
  ::osi3::MountingPosition* mounting_position_rmse_;
  double field_of_view_horizontal_;
  double field_of_view_vertical_;
  ::google::protobuf::uint32 number_of_rays_horizontal_;
  ::google::protobuf::uint32 number_of_rays_vertical_;
  double emitter_frequency_;
  ::google::protobuf::uint32 max_number_of_interactions_;
  friend void  protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_AssignDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_ShutdownFile_osi_5fsensorviewconfiguration_2eproto();

  void InitAsDefaultInstance();
  static LidarSensorViewConfiguration* default_instance_;
};
// -------------------------------------------------------------------

class CameraSensorViewConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.CameraSensorViewConfiguration) */ {
 public:
  CameraSensorViewConfiguration();
  virtual ~CameraSensorViewConfiguration();

  CameraSensorViewConfiguration(const CameraSensorViewConfiguration& from);

  inline CameraSensorViewConfiguration& operator=(const CameraSensorViewConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraSensorViewConfiguration& default_instance();

  void Swap(CameraSensorViewConfiguration* other);

  // implements Message ----------------------------------------------

  inline CameraSensorViewConfiguration* New() const { return New(NULL); }

  CameraSensorViewConfiguration* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraSensorViewConfiguration& from);
  void MergeFrom(const CameraSensorViewConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraSensorViewConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CameraSensorViewConfiguration_ChannelFormat ChannelFormat;
  static const ChannelFormat CHANNEL_FORMAT_UNKNOWN =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_UNKNOWN;
  static const ChannelFormat CHANNEL_FORMAT_OTHER =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_OTHER;
  static const ChannelFormat CHANNEL_FORMAT_MONO_U8_LIN =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_MONO_U8_LIN;
  static const ChannelFormat CHANNEL_FORMAT_MONO_U16_LIN =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_MONO_U16_LIN;
  static const ChannelFormat CHANNEL_FORMAT_MONO_U32_LIN =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_MONO_U32_LIN;
  static const ChannelFormat CHANNEL_FORMAT_MONO_F32_LIN =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_MONO_F32_LIN;
  static const ChannelFormat CHANNEL_FORMAT_RGB_U8_LIN =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_RGB_U8_LIN;
  static const ChannelFormat CHANNEL_FORMAT_RGB_U16_LIN =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_RGB_U16_LIN;
  static const ChannelFormat CHANNEL_FORMAT_RGB_U32_LIN =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_RGB_U32_LIN;
  static const ChannelFormat CHANNEL_FORMAT_RGB_F32_LIN =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_RGB_F32_LIN;
  static const ChannelFormat CHANNEL_FORMAT_BAYER_BGGR_U8_LIN =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_BAYER_BGGR_U8_LIN;
  static const ChannelFormat CHANNEL_FORMAT_BAYER_BGGR_U16_LIN =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_BAYER_BGGR_U16_LIN;
  static const ChannelFormat CHANNEL_FORMAT_BAYER_BGGR_U32_LIN =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_BAYER_BGGR_U32_LIN;
  static const ChannelFormat CHANNEL_FORMAT_BAYER_BGGR_F32_LIN =
    CameraSensorViewConfiguration_ChannelFormat_CHANNEL_FORMAT_BAYER_BGGR_F32_LIN;
  static inline bool ChannelFormat_IsValid(int value) {
    return CameraSensorViewConfiguration_ChannelFormat_IsValid(value);
  }
  static const ChannelFormat ChannelFormat_MIN =
    CameraSensorViewConfiguration_ChannelFormat_ChannelFormat_MIN;
  static const ChannelFormat ChannelFormat_MAX =
    CameraSensorViewConfiguration_ChannelFormat_ChannelFormat_MAX;
  static const int ChannelFormat_ARRAYSIZE =
    CameraSensorViewConfiguration_ChannelFormat_ChannelFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChannelFormat_descriptor() {
    return CameraSensorViewConfiguration_ChannelFormat_descriptor();
  }
  static inline const ::std::string& ChannelFormat_Name(ChannelFormat value) {
    return CameraSensorViewConfiguration_ChannelFormat_Name(value);
  }
  static inline bool ChannelFormat_Parse(const ::std::string& name,
      ChannelFormat* value) {
    return CameraSensorViewConfiguration_ChannelFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier sensor_id = 1;
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  const ::osi3::Identifier& sensor_id() const;
  ::osi3::Identifier* mutable_sensor_id();
  ::osi3::Identifier* release_sensor_id();
  void set_allocated_sensor_id(::osi3::Identifier* sensor_id);

  // optional .osi3.MountingPosition mounting_position = 2;
  bool has_mounting_position() const;
  void clear_mounting_position();
  static const int kMountingPositionFieldNumber = 2;
  const ::osi3::MountingPosition& mounting_position() const;
  ::osi3::MountingPosition* mutable_mounting_position();
  ::osi3::MountingPosition* release_mounting_position();
  void set_allocated_mounting_position(::osi3::MountingPosition* mounting_position);

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  bool has_mounting_position_rmse() const;
  void clear_mounting_position_rmse();
  static const int kMountingPositionRmseFieldNumber = 3;
  const ::osi3::MountingPosition& mounting_position_rmse() const;
  ::osi3::MountingPosition* mutable_mounting_position_rmse();
  ::osi3::MountingPosition* release_mounting_position_rmse();
  void set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse);

  // optional double field_of_view_horizontal = 4;
  bool has_field_of_view_horizontal() const;
  void clear_field_of_view_horizontal();
  static const int kFieldOfViewHorizontalFieldNumber = 4;
  double field_of_view_horizontal() const;
  void set_field_of_view_horizontal(double value);

  // optional double field_of_view_vertical = 5;
  bool has_field_of_view_vertical() const;
  void clear_field_of_view_vertical();
  static const int kFieldOfViewVerticalFieldNumber = 5;
  double field_of_view_vertical() const;
  void set_field_of_view_vertical(double value);

  // optional uint32 number_of_pixels_horizontal = 6;
  bool has_number_of_pixels_horizontal() const;
  void clear_number_of_pixels_horizontal();
  static const int kNumberOfPixelsHorizontalFieldNumber = 6;
  ::google::protobuf::uint32 number_of_pixels_horizontal() const;
  void set_number_of_pixels_horizontal(::google::protobuf::uint32 value);

  // optional uint32 number_of_pixels_vertical = 7;
  bool has_number_of_pixels_vertical() const;
  void clear_number_of_pixels_vertical();
  static const int kNumberOfPixelsVerticalFieldNumber = 7;
  ::google::protobuf::uint32 number_of_pixels_vertical() const;
  void set_number_of_pixels_vertical(::google::protobuf::uint32 value);

  // repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
  int channel_format_size() const;
  void clear_channel_format();
  static const int kChannelFormatFieldNumber = 8;
  ::osi3::CameraSensorViewConfiguration_ChannelFormat channel_format(int index) const;
  void set_channel_format(int index, ::osi3::CameraSensorViewConfiguration_ChannelFormat value);
  void add_channel_format(::osi3::CameraSensorViewConfiguration_ChannelFormat value);
  const ::google::protobuf::RepeatedField<int>& channel_format() const;
  ::google::protobuf::RepeatedField<int>* mutable_channel_format();

  // @@protoc_insertion_point(class_scope:osi3.CameraSensorViewConfiguration)
 private:
  inline void set_has_sensor_id();
  inline void clear_has_sensor_id();
  inline void set_has_mounting_position();
  inline void clear_has_mounting_position();
  inline void set_has_mounting_position_rmse();
  inline void clear_has_mounting_position_rmse();
  inline void set_has_field_of_view_horizontal();
  inline void clear_has_field_of_view_horizontal();
  inline void set_has_field_of_view_vertical();
  inline void clear_has_field_of_view_vertical();
  inline void set_has_number_of_pixels_horizontal();
  inline void clear_has_number_of_pixels_horizontal();
  inline void set_has_number_of_pixels_vertical();
  inline void clear_has_number_of_pixels_vertical();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* sensor_id_;
  ::osi3::MountingPosition* mounting_position_;
  ::osi3::MountingPosition* mounting_position_rmse_;
  double field_of_view_horizontal_;
  double field_of_view_vertical_;
  ::google::protobuf::uint32 number_of_pixels_horizontal_;
  ::google::protobuf::uint32 number_of_pixels_vertical_;
  ::google::protobuf::RepeatedField<int> channel_format_;
  friend void  protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_AssignDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_ShutdownFile_osi_5fsensorviewconfiguration_2eproto();

  void InitAsDefaultInstance();
  static CameraSensorViewConfiguration* default_instance_;
};
// -------------------------------------------------------------------

class UltrasonicSensorViewConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.UltrasonicSensorViewConfiguration) */ {
 public:
  UltrasonicSensorViewConfiguration();
  virtual ~UltrasonicSensorViewConfiguration();

  UltrasonicSensorViewConfiguration(const UltrasonicSensorViewConfiguration& from);

  inline UltrasonicSensorViewConfiguration& operator=(const UltrasonicSensorViewConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UltrasonicSensorViewConfiguration& default_instance();

  void Swap(UltrasonicSensorViewConfiguration* other);

  // implements Message ----------------------------------------------

  inline UltrasonicSensorViewConfiguration* New() const { return New(NULL); }

  UltrasonicSensorViewConfiguration* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UltrasonicSensorViewConfiguration& from);
  void MergeFrom(const UltrasonicSensorViewConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UltrasonicSensorViewConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier sensor_id = 1;
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  const ::osi3::Identifier& sensor_id() const;
  ::osi3::Identifier* mutable_sensor_id();
  ::osi3::Identifier* release_sensor_id();
  void set_allocated_sensor_id(::osi3::Identifier* sensor_id);

  // optional .osi3.MountingPosition mounting_position = 2;
  bool has_mounting_position() const;
  void clear_mounting_position();
  static const int kMountingPositionFieldNumber = 2;
  const ::osi3::MountingPosition& mounting_position() const;
  ::osi3::MountingPosition* mutable_mounting_position();
  ::osi3::MountingPosition* release_mounting_position();
  void set_allocated_mounting_position(::osi3::MountingPosition* mounting_position);

  // optional .osi3.MountingPosition mounting_position_rmse = 3;
  bool has_mounting_position_rmse() const;
  void clear_mounting_position_rmse();
  static const int kMountingPositionRmseFieldNumber = 3;
  const ::osi3::MountingPosition& mounting_position_rmse() const;
  ::osi3::MountingPosition* mutable_mounting_position_rmse();
  ::osi3::MountingPosition* release_mounting_position_rmse();
  void set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse);

  // optional double field_of_view_horizontal = 4;
  bool has_field_of_view_horizontal() const;
  void clear_field_of_view_horizontal();
  static const int kFieldOfViewHorizontalFieldNumber = 4;
  double field_of_view_horizontal() const;
  void set_field_of_view_horizontal(double value);

  // optional double field_of_view_vertical = 5;
  bool has_field_of_view_vertical() const;
  void clear_field_of_view_vertical();
  static const int kFieldOfViewVerticalFieldNumber = 5;
  double field_of_view_vertical() const;
  void set_field_of_view_vertical(double value);

  // @@protoc_insertion_point(class_scope:osi3.UltrasonicSensorViewConfiguration)
 private:
  inline void set_has_sensor_id();
  inline void clear_has_sensor_id();
  inline void set_has_mounting_position();
  inline void clear_has_mounting_position();
  inline void set_has_mounting_position_rmse();
  inline void clear_has_mounting_position_rmse();
  inline void set_has_field_of_view_horizontal();
  inline void clear_has_field_of_view_horizontal();
  inline void set_has_field_of_view_vertical();
  inline void clear_has_field_of_view_vertical();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* sensor_id_;
  ::osi3::MountingPosition* mounting_position_;
  ::osi3::MountingPosition* mounting_position_rmse_;
  double field_of_view_horizontal_;
  double field_of_view_vertical_;
  friend void  protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_AssignDesc_osi_5fsensorviewconfiguration_2eproto();
  friend void protobuf_ShutdownFile_osi_5fsensorviewconfiguration_2eproto();

  void InitAsDefaultInstance();
  static UltrasonicSensorViewConfiguration* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorViewConfiguration

// optional .osi3.InterfaceVersion version = 1;
inline bool SensorViewConfiguration::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorViewConfiguration::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorViewConfiguration::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SensorViewConfiguration::clear_version() {
  if (version_ != NULL) version_->::osi3::InterfaceVersion::Clear();
  clear_has_version();
}
inline const ::osi3::InterfaceVersion& SensorViewConfiguration::version() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
inline ::osi3::InterfaceVersion* SensorViewConfiguration::mutable_version() {
  set_has_version();
  if (version_ == NULL) {
    version_ = new ::osi3::InterfaceVersion;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.version)
  return version_;
}
inline ::osi3::InterfaceVersion* SensorViewConfiguration::release_version() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.version)
  clear_has_version();
  ::osi3::InterfaceVersion* temp = version_;
  version_ = NULL;
  return temp;
}
inline void SensorViewConfiguration::set_allocated_version(::osi3::InterfaceVersion* version) {
  delete version_;
  version_ = version;
  if (version) {
    set_has_version();
  } else {
    clear_has_version();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.version)
}

// optional .osi3.Identifier sensor_id = 2;
inline bool SensorViewConfiguration::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorViewConfiguration::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SensorViewConfiguration::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
inline const ::osi3::Identifier& SensorViewConfiguration::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
inline ::osi3::Identifier* SensorViewConfiguration::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.sensor_id)
  return sensor_id_;
}
inline ::osi3::Identifier* SensorViewConfiguration::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
inline void SensorViewConfiguration::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 3;
inline bool SensorViewConfiguration::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorViewConfiguration::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SensorViewConfiguration::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
inline const ::osi3::MountingPosition& SensorViewConfiguration::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
inline ::osi3::MountingPosition* SensorViewConfiguration::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.mounting_position)
  return mounting_position_;
}
inline ::osi3::MountingPosition* SensorViewConfiguration::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
inline void SensorViewConfiguration::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 4;
inline bool SensorViewConfiguration::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorViewConfiguration::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SensorViewConfiguration::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
inline const ::osi3::MountingPosition& SensorViewConfiguration::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
inline ::osi3::MountingPosition* SensorViewConfiguration::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_;
}
inline ::osi3::MountingPosition* SensorViewConfiguration::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
inline void SensorViewConfiguration::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.mounting_position_rmse)
}

// optional double field_of_view_horizontal = 5;
inline bool SensorViewConfiguration::has_field_of_view_horizontal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorViewConfiguration::set_has_field_of_view_horizontal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SensorViewConfiguration::clear_has_field_of_view_horizontal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SensorViewConfiguration::clear_field_of_view_horizontal() {
  field_of_view_horizontal_ = 0;
  clear_has_field_of_view_horizontal();
}
inline double SensorViewConfiguration::field_of_view_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.field_of_view_horizontal)
  return field_of_view_horizontal_;
}
inline void SensorViewConfiguration::set_field_of_view_horizontal(double value) {
  set_has_field_of_view_horizontal();
  field_of_view_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.SensorViewConfiguration.field_of_view_horizontal)
}

// optional double field_of_view_vertical = 6;
inline bool SensorViewConfiguration::has_field_of_view_vertical() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorViewConfiguration::set_has_field_of_view_vertical() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SensorViewConfiguration::clear_has_field_of_view_vertical() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SensorViewConfiguration::clear_field_of_view_vertical() {
  field_of_view_vertical_ = 0;
  clear_has_field_of_view_vertical();
}
inline double SensorViewConfiguration::field_of_view_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.field_of_view_vertical)
  return field_of_view_vertical_;
}
inline void SensorViewConfiguration::set_field_of_view_vertical(double value) {
  set_has_field_of_view_vertical();
  field_of_view_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.SensorViewConfiguration.field_of_view_vertical)
}

// optional double range = 7;
inline bool SensorViewConfiguration::has_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorViewConfiguration::set_has_range() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SensorViewConfiguration::clear_has_range() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SensorViewConfiguration::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline double SensorViewConfiguration::range() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.range)
  return range_;
}
inline void SensorViewConfiguration::set_range(double value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:osi3.SensorViewConfiguration.range)
}

// optional .osi3.Timestamp update_cycle_time = 8;
inline bool SensorViewConfiguration::has_update_cycle_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SensorViewConfiguration::set_has_update_cycle_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SensorViewConfiguration::clear_has_update_cycle_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SensorViewConfiguration::clear_update_cycle_time() {
  if (update_cycle_time_ != NULL) update_cycle_time_->::osi3::Timestamp::Clear();
  clear_has_update_cycle_time();
}
inline const ::osi3::Timestamp& SensorViewConfiguration::update_cycle_time() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.update_cycle_time)
  return update_cycle_time_ != NULL ? *update_cycle_time_ : *default_instance_->update_cycle_time_;
}
inline ::osi3::Timestamp* SensorViewConfiguration::mutable_update_cycle_time() {
  set_has_update_cycle_time();
  if (update_cycle_time_ == NULL) {
    update_cycle_time_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.update_cycle_time)
  return update_cycle_time_;
}
inline ::osi3::Timestamp* SensorViewConfiguration::release_update_cycle_time() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.update_cycle_time)
  clear_has_update_cycle_time();
  ::osi3::Timestamp* temp = update_cycle_time_;
  update_cycle_time_ = NULL;
  return temp;
}
inline void SensorViewConfiguration::set_allocated_update_cycle_time(::osi3::Timestamp* update_cycle_time) {
  delete update_cycle_time_;
  update_cycle_time_ = update_cycle_time;
  if (update_cycle_time) {
    set_has_update_cycle_time();
  } else {
    clear_has_update_cycle_time();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.update_cycle_time)
}

// optional .osi3.Timestamp update_cycle_offset = 9;
inline bool SensorViewConfiguration::has_update_cycle_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SensorViewConfiguration::set_has_update_cycle_offset() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SensorViewConfiguration::clear_has_update_cycle_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SensorViewConfiguration::clear_update_cycle_offset() {
  if (update_cycle_offset_ != NULL) update_cycle_offset_->::osi3::Timestamp::Clear();
  clear_has_update_cycle_offset();
}
inline const ::osi3::Timestamp& SensorViewConfiguration::update_cycle_offset() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.update_cycle_offset)
  return update_cycle_offset_ != NULL ? *update_cycle_offset_ : *default_instance_->update_cycle_offset_;
}
inline ::osi3::Timestamp* SensorViewConfiguration::mutable_update_cycle_offset() {
  set_has_update_cycle_offset();
  if (update_cycle_offset_ == NULL) {
    update_cycle_offset_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.update_cycle_offset)
  return update_cycle_offset_;
}
inline ::osi3::Timestamp* SensorViewConfiguration::release_update_cycle_offset() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.update_cycle_offset)
  clear_has_update_cycle_offset();
  ::osi3::Timestamp* temp = update_cycle_offset_;
  update_cycle_offset_ = NULL;
  return temp;
}
inline void SensorViewConfiguration::set_allocated_update_cycle_offset(::osi3::Timestamp* update_cycle_offset) {
  delete update_cycle_offset_;
  update_cycle_offset_ = update_cycle_offset;
  if (update_cycle_offset) {
    set_has_update_cycle_offset();
  } else {
    clear_has_update_cycle_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.update_cycle_offset)
}

// optional .osi3.Timestamp simulation_start_time = 10;
inline bool SensorViewConfiguration::has_simulation_start_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SensorViewConfiguration::set_has_simulation_start_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SensorViewConfiguration::clear_has_simulation_start_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SensorViewConfiguration::clear_simulation_start_time() {
  if (simulation_start_time_ != NULL) simulation_start_time_->::osi3::Timestamp::Clear();
  clear_has_simulation_start_time();
}
inline const ::osi3::Timestamp& SensorViewConfiguration::simulation_start_time() const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.simulation_start_time)
  return simulation_start_time_ != NULL ? *simulation_start_time_ : *default_instance_->simulation_start_time_;
}
inline ::osi3::Timestamp* SensorViewConfiguration::mutable_simulation_start_time() {
  set_has_simulation_start_time();
  if (simulation_start_time_ == NULL) {
    simulation_start_time_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.simulation_start_time)
  return simulation_start_time_;
}
inline ::osi3::Timestamp* SensorViewConfiguration::release_simulation_start_time() {
  // @@protoc_insertion_point(field_release:osi3.SensorViewConfiguration.simulation_start_time)
  clear_has_simulation_start_time();
  ::osi3::Timestamp* temp = simulation_start_time_;
  simulation_start_time_ = NULL;
  return temp;
}
inline void SensorViewConfiguration::set_allocated_simulation_start_time(::osi3::Timestamp* simulation_start_time) {
  delete simulation_start_time_;
  simulation_start_time_ = simulation_start_time;
  if (simulation_start_time) {
    set_has_simulation_start_time();
  } else {
    clear_has_simulation_start_time();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorViewConfiguration.simulation_start_time)
}

// repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
inline int SensorViewConfiguration::generic_sensor_view_configuration_size() const {
  return generic_sensor_view_configuration_.size();
}
inline void SensorViewConfiguration::clear_generic_sensor_view_configuration() {
  generic_sensor_view_configuration_.Clear();
}
inline const ::osi3::GenericSensorViewConfiguration& SensorViewConfiguration::generic_sensor_view_configuration(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.generic_sensor_view_configuration)
  return generic_sensor_view_configuration_.Get(index);
}
inline ::osi3::GenericSensorViewConfiguration* SensorViewConfiguration::mutable_generic_sensor_view_configuration(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.generic_sensor_view_configuration)
  return generic_sensor_view_configuration_.Mutable(index);
}
inline ::osi3::GenericSensorViewConfiguration* SensorViewConfiguration::add_generic_sensor_view_configuration() {
  // @@protoc_insertion_point(field_add:osi3.SensorViewConfiguration.generic_sensor_view_configuration)
  return generic_sensor_view_configuration_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::GenericSensorViewConfiguration >*
SensorViewConfiguration::mutable_generic_sensor_view_configuration() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorViewConfiguration.generic_sensor_view_configuration)
  return &generic_sensor_view_configuration_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::GenericSensorViewConfiguration >&
SensorViewConfiguration::generic_sensor_view_configuration() const {
  // @@protoc_insertion_point(field_list:osi3.SensorViewConfiguration.generic_sensor_view_configuration)
  return generic_sensor_view_configuration_;
}

// repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
inline int SensorViewConfiguration::radar_sensor_view_configuration_size() const {
  return radar_sensor_view_configuration_.size();
}
inline void SensorViewConfiguration::clear_radar_sensor_view_configuration() {
  radar_sensor_view_configuration_.Clear();
}
inline const ::osi3::RadarSensorViewConfiguration& SensorViewConfiguration::radar_sensor_view_configuration(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.radar_sensor_view_configuration)
  return radar_sensor_view_configuration_.Get(index);
}
inline ::osi3::RadarSensorViewConfiguration* SensorViewConfiguration::mutable_radar_sensor_view_configuration(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.radar_sensor_view_configuration)
  return radar_sensor_view_configuration_.Mutable(index);
}
inline ::osi3::RadarSensorViewConfiguration* SensorViewConfiguration::add_radar_sensor_view_configuration() {
  // @@protoc_insertion_point(field_add:osi3.SensorViewConfiguration.radar_sensor_view_configuration)
  return radar_sensor_view_configuration_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration >*
SensorViewConfiguration::mutable_radar_sensor_view_configuration() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorViewConfiguration.radar_sensor_view_configuration)
  return &radar_sensor_view_configuration_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration >&
SensorViewConfiguration::radar_sensor_view_configuration() const {
  // @@protoc_insertion_point(field_list:osi3.SensorViewConfiguration.radar_sensor_view_configuration)
  return radar_sensor_view_configuration_;
}

// repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
inline int SensorViewConfiguration::lidar_sensor_view_configuration_size() const {
  return lidar_sensor_view_configuration_.size();
}
inline void SensorViewConfiguration::clear_lidar_sensor_view_configuration() {
  lidar_sensor_view_configuration_.Clear();
}
inline const ::osi3::LidarSensorViewConfiguration& SensorViewConfiguration::lidar_sensor_view_configuration(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.lidar_sensor_view_configuration)
  return lidar_sensor_view_configuration_.Get(index);
}
inline ::osi3::LidarSensorViewConfiguration* SensorViewConfiguration::mutable_lidar_sensor_view_configuration(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.lidar_sensor_view_configuration)
  return lidar_sensor_view_configuration_.Mutable(index);
}
inline ::osi3::LidarSensorViewConfiguration* SensorViewConfiguration::add_lidar_sensor_view_configuration() {
  // @@protoc_insertion_point(field_add:osi3.SensorViewConfiguration.lidar_sensor_view_configuration)
  return lidar_sensor_view_configuration_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::LidarSensorViewConfiguration >*
SensorViewConfiguration::mutable_lidar_sensor_view_configuration() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorViewConfiguration.lidar_sensor_view_configuration)
  return &lidar_sensor_view_configuration_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::LidarSensorViewConfiguration >&
SensorViewConfiguration::lidar_sensor_view_configuration() const {
  // @@protoc_insertion_point(field_list:osi3.SensorViewConfiguration.lidar_sensor_view_configuration)
  return lidar_sensor_view_configuration_;
}

// repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
inline int SensorViewConfiguration::camera_sensor_view_configuration_size() const {
  return camera_sensor_view_configuration_.size();
}
inline void SensorViewConfiguration::clear_camera_sensor_view_configuration() {
  camera_sensor_view_configuration_.Clear();
}
inline const ::osi3::CameraSensorViewConfiguration& SensorViewConfiguration::camera_sensor_view_configuration(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.camera_sensor_view_configuration)
  return camera_sensor_view_configuration_.Get(index);
}
inline ::osi3::CameraSensorViewConfiguration* SensorViewConfiguration::mutable_camera_sensor_view_configuration(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.camera_sensor_view_configuration)
  return camera_sensor_view_configuration_.Mutable(index);
}
inline ::osi3::CameraSensorViewConfiguration* SensorViewConfiguration::add_camera_sensor_view_configuration() {
  // @@protoc_insertion_point(field_add:osi3.SensorViewConfiguration.camera_sensor_view_configuration)
  return camera_sensor_view_configuration_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::CameraSensorViewConfiguration >*
SensorViewConfiguration::mutable_camera_sensor_view_configuration() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorViewConfiguration.camera_sensor_view_configuration)
  return &camera_sensor_view_configuration_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::CameraSensorViewConfiguration >&
SensorViewConfiguration::camera_sensor_view_configuration() const {
  // @@protoc_insertion_point(field_list:osi3.SensorViewConfiguration.camera_sensor_view_configuration)
  return camera_sensor_view_configuration_;
}

// repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
inline int SensorViewConfiguration::ultrasonic_sensor_view_configuration_size() const {
  return ultrasonic_sensor_view_configuration_.size();
}
inline void SensorViewConfiguration::clear_ultrasonic_sensor_view_configuration() {
  ultrasonic_sensor_view_configuration_.Clear();
}
inline const ::osi3::UltrasonicSensorViewConfiguration& SensorViewConfiguration::ultrasonic_sensor_view_configuration(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorViewConfiguration.ultrasonic_sensor_view_configuration)
  return ultrasonic_sensor_view_configuration_.Get(index);
}
inline ::osi3::UltrasonicSensorViewConfiguration* SensorViewConfiguration::mutable_ultrasonic_sensor_view_configuration(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorViewConfiguration.ultrasonic_sensor_view_configuration)
  return ultrasonic_sensor_view_configuration_.Mutable(index);
}
inline ::osi3::UltrasonicSensorViewConfiguration* SensorViewConfiguration::add_ultrasonic_sensor_view_configuration() {
  // @@protoc_insertion_point(field_add:osi3.SensorViewConfiguration.ultrasonic_sensor_view_configuration)
  return ultrasonic_sensor_view_configuration_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::UltrasonicSensorViewConfiguration >*
SensorViewConfiguration::mutable_ultrasonic_sensor_view_configuration() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorViewConfiguration.ultrasonic_sensor_view_configuration)
  return &ultrasonic_sensor_view_configuration_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::UltrasonicSensorViewConfiguration >&
SensorViewConfiguration::ultrasonic_sensor_view_configuration() const {
  // @@protoc_insertion_point(field_list:osi3.SensorViewConfiguration.ultrasonic_sensor_view_configuration)
  return ultrasonic_sensor_view_configuration_;
}

// -------------------------------------------------------------------

// GenericSensorViewConfiguration

// optional .osi3.Identifier sensor_id = 1;
inline bool GenericSensorViewConfiguration::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenericSensorViewConfiguration::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GenericSensorViewConfiguration::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GenericSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
inline const ::osi3::Identifier& GenericSensorViewConfiguration::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.GenericSensorViewConfiguration.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
inline ::osi3::Identifier* GenericSensorViewConfiguration::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GenericSensorViewConfiguration.sensor_id)
  return sensor_id_;
}
inline ::osi3::Identifier* GenericSensorViewConfiguration::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.GenericSensorViewConfiguration.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
inline void GenericSensorViewConfiguration::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GenericSensorViewConfiguration.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 2;
inline bool GenericSensorViewConfiguration::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenericSensorViewConfiguration::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GenericSensorViewConfiguration::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GenericSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
inline const ::osi3::MountingPosition& GenericSensorViewConfiguration::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.GenericSensorViewConfiguration.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
inline ::osi3::MountingPosition* GenericSensorViewConfiguration::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GenericSensorViewConfiguration.mounting_position)
  return mounting_position_;
}
inline ::osi3::MountingPosition* GenericSensorViewConfiguration::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.GenericSensorViewConfiguration.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
inline void GenericSensorViewConfiguration::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GenericSensorViewConfiguration.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 3;
inline bool GenericSensorViewConfiguration::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GenericSensorViewConfiguration::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GenericSensorViewConfiguration::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GenericSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
inline const ::osi3::MountingPosition& GenericSensorViewConfiguration::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.GenericSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
inline ::osi3::MountingPosition* GenericSensorViewConfiguration::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GenericSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_;
}
inline ::osi3::MountingPosition* GenericSensorViewConfiguration::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.GenericSensorViewConfiguration.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
inline void GenericSensorViewConfiguration::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GenericSensorViewConfiguration.mounting_position_rmse)
}

// optional double field_of_view_horizontal = 4;
inline bool GenericSensorViewConfiguration::has_field_of_view_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GenericSensorViewConfiguration::set_has_field_of_view_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GenericSensorViewConfiguration::clear_has_field_of_view_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GenericSensorViewConfiguration::clear_field_of_view_horizontal() {
  field_of_view_horizontal_ = 0;
  clear_has_field_of_view_horizontal();
}
inline double GenericSensorViewConfiguration::field_of_view_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.GenericSensorViewConfiguration.field_of_view_horizontal)
  return field_of_view_horizontal_;
}
inline void GenericSensorViewConfiguration::set_field_of_view_horizontal(double value) {
  set_has_field_of_view_horizontal();
  field_of_view_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.GenericSensorViewConfiguration.field_of_view_horizontal)
}

// optional double field_of_view_vertical = 5;
inline bool GenericSensorViewConfiguration::has_field_of_view_vertical() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GenericSensorViewConfiguration::set_has_field_of_view_vertical() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GenericSensorViewConfiguration::clear_has_field_of_view_vertical() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GenericSensorViewConfiguration::clear_field_of_view_vertical() {
  field_of_view_vertical_ = 0;
  clear_has_field_of_view_vertical();
}
inline double GenericSensorViewConfiguration::field_of_view_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.GenericSensorViewConfiguration.field_of_view_vertical)
  return field_of_view_vertical_;
}
inline void GenericSensorViewConfiguration::set_field_of_view_vertical(double value) {
  set_has_field_of_view_vertical();
  field_of_view_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.GenericSensorViewConfiguration.field_of_view_vertical)
}

// -------------------------------------------------------------------

// RadarSensorViewConfiguration_AntennaDiagramEntry

// optional double horizontal_angle = 1;
inline bool RadarSensorViewConfiguration_AntennaDiagramEntry::has_horizontal_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarSensorViewConfiguration_AntennaDiagramEntry::set_has_horizontal_angle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarSensorViewConfiguration_AntennaDiagramEntry::clear_has_horizontal_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarSensorViewConfiguration_AntennaDiagramEntry::clear_horizontal_angle() {
  horizontal_angle_ = 0;
  clear_has_horizontal_angle();
}
inline double RadarSensorViewConfiguration_AntennaDiagramEntry::horizontal_angle() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry.horizontal_angle)
  return horizontal_angle_;
}
inline void RadarSensorViewConfiguration_AntennaDiagramEntry::set_horizontal_angle(double value) {
  set_has_horizontal_angle();
  horizontal_angle_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry.horizontal_angle)
}

// optional double vertical_angle = 2;
inline bool RadarSensorViewConfiguration_AntennaDiagramEntry::has_vertical_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarSensorViewConfiguration_AntennaDiagramEntry::set_has_vertical_angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarSensorViewConfiguration_AntennaDiagramEntry::clear_has_vertical_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarSensorViewConfiguration_AntennaDiagramEntry::clear_vertical_angle() {
  vertical_angle_ = 0;
  clear_has_vertical_angle();
}
inline double RadarSensorViewConfiguration_AntennaDiagramEntry::vertical_angle() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry.vertical_angle)
  return vertical_angle_;
}
inline void RadarSensorViewConfiguration_AntennaDiagramEntry::set_vertical_angle(double value) {
  set_has_vertical_angle();
  vertical_angle_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry.vertical_angle)
}

// optional double response = 3;
inline bool RadarSensorViewConfiguration_AntennaDiagramEntry::has_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarSensorViewConfiguration_AntennaDiagramEntry::set_has_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarSensorViewConfiguration_AntennaDiagramEntry::clear_has_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarSensorViewConfiguration_AntennaDiagramEntry::clear_response() {
  response_ = 0;
  clear_has_response();
}
inline double RadarSensorViewConfiguration_AntennaDiagramEntry::response() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry.response)
  return response_;
}
inline void RadarSensorViewConfiguration_AntennaDiagramEntry::set_response(double value) {
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry.response)
}

// -------------------------------------------------------------------

// RadarSensorViewConfiguration

// optional .osi3.Identifier sensor_id = 1;
inline bool RadarSensorViewConfiguration::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarSensorViewConfiguration::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarSensorViewConfiguration::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
inline const ::osi3::Identifier& RadarSensorViewConfiguration::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
inline ::osi3::Identifier* RadarSensorViewConfiguration::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RadarSensorViewConfiguration.sensor_id)
  return sensor_id_;
}
inline ::osi3::Identifier* RadarSensorViewConfiguration::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.RadarSensorViewConfiguration.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
inline void RadarSensorViewConfiguration::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RadarSensorViewConfiguration.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 2;
inline bool RadarSensorViewConfiguration::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarSensorViewConfiguration::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarSensorViewConfiguration::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
inline const ::osi3::MountingPosition& RadarSensorViewConfiguration::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
inline ::osi3::MountingPosition* RadarSensorViewConfiguration::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RadarSensorViewConfiguration.mounting_position)
  return mounting_position_;
}
inline ::osi3::MountingPosition* RadarSensorViewConfiguration::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.RadarSensorViewConfiguration.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
inline void RadarSensorViewConfiguration::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RadarSensorViewConfiguration.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 3;
inline bool RadarSensorViewConfiguration::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarSensorViewConfiguration::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarSensorViewConfiguration::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
inline const ::osi3::MountingPosition& RadarSensorViewConfiguration::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
inline ::osi3::MountingPosition* RadarSensorViewConfiguration::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RadarSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_;
}
inline ::osi3::MountingPosition* RadarSensorViewConfiguration::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.RadarSensorViewConfiguration.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
inline void RadarSensorViewConfiguration::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RadarSensorViewConfiguration.mounting_position_rmse)
}

// optional double field_of_view_horizontal = 4;
inline bool RadarSensorViewConfiguration::has_field_of_view_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarSensorViewConfiguration::set_has_field_of_view_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarSensorViewConfiguration::clear_has_field_of_view_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarSensorViewConfiguration::clear_field_of_view_horizontal() {
  field_of_view_horizontal_ = 0;
  clear_has_field_of_view_horizontal();
}
inline double RadarSensorViewConfiguration::field_of_view_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.field_of_view_horizontal)
  return field_of_view_horizontal_;
}
inline void RadarSensorViewConfiguration::set_field_of_view_horizontal(double value) {
  set_has_field_of_view_horizontal();
  field_of_view_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.field_of_view_horizontal)
}

// optional double field_of_view_vertical = 5;
inline bool RadarSensorViewConfiguration::has_field_of_view_vertical() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarSensorViewConfiguration::set_has_field_of_view_vertical() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarSensorViewConfiguration::clear_has_field_of_view_vertical() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarSensorViewConfiguration::clear_field_of_view_vertical() {
  field_of_view_vertical_ = 0;
  clear_has_field_of_view_vertical();
}
inline double RadarSensorViewConfiguration::field_of_view_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.field_of_view_vertical)
  return field_of_view_vertical_;
}
inline void RadarSensorViewConfiguration::set_field_of_view_vertical(double value) {
  set_has_field_of_view_vertical();
  field_of_view_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.field_of_view_vertical)
}

// optional uint32 number_of_rays_horizontal = 6;
inline bool RadarSensorViewConfiguration::has_number_of_rays_horizontal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarSensorViewConfiguration::set_has_number_of_rays_horizontal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarSensorViewConfiguration::clear_has_number_of_rays_horizontal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarSensorViewConfiguration::clear_number_of_rays_horizontal() {
  number_of_rays_horizontal_ = 0u;
  clear_has_number_of_rays_horizontal();
}
inline ::google::protobuf::uint32 RadarSensorViewConfiguration::number_of_rays_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.number_of_rays_horizontal)
  return number_of_rays_horizontal_;
}
inline void RadarSensorViewConfiguration::set_number_of_rays_horizontal(::google::protobuf::uint32 value) {
  set_has_number_of_rays_horizontal();
  number_of_rays_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.number_of_rays_horizontal)
}

// optional uint32 number_of_rays_vertical = 7;
inline bool RadarSensorViewConfiguration::has_number_of_rays_vertical() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarSensorViewConfiguration::set_has_number_of_rays_vertical() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarSensorViewConfiguration::clear_has_number_of_rays_vertical() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarSensorViewConfiguration::clear_number_of_rays_vertical() {
  number_of_rays_vertical_ = 0u;
  clear_has_number_of_rays_vertical();
}
inline ::google::protobuf::uint32 RadarSensorViewConfiguration::number_of_rays_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.number_of_rays_vertical)
  return number_of_rays_vertical_;
}
inline void RadarSensorViewConfiguration::set_number_of_rays_vertical(::google::protobuf::uint32 value) {
  set_has_number_of_rays_vertical();
  number_of_rays_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.number_of_rays_vertical)
}

// optional uint32 max_number_of_interactions = 8;
inline bool RadarSensorViewConfiguration::has_max_number_of_interactions() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarSensorViewConfiguration::set_has_max_number_of_interactions() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarSensorViewConfiguration::clear_has_max_number_of_interactions() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarSensorViewConfiguration::clear_max_number_of_interactions() {
  max_number_of_interactions_ = 0u;
  clear_has_max_number_of_interactions();
}
inline ::google::protobuf::uint32 RadarSensorViewConfiguration::max_number_of_interactions() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.max_number_of_interactions)
  return max_number_of_interactions_;
}
inline void RadarSensorViewConfiguration::set_max_number_of_interactions(::google::protobuf::uint32 value) {
  set_has_max_number_of_interactions();
  max_number_of_interactions_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.max_number_of_interactions)
}

// optional double emitter_frequency = 9;
inline bool RadarSensorViewConfiguration::has_emitter_frequency() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarSensorViewConfiguration::set_has_emitter_frequency() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarSensorViewConfiguration::clear_has_emitter_frequency() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarSensorViewConfiguration::clear_emitter_frequency() {
  emitter_frequency_ = 0;
  clear_has_emitter_frequency();
}
inline double RadarSensorViewConfiguration::emitter_frequency() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.emitter_frequency)
  return emitter_frequency_;
}
inline void RadarSensorViewConfiguration::set_emitter_frequency(double value) {
  set_has_emitter_frequency();
  emitter_frequency_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorViewConfiguration.emitter_frequency)
}

// repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
inline int RadarSensorViewConfiguration::tx_antenna_diagram_size() const {
  return tx_antenna_diagram_.size();
}
inline void RadarSensorViewConfiguration::clear_tx_antenna_diagram() {
  tx_antenna_diagram_.Clear();
}
inline const ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry& RadarSensorViewConfiguration::tx_antenna_diagram(int index) const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.tx_antenna_diagram)
  return tx_antenna_diagram_.Get(index);
}
inline ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* RadarSensorViewConfiguration::mutable_tx_antenna_diagram(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.RadarSensorViewConfiguration.tx_antenna_diagram)
  return tx_antenna_diagram_.Mutable(index);
}
inline ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* RadarSensorViewConfiguration::add_tx_antenna_diagram() {
  // @@protoc_insertion_point(field_add:osi3.RadarSensorViewConfiguration.tx_antenna_diagram)
  return tx_antenna_diagram_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >*
RadarSensorViewConfiguration::mutable_tx_antenna_diagram() {
  // @@protoc_insertion_point(field_mutable_list:osi3.RadarSensorViewConfiguration.tx_antenna_diagram)
  return &tx_antenna_diagram_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >&
RadarSensorViewConfiguration::tx_antenna_diagram() const {
  // @@protoc_insertion_point(field_list:osi3.RadarSensorViewConfiguration.tx_antenna_diagram)
  return tx_antenna_diagram_;
}

// repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
inline int RadarSensorViewConfiguration::rx_antenna_diagram_size() const {
  return rx_antenna_diagram_.size();
}
inline void RadarSensorViewConfiguration::clear_rx_antenna_diagram() {
  rx_antenna_diagram_.Clear();
}
inline const ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry& RadarSensorViewConfiguration::rx_antenna_diagram(int index) const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorViewConfiguration.rx_antenna_diagram)
  return rx_antenna_diagram_.Get(index);
}
inline ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* RadarSensorViewConfiguration::mutable_rx_antenna_diagram(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.RadarSensorViewConfiguration.rx_antenna_diagram)
  return rx_antenna_diagram_.Mutable(index);
}
inline ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* RadarSensorViewConfiguration::add_rx_antenna_diagram() {
  // @@protoc_insertion_point(field_add:osi3.RadarSensorViewConfiguration.rx_antenna_diagram)
  return rx_antenna_diagram_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >*
RadarSensorViewConfiguration::mutable_rx_antenna_diagram() {
  // @@protoc_insertion_point(field_mutable_list:osi3.RadarSensorViewConfiguration.rx_antenna_diagram)
  return &rx_antenna_diagram_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >&
RadarSensorViewConfiguration::rx_antenna_diagram() const {
  // @@protoc_insertion_point(field_list:osi3.RadarSensorViewConfiguration.rx_antenna_diagram)
  return rx_antenna_diagram_;
}

// -------------------------------------------------------------------

// LidarSensorViewConfiguration

// optional .osi3.Identifier sensor_id = 1;
inline bool LidarSensorViewConfiguration::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LidarSensorViewConfiguration::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LidarSensorViewConfiguration::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LidarSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
inline const ::osi3::Identifier& LidarSensorViewConfiguration::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
inline ::osi3::Identifier* LidarSensorViewConfiguration::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LidarSensorViewConfiguration.sensor_id)
  return sensor_id_;
}
inline ::osi3::Identifier* LidarSensorViewConfiguration::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.LidarSensorViewConfiguration.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
inline void LidarSensorViewConfiguration::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LidarSensorViewConfiguration.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 2;
inline bool LidarSensorViewConfiguration::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LidarSensorViewConfiguration::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LidarSensorViewConfiguration::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LidarSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
inline const ::osi3::MountingPosition& LidarSensorViewConfiguration::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
inline ::osi3::MountingPosition* LidarSensorViewConfiguration::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LidarSensorViewConfiguration.mounting_position)
  return mounting_position_;
}
inline ::osi3::MountingPosition* LidarSensorViewConfiguration::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.LidarSensorViewConfiguration.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
inline void LidarSensorViewConfiguration::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LidarSensorViewConfiguration.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 3;
inline bool LidarSensorViewConfiguration::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LidarSensorViewConfiguration::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LidarSensorViewConfiguration::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LidarSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
inline const ::osi3::MountingPosition& LidarSensorViewConfiguration::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
inline ::osi3::MountingPosition* LidarSensorViewConfiguration::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LidarSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_;
}
inline ::osi3::MountingPosition* LidarSensorViewConfiguration::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.LidarSensorViewConfiguration.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
inline void LidarSensorViewConfiguration::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LidarSensorViewConfiguration.mounting_position_rmse)
}

// optional double field_of_view_horizontal = 4;
inline bool LidarSensorViewConfiguration::has_field_of_view_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LidarSensorViewConfiguration::set_has_field_of_view_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LidarSensorViewConfiguration::clear_has_field_of_view_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LidarSensorViewConfiguration::clear_field_of_view_horizontal() {
  field_of_view_horizontal_ = 0;
  clear_has_field_of_view_horizontal();
}
inline double LidarSensorViewConfiguration::field_of_view_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.field_of_view_horizontal)
  return field_of_view_horizontal_;
}
inline void LidarSensorViewConfiguration::set_field_of_view_horizontal(double value) {
  set_has_field_of_view_horizontal();
  field_of_view_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorViewConfiguration.field_of_view_horizontal)
}

// optional double field_of_view_vertical = 5;
inline bool LidarSensorViewConfiguration::has_field_of_view_vertical() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LidarSensorViewConfiguration::set_has_field_of_view_vertical() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LidarSensorViewConfiguration::clear_has_field_of_view_vertical() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LidarSensorViewConfiguration::clear_field_of_view_vertical() {
  field_of_view_vertical_ = 0;
  clear_has_field_of_view_vertical();
}
inline double LidarSensorViewConfiguration::field_of_view_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.field_of_view_vertical)
  return field_of_view_vertical_;
}
inline void LidarSensorViewConfiguration::set_field_of_view_vertical(double value) {
  set_has_field_of_view_vertical();
  field_of_view_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorViewConfiguration.field_of_view_vertical)
}

// optional uint32 number_of_rays_horizontal = 6;
inline bool LidarSensorViewConfiguration::has_number_of_rays_horizontal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LidarSensorViewConfiguration::set_has_number_of_rays_horizontal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LidarSensorViewConfiguration::clear_has_number_of_rays_horizontal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LidarSensorViewConfiguration::clear_number_of_rays_horizontal() {
  number_of_rays_horizontal_ = 0u;
  clear_has_number_of_rays_horizontal();
}
inline ::google::protobuf::uint32 LidarSensorViewConfiguration::number_of_rays_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.number_of_rays_horizontal)
  return number_of_rays_horizontal_;
}
inline void LidarSensorViewConfiguration::set_number_of_rays_horizontal(::google::protobuf::uint32 value) {
  set_has_number_of_rays_horizontal();
  number_of_rays_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorViewConfiguration.number_of_rays_horizontal)
}

// optional uint32 number_of_rays_vertical = 7;
inline bool LidarSensorViewConfiguration::has_number_of_rays_vertical() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LidarSensorViewConfiguration::set_has_number_of_rays_vertical() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LidarSensorViewConfiguration::clear_has_number_of_rays_vertical() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LidarSensorViewConfiguration::clear_number_of_rays_vertical() {
  number_of_rays_vertical_ = 0u;
  clear_has_number_of_rays_vertical();
}
inline ::google::protobuf::uint32 LidarSensorViewConfiguration::number_of_rays_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.number_of_rays_vertical)
  return number_of_rays_vertical_;
}
inline void LidarSensorViewConfiguration::set_number_of_rays_vertical(::google::protobuf::uint32 value) {
  set_has_number_of_rays_vertical();
  number_of_rays_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorViewConfiguration.number_of_rays_vertical)
}

// optional uint32 max_number_of_interactions = 8;
inline bool LidarSensorViewConfiguration::has_max_number_of_interactions() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LidarSensorViewConfiguration::set_has_max_number_of_interactions() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LidarSensorViewConfiguration::clear_has_max_number_of_interactions() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LidarSensorViewConfiguration::clear_max_number_of_interactions() {
  max_number_of_interactions_ = 0u;
  clear_has_max_number_of_interactions();
}
inline ::google::protobuf::uint32 LidarSensorViewConfiguration::max_number_of_interactions() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.max_number_of_interactions)
  return max_number_of_interactions_;
}
inline void LidarSensorViewConfiguration::set_max_number_of_interactions(::google::protobuf::uint32 value) {
  set_has_max_number_of_interactions();
  max_number_of_interactions_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorViewConfiguration.max_number_of_interactions)
}

// optional double emitter_frequency = 9;
inline bool LidarSensorViewConfiguration::has_emitter_frequency() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LidarSensorViewConfiguration::set_has_emitter_frequency() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LidarSensorViewConfiguration::clear_has_emitter_frequency() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LidarSensorViewConfiguration::clear_emitter_frequency() {
  emitter_frequency_ = 0;
  clear_has_emitter_frequency();
}
inline double LidarSensorViewConfiguration::emitter_frequency() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorViewConfiguration.emitter_frequency)
  return emitter_frequency_;
}
inline void LidarSensorViewConfiguration::set_emitter_frequency(double value) {
  set_has_emitter_frequency();
  emitter_frequency_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorViewConfiguration.emitter_frequency)
}

// -------------------------------------------------------------------

// CameraSensorViewConfiguration

// optional .osi3.Identifier sensor_id = 1;
inline bool CameraSensorViewConfiguration::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraSensorViewConfiguration::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraSensorViewConfiguration::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
inline const ::osi3::Identifier& CameraSensorViewConfiguration::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
inline ::osi3::Identifier* CameraSensorViewConfiguration::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.CameraSensorViewConfiguration.sensor_id)
  return sensor_id_;
}
inline ::osi3::Identifier* CameraSensorViewConfiguration::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.CameraSensorViewConfiguration.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
inline void CameraSensorViewConfiguration::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.CameraSensorViewConfiguration.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 2;
inline bool CameraSensorViewConfiguration::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraSensorViewConfiguration::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraSensorViewConfiguration::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
inline const ::osi3::MountingPosition& CameraSensorViewConfiguration::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
inline ::osi3::MountingPosition* CameraSensorViewConfiguration::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.CameraSensorViewConfiguration.mounting_position)
  return mounting_position_;
}
inline ::osi3::MountingPosition* CameraSensorViewConfiguration::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.CameraSensorViewConfiguration.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
inline void CameraSensorViewConfiguration::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.CameraSensorViewConfiguration.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 3;
inline bool CameraSensorViewConfiguration::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraSensorViewConfiguration::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraSensorViewConfiguration::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
inline const ::osi3::MountingPosition& CameraSensorViewConfiguration::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
inline ::osi3::MountingPosition* CameraSensorViewConfiguration::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.CameraSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_;
}
inline ::osi3::MountingPosition* CameraSensorViewConfiguration::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.CameraSensorViewConfiguration.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
inline void CameraSensorViewConfiguration::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.CameraSensorViewConfiguration.mounting_position_rmse)
}

// optional double field_of_view_horizontal = 4;
inline bool CameraSensorViewConfiguration::has_field_of_view_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraSensorViewConfiguration::set_has_field_of_view_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraSensorViewConfiguration::clear_has_field_of_view_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraSensorViewConfiguration::clear_field_of_view_horizontal() {
  field_of_view_horizontal_ = 0;
  clear_has_field_of_view_horizontal();
}
inline double CameraSensorViewConfiguration::field_of_view_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.field_of_view_horizontal)
  return field_of_view_horizontal_;
}
inline void CameraSensorViewConfiguration::set_field_of_view_horizontal(double value) {
  set_has_field_of_view_horizontal();
  field_of_view_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.CameraSensorViewConfiguration.field_of_view_horizontal)
}

// optional double field_of_view_vertical = 5;
inline bool CameraSensorViewConfiguration::has_field_of_view_vertical() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraSensorViewConfiguration::set_has_field_of_view_vertical() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraSensorViewConfiguration::clear_has_field_of_view_vertical() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraSensorViewConfiguration::clear_field_of_view_vertical() {
  field_of_view_vertical_ = 0;
  clear_has_field_of_view_vertical();
}
inline double CameraSensorViewConfiguration::field_of_view_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.field_of_view_vertical)
  return field_of_view_vertical_;
}
inline void CameraSensorViewConfiguration::set_field_of_view_vertical(double value) {
  set_has_field_of_view_vertical();
  field_of_view_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.CameraSensorViewConfiguration.field_of_view_vertical)
}

// optional uint32 number_of_pixels_horizontal = 6;
inline bool CameraSensorViewConfiguration::has_number_of_pixels_horizontal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraSensorViewConfiguration::set_has_number_of_pixels_horizontal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraSensorViewConfiguration::clear_has_number_of_pixels_horizontal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraSensorViewConfiguration::clear_number_of_pixels_horizontal() {
  number_of_pixels_horizontal_ = 0u;
  clear_has_number_of_pixels_horizontal();
}
inline ::google::protobuf::uint32 CameraSensorViewConfiguration::number_of_pixels_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.number_of_pixels_horizontal)
  return number_of_pixels_horizontal_;
}
inline void CameraSensorViewConfiguration::set_number_of_pixels_horizontal(::google::protobuf::uint32 value) {
  set_has_number_of_pixels_horizontal();
  number_of_pixels_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.CameraSensorViewConfiguration.number_of_pixels_horizontal)
}

// optional uint32 number_of_pixels_vertical = 7;
inline bool CameraSensorViewConfiguration::has_number_of_pixels_vertical() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraSensorViewConfiguration::set_has_number_of_pixels_vertical() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraSensorViewConfiguration::clear_has_number_of_pixels_vertical() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraSensorViewConfiguration::clear_number_of_pixels_vertical() {
  number_of_pixels_vertical_ = 0u;
  clear_has_number_of_pixels_vertical();
}
inline ::google::protobuf::uint32 CameraSensorViewConfiguration::number_of_pixels_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.number_of_pixels_vertical)
  return number_of_pixels_vertical_;
}
inline void CameraSensorViewConfiguration::set_number_of_pixels_vertical(::google::protobuf::uint32 value) {
  set_has_number_of_pixels_vertical();
  number_of_pixels_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.CameraSensorViewConfiguration.number_of_pixels_vertical)
}

// repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
inline int CameraSensorViewConfiguration::channel_format_size() const {
  return channel_format_.size();
}
inline void CameraSensorViewConfiguration::clear_channel_format() {
  channel_format_.Clear();
}
inline ::osi3::CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::channel_format(int index) const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorViewConfiguration.channel_format)
  return static_cast< ::osi3::CameraSensorViewConfiguration_ChannelFormat >(channel_format_.Get(index));
}
inline void CameraSensorViewConfiguration::set_channel_format(int index, ::osi3::CameraSensorViewConfiguration_ChannelFormat value) {
  assert(::osi3::CameraSensorViewConfiguration_ChannelFormat_IsValid(value));
  channel_format_.Set(index, value);
  // @@protoc_insertion_point(field_set:osi3.CameraSensorViewConfiguration.channel_format)
}
inline void CameraSensorViewConfiguration::add_channel_format(::osi3::CameraSensorViewConfiguration_ChannelFormat value) {
  assert(::osi3::CameraSensorViewConfiguration_ChannelFormat_IsValid(value));
  channel_format_.Add(value);
  // @@protoc_insertion_point(field_add:osi3.CameraSensorViewConfiguration.channel_format)
}
inline const ::google::protobuf::RepeatedField<int>&
CameraSensorViewConfiguration::channel_format() const {
  // @@protoc_insertion_point(field_list:osi3.CameraSensorViewConfiguration.channel_format)
  return channel_format_;
}
inline ::google::protobuf::RepeatedField<int>*
CameraSensorViewConfiguration::mutable_channel_format() {
  // @@protoc_insertion_point(field_mutable_list:osi3.CameraSensorViewConfiguration.channel_format)
  return &channel_format_;
}

// -------------------------------------------------------------------

// UltrasonicSensorViewConfiguration

// optional .osi3.Identifier sensor_id = 1;
inline bool UltrasonicSensorViewConfiguration::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UltrasonicSensorViewConfiguration::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UltrasonicSensorViewConfiguration::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UltrasonicSensorViewConfiguration::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
inline const ::osi3::Identifier& UltrasonicSensorViewConfiguration::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSensorViewConfiguration.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
inline ::osi3::Identifier* UltrasonicSensorViewConfiguration::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.UltrasonicSensorViewConfiguration.sensor_id)
  return sensor_id_;
}
inline ::osi3::Identifier* UltrasonicSensorViewConfiguration::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.UltrasonicSensorViewConfiguration.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
inline void UltrasonicSensorViewConfiguration::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.UltrasonicSensorViewConfiguration.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 2;
inline bool UltrasonicSensorViewConfiguration::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UltrasonicSensorViewConfiguration::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UltrasonicSensorViewConfiguration::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UltrasonicSensorViewConfiguration::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
inline const ::osi3::MountingPosition& UltrasonicSensorViewConfiguration::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSensorViewConfiguration.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
inline ::osi3::MountingPosition* UltrasonicSensorViewConfiguration::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.UltrasonicSensorViewConfiguration.mounting_position)
  return mounting_position_;
}
inline ::osi3::MountingPosition* UltrasonicSensorViewConfiguration::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.UltrasonicSensorViewConfiguration.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
inline void UltrasonicSensorViewConfiguration::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.UltrasonicSensorViewConfiguration.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 3;
inline bool UltrasonicSensorViewConfiguration::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UltrasonicSensorViewConfiguration::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UltrasonicSensorViewConfiguration::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UltrasonicSensorViewConfiguration::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
inline const ::osi3::MountingPosition& UltrasonicSensorViewConfiguration::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
inline ::osi3::MountingPosition* UltrasonicSensorViewConfiguration::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.UltrasonicSensorViewConfiguration.mounting_position_rmse)
  return mounting_position_rmse_;
}
inline ::osi3::MountingPosition* UltrasonicSensorViewConfiguration::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.UltrasonicSensorViewConfiguration.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
inline void UltrasonicSensorViewConfiguration::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.UltrasonicSensorViewConfiguration.mounting_position_rmse)
}

// optional double field_of_view_horizontal = 4;
inline bool UltrasonicSensorViewConfiguration::has_field_of_view_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UltrasonicSensorViewConfiguration::set_has_field_of_view_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UltrasonicSensorViewConfiguration::clear_has_field_of_view_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UltrasonicSensorViewConfiguration::clear_field_of_view_horizontal() {
  field_of_view_horizontal_ = 0;
  clear_has_field_of_view_horizontal();
}
inline double UltrasonicSensorViewConfiguration::field_of_view_horizontal() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSensorViewConfiguration.field_of_view_horizontal)
  return field_of_view_horizontal_;
}
inline void UltrasonicSensorViewConfiguration::set_field_of_view_horizontal(double value) {
  set_has_field_of_view_horizontal();
  field_of_view_horizontal_ = value;
  // @@protoc_insertion_point(field_set:osi3.UltrasonicSensorViewConfiguration.field_of_view_horizontal)
}

// optional double field_of_view_vertical = 5;
inline bool UltrasonicSensorViewConfiguration::has_field_of_view_vertical() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UltrasonicSensorViewConfiguration::set_has_field_of_view_vertical() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UltrasonicSensorViewConfiguration::clear_has_field_of_view_vertical() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UltrasonicSensorViewConfiguration::clear_field_of_view_vertical() {
  field_of_view_vertical_ = 0;
  clear_has_field_of_view_vertical();
}
inline double UltrasonicSensorViewConfiguration::field_of_view_vertical() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSensorViewConfiguration.field_of_view_vertical)
  return field_of_view_vertical_;
}
inline void UltrasonicSensorViewConfiguration::set_field_of_view_vertical(double value) {
  set_has_field_of_view_vertical();
  field_of_view_vertical_ = value;
  // @@protoc_insertion_point(field_set:osi3.UltrasonicSensorViewConfiguration.field_of_view_vertical)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::osi3::CameraSensorViewConfiguration_ChannelFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::CameraSensorViewConfiguration_ChannelFormat>() {
  return ::osi3::CameraSensorViewConfiguration_ChannelFormat_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osi_5fsensorviewconfiguration_2eproto__INCLUDED
