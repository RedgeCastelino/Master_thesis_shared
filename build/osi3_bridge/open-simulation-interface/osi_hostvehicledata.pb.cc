// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_hostvehicledata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_hostvehicledata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* HostVehicleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HostVehicleData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5fhostvehicledata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5fhostvehicledata_2eproto() {
  protobuf_AddDesc_osi_5fhostvehicledata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_hostvehicledata.proto");
  GOOGLE_CHECK(file != NULL);
  HostVehicleData_descriptor_ = file->message_type(0);
  static const int HostVehicleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostVehicleData, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostVehicleData, location_rmse_),
  };
  HostVehicleData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HostVehicleData_descriptor_,
      HostVehicleData::default_instance_,
      HostVehicleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostVehicleData, _has_bits_[0]),
      -1,
      -1,
      sizeof(HostVehicleData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostVehicleData, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5fhostvehicledata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HostVehicleData_descriptor_, &HostVehicleData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5fhostvehicledata_2eproto() {
  delete HostVehicleData::default_instance_;
  delete HostVehicleData_reflection_;
}

void protobuf_AddDesc_osi_5fhostvehicledata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5fhostvehicledata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::osi3::protobuf_AddDesc_osi_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031osi_hostvehicledata.proto\022\004osi3\032\020osi_c"
    "ommon.proto\"^\n\017HostVehicleData\022\"\n\010locati"
    "on\030\001 \001(\0132\020.osi3.BaseMoving\022\'\n\rlocation_r"
    "mse\030\002 \001(\0132\020.osi3.BaseMovingB\002H\001", 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_hostvehicledata.proto", &protobuf_RegisterTypes);
  HostVehicleData::default_instance_ = new HostVehicleData();
  HostVehicleData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5fhostvehicledata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5fhostvehicledata_2eproto {
  StaticDescriptorInitializer_osi_5fhostvehicledata_2eproto() {
    protobuf_AddDesc_osi_5fhostvehicledata_2eproto();
  }
} static_descriptor_initializer_osi_5fhostvehicledata_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostVehicleData::kLocationFieldNumber;
const int HostVehicleData::kLocationRmseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostVehicleData::HostVehicleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.HostVehicleData)
}

void HostVehicleData::InitAsDefaultInstance() {
  location_ = const_cast< ::osi3::BaseMoving*>(&::osi3::BaseMoving::default_instance());
  location_rmse_ = const_cast< ::osi3::BaseMoving*>(&::osi3::BaseMoving::default_instance());
}

HostVehicleData::HostVehicleData(const HostVehicleData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData)
}

void HostVehicleData::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  location_rmse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HostVehicleData::~HostVehicleData() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData)
  SharedDtor();
}

void HostVehicleData::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
    delete location_rmse_;
  }
}

void HostVehicleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostVehicleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HostVehicleData_descriptor_;
}

const HostVehicleData& HostVehicleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fhostvehicledata_2eproto();
  return *default_instance_;
}

HostVehicleData* HostVehicleData::default_instance_ = NULL;

HostVehicleData* HostVehicleData::New(::google::protobuf::Arena* arena) const {
  HostVehicleData* n = new HostVehicleData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostVehicleData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_location()) {
      if (location_ != NULL) location_->::osi3::BaseMoving::Clear();
    }
    if (has_location_rmse()) {
      if (location_rmse_ != NULL) location_rmse_->::osi3::BaseMoving::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HostVehicleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.HostVehicleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.BaseMoving location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location_rmse;
        break;
      }

      // optional .osi3.BaseMoving location_rmse = 2;
      case 2: {
        if (tag == 18) {
         parse_location_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.HostVehicleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.HostVehicleData)
  return false;
#undef DO_
}

void HostVehicleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.HostVehicleData)
  // optional .osi3.BaseMoving location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // optional .osi3.BaseMoving location_rmse = 2;
  if (has_location_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_rmse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.HostVehicleData)
}

::google::protobuf::uint8* HostVehicleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData)
  // optional .osi3.BaseMoving location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, false, target);
  }

  // optional .osi3.BaseMoving location_rmse = 2;
  if (has_location_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_rmse_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData)
  return target;
}

int HostVehicleData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .osi3.BaseMoving location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional .osi3.BaseMoving location_rmse = 2;
    if (has_location_rmse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_rmse_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostVehicleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.HostVehicleData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HostVehicleData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HostVehicleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.HostVehicleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.HostVehicleData)
    MergeFrom(*source);
  }
}

void HostVehicleData::MergeFrom(const HostVehicleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::osi3::BaseMoving::MergeFrom(from.location());
    }
    if (from.has_location_rmse()) {
      mutable_location_rmse()->::osi3::BaseMoving::MergeFrom(from.location_rmse());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HostVehicleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.HostVehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostVehicleData::CopyFrom(const HostVehicleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData::IsInitialized() const {

  return true;
}

void HostVehicleData::Swap(HostVehicleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostVehicleData::InternalSwap(HostVehicleData* other) {
  std::swap(location_, other->location_);
  std::swap(location_rmse_, other->location_rmse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HostVehicleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HostVehicleData_descriptor_;
  metadata.reflection = HostVehicleData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostVehicleData

// optional .osi3.BaseMoving location = 1;
bool HostVehicleData::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HostVehicleData::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void HostVehicleData::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void HostVehicleData::clear_location() {
  if (location_ != NULL) location_->::osi3::BaseMoving::Clear();
  clear_has_location();
}
const ::osi3::BaseMoving& HostVehicleData::location() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::osi3::BaseMoving* HostVehicleData::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::osi3::BaseMoving;
  }
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.location)
  return location_;
}
::osi3::BaseMoving* HostVehicleData::release_location() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.location)
  clear_has_location();
  ::osi3::BaseMoving* temp = location_;
  location_ = NULL;
  return temp;
}
void HostVehicleData::set_allocated_location(::osi3::BaseMoving* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.location)
}

// optional .osi3.BaseMoving location_rmse = 2;
bool HostVehicleData::has_location_rmse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HostVehicleData::set_has_location_rmse() {
  _has_bits_[0] |= 0x00000002u;
}
void HostVehicleData::clear_has_location_rmse() {
  _has_bits_[0] &= ~0x00000002u;
}
void HostVehicleData::clear_location_rmse() {
  if (location_rmse_ != NULL) location_rmse_->::osi3::BaseMoving::Clear();
  clear_has_location_rmse();
}
const ::osi3::BaseMoving& HostVehicleData::location_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.location_rmse)
  return location_rmse_ != NULL ? *location_rmse_ : *default_instance_->location_rmse_;
}
::osi3::BaseMoving* HostVehicleData::mutable_location_rmse() {
  set_has_location_rmse();
  if (location_rmse_ == NULL) {
    location_rmse_ = new ::osi3::BaseMoving;
  }
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.location_rmse)
  return location_rmse_;
}
::osi3::BaseMoving* HostVehicleData::release_location_rmse() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.location_rmse)
  clear_has_location_rmse();
  ::osi3::BaseMoving* temp = location_rmse_;
  location_rmse_ = NULL;
  return temp;
}
void HostVehicleData::set_allocated_location_rmse(::osi3::BaseMoving* location_rmse) {
  delete location_rmse_;
  location_rmse_ = location_rmse;
  if (location_rmse) {
    set_has_location_rmse();
  } else {
    clear_has_location_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.location_rmse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
