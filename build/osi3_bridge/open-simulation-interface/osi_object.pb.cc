// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_object.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* StationaryObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationaryObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationaryObject_Classification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationaryObject_Classification_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Material_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Density_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Color_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MovingObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MovingObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* MovingObject_VehicleAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MovingObject_VehicleAttributes_reflection_ = NULL;
const ::google::protobuf::Descriptor* MovingObject_VehicleClassification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MovingObject_VehicleClassification_reflection_ = NULL;
const ::google::protobuf::Descriptor* MovingObject_VehicleClassification_LightState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MovingObject_VehicleClassification_LightState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_LightState_IndicatorState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_LightState_GenericLightState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_LightState_BrakeLightState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MovingObject_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5fobject_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5fobject_2eproto() {
  protobuf_AddDesc_osi_5fobject_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_object.proto");
  GOOGLE_CHECK(file != NULL);
  StationaryObject_descriptor_ = file->message_type(0);
  static const int StationaryObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationaryObject, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationaryObject, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationaryObject, classification_),
  };
  StationaryObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StationaryObject_descriptor_,
      StationaryObject::default_instance_,
      StationaryObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationaryObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(StationaryObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationaryObject, _internal_metadata_),
      -1);
  StationaryObject_Classification_descriptor_ = StationaryObject_descriptor_->nested_type(0);
  static const int StationaryObject_Classification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationaryObject_Classification, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationaryObject_Classification, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationaryObject_Classification, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationaryObject_Classification, color_),
  };
  StationaryObject_Classification_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StationaryObject_Classification_descriptor_,
      StationaryObject_Classification::default_instance_,
      StationaryObject_Classification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationaryObject_Classification, _has_bits_[0]),
      -1,
      -1,
      sizeof(StationaryObject_Classification),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationaryObject_Classification, _internal_metadata_),
      -1);
  StationaryObject_Classification_Type_descriptor_ = StationaryObject_Classification_descriptor_->enum_type(0);
  StationaryObject_Classification_Material_descriptor_ = StationaryObject_Classification_descriptor_->enum_type(1);
  StationaryObject_Classification_Density_descriptor_ = StationaryObject_Classification_descriptor_->enum_type(2);
  StationaryObject_Classification_Color_descriptor_ = StationaryObject_Classification_descriptor_->enum_type(3);
  MovingObject_descriptor_ = file->message_type(1);
  static const int MovingObject_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject, assigned_lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject, vehicle_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject, vehicle_classification_),
  };
  MovingObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MovingObject_descriptor_,
      MovingObject::default_instance_,
      MovingObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(MovingObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject, _internal_metadata_),
      -1);
  MovingObject_VehicleAttributes_descriptor_ = MovingObject_descriptor_->nested_type(0);
  static const int MovingObject_VehicleAttributes_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleAttributes, driver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleAttributes, radius_wheel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleAttributes, number_wheels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleAttributes, bbcenter_to_rear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleAttributes, bbcenter_to_front_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleAttributes, ground_clearance_),
  };
  MovingObject_VehicleAttributes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MovingObject_VehicleAttributes_descriptor_,
      MovingObject_VehicleAttributes::default_instance_,
      MovingObject_VehicleAttributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleAttributes, _has_bits_[0]),
      -1,
      -1,
      sizeof(MovingObject_VehicleAttributes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleAttributes, _internal_metadata_),
      -1);
  MovingObject_VehicleClassification_descriptor_ = MovingObject_descriptor_->nested_type(1);
  static const int MovingObject_VehicleClassification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification, light_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification, has_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification, trailer_id_),
  };
  MovingObject_VehicleClassification_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MovingObject_VehicleClassification_descriptor_,
      MovingObject_VehicleClassification::default_instance_,
      MovingObject_VehicleClassification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification, _has_bits_[0]),
      -1,
      -1,
      sizeof(MovingObject_VehicleClassification),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification, _internal_metadata_),
      -1);
  MovingObject_VehicleClassification_LightState_descriptor_ = MovingObject_VehicleClassification_descriptor_->nested_type(0);
  static const int MovingObject_VehicleClassification_LightState_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification_LightState, indicator_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification_LightState, front_fog_light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification_LightState, rear_fog_light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification_LightState, head_light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification_LightState, high_beam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification_LightState, reversing_light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification_LightState, brake_light_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification_LightState, license_plate_illumination_rear_),
  };
  MovingObject_VehicleClassification_LightState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MovingObject_VehicleClassification_LightState_descriptor_,
      MovingObject_VehicleClassification_LightState::default_instance_,
      MovingObject_VehicleClassification_LightState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification_LightState, _has_bits_[0]),
      -1,
      -1,
      sizeof(MovingObject_VehicleClassification_LightState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject_VehicleClassification_LightState, _internal_metadata_),
      -1);
  MovingObject_VehicleClassification_LightState_IndicatorState_descriptor_ = MovingObject_VehicleClassification_LightState_descriptor_->enum_type(0);
  MovingObject_VehicleClassification_LightState_GenericLightState_descriptor_ = MovingObject_VehicleClassification_LightState_descriptor_->enum_type(1);
  MovingObject_VehicleClassification_LightState_BrakeLightState_descriptor_ = MovingObject_VehicleClassification_LightState_descriptor_->enum_type(2);
  MovingObject_VehicleClassification_Type_descriptor_ = MovingObject_VehicleClassification_descriptor_->enum_type(0);
  MovingObject_Type_descriptor_ = MovingObject_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5fobject_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StationaryObject_descriptor_, &StationaryObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StationaryObject_Classification_descriptor_, &StationaryObject_Classification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MovingObject_descriptor_, &MovingObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MovingObject_VehicleAttributes_descriptor_, &MovingObject_VehicleAttributes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MovingObject_VehicleClassification_descriptor_, &MovingObject_VehicleClassification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MovingObject_VehicleClassification_LightState_descriptor_, &MovingObject_VehicleClassification_LightState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5fobject_2eproto() {
  delete StationaryObject::default_instance_;
  delete StationaryObject_reflection_;
  delete StationaryObject_Classification::default_instance_;
  delete StationaryObject_Classification_reflection_;
  delete MovingObject::default_instance_;
  delete MovingObject_reflection_;
  delete MovingObject_VehicleAttributes::default_instance_;
  delete MovingObject_VehicleAttributes_reflection_;
  delete MovingObject_VehicleClassification::default_instance_;
  delete MovingObject_VehicleClassification_reflection_;
  delete MovingObject_VehicleClassification_LightState::default_instance_;
  delete MovingObject_VehicleClassification_LightState_reflection_;
}

void protobuf_AddDesc_osi_5fobject_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5fobject_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::osi3::protobuf_AddDesc_osi_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020osi_object.proto\022\004osi3\032\020osi_common.pro"
    "to\"\303\n\n\020StationaryObject\022\034\n\002id\030\001 \001(\0132\020.os"
    "i3.Identifier\022\"\n\004base\030\002 \001(\0132\024.osi3.BaseS"
    "tationary\022=\n\016classification\030\003 \001(\0132%.osi3"
    ".StationaryObject.Classification\032\255\t\n\016Cla"
    "ssification\0228\n\004type\030\001 \001(\0162*.osi3.Station"
    "aryObject.Classification.Type\022@\n\010materia"
    "l\030\002 \001(\0162..osi3.StationaryObject.Classifi"
    "cation.Material\022>\n\007density\030\003 \001(\0162-.osi3."
    "StationaryObject.Classification.Density\022"
    ":\n\005color\030\004 \001(\0162+.osi3.StationaryObject.C"
    "lassification.Color\"\366\002\n\004Type\022\020\n\014TYPE_UNK"
    "NOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\017\n\013TYPE_BRIDGE\020\002\022"
    "\021\n\rTYPE_BUILDING\020\003\022\r\n\tTYPE_POLE\020\004\022\016\n\nTYP"
    "E_PYLON\020\005\022\023\n\017TYPE_DELINEATOR\020\006\022\r\n\tTYPE_T"
    "REE\020\007\022\020\n\014TYPE_BARRIER\020\010\022\023\n\017TYPE_VEGETATI"
    "ON\020\t\022\022\n\016TYPE_CURBSTONE\020\n\022\r\n\tTYPE_WALL\020\013\022"
    "\033\n\027TYPE_VERTICAL_STRUCTURE\020\014\022\036\n\032TYPE_REC"
    "TANGULAR_STRUCTURE\020\r\022\033\n\027TYPE_OVERHEAD_ST"
    "RUCTURE\020\016\022\035\n\031TYPE_REFLECTIVE_STRUCTURE\020\017"
    "\022\"\n\036TYPE_CONSTRUCTION_SITE_ELEMENT\020\020\"\301\001\n"
    "\010Material\022\024\n\020MATERIAL_UNKNOWN\020\000\022\022\n\016MATER"
    "IAL_OTHER\020\001\022\021\n\rMATERIAL_WOOD\020\002\022\024\n\020MATERI"
    "AL_PLASTIC\020\003\022\025\n\021MATERIAL_CONCRETE\020\004\022\022\n\016M"
    "ATERIAL_METAL\020\005\022\022\n\016MATERIAL_STONE\020\006\022\021\n\rM"
    "ATERIAL_GLAS\020\007\022\020\n\014MATERIAL_MUD\020\010\"\237\001\n\007Den"
    "sity\022\023\n\017DENSITY_UNKNOWN\020\000\022\021\n\rDENSITY_OTH"
    "ER\020\001\022\021\n\rDENSITY_SOLID\020\002\022\026\n\022DENSITY_SMALL"
    "_MESH\020\003\022\027\n\023DENSITY_MEDIAN_MESH\020\004\022\026\n\022DENS"
    "ITY_LARGE_MESH\020\005\022\020\n\014DENSITY_OPEN\020\006\"\303\001\n\005C"
    "olor\022\021\n\rCOLOR_UNKNOWN\020\000\022\017\n\013COLOR_OTHER\020\001"
    "\022\020\n\014COLOR_YELLOW\020\002\022\017\n\013COLOR_GREEN\020\003\022\016\n\nC"
    "OLOR_BLUE\020\004\022\020\n\014COLOR_VIOLET\020\005\022\r\n\tCOLOR_R"
    "ED\020\006\022\020\n\014COLOR_ORANGE\020\007\022\017\n\013COLOR_BLACK\020\010\022"
    "\016\n\nCOLOR_GREY\020\t\022\017\n\013COLOR_WHITE\020\n\"\370\022\n\014Mov"
    "ingObject\022\034\n\002id\030\001 \001(\0132\020.osi3.Identifier\022"
    "\036\n\004base\030\002 \001(\0132\020.osi3.BaseMoving\022%\n\004type\030"
    "\003 \001(\0162\027.osi3.MovingObject.Type\022*\n\020assign"
    "ed_lane_id\030\004 \003(\0132\020.osi3.Identifier\022@\n\022ve"
    "hicle_attributes\030\005 \001(\0132$.osi3.MovingObje"
    "ct.VehicleAttributes\022H\n\026vehicle_classifi"
    "cation\030\006 \001(\0132(.osi3.MovingObject.Vehicle"
    "Classification\032\324\001\n\021VehicleAttributes\022#\n\t"
    "driver_id\030\001 \001(\0132\020.osi3.Identifier\022\024\n\014rad"
    "ius_wheel\030\002 \001(\001\022\025\n\rnumber_wheels\030\003 \001(\r\022("
    "\n\020bbcenter_to_rear\030\004 \001(\0132\016.osi3.Vector3d"
    "\022)\n\021bbcenter_to_front\030\005 \001(\0132\016.osi3.Vecto"
    "r3d\022\030\n\020ground_clearance\030\006 \001(\001\032\221\016\n\025Vehicl"
    "eClassification\022;\n\004type\030\001 \001(\0162-.osi3.Mov"
    "ingObject.VehicleClassification.Type\022H\n\013"
    "light_state\030\002 \001(\01323.osi3.MovingObject.Ve"
    "hicleClassification.LightState\022\023\n\013has_tr"
    "ailer\030\003 \001(\010\022$\n\ntrailer_id\030\004 \001(\0132\020.osi3.I"
    "dentifier\032\371\t\n\nLightState\022[\n\017indicator_st"
    "ate\030\001 \001(\0162B.osi3.MovingObject.VehicleCla"
    "ssification.LightState.IndicatorState\022^\n"
    "\017front_fog_light\030\002 \001(\0162E.osi3.MovingObje"
    "ct.VehicleClassification.LightState.Gene"
    "ricLightState\022]\n\016rear_fog_light\030\003 \001(\0162E."
    "osi3.MovingObject.VehicleClassification."
    "LightState.GenericLightState\022Y\n\nhead_lig"
    "ht\030\004 \001(\0162E.osi3.MovingObject.VehicleClas"
    "sification.LightState.GenericLightState\022"
    "X\n\thigh_beam\030\005 \001(\0162E.osi3.MovingObject.V"
    "ehicleClassification.LightState.GenericL"
    "ightState\022^\n\017reversing_light\030\006 \001(\0162E.osi"
    "3.MovingObject.VehicleClassification.Lig"
    "htState.GenericLightState\022^\n\021brake_light"
    "_state\030\007 \001(\0162C.osi3.MovingObject.Vehicle"
    "Classification.LightState.BrakeLightStat"
    "e\022n\n\037license_plate_illumination_rear\030\010 \001"
    "(\0162E.osi3.MovingObject.VehicleClassifica"
    "tion.LightState.GenericLightState\"\263\001\n\016In"
    "dicatorState\022\033\n\027INDICATOR_STATE_UNKNOWN\020"
    "\000\022\031\n\025INDICATOR_STATE_OTHER\020\001\022\027\n\023INDICATO"
    "R_STATE_OFF\020\002\022\030\n\024INDICATOR_STATE_LEFT\020\003\022"
    "\031\n\025INDICATOR_STATE_RIGHT\020\004\022\033\n\027INDICATOR_"
    "STATE_WARNING\020\005\"\214\001\n\021GenericLightState\022\037\n"
    "\033GENERIC_LIGHT_STATE_UNKNOWN\020\000\022\035\n\031GENERI"
    "C_LIGHT_STATE_OTHER\020\001\022\033\n\027GENERIC_LIGHT_S"
    "TATE_OFF\020\002\022\032\n\026GENERIC_LIGHT_STATE_ON\020\003\"\244"
    "\001\n\017BrakeLightState\022\035\n\031BRAKE_LIGHT_STATE_"
    "UNKNOWN\020\000\022\033\n\027BRAKE_LIGHT_STATE_OTHER\020\001\022\031"
    "\n\025BRAKE_LIGHT_STATE_OFF\020\002\022\034\n\030BRAKE_LIGHT"
    "_STATE_NORMAL\020\003\022\034\n\030BRAKE_LIGHT_STATE_STR"
    "ONG\020\004\"\271\002\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE"
    "_OTHER\020\001\022\022\n\016TYPE_SMALL_CAR\020\002\022\024\n\020TYPE_COM"
    "PACT_CAR\020\003\022\023\n\017TYPE_MEDIUM_CAR\020\004\022\023\n\017TYPE_"
    "LUXURY_CAR\020\005\022\025\n\021TYPE_DELIVERY_VAN\020\006\022\024\n\020T"
    "YPE_HEAVY_TRUCK\020\007\022\024\n\020TYPE_SEMITRAILER\020\010\022"
    "\020\n\014TYPE_TRAILER\020\t\022\022\n\016TYPE_MOTORBIKE\020\n\022\020\n"
    "\014TYPE_BICYCLE\020\013\022\014\n\010TYPE_BUS\020\014\022\r\n\tTYPE_TR"
    "AM\020\r\022\016\n\nTYPE_TRAIN\020\016\022\023\n\017TYPE_WHEELCHAIR\020"
    "\017\"`\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTHE"
    "R\020\001\022\020\n\014TYPE_VEHICLE\020\002\022\023\n\017TYPE_PEDESTRIAN"
    "\020\003\022\017\n\013TYPE_ANIMAL\020\004B\002H\001", 3823);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_object.proto", &protobuf_RegisterTypes);
  StationaryObject::default_instance_ = new StationaryObject();
  StationaryObject_Classification::default_instance_ = new StationaryObject_Classification();
  MovingObject::default_instance_ = new MovingObject();
  MovingObject_VehicleAttributes::default_instance_ = new MovingObject_VehicleAttributes();
  MovingObject_VehicleClassification::default_instance_ = new MovingObject_VehicleClassification();
  MovingObject_VehicleClassification_LightState::default_instance_ = new MovingObject_VehicleClassification_LightState();
  StationaryObject::default_instance_->InitAsDefaultInstance();
  StationaryObject_Classification::default_instance_->InitAsDefaultInstance();
  MovingObject::default_instance_->InitAsDefaultInstance();
  MovingObject_VehicleAttributes::default_instance_->InitAsDefaultInstance();
  MovingObject_VehicleClassification::default_instance_->InitAsDefaultInstance();
  MovingObject_VehicleClassification_LightState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5fobject_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5fobject_2eproto {
  StaticDescriptorInitializer_osi_5fobject_2eproto() {
    protobuf_AddDesc_osi_5fobject_2eproto();
  }
} static_descriptor_initializer_osi_5fobject_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationaryObject_Classification_Type_descriptor_;
}
bool StationaryObject_Classification_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_UNKNOWN;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_OTHER;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_BRIDGE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_BUILDING;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_POLE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_PYLON;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_DELINEATOR;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_TREE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_BARRIER;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_VEGETATION;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_CURBSTONE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_WALL;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_VERTICAL_STRUCTURE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_RECTANGULAR_STRUCTURE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_OVERHEAD_STRUCTURE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_REFLECTIVE_STRUCTURE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_CONSTRUCTION_SITE_ELEMENT;
const StationaryObject_Classification_Type StationaryObject_Classification::Type_MIN;
const StationaryObject_Classification_Type StationaryObject_Classification::Type_MAX;
const int StationaryObject_Classification::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Material_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationaryObject_Classification_Material_descriptor_;
}
bool StationaryObject_Classification_Material_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_UNKNOWN;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_OTHER;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_WOOD;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_PLASTIC;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_CONCRETE;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_METAL;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_STONE;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_GLAS;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_MUD;
const StationaryObject_Classification_Material StationaryObject_Classification::Material_MIN;
const StationaryObject_Classification_Material StationaryObject_Classification::Material_MAX;
const int StationaryObject_Classification::Material_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Density_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationaryObject_Classification_Density_descriptor_;
}
bool StationaryObject_Classification_Density_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_UNKNOWN;
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_OTHER;
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_SOLID;
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_SMALL_MESH;
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_MEDIAN_MESH;
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_LARGE_MESH;
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_OPEN;
const StationaryObject_Classification_Density StationaryObject_Classification::Density_MIN;
const StationaryObject_Classification_Density StationaryObject_Classification::Density_MAX;
const int StationaryObject_Classification::Density_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Color_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationaryObject_Classification_Color_descriptor_;
}
bool StationaryObject_Classification_Color_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_UNKNOWN;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_OTHER;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_YELLOW;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_GREEN;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_BLUE;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_VIOLET;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_RED;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_ORANGE;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_BLACK;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_GREY;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_WHITE;
const StationaryObject_Classification_Color StationaryObject_Classification::Color_MIN;
const StationaryObject_Classification_Color StationaryObject_Classification::Color_MAX;
const int StationaryObject_Classification::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StationaryObject_Classification::kTypeFieldNumber;
const int StationaryObject_Classification::kMaterialFieldNumber;
const int StationaryObject_Classification::kDensityFieldNumber;
const int StationaryObject_Classification::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StationaryObject_Classification::StationaryObject_Classification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.StationaryObject.Classification)
}

void StationaryObject_Classification::InitAsDefaultInstance() {
}

StationaryObject_Classification::StationaryObject_Classification(const StationaryObject_Classification& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.StationaryObject.Classification)
}

void StationaryObject_Classification::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  material_ = 0;
  density_ = 0;
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationaryObject_Classification::~StationaryObject_Classification() {
  // @@protoc_insertion_point(destructor:osi3.StationaryObject.Classification)
  SharedDtor();
}

void StationaryObject_Classification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StationaryObject_Classification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationaryObject_Classification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationaryObject_Classification_descriptor_;
}

const StationaryObject_Classification& StationaryObject_Classification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fobject_2eproto();
  return *default_instance_;
}

StationaryObject_Classification* StationaryObject_Classification::default_instance_ = NULL;

StationaryObject_Classification* StationaryObject_Classification::New(::google::protobuf::Arena* arena) const {
  StationaryObject_Classification* n = new StationaryObject_Classification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StationaryObject_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.StationaryObject.Classification)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StationaryObject_Classification, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StationaryObject_Classification*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, color_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StationaryObject_Classification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.StationaryObject.Classification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.StationaryObject.Classification.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::StationaryObject_Classification_Type_IsValid(value)) {
            set_type(static_cast< ::osi3::StationaryObject_Classification_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_material;
        break;
      }

      // optional .osi3.StationaryObject.Classification.Material material = 2;
      case 2: {
        if (tag == 16) {
         parse_material:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::StationaryObject_Classification_Material_IsValid(value)) {
            set_material(static_cast< ::osi3::StationaryObject_Classification_Material >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_density;
        break;
      }

      // optional .osi3.StationaryObject.Classification.Density density = 3;
      case 3: {
        if (tag == 24) {
         parse_density:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::StationaryObject_Classification_Density_IsValid(value)) {
            set_density(static_cast< ::osi3::StationaryObject_Classification_Density >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_color;
        break;
      }

      // optional .osi3.StationaryObject.Classification.Color color = 4;
      case 4: {
        if (tag == 32) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::StationaryObject_Classification_Color_IsValid(value)) {
            set_color(static_cast< ::osi3::StationaryObject_Classification_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.StationaryObject.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.StationaryObject.Classification)
  return false;
#undef DO_
}

void StationaryObject_Classification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.StationaryObject.Classification)
  // optional .osi3.StationaryObject.Classification.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .osi3.StationaryObject.Classification.Material material = 2;
  if (has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->material(), output);
  }

  // optional .osi3.StationaryObject.Classification.Density density = 3;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->density(), output);
  }

  // optional .osi3.StationaryObject.Classification.Color color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.StationaryObject.Classification)
}

::google::protobuf::uint8* StationaryObject_Classification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.StationaryObject.Classification)
  // optional .osi3.StationaryObject.Classification.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .osi3.StationaryObject.Classification.Material material = 2;
  if (has_material()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->material(), target);
  }

  // optional .osi3.StationaryObject.Classification.Density density = 3;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->density(), target);
  }

  // optional .osi3.StationaryObject.Classification.Color color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.StationaryObject.Classification)
  return target;
}

int StationaryObject_Classification::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.StationaryObject.Classification)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .osi3.StationaryObject.Classification.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .osi3.StationaryObject.Classification.Material material = 2;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->material());
    }

    // optional .osi3.StationaryObject.Classification.Density density = 3;
    if (has_density()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->density());
    }

    // optional .osi3.StationaryObject.Classification.Color color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationaryObject_Classification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.StationaryObject.Classification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StationaryObject_Classification* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StationaryObject_Classification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.StationaryObject.Classification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.StationaryObject.Classification)
    MergeFrom(*source);
  }
}

void StationaryObject_Classification::MergeFrom(const StationaryObject_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.StationaryObject.Classification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_material()) {
      set_material(from.material());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StationaryObject_Classification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.StationaryObject.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationaryObject_Classification::CopyFrom(const StationaryObject_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.StationaryObject.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationaryObject_Classification::IsInitialized() const {

  return true;
}

void StationaryObject_Classification::Swap(StationaryObject_Classification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StationaryObject_Classification::InternalSwap(StationaryObject_Classification* other) {
  std::swap(type_, other->type_);
  std::swap(material_, other->material_);
  std::swap(density_, other->density_);
  std::swap(color_, other->color_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StationaryObject_Classification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationaryObject_Classification_descriptor_;
  metadata.reflection = StationaryObject_Classification_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StationaryObject::kIdFieldNumber;
const int StationaryObject::kBaseFieldNumber;
const int StationaryObject::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StationaryObject::StationaryObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.StationaryObject)
}

void StationaryObject::InitAsDefaultInstance() {
  id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  base_ = const_cast< ::osi3::BaseStationary*>(&::osi3::BaseStationary::default_instance());
  classification_ = const_cast< ::osi3::StationaryObject_Classification*>(&::osi3::StationaryObject_Classification::default_instance());
}

StationaryObject::StationaryObject(const StationaryObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.StationaryObject)
}

void StationaryObject::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  base_ = NULL;
  classification_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationaryObject::~StationaryObject() {
  // @@protoc_insertion_point(destructor:osi3.StationaryObject)
  SharedDtor();
}

void StationaryObject::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete base_;
    delete classification_;
  }
}

void StationaryObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationaryObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationaryObject_descriptor_;
}

const StationaryObject& StationaryObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fobject_2eproto();
  return *default_instance_;
}

StationaryObject* StationaryObject::default_instance_ = NULL;

StationaryObject* StationaryObject::New(::google::protobuf::Arena* arena) const {
  StationaryObject* n = new StationaryObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StationaryObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.StationaryObject)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      if (id_ != NULL) id_->::osi3::Identifier::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
    }
    if (has_classification()) {
      if (classification_ != NULL) classification_->::osi3::StationaryObject_Classification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StationaryObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.StationaryObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Identifier id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .osi3.BaseStationary base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_classification;
        break;
      }

      // optional .osi3.StationaryObject.Classification classification = 3;
      case 3: {
        if (tag == 26) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.StationaryObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.StationaryObject)
  return false;
#undef DO_
}

void StationaryObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.StationaryObject)
  // optional .osi3.Identifier id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .osi3.BaseStationary base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // optional .osi3.StationaryObject.Classification classification = 3;
  if (has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->classification_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.StationaryObject)
}

::google::protobuf::uint8* StationaryObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.StationaryObject)
  // optional .osi3.Identifier id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // optional .osi3.BaseStationary base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->base_, false, target);
  }

  // optional .osi3.StationaryObject.Classification classification = 3;
  if (has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->classification_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.StationaryObject)
  return target;
}

int StationaryObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.StationaryObject)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .osi3.Identifier id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .osi3.BaseStationary base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_);
    }

    // optional .osi3.StationaryObject.Classification classification = 3;
    if (has_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->classification_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationaryObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.StationaryObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StationaryObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StationaryObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.StationaryObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.StationaryObject)
    MergeFrom(*source);
  }
}

void StationaryObject::MergeFrom(const StationaryObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.StationaryObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::osi3::Identifier::MergeFrom(from.id());
    }
    if (from.has_base()) {
      mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
    }
    if (from.has_classification()) {
      mutable_classification()->::osi3::StationaryObject_Classification::MergeFrom(from.classification());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StationaryObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.StationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationaryObject::CopyFrom(const StationaryObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.StationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationaryObject::IsInitialized() const {

  return true;
}

void StationaryObject::Swap(StationaryObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StationaryObject::InternalSwap(StationaryObject* other) {
  std::swap(id_, other->id_);
  std::swap(base_, other->base_);
  std::swap(classification_, other->classification_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StationaryObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationaryObject_descriptor_;
  metadata.reflection = StationaryObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StationaryObject_Classification

// optional .osi3.StationaryObject.Classification.Type type = 1;
bool StationaryObject_Classification::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StationaryObject_Classification::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void StationaryObject_Classification::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void StationaryObject_Classification::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::osi3::StationaryObject_Classification_Type StationaryObject_Classification::type() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.Classification.type)
  return static_cast< ::osi3::StationaryObject_Classification_Type >(type_);
}
 void StationaryObject_Classification::set_type(::osi3::StationaryObject_Classification_Type value) {
  assert(::osi3::StationaryObject_Classification_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.StationaryObject.Classification.type)
}

// optional .osi3.StationaryObject.Classification.Material material = 2;
bool StationaryObject_Classification::has_material() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StationaryObject_Classification::set_has_material() {
  _has_bits_[0] |= 0x00000002u;
}
void StationaryObject_Classification::clear_has_material() {
  _has_bits_[0] &= ~0x00000002u;
}
void StationaryObject_Classification::clear_material() {
  material_ = 0;
  clear_has_material();
}
 ::osi3::StationaryObject_Classification_Material StationaryObject_Classification::material() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.Classification.material)
  return static_cast< ::osi3::StationaryObject_Classification_Material >(material_);
}
 void StationaryObject_Classification::set_material(::osi3::StationaryObject_Classification_Material value) {
  assert(::osi3::StationaryObject_Classification_Material_IsValid(value));
  set_has_material();
  material_ = value;
  // @@protoc_insertion_point(field_set:osi3.StationaryObject.Classification.material)
}

// optional .osi3.StationaryObject.Classification.Density density = 3;
bool StationaryObject_Classification::has_density() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StationaryObject_Classification::set_has_density() {
  _has_bits_[0] |= 0x00000004u;
}
void StationaryObject_Classification::clear_has_density() {
  _has_bits_[0] &= ~0x00000004u;
}
void StationaryObject_Classification::clear_density() {
  density_ = 0;
  clear_has_density();
}
 ::osi3::StationaryObject_Classification_Density StationaryObject_Classification::density() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.Classification.density)
  return static_cast< ::osi3::StationaryObject_Classification_Density >(density_);
}
 void StationaryObject_Classification::set_density(::osi3::StationaryObject_Classification_Density value) {
  assert(::osi3::StationaryObject_Classification_Density_IsValid(value));
  set_has_density();
  density_ = value;
  // @@protoc_insertion_point(field_set:osi3.StationaryObject.Classification.density)
}

// optional .osi3.StationaryObject.Classification.Color color = 4;
bool StationaryObject_Classification::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StationaryObject_Classification::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
void StationaryObject_Classification::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void StationaryObject_Classification::clear_color() {
  color_ = 0;
  clear_has_color();
}
 ::osi3::StationaryObject_Classification_Color StationaryObject_Classification::color() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.Classification.color)
  return static_cast< ::osi3::StationaryObject_Classification_Color >(color_);
}
 void StationaryObject_Classification::set_color(::osi3::StationaryObject_Classification_Color value) {
  assert(::osi3::StationaryObject_Classification_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:osi3.StationaryObject.Classification.color)
}

// -------------------------------------------------------------------

// StationaryObject

// optional .osi3.Identifier id = 1;
bool StationaryObject::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StationaryObject::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StationaryObject::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StationaryObject::clear_id() {
  if (id_ != NULL) id_->::osi3::Identifier::Clear();
  clear_has_id();
}
const ::osi3::Identifier& StationaryObject::id() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::osi3::Identifier* StationaryObject::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.StationaryObject.id)
  return id_;
}
::osi3::Identifier* StationaryObject::release_id() {
  // @@protoc_insertion_point(field_release:osi3.StationaryObject.id)
  clear_has_id();
  ::osi3::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
void StationaryObject::set_allocated_id(::osi3::Identifier* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.StationaryObject.id)
}

// optional .osi3.BaseStationary base = 2;
bool StationaryObject::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StationaryObject::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void StationaryObject::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void StationaryObject::clear_base() {
  if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
  clear_has_base();
}
const ::osi3::BaseStationary& StationaryObject::base() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::osi3::BaseStationary* StationaryObject::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::osi3::BaseStationary;
  }
  // @@protoc_insertion_point(field_mutable:osi3.StationaryObject.base)
  return base_;
}
::osi3::BaseStationary* StationaryObject::release_base() {
  // @@protoc_insertion_point(field_release:osi3.StationaryObject.base)
  clear_has_base();
  ::osi3::BaseStationary* temp = base_;
  base_ = NULL;
  return temp;
}
void StationaryObject::set_allocated_base(::osi3::BaseStationary* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.StationaryObject.base)
}

// optional .osi3.StationaryObject.Classification classification = 3;
bool StationaryObject::has_classification() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StationaryObject::set_has_classification() {
  _has_bits_[0] |= 0x00000004u;
}
void StationaryObject::clear_has_classification() {
  _has_bits_[0] &= ~0x00000004u;
}
void StationaryObject::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::StationaryObject_Classification::Clear();
  clear_has_classification();
}
const ::osi3::StationaryObject_Classification& StationaryObject::classification() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
::osi3::StationaryObject_Classification* StationaryObject::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::StationaryObject_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.StationaryObject.classification)
  return classification_;
}
::osi3::StationaryObject_Classification* StationaryObject::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.StationaryObject.classification)
  clear_has_classification();
  ::osi3::StationaryObject_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
void StationaryObject::set_allocated_classification(::osi3::StationaryObject_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.StationaryObject.classification)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MovingObject_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovingObject_Type_descriptor_;
}
bool MovingObject_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MovingObject_Type MovingObject::TYPE_UNKNOWN;
const MovingObject_Type MovingObject::TYPE_OTHER;
const MovingObject_Type MovingObject::TYPE_VEHICLE;
const MovingObject_Type MovingObject::TYPE_PEDESTRIAN;
const MovingObject_Type MovingObject::TYPE_ANIMAL;
const MovingObject_Type MovingObject::Type_MIN;
const MovingObject_Type MovingObject::Type_MAX;
const int MovingObject::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovingObject_VehicleAttributes::kDriverIdFieldNumber;
const int MovingObject_VehicleAttributes::kRadiusWheelFieldNumber;
const int MovingObject_VehicleAttributes::kNumberWheelsFieldNumber;
const int MovingObject_VehicleAttributes::kBbcenterToRearFieldNumber;
const int MovingObject_VehicleAttributes::kBbcenterToFrontFieldNumber;
const int MovingObject_VehicleAttributes::kGroundClearanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovingObject_VehicleAttributes::MovingObject_VehicleAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject.VehicleAttributes)
}

void MovingObject_VehicleAttributes::InitAsDefaultInstance() {
  driver_id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  bbcenter_to_rear_ = const_cast< ::osi3::Vector3d*>(&::osi3::Vector3d::default_instance());
  bbcenter_to_front_ = const_cast< ::osi3::Vector3d*>(&::osi3::Vector3d::default_instance());
}

MovingObject_VehicleAttributes::MovingObject_VehicleAttributes(const MovingObject_VehicleAttributes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleAttributes)
}

void MovingObject_VehicleAttributes::SharedCtor() {
  _cached_size_ = 0;
  driver_id_ = NULL;
  radius_wheel_ = 0;
  number_wheels_ = 0u;
  bbcenter_to_rear_ = NULL;
  bbcenter_to_front_ = NULL;
  ground_clearance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MovingObject_VehicleAttributes::~MovingObject_VehicleAttributes() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleAttributes)
  SharedDtor();
}

void MovingObject_VehicleAttributes::SharedDtor() {
  if (this != default_instance_) {
    delete driver_id_;
    delete bbcenter_to_rear_;
    delete bbcenter_to_front_;
  }
}

void MovingObject_VehicleAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovingObject_VehicleAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovingObject_VehicleAttributes_descriptor_;
}

const MovingObject_VehicleAttributes& MovingObject_VehicleAttributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fobject_2eproto();
  return *default_instance_;
}

MovingObject_VehicleAttributes* MovingObject_VehicleAttributes::default_instance_ = NULL;

MovingObject_VehicleAttributes* MovingObject_VehicleAttributes::New(::google::protobuf::Arena* arena) const {
  MovingObject_VehicleAttributes* n = new MovingObject_VehicleAttributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MovingObject_VehicleAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleAttributes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MovingObject_VehicleAttributes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MovingObject_VehicleAttributes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(ground_clearance_, number_wheels_);
    if (has_driver_id()) {
      if (driver_id_ != NULL) driver_id_->::osi3::Identifier::Clear();
    }
    radius_wheel_ = 0;
    if (has_bbcenter_to_rear()) {
      if (bbcenter_to_rear_ != NULL) bbcenter_to_rear_->::osi3::Vector3d::Clear();
    }
    if (has_bbcenter_to_front()) {
      if (bbcenter_to_front_ != NULL) bbcenter_to_front_->::osi3::Vector3d::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MovingObject_VehicleAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject.VehicleAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Identifier driver_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_driver_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_radius_wheel;
        break;
      }

      // optional double radius_wheel = 2;
      case 2: {
        if (tag == 17) {
         parse_radius_wheel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_wheel_)));
          set_has_radius_wheel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_number_wheels;
        break;
      }

      // optional uint32 number_wheels = 3;
      case 3: {
        if (tag == 24) {
         parse_number_wheels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_wheels_)));
          set_has_number_wheels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bbcenter_to_rear;
        break;
      }

      // optional .osi3.Vector3d bbcenter_to_rear = 4;
      case 4: {
        if (tag == 34) {
         parse_bbcenter_to_rear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbcenter_to_rear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bbcenter_to_front;
        break;
      }

      // optional .osi3.Vector3d bbcenter_to_front = 5;
      case 5: {
        if (tag == 42) {
         parse_bbcenter_to_front:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbcenter_to_front()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_ground_clearance;
        break;
      }

      // optional double ground_clearance = 6;
      case 6: {
        if (tag == 49) {
         parse_ground_clearance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ground_clearance_)));
          set_has_ground_clearance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject.VehicleAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject.VehicleAttributes)
  return false;
#undef DO_
}

void MovingObject_VehicleAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject.VehicleAttributes)
  // optional .osi3.Identifier driver_id = 1;
  if (has_driver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->driver_id_, output);
  }

  // optional double radius_wheel = 2;
  if (has_radius_wheel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radius_wheel(), output);
  }

  // optional uint32 number_wheels = 3;
  if (has_number_wheels()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number_wheels(), output);
  }

  // optional .osi3.Vector3d bbcenter_to_rear = 4;
  if (has_bbcenter_to_rear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bbcenter_to_rear_, output);
  }

  // optional .osi3.Vector3d bbcenter_to_front = 5;
  if (has_bbcenter_to_front()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bbcenter_to_front_, output);
  }

  // optional double ground_clearance = 6;
  if (has_ground_clearance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ground_clearance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject.VehicleAttributes)
}

::google::protobuf::uint8* MovingObject_VehicleAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleAttributes)
  // optional .osi3.Identifier driver_id = 1;
  if (has_driver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->driver_id_, false, target);
  }

  // optional double radius_wheel = 2;
  if (has_radius_wheel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radius_wheel(), target);
  }

  // optional uint32 number_wheels = 3;
  if (has_number_wheels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number_wheels(), target);
  }

  // optional .osi3.Vector3d bbcenter_to_rear = 4;
  if (has_bbcenter_to_rear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bbcenter_to_rear_, false, target);
  }

  // optional .osi3.Vector3d bbcenter_to_front = 5;
  if (has_bbcenter_to_front()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->bbcenter_to_front_, false, target);
  }

  // optional double ground_clearance = 6;
  if (has_ground_clearance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ground_clearance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleAttributes)
  return target;
}

int MovingObject_VehicleAttributes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleAttributes)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .osi3.Identifier driver_id = 1;
    if (has_driver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->driver_id_);
    }

    // optional double radius_wheel = 2;
    if (has_radius_wheel()) {
      total_size += 1 + 8;
    }

    // optional uint32 number_wheels = 3;
    if (has_number_wheels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_wheels());
    }

    // optional .osi3.Vector3d bbcenter_to_rear = 4;
    if (has_bbcenter_to_rear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bbcenter_to_rear_);
    }

    // optional .osi3.Vector3d bbcenter_to_front = 5;
    if (has_bbcenter_to_front()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bbcenter_to_front_);
    }

    // optional double ground_clearance = 6;
    if (has_ground_clearance()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovingObject_VehicleAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject.VehicleAttributes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MovingObject_VehicleAttributes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MovingObject_VehicleAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject.VehicleAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject.VehicleAttributes)
    MergeFrom(*source);
  }
}

void MovingObject_VehicleAttributes::MergeFrom(const MovingObject_VehicleAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleAttributes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_driver_id()) {
      mutable_driver_id()->::osi3::Identifier::MergeFrom(from.driver_id());
    }
    if (from.has_radius_wheel()) {
      set_radius_wheel(from.radius_wheel());
    }
    if (from.has_number_wheels()) {
      set_number_wheels(from.number_wheels());
    }
    if (from.has_bbcenter_to_rear()) {
      mutable_bbcenter_to_rear()->::osi3::Vector3d::MergeFrom(from.bbcenter_to_rear());
    }
    if (from.has_bbcenter_to_front()) {
      mutable_bbcenter_to_front()->::osi3::Vector3d::MergeFrom(from.bbcenter_to_front());
    }
    if (from.has_ground_clearance()) {
      set_ground_clearance(from.ground_clearance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MovingObject_VehicleAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject.VehicleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject_VehicleAttributes::CopyFrom(const MovingObject_VehicleAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleAttributes::IsInitialized() const {

  return true;
}

void MovingObject_VehicleAttributes::Swap(MovingObject_VehicleAttributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovingObject_VehicleAttributes::InternalSwap(MovingObject_VehicleAttributes* other) {
  std::swap(driver_id_, other->driver_id_);
  std::swap(radius_wheel_, other->radius_wheel_);
  std::swap(number_wheels_, other->number_wheels_);
  std::swap(bbcenter_to_rear_, other->bbcenter_to_rear_);
  std::swap(bbcenter_to_front_, other->bbcenter_to_front_);
  std::swap(ground_clearance_, other->ground_clearance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MovingObject_VehicleAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MovingObject_VehicleAttributes_descriptor_;
  metadata.reflection = MovingObject_VehicleAttributes_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovingObject_VehicleClassification_Type_descriptor_;
}
bool MovingObject_VehicleClassification_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_UNKNOWN;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_OTHER;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_SMALL_CAR;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_COMPACT_CAR;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_MEDIUM_CAR;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_LUXURY_CAR;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_DELIVERY_VAN;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_HEAVY_TRUCK;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_SEMITRAILER;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_TRAILER;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_MOTORBIKE;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_BICYCLE;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_BUS;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_TRAM;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_TRAIN;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_WHEELCHAIR;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::Type_MIN;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::Type_MAX;
const int MovingObject_VehicleClassification::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_LightState_IndicatorState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovingObject_VehicleClassification_LightState_IndicatorState_descriptor_;
}
bool MovingObject_VehicleClassification_LightState_IndicatorState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_UNKNOWN;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_OTHER;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_OFF;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_LEFT;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_RIGHT;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_WARNING;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::IndicatorState_MIN;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::IndicatorState_MAX;
const int MovingObject_VehicleClassification_LightState::IndicatorState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_LightState_GenericLightState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovingObject_VehicleClassification_LightState_GenericLightState_descriptor_;
}
bool MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_UNKNOWN;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_OTHER;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_OFF;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_ON;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GenericLightState_MIN;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GenericLightState_MAX;
const int MovingObject_VehicleClassification_LightState::GenericLightState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_LightState_BrakeLightState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovingObject_VehicleClassification_LightState_BrakeLightState_descriptor_;
}
bool MovingObject_VehicleClassification_LightState_BrakeLightState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_UNKNOWN;
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_OTHER;
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_OFF;
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_NORMAL;
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_STRONG;
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BrakeLightState_MIN;
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BrakeLightState_MAX;
const int MovingObject_VehicleClassification_LightState::BrakeLightState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovingObject_VehicleClassification_LightState::kIndicatorStateFieldNumber;
const int MovingObject_VehicleClassification_LightState::kFrontFogLightFieldNumber;
const int MovingObject_VehicleClassification_LightState::kRearFogLightFieldNumber;
const int MovingObject_VehicleClassification_LightState::kHeadLightFieldNumber;
const int MovingObject_VehicleClassification_LightState::kHighBeamFieldNumber;
const int MovingObject_VehicleClassification_LightState::kReversingLightFieldNumber;
const int MovingObject_VehicleClassification_LightState::kBrakeLightStateFieldNumber;
const int MovingObject_VehicleClassification_LightState::kLicensePlateIlluminationRearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovingObject_VehicleClassification_LightState::MovingObject_VehicleClassification_LightState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject.VehicleClassification.LightState)
}

void MovingObject_VehicleClassification_LightState::InitAsDefaultInstance() {
}

MovingObject_VehicleClassification_LightState::MovingObject_VehicleClassification_LightState(const MovingObject_VehicleClassification_LightState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleClassification.LightState)
}

void MovingObject_VehicleClassification_LightState::SharedCtor() {
  _cached_size_ = 0;
  indicator_state_ = 0;
  front_fog_light_ = 0;
  rear_fog_light_ = 0;
  head_light_ = 0;
  high_beam_ = 0;
  reversing_light_ = 0;
  brake_light_state_ = 0;
  license_plate_illumination_rear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MovingObject_VehicleClassification_LightState::~MovingObject_VehicleClassification_LightState() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleClassification.LightState)
  SharedDtor();
}

void MovingObject_VehicleClassification_LightState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MovingObject_VehicleClassification_LightState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovingObject_VehicleClassification_LightState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovingObject_VehicleClassification_LightState_descriptor_;
}

const MovingObject_VehicleClassification_LightState& MovingObject_VehicleClassification_LightState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fobject_2eproto();
  return *default_instance_;
}

MovingObject_VehicleClassification_LightState* MovingObject_VehicleClassification_LightState::default_instance_ = NULL;

MovingObject_VehicleClassification_LightState* MovingObject_VehicleClassification_LightState::New(::google::protobuf::Arena* arena) const {
  MovingObject_VehicleClassification_LightState* n = new MovingObject_VehicleClassification_LightState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MovingObject_VehicleClassification_LightState::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleClassification.LightState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MovingObject_VehicleClassification_LightState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MovingObject_VehicleClassification_LightState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(indicator_state_, license_plate_illumination_rear_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MovingObject_VehicleClassification_LightState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject.VehicleClassification.LightState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::MovingObject_VehicleClassification_LightState_IndicatorState_IsValid(value)) {
            set_indicator_state(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_IndicatorState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_front_fog_light;
        break;
      }

      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
      case 2: {
        if (tag == 16) {
         parse_front_fog_light:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value)) {
            set_front_fog_light(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rear_fog_light;
        break;
      }

      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
      case 3: {
        if (tag == 24) {
         parse_rear_fog_light:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value)) {
            set_rear_fog_light(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_head_light;
        break;
      }

      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
      case 4: {
        if (tag == 32) {
         parse_head_light:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value)) {
            set_head_light(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_high_beam;
        break;
      }

      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
      case 5: {
        if (tag == 40) {
         parse_high_beam:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value)) {
            set_high_beam(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reversing_light;
        break;
      }

      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
      case 6: {
        if (tag == 48) {
         parse_reversing_light:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value)) {
            set_reversing_light(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_brake_light_state;
        break;
      }

      // optional .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
      case 7: {
        if (tag == 56) {
         parse_brake_light_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState_IsValid(value)) {
            set_brake_light_state(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_license_plate_illumination_rear;
        break;
      }

      // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
      case 8: {
        if (tag == 64) {
         parse_license_plate_illumination_rear:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value)) {
            set_license_plate_illumination_rear(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject.VehicleClassification.LightState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject.VehicleClassification.LightState)
  return false;
#undef DO_
}

void MovingObject_VehicleClassification_LightState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject.VehicleClassification.LightState)
  // optional .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
  if (has_indicator_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->indicator_state(), output);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
  if (has_front_fog_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->front_fog_light(), output);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
  if (has_rear_fog_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rear_fog_light(), output);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
  if (has_head_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->head_light(), output);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
  if (has_high_beam()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->high_beam(), output);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
  if (has_reversing_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->reversing_light(), output);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
  if (has_brake_light_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->brake_light_state(), output);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
  if (has_license_plate_illumination_rear()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->license_plate_illumination_rear(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject.VehicleClassification.LightState)
}

::google::protobuf::uint8* MovingObject_VehicleClassification_LightState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleClassification.LightState)
  // optional .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
  if (has_indicator_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->indicator_state(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
  if (has_front_fog_light()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->front_fog_light(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
  if (has_rear_fog_light()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rear_fog_light(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
  if (has_head_light()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->head_light(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
  if (has_high_beam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->high_beam(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
  if (has_reversing_light()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->reversing_light(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
  if (has_brake_light_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->brake_light_state(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
  if (has_license_plate_illumination_rear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->license_plate_illumination_rear(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleClassification.LightState)
  return target;
}

int MovingObject_VehicleClassification_LightState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleClassification.LightState)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
    if (has_indicator_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->indicator_state());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
    if (has_front_fog_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->front_fog_light());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
    if (has_rear_fog_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rear_fog_light());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
    if (has_head_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->head_light());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
    if (has_high_beam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->high_beam());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
    if (has_reversing_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reversing_light());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
    if (has_brake_light_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brake_light_state());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
    if (has_license_plate_illumination_rear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->license_plate_illumination_rear());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovingObject_VehicleClassification_LightState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject.VehicleClassification.LightState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MovingObject_VehicleClassification_LightState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MovingObject_VehicleClassification_LightState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject.VehicleClassification.LightState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject.VehicleClassification.LightState)
    MergeFrom(*source);
  }
}

void MovingObject_VehicleClassification_LightState::MergeFrom(const MovingObject_VehicleClassification_LightState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleClassification.LightState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_indicator_state()) {
      set_indicator_state(from.indicator_state());
    }
    if (from.has_front_fog_light()) {
      set_front_fog_light(from.front_fog_light());
    }
    if (from.has_rear_fog_light()) {
      set_rear_fog_light(from.rear_fog_light());
    }
    if (from.has_head_light()) {
      set_head_light(from.head_light());
    }
    if (from.has_high_beam()) {
      set_high_beam(from.high_beam());
    }
    if (from.has_reversing_light()) {
      set_reversing_light(from.reversing_light());
    }
    if (from.has_brake_light_state()) {
      set_brake_light_state(from.brake_light_state());
    }
    if (from.has_license_plate_illumination_rear()) {
      set_license_plate_illumination_rear(from.license_plate_illumination_rear());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MovingObject_VehicleClassification_LightState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject.VehicleClassification.LightState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject_VehicleClassification_LightState::CopyFrom(const MovingObject_VehicleClassification_LightState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleClassification.LightState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleClassification_LightState::IsInitialized() const {

  return true;
}

void MovingObject_VehicleClassification_LightState::Swap(MovingObject_VehicleClassification_LightState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovingObject_VehicleClassification_LightState::InternalSwap(MovingObject_VehicleClassification_LightState* other) {
  std::swap(indicator_state_, other->indicator_state_);
  std::swap(front_fog_light_, other->front_fog_light_);
  std::swap(rear_fog_light_, other->rear_fog_light_);
  std::swap(head_light_, other->head_light_);
  std::swap(high_beam_, other->high_beam_);
  std::swap(reversing_light_, other->reversing_light_);
  std::swap(brake_light_state_, other->brake_light_state_);
  std::swap(license_plate_illumination_rear_, other->license_plate_illumination_rear_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MovingObject_VehicleClassification_LightState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MovingObject_VehicleClassification_LightState_descriptor_;
  metadata.reflection = MovingObject_VehicleClassification_LightState_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovingObject_VehicleClassification::kTypeFieldNumber;
const int MovingObject_VehicleClassification::kLightStateFieldNumber;
const int MovingObject_VehicleClassification::kHasTrailerFieldNumber;
const int MovingObject_VehicleClassification::kTrailerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovingObject_VehicleClassification::MovingObject_VehicleClassification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject.VehicleClassification)
}

void MovingObject_VehicleClassification::InitAsDefaultInstance() {
  light_state_ = const_cast< ::osi3::MovingObject_VehicleClassification_LightState*>(&::osi3::MovingObject_VehicleClassification_LightState::default_instance());
  trailer_id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
}

MovingObject_VehicleClassification::MovingObject_VehicleClassification(const MovingObject_VehicleClassification& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleClassification)
}

void MovingObject_VehicleClassification::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  light_state_ = NULL;
  has_trailer_ = false;
  trailer_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MovingObject_VehicleClassification::~MovingObject_VehicleClassification() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleClassification)
  SharedDtor();
}

void MovingObject_VehicleClassification::SharedDtor() {
  if (this != default_instance_) {
    delete light_state_;
    delete trailer_id_;
  }
}

void MovingObject_VehicleClassification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovingObject_VehicleClassification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovingObject_VehicleClassification_descriptor_;
}

const MovingObject_VehicleClassification& MovingObject_VehicleClassification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fobject_2eproto();
  return *default_instance_;
}

MovingObject_VehicleClassification* MovingObject_VehicleClassification::default_instance_ = NULL;

MovingObject_VehicleClassification* MovingObject_VehicleClassification::New(::google::protobuf::Arena* arena) const {
  MovingObject_VehicleClassification* n = new MovingObject_VehicleClassification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MovingObject_VehicleClassification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleClassification)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MovingObject_VehicleClassification, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MovingObject_VehicleClassification*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(type_, has_trailer_);
    if (has_light_state()) {
      if (light_state_ != NULL) light_state_->::osi3::MovingObject_VehicleClassification_LightState::Clear();
    }
    if (has_trailer_id()) {
      if (trailer_id_ != NULL) trailer_id_->::osi3::Identifier::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MovingObject_VehicleClassification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject.VehicleClassification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.MovingObject.VehicleClassification.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::MovingObject_VehicleClassification_Type_IsValid(value)) {
            set_type(static_cast< ::osi3::MovingObject_VehicleClassification_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_light_state;
        break;
      }

      // optional .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
      case 2: {
        if (tag == 18) {
         parse_light_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_light_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_has_trailer;
        break;
      }

      // optional bool has_trailer = 3;
      case 3: {
        if (tag == 24) {
         parse_has_trailer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_trailer_)));
          set_has_has_trailer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_trailer_id;
        break;
      }

      // optional .osi3.Identifier trailer_id = 4;
      case 4: {
        if (tag == 34) {
         parse_trailer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trailer_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject.VehicleClassification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject.VehicleClassification)
  return false;
#undef DO_
}

void MovingObject_VehicleClassification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject.VehicleClassification)
  // optional .osi3.MovingObject.VehicleClassification.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
  if (has_light_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->light_state_, output);
  }

  // optional bool has_trailer = 3;
  if (has_has_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_trailer(), output);
  }

  // optional .osi3.Identifier trailer_id = 4;
  if (has_trailer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->trailer_id_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject.VehicleClassification)
}

::google::protobuf::uint8* MovingObject_VehicleClassification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleClassification)
  // optional .osi3.MovingObject.VehicleClassification.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
  if (has_light_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->light_state_, false, target);
  }

  // optional bool has_trailer = 3;
  if (has_has_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_trailer(), target);
  }

  // optional .osi3.Identifier trailer_id = 4;
  if (has_trailer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->trailer_id_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleClassification)
  return target;
}

int MovingObject_VehicleClassification::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleClassification)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .osi3.MovingObject.VehicleClassification.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
    if (has_light_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->light_state_);
    }

    // optional bool has_trailer = 3;
    if (has_has_trailer()) {
      total_size += 1 + 1;
    }

    // optional .osi3.Identifier trailer_id = 4;
    if (has_trailer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trailer_id_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovingObject_VehicleClassification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject.VehicleClassification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MovingObject_VehicleClassification* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MovingObject_VehicleClassification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject.VehicleClassification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject.VehicleClassification)
    MergeFrom(*source);
  }
}

void MovingObject_VehicleClassification::MergeFrom(const MovingObject_VehicleClassification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleClassification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_light_state()) {
      mutable_light_state()->::osi3::MovingObject_VehicleClassification_LightState::MergeFrom(from.light_state());
    }
    if (from.has_has_trailer()) {
      set_has_trailer(from.has_trailer());
    }
    if (from.has_trailer_id()) {
      mutable_trailer_id()->::osi3::Identifier::MergeFrom(from.trailer_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MovingObject_VehicleClassification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject.VehicleClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject_VehicleClassification::CopyFrom(const MovingObject_VehicleClassification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleClassification::IsInitialized() const {

  return true;
}

void MovingObject_VehicleClassification::Swap(MovingObject_VehicleClassification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovingObject_VehicleClassification::InternalSwap(MovingObject_VehicleClassification* other) {
  std::swap(type_, other->type_);
  std::swap(light_state_, other->light_state_);
  std::swap(has_trailer_, other->has_trailer_);
  std::swap(trailer_id_, other->trailer_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MovingObject_VehicleClassification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MovingObject_VehicleClassification_descriptor_;
  metadata.reflection = MovingObject_VehicleClassification_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovingObject::kIdFieldNumber;
const int MovingObject::kBaseFieldNumber;
const int MovingObject::kTypeFieldNumber;
const int MovingObject::kAssignedLaneIdFieldNumber;
const int MovingObject::kVehicleAttributesFieldNumber;
const int MovingObject::kVehicleClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovingObject::MovingObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject)
}

void MovingObject::InitAsDefaultInstance() {
  id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  base_ = const_cast< ::osi3::BaseMoving*>(&::osi3::BaseMoving::default_instance());
  vehicle_attributes_ = const_cast< ::osi3::MovingObject_VehicleAttributes*>(&::osi3::MovingObject_VehicleAttributes::default_instance());
  vehicle_classification_ = const_cast< ::osi3::MovingObject_VehicleClassification*>(&::osi3::MovingObject_VehicleClassification::default_instance());
}

MovingObject::MovingObject(const MovingObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject)
}

void MovingObject::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  base_ = NULL;
  type_ = 0;
  vehicle_attributes_ = NULL;
  vehicle_classification_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MovingObject::~MovingObject() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject)
  SharedDtor();
}

void MovingObject::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete base_;
    delete vehicle_attributes_;
    delete vehicle_classification_;
  }
}

void MovingObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovingObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovingObject_descriptor_;
}

const MovingObject& MovingObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fobject_2eproto();
  return *default_instance_;
}

MovingObject* MovingObject::default_instance_ = NULL;

MovingObject* MovingObject::New(::google::protobuf::Arena* arena) const {
  MovingObject* n = new MovingObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MovingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject)
  if (_has_bits_[0 / 32] & 55u) {
    if (has_id()) {
      if (id_ != NULL) id_->::osi3::Identifier::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::osi3::BaseMoving::Clear();
    }
    type_ = 0;
    if (has_vehicle_attributes()) {
      if (vehicle_attributes_ != NULL) vehicle_attributes_->::osi3::MovingObject_VehicleAttributes::Clear();
    }
    if (has_vehicle_classification()) {
      if (vehicle_classification_ != NULL) vehicle_classification_->::osi3::MovingObject_VehicleClassification::Clear();
    }
  }
  assigned_lane_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MovingObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Identifier id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .osi3.BaseMoving base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .osi3.MovingObject.Type type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::MovingObject_Type_IsValid(value)) {
            set_type(static_cast< ::osi3::MovingObject_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_assigned_lane_id;
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 4;
      case 4: {
        if (tag == 34) {
         parse_assigned_lane_id:
          DO_(input->IncrementRecursionDepth());
         parse_loop_assigned_lane_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_assigned_lane_id;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_vehicle_attributes;
        break;
      }

      // optional .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
      case 5: {
        if (tag == 42) {
         parse_vehicle_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vehicle_classification;
        break;
      }

      // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
      case 6: {
        if (tag == 50) {
         parse_vehicle_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_classification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject)
  return false;
#undef DO_
}

void MovingObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject)
  // optional .osi3.Identifier id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .osi3.BaseMoving base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // optional .osi3.MovingObject.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  for (unsigned int i = 0, n = this->assigned_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->assigned_lane_id(i), output);
  }

  // optional .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
  if (has_vehicle_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->vehicle_attributes_, output);
  }

  // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
  if (has_vehicle_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->vehicle_classification_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject)
}

::google::protobuf::uint8* MovingObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject)
  // optional .osi3.Identifier id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // optional .osi3.BaseMoving base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->base_, false, target);
  }

  // optional .osi3.MovingObject.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  for (unsigned int i = 0, n = this->assigned_lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->assigned_lane_id(i), false, target);
  }

  // optional .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
  if (has_vehicle_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->vehicle_attributes_, false, target);
  }

  // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
  if (has_vehicle_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->vehicle_classification_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject)
  return target;
}

int MovingObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 55u) {
    // optional .osi3.Identifier id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .osi3.BaseMoving base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_);
    }

    // optional .osi3.MovingObject.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
    if (has_vehicle_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_attributes_);
    }

    // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
    if (has_vehicle_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_classification_);
    }

  }
  // repeated .osi3.Identifier assigned_lane_id = 4;
  total_size += 1 * this->assigned_lane_id_size();
  for (int i = 0; i < this->assigned_lane_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assigned_lane_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovingObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MovingObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MovingObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject)
    MergeFrom(*source);
  }
}

void MovingObject::MergeFrom(const MovingObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::osi3::Identifier::MergeFrom(from.id());
    }
    if (from.has_base()) {
      mutable_base()->::osi3::BaseMoving::MergeFrom(from.base());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_vehicle_attributes()) {
      mutable_vehicle_attributes()->::osi3::MovingObject_VehicleAttributes::MergeFrom(from.vehicle_attributes());
    }
    if (from.has_vehicle_classification()) {
      mutable_vehicle_classification()->::osi3::MovingObject_VehicleClassification::MergeFrom(from.vehicle_classification());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MovingObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject::CopyFrom(const MovingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject::IsInitialized() const {

  return true;
}

void MovingObject::Swap(MovingObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovingObject::InternalSwap(MovingObject* other) {
  std::swap(id_, other->id_);
  std::swap(base_, other->base_);
  std::swap(type_, other->type_);
  assigned_lane_id_.UnsafeArenaSwap(&other->assigned_lane_id_);
  std::swap(vehicle_attributes_, other->vehicle_attributes_);
  std::swap(vehicle_classification_, other->vehicle_classification_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MovingObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MovingObject_descriptor_;
  metadata.reflection = MovingObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MovingObject_VehicleAttributes

// optional .osi3.Identifier driver_id = 1;
bool MovingObject_VehicleAttributes::has_driver_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MovingObject_VehicleAttributes::set_has_driver_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MovingObject_VehicleAttributes::clear_has_driver_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MovingObject_VehicleAttributes::clear_driver_id() {
  if (driver_id_ != NULL) driver_id_->::osi3::Identifier::Clear();
  clear_has_driver_id();
}
const ::osi3::Identifier& MovingObject_VehicleAttributes::driver_id() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleAttributes.driver_id)
  return driver_id_ != NULL ? *driver_id_ : *default_instance_->driver_id_;
}
::osi3::Identifier* MovingObject_VehicleAttributes::mutable_driver_id() {
  set_has_driver_id();
  if (driver_id_ == NULL) {
    driver_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.VehicleAttributes.driver_id)
  return driver_id_;
}
::osi3::Identifier* MovingObject_VehicleAttributes::release_driver_id() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.VehicleAttributes.driver_id)
  clear_has_driver_id();
  ::osi3::Identifier* temp = driver_id_;
  driver_id_ = NULL;
  return temp;
}
void MovingObject_VehicleAttributes::set_allocated_driver_id(::osi3::Identifier* driver_id) {
  delete driver_id_;
  driver_id_ = driver_id;
  if (driver_id) {
    set_has_driver_id();
  } else {
    clear_has_driver_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.VehicleAttributes.driver_id)
}

// optional double radius_wheel = 2;
bool MovingObject_VehicleAttributes::has_radius_wheel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MovingObject_VehicleAttributes::set_has_radius_wheel() {
  _has_bits_[0] |= 0x00000002u;
}
void MovingObject_VehicleAttributes::clear_has_radius_wheel() {
  _has_bits_[0] &= ~0x00000002u;
}
void MovingObject_VehicleAttributes::clear_radius_wheel() {
  radius_wheel_ = 0;
  clear_has_radius_wheel();
}
 double MovingObject_VehicleAttributes::radius_wheel() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleAttributes.radius_wheel)
  return radius_wheel_;
}
 void MovingObject_VehicleAttributes::set_radius_wheel(double value) {
  set_has_radius_wheel();
  radius_wheel_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleAttributes.radius_wheel)
}

// optional uint32 number_wheels = 3;
bool MovingObject_VehicleAttributes::has_number_wheels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MovingObject_VehicleAttributes::set_has_number_wheels() {
  _has_bits_[0] |= 0x00000004u;
}
void MovingObject_VehicleAttributes::clear_has_number_wheels() {
  _has_bits_[0] &= ~0x00000004u;
}
void MovingObject_VehicleAttributes::clear_number_wheels() {
  number_wheels_ = 0u;
  clear_has_number_wheels();
}
 ::google::protobuf::uint32 MovingObject_VehicleAttributes::number_wheels() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleAttributes.number_wheels)
  return number_wheels_;
}
 void MovingObject_VehicleAttributes::set_number_wheels(::google::protobuf::uint32 value) {
  set_has_number_wheels();
  number_wheels_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleAttributes.number_wheels)
}

// optional .osi3.Vector3d bbcenter_to_rear = 4;
bool MovingObject_VehicleAttributes::has_bbcenter_to_rear() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MovingObject_VehicleAttributes::set_has_bbcenter_to_rear() {
  _has_bits_[0] |= 0x00000008u;
}
void MovingObject_VehicleAttributes::clear_has_bbcenter_to_rear() {
  _has_bits_[0] &= ~0x00000008u;
}
void MovingObject_VehicleAttributes::clear_bbcenter_to_rear() {
  if (bbcenter_to_rear_ != NULL) bbcenter_to_rear_->::osi3::Vector3d::Clear();
  clear_has_bbcenter_to_rear();
}
const ::osi3::Vector3d& MovingObject_VehicleAttributes::bbcenter_to_rear() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleAttributes.bbcenter_to_rear)
  return bbcenter_to_rear_ != NULL ? *bbcenter_to_rear_ : *default_instance_->bbcenter_to_rear_;
}
::osi3::Vector3d* MovingObject_VehicleAttributes::mutable_bbcenter_to_rear() {
  set_has_bbcenter_to_rear();
  if (bbcenter_to_rear_ == NULL) {
    bbcenter_to_rear_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.VehicleAttributes.bbcenter_to_rear)
  return bbcenter_to_rear_;
}
::osi3::Vector3d* MovingObject_VehicleAttributes::release_bbcenter_to_rear() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.VehicleAttributes.bbcenter_to_rear)
  clear_has_bbcenter_to_rear();
  ::osi3::Vector3d* temp = bbcenter_to_rear_;
  bbcenter_to_rear_ = NULL;
  return temp;
}
void MovingObject_VehicleAttributes::set_allocated_bbcenter_to_rear(::osi3::Vector3d* bbcenter_to_rear) {
  delete bbcenter_to_rear_;
  bbcenter_to_rear_ = bbcenter_to_rear;
  if (bbcenter_to_rear) {
    set_has_bbcenter_to_rear();
  } else {
    clear_has_bbcenter_to_rear();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.VehicleAttributes.bbcenter_to_rear)
}

// optional .osi3.Vector3d bbcenter_to_front = 5;
bool MovingObject_VehicleAttributes::has_bbcenter_to_front() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MovingObject_VehicleAttributes::set_has_bbcenter_to_front() {
  _has_bits_[0] |= 0x00000010u;
}
void MovingObject_VehicleAttributes::clear_has_bbcenter_to_front() {
  _has_bits_[0] &= ~0x00000010u;
}
void MovingObject_VehicleAttributes::clear_bbcenter_to_front() {
  if (bbcenter_to_front_ != NULL) bbcenter_to_front_->::osi3::Vector3d::Clear();
  clear_has_bbcenter_to_front();
}
const ::osi3::Vector3d& MovingObject_VehicleAttributes::bbcenter_to_front() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleAttributes.bbcenter_to_front)
  return bbcenter_to_front_ != NULL ? *bbcenter_to_front_ : *default_instance_->bbcenter_to_front_;
}
::osi3::Vector3d* MovingObject_VehicleAttributes::mutable_bbcenter_to_front() {
  set_has_bbcenter_to_front();
  if (bbcenter_to_front_ == NULL) {
    bbcenter_to_front_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.VehicleAttributes.bbcenter_to_front)
  return bbcenter_to_front_;
}
::osi3::Vector3d* MovingObject_VehicleAttributes::release_bbcenter_to_front() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.VehicleAttributes.bbcenter_to_front)
  clear_has_bbcenter_to_front();
  ::osi3::Vector3d* temp = bbcenter_to_front_;
  bbcenter_to_front_ = NULL;
  return temp;
}
void MovingObject_VehicleAttributes::set_allocated_bbcenter_to_front(::osi3::Vector3d* bbcenter_to_front) {
  delete bbcenter_to_front_;
  bbcenter_to_front_ = bbcenter_to_front;
  if (bbcenter_to_front) {
    set_has_bbcenter_to_front();
  } else {
    clear_has_bbcenter_to_front();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.VehicleAttributes.bbcenter_to_front)
}

// optional double ground_clearance = 6;
bool MovingObject_VehicleAttributes::has_ground_clearance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MovingObject_VehicleAttributes::set_has_ground_clearance() {
  _has_bits_[0] |= 0x00000020u;
}
void MovingObject_VehicleAttributes::clear_has_ground_clearance() {
  _has_bits_[0] &= ~0x00000020u;
}
void MovingObject_VehicleAttributes::clear_ground_clearance() {
  ground_clearance_ = 0;
  clear_has_ground_clearance();
}
 double MovingObject_VehicleAttributes::ground_clearance() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleAttributes.ground_clearance)
  return ground_clearance_;
}
 void MovingObject_VehicleAttributes::set_ground_clearance(double value) {
  set_has_ground_clearance();
  ground_clearance_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleAttributes.ground_clearance)
}

// -------------------------------------------------------------------

// MovingObject_VehicleClassification_LightState

// optional .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
bool MovingObject_VehicleClassification_LightState::has_indicator_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MovingObject_VehicleClassification_LightState::set_has_indicator_state() {
  _has_bits_[0] |= 0x00000001u;
}
void MovingObject_VehicleClassification_LightState::clear_has_indicator_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void MovingObject_VehicleClassification_LightState::clear_indicator_state() {
  indicator_state_ = 0;
  clear_has_indicator_state();
}
 ::osi3::MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::indicator_state() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.indicator_state)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_IndicatorState >(indicator_state_);
}
 void MovingObject_VehicleClassification_LightState::set_indicator_state(::osi3::MovingObject_VehicleClassification_LightState_IndicatorState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_IndicatorState_IsValid(value));
  set_has_indicator_state();
  indicator_state_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.indicator_state)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
bool MovingObject_VehicleClassification_LightState::has_front_fog_light() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MovingObject_VehicleClassification_LightState::set_has_front_fog_light() {
  _has_bits_[0] |= 0x00000002u;
}
void MovingObject_VehicleClassification_LightState::clear_has_front_fog_light() {
  _has_bits_[0] &= ~0x00000002u;
}
void MovingObject_VehicleClassification_LightState::clear_front_fog_light() {
  front_fog_light_ = 0;
  clear_has_front_fog_light();
}
 ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::front_fog_light() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.front_fog_light)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(front_fog_light_);
}
 void MovingObject_VehicleClassification_LightState::set_front_fog_light(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value));
  set_has_front_fog_light();
  front_fog_light_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.front_fog_light)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
bool MovingObject_VehicleClassification_LightState::has_rear_fog_light() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MovingObject_VehicleClassification_LightState::set_has_rear_fog_light() {
  _has_bits_[0] |= 0x00000004u;
}
void MovingObject_VehicleClassification_LightState::clear_has_rear_fog_light() {
  _has_bits_[0] &= ~0x00000004u;
}
void MovingObject_VehicleClassification_LightState::clear_rear_fog_light() {
  rear_fog_light_ = 0;
  clear_has_rear_fog_light();
}
 ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::rear_fog_light() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.rear_fog_light)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(rear_fog_light_);
}
 void MovingObject_VehicleClassification_LightState::set_rear_fog_light(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value));
  set_has_rear_fog_light();
  rear_fog_light_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.rear_fog_light)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
bool MovingObject_VehicleClassification_LightState::has_head_light() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MovingObject_VehicleClassification_LightState::set_has_head_light() {
  _has_bits_[0] |= 0x00000008u;
}
void MovingObject_VehicleClassification_LightState::clear_has_head_light() {
  _has_bits_[0] &= ~0x00000008u;
}
void MovingObject_VehicleClassification_LightState::clear_head_light() {
  head_light_ = 0;
  clear_has_head_light();
}
 ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::head_light() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.head_light)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(head_light_);
}
 void MovingObject_VehicleClassification_LightState::set_head_light(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value));
  set_has_head_light();
  head_light_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.head_light)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
bool MovingObject_VehicleClassification_LightState::has_high_beam() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MovingObject_VehicleClassification_LightState::set_has_high_beam() {
  _has_bits_[0] |= 0x00000010u;
}
void MovingObject_VehicleClassification_LightState::clear_has_high_beam() {
  _has_bits_[0] &= ~0x00000010u;
}
void MovingObject_VehicleClassification_LightState::clear_high_beam() {
  high_beam_ = 0;
  clear_has_high_beam();
}
 ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::high_beam() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.high_beam)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(high_beam_);
}
 void MovingObject_VehicleClassification_LightState::set_high_beam(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value));
  set_has_high_beam();
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.high_beam)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
bool MovingObject_VehicleClassification_LightState::has_reversing_light() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MovingObject_VehicleClassification_LightState::set_has_reversing_light() {
  _has_bits_[0] |= 0x00000020u;
}
void MovingObject_VehicleClassification_LightState::clear_has_reversing_light() {
  _has_bits_[0] &= ~0x00000020u;
}
void MovingObject_VehicleClassification_LightState::clear_reversing_light() {
  reversing_light_ = 0;
  clear_has_reversing_light();
}
 ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::reversing_light() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.reversing_light)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(reversing_light_);
}
 void MovingObject_VehicleClassification_LightState::set_reversing_light(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value));
  set_has_reversing_light();
  reversing_light_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.reversing_light)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
bool MovingObject_VehicleClassification_LightState::has_brake_light_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MovingObject_VehicleClassification_LightState::set_has_brake_light_state() {
  _has_bits_[0] |= 0x00000040u;
}
void MovingObject_VehicleClassification_LightState::clear_has_brake_light_state() {
  _has_bits_[0] &= ~0x00000040u;
}
void MovingObject_VehicleClassification_LightState::clear_brake_light_state() {
  brake_light_state_ = 0;
  clear_has_brake_light_state();
}
 ::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::brake_light_state() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.brake_light_state)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState >(brake_light_state_);
}
 void MovingObject_VehicleClassification_LightState::set_brake_light_state(::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState_IsValid(value));
  set_has_brake_light_state();
  brake_light_state_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.brake_light_state)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
bool MovingObject_VehicleClassification_LightState::has_license_plate_illumination_rear() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MovingObject_VehicleClassification_LightState::set_has_license_plate_illumination_rear() {
  _has_bits_[0] |= 0x00000080u;
}
void MovingObject_VehicleClassification_LightState::clear_has_license_plate_illumination_rear() {
  _has_bits_[0] &= ~0x00000080u;
}
void MovingObject_VehicleClassification_LightState::clear_license_plate_illumination_rear() {
  license_plate_illumination_rear_ = 0;
  clear_has_license_plate_illumination_rear();
}
 ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::license_plate_illumination_rear() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.license_plate_illumination_rear)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(license_plate_illumination_rear_);
}
 void MovingObject_VehicleClassification_LightState::set_license_plate_illumination_rear(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value));
  set_has_license_plate_illumination_rear();
  license_plate_illumination_rear_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.license_plate_illumination_rear)
}

// -------------------------------------------------------------------

// MovingObject_VehicleClassification

// optional .osi3.MovingObject.VehicleClassification.Type type = 1;
bool MovingObject_VehicleClassification::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MovingObject_VehicleClassification::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void MovingObject_VehicleClassification::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void MovingObject_VehicleClassification::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::osi3::MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::type() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.type)
  return static_cast< ::osi3::MovingObject_VehicleClassification_Type >(type_);
}
 void MovingObject_VehicleClassification::set_type(::osi3::MovingObject_VehicleClassification_Type value) {
  assert(::osi3::MovingObject_VehicleClassification_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.type)
}

// optional .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
bool MovingObject_VehicleClassification::has_light_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MovingObject_VehicleClassification::set_has_light_state() {
  _has_bits_[0] |= 0x00000002u;
}
void MovingObject_VehicleClassification::clear_has_light_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void MovingObject_VehicleClassification::clear_light_state() {
  if (light_state_ != NULL) light_state_->::osi3::MovingObject_VehicleClassification_LightState::Clear();
  clear_has_light_state();
}
const ::osi3::MovingObject_VehicleClassification_LightState& MovingObject_VehicleClassification::light_state() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.light_state)
  return light_state_ != NULL ? *light_state_ : *default_instance_->light_state_;
}
::osi3::MovingObject_VehicleClassification_LightState* MovingObject_VehicleClassification::mutable_light_state() {
  set_has_light_state();
  if (light_state_ == NULL) {
    light_state_ = new ::osi3::MovingObject_VehicleClassification_LightState;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.VehicleClassification.light_state)
  return light_state_;
}
::osi3::MovingObject_VehicleClassification_LightState* MovingObject_VehicleClassification::release_light_state() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.VehicleClassification.light_state)
  clear_has_light_state();
  ::osi3::MovingObject_VehicleClassification_LightState* temp = light_state_;
  light_state_ = NULL;
  return temp;
}
void MovingObject_VehicleClassification::set_allocated_light_state(::osi3::MovingObject_VehicleClassification_LightState* light_state) {
  delete light_state_;
  light_state_ = light_state;
  if (light_state) {
    set_has_light_state();
  } else {
    clear_has_light_state();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.VehicleClassification.light_state)
}

// optional bool has_trailer = 3;
bool MovingObject_VehicleClassification::has_has_trailer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MovingObject_VehicleClassification::set_has_has_trailer() {
  _has_bits_[0] |= 0x00000004u;
}
void MovingObject_VehicleClassification::clear_has_has_trailer() {
  _has_bits_[0] &= ~0x00000004u;
}
void MovingObject_VehicleClassification::clear_has_trailer() {
  has_trailer_ = false;
  clear_has_has_trailer();
}
 bool MovingObject_VehicleClassification::has_trailer() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.has_trailer)
  return has_trailer_;
}
 void MovingObject_VehicleClassification::set_has_trailer(bool value) {
  set_has_has_trailer();
  has_trailer_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.has_trailer)
}

// optional .osi3.Identifier trailer_id = 4;
bool MovingObject_VehicleClassification::has_trailer_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MovingObject_VehicleClassification::set_has_trailer_id() {
  _has_bits_[0] |= 0x00000008u;
}
void MovingObject_VehicleClassification::clear_has_trailer_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void MovingObject_VehicleClassification::clear_trailer_id() {
  if (trailer_id_ != NULL) trailer_id_->::osi3::Identifier::Clear();
  clear_has_trailer_id();
}
const ::osi3::Identifier& MovingObject_VehicleClassification::trailer_id() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.trailer_id)
  return trailer_id_ != NULL ? *trailer_id_ : *default_instance_->trailer_id_;
}
::osi3::Identifier* MovingObject_VehicleClassification::mutable_trailer_id() {
  set_has_trailer_id();
  if (trailer_id_ == NULL) {
    trailer_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.VehicleClassification.trailer_id)
  return trailer_id_;
}
::osi3::Identifier* MovingObject_VehicleClassification::release_trailer_id() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.VehicleClassification.trailer_id)
  clear_has_trailer_id();
  ::osi3::Identifier* temp = trailer_id_;
  trailer_id_ = NULL;
  return temp;
}
void MovingObject_VehicleClassification::set_allocated_trailer_id(::osi3::Identifier* trailer_id) {
  delete trailer_id_;
  trailer_id_ = trailer_id;
  if (trailer_id) {
    set_has_trailer_id();
  } else {
    clear_has_trailer_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.VehicleClassification.trailer_id)
}

// -------------------------------------------------------------------

// MovingObject

// optional .osi3.Identifier id = 1;
bool MovingObject::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MovingObject::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MovingObject::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MovingObject::clear_id() {
  if (id_ != NULL) id_->::osi3::Identifier::Clear();
  clear_has_id();
}
const ::osi3::Identifier& MovingObject::id() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::osi3::Identifier* MovingObject::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.id)
  return id_;
}
::osi3::Identifier* MovingObject::release_id() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.id)
  clear_has_id();
  ::osi3::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
void MovingObject::set_allocated_id(::osi3::Identifier* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.id)
}

// optional .osi3.BaseMoving base = 2;
bool MovingObject::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MovingObject::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void MovingObject::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void MovingObject::clear_base() {
  if (base_ != NULL) base_->::osi3::BaseMoving::Clear();
  clear_has_base();
}
const ::osi3::BaseMoving& MovingObject::base() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::osi3::BaseMoving* MovingObject::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::osi3::BaseMoving;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.base)
  return base_;
}
::osi3::BaseMoving* MovingObject::release_base() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.base)
  clear_has_base();
  ::osi3::BaseMoving* temp = base_;
  base_ = NULL;
  return temp;
}
void MovingObject::set_allocated_base(::osi3::BaseMoving* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.base)
}

// optional .osi3.MovingObject.Type type = 3;
bool MovingObject::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MovingObject::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void MovingObject::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void MovingObject::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::osi3::MovingObject_Type MovingObject::type() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.type)
  return static_cast< ::osi3::MovingObject_Type >(type_);
}
 void MovingObject::set_type(::osi3::MovingObject_Type value) {
  assert(::osi3::MovingObject_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.type)
}

// repeated .osi3.Identifier assigned_lane_id = 4;
int MovingObject::assigned_lane_id_size() const {
  return assigned_lane_id_.size();
}
void MovingObject::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
const ::osi3::Identifier& MovingObject::assigned_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.assigned_lane_id)
  return assigned_lane_id_.Get(index);
}
::osi3::Identifier* MovingObject::mutable_assigned_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.assigned_lane_id)
  return assigned_lane_id_.Mutable(index);
}
::osi3::Identifier* MovingObject::add_assigned_lane_id() {
  // @@protoc_insertion_point(field_add:osi3.MovingObject.assigned_lane_id)
  return assigned_lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
MovingObject::mutable_assigned_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.MovingObject.assigned_lane_id)
  return &assigned_lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
MovingObject::assigned_lane_id() const {
  // @@protoc_insertion_point(field_list:osi3.MovingObject.assigned_lane_id)
  return assigned_lane_id_;
}

// optional .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
bool MovingObject::has_vehicle_attributes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MovingObject::set_has_vehicle_attributes() {
  _has_bits_[0] |= 0x00000010u;
}
void MovingObject::clear_has_vehicle_attributes() {
  _has_bits_[0] &= ~0x00000010u;
}
void MovingObject::clear_vehicle_attributes() {
  if (vehicle_attributes_ != NULL) vehicle_attributes_->::osi3::MovingObject_VehicleAttributes::Clear();
  clear_has_vehicle_attributes();
}
const ::osi3::MovingObject_VehicleAttributes& MovingObject::vehicle_attributes() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.vehicle_attributes)
  return vehicle_attributes_ != NULL ? *vehicle_attributes_ : *default_instance_->vehicle_attributes_;
}
::osi3::MovingObject_VehicleAttributes* MovingObject::mutable_vehicle_attributes() {
  set_has_vehicle_attributes();
  if (vehicle_attributes_ == NULL) {
    vehicle_attributes_ = new ::osi3::MovingObject_VehicleAttributes;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.vehicle_attributes)
  return vehicle_attributes_;
}
::osi3::MovingObject_VehicleAttributes* MovingObject::release_vehicle_attributes() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.vehicle_attributes)
  clear_has_vehicle_attributes();
  ::osi3::MovingObject_VehicleAttributes* temp = vehicle_attributes_;
  vehicle_attributes_ = NULL;
  return temp;
}
void MovingObject::set_allocated_vehicle_attributes(::osi3::MovingObject_VehicleAttributes* vehicle_attributes) {
  delete vehicle_attributes_;
  vehicle_attributes_ = vehicle_attributes;
  if (vehicle_attributes) {
    set_has_vehicle_attributes();
  } else {
    clear_has_vehicle_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.vehicle_attributes)
}

// optional .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
bool MovingObject::has_vehicle_classification() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MovingObject::set_has_vehicle_classification() {
  _has_bits_[0] |= 0x00000020u;
}
void MovingObject::clear_has_vehicle_classification() {
  _has_bits_[0] &= ~0x00000020u;
}
void MovingObject::clear_vehicle_classification() {
  if (vehicle_classification_ != NULL) vehicle_classification_->::osi3::MovingObject_VehicleClassification::Clear();
  clear_has_vehicle_classification();
}
const ::osi3::MovingObject_VehicleClassification& MovingObject::vehicle_classification() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.vehicle_classification)
  return vehicle_classification_ != NULL ? *vehicle_classification_ : *default_instance_->vehicle_classification_;
}
::osi3::MovingObject_VehicleClassification* MovingObject::mutable_vehicle_classification() {
  set_has_vehicle_classification();
  if (vehicle_classification_ == NULL) {
    vehicle_classification_ = new ::osi3::MovingObject_VehicleClassification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.vehicle_classification)
  return vehicle_classification_;
}
::osi3::MovingObject_VehicleClassification* MovingObject::release_vehicle_classification() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.vehicle_classification)
  clear_has_vehicle_classification();
  ::osi3::MovingObject_VehicleClassification* temp = vehicle_classification_;
  vehicle_classification_ = NULL;
  return temp;
}
void MovingObject::set_allocated_vehicle_classification(::osi3::MovingObject_VehicleClassification* vehicle_classification) {
  delete vehicle_classification_;
  vehicle_classification_ = vehicle_classification;
  if (vehicle_classification) {
    set_has_vehicle_classification();
  } else {
    clear_has_vehicle_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.vehicle_classification)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
