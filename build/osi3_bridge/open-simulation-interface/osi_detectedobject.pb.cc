// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedobject.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_detectedobject.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* DetectedItemHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedItemHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DetectedItemHeader_MeasurementState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DetectedStationaryObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedStationaryObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectedStationaryObject_CandidateStationaryObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedStationaryObject_CandidateStationaryObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectedMovingObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedMovingObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectedMovingObject_CandidateMovingObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedMovingObject_CandidateMovingObject_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DetectedMovingObject_ReferencePoint_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DetectedMovingObject_MovementState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5fdetectedobject_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5fdetectedobject_2eproto() {
  protobuf_AddDesc_osi_5fdetectedobject_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_detectedobject.proto");
  GOOGLE_CHECK(file != NULL);
  DetectedItemHeader_descriptor_ = file->message_type(0);
  static const int DetectedItemHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedItemHeader, tracking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedItemHeader, ground_truth_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedItemHeader, existence_probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedItemHeader, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedItemHeader, measurement_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedItemHeader, sensor_id_),
  };
  DetectedItemHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectedItemHeader_descriptor_,
      DetectedItemHeader::default_instance_,
      DetectedItemHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedItemHeader, _has_bits_[0]),
      -1,
      -1,
      sizeof(DetectedItemHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedItemHeader, _internal_metadata_),
      -1);
  DetectedItemHeader_MeasurementState_descriptor_ = DetectedItemHeader_descriptor_->enum_type(0);
  DetectedStationaryObject_descriptor_ = file->message_type(1);
  static const int DetectedStationaryObject_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedStationaryObject, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedStationaryObject, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedStationaryObject, base_rmse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedStationaryObject, candidate_),
  };
  DetectedStationaryObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectedStationaryObject_descriptor_,
      DetectedStationaryObject::default_instance_,
      DetectedStationaryObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedStationaryObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(DetectedStationaryObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedStationaryObject, _internal_metadata_),
      -1);
  DetectedStationaryObject_CandidateStationaryObject_descriptor_ = DetectedStationaryObject_descriptor_->nested_type(0);
  static const int DetectedStationaryObject_CandidateStationaryObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedStationaryObject_CandidateStationaryObject, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedStationaryObject_CandidateStationaryObject, classification_),
  };
  DetectedStationaryObject_CandidateStationaryObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectedStationaryObject_CandidateStationaryObject_descriptor_,
      DetectedStationaryObject_CandidateStationaryObject::default_instance_,
      DetectedStationaryObject_CandidateStationaryObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedStationaryObject_CandidateStationaryObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(DetectedStationaryObject_CandidateStationaryObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedStationaryObject_CandidateStationaryObject, _internal_metadata_),
      -1);
  DetectedMovingObject_descriptor_ = file->message_type(2);
  static const int DetectedMovingObject_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, base_rmse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, reference_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, movement_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, percentage_side_lane_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, percentage_side_lane_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, candidate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, radar_specifics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, lidar_specifics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, camera_specifics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, ultrasonic_specifics_),
  };
  DetectedMovingObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectedMovingObject_descriptor_,
      DetectedMovingObject::default_instance_,
      DetectedMovingObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(DetectedMovingObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject, _internal_metadata_),
      -1);
  DetectedMovingObject_CandidateMovingObject_descriptor_ = DetectedMovingObject_descriptor_->nested_type(0);
  static const int DetectedMovingObject_CandidateMovingObject_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject_CandidateMovingObject, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject_CandidateMovingObject, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject_CandidateMovingObject, vehicle_classification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject_CandidateMovingObject, head_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject_CandidateMovingObject, upper_body_pose_),
  };
  DetectedMovingObject_CandidateMovingObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectedMovingObject_CandidateMovingObject_descriptor_,
      DetectedMovingObject_CandidateMovingObject::default_instance_,
      DetectedMovingObject_CandidateMovingObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject_CandidateMovingObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(DetectedMovingObject_CandidateMovingObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedMovingObject_CandidateMovingObject, _internal_metadata_),
      -1);
  DetectedMovingObject_ReferencePoint_descriptor_ = DetectedMovingObject_descriptor_->enum_type(0);
  DetectedMovingObject_MovementState_descriptor_ = DetectedMovingObject_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5fdetectedobject_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectedItemHeader_descriptor_, &DetectedItemHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectedStationaryObject_descriptor_, &DetectedStationaryObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectedStationaryObject_CandidateStationaryObject_descriptor_, &DetectedStationaryObject_CandidateStationaryObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectedMovingObject_descriptor_, &DetectedMovingObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectedMovingObject_CandidateMovingObject_descriptor_, &DetectedMovingObject_CandidateMovingObject::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5fdetectedobject_2eproto() {
  delete DetectedItemHeader::default_instance_;
  delete DetectedItemHeader_reflection_;
  delete DetectedStationaryObject::default_instance_;
  delete DetectedStationaryObject_reflection_;
  delete DetectedStationaryObject_CandidateStationaryObject::default_instance_;
  delete DetectedStationaryObject_CandidateStationaryObject_reflection_;
  delete DetectedMovingObject::default_instance_;
  delete DetectedMovingObject_reflection_;
  delete DetectedMovingObject_CandidateMovingObject::default_instance_;
  delete DetectedMovingObject_CandidateMovingObject_reflection_;
}

void protobuf_AddDesc_osi_5fdetectedobject_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5fdetectedobject_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::osi3::protobuf_AddDesc_osi_5fcommon_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fobject_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fsensorspecific_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030osi_detectedobject.proto\022\004osi3\032\020osi_co"
    "mmon.proto\032\020osi_object.proto\032\030osi_sensor"
    "specific.proto\"\217\003\n\022DetectedItemHeader\022%\n"
    "\013tracking_id\030\001 \001(\0132\020.osi3.Identifier\022)\n\017"
    "ground_truth_id\030\002 \003(\0132\020.osi3.Identifier\022"
    "\035\n\025existence_probability\030\003 \001(\001\022\013\n\003age\030\004 "
    "\001(\001\022D\n\021measurement_state\030\005 \001(\0162).osi3.De"
    "tectedItemHeader.MeasurementState\022#\n\tsen"
    "sor_id\030\006 \003(\0132\020.osi3.Identifier\"\217\001\n\020Measu"
    "rementState\022\035\n\031MEASUREMENT_STATE_UNKNOWN"
    "\020\000\022\033\n\027MEASUREMENT_STATE_OTHER\020\001\022\036\n\032MEASU"
    "REMENT_STATE_MEASURED\020\002\022\037\n\033MEASUREMENT_S"
    "TATE_PREDICTED\020\003\"\317\002\n\030DetectedStationaryO"
    "bject\022(\n\006header\030\001 \001(\0132\030.osi3.DetectedIte"
    "mHeader\022\"\n\004base\030\002 \001(\0132\024.osi3.BaseStation"
    "ary\022\'\n\tbase_rmse\030\003 \001(\0132\024.osi3.BaseStatio"
    "nary\022K\n\tcandidate\030\004 \003(\01328.osi3.DetectedS"
    "tationaryObject.CandidateStationaryObjec"
    "t\032o\n\031CandidateStationaryObject\022\023\n\013probab"
    "ility\030\001 \001(\001\022=\n\016classification\030\002 \001(\0132%.os"
    "i3.StationaryObject.Classification\"\204\013\n\024D"
    "etectedMovingObject\022(\n\006header\030\001 \001(\0132\030.os"
    "i3.DetectedItemHeader\022\036\n\004base\030\002 \001(\0132\020.os"
    "i3.BaseMoving\022#\n\tbase_rmse\030\003 \001(\0132\020.osi3."
    "BaseMoving\022B\n\017reference_point\030\004 \001(\0162).os"
    "i3.DetectedMovingObject.ReferencePoint\022@"
    "\n\016movement_state\030\005 \001(\0162(.osi3.DetectedMo"
    "vingObject.MovementState\022!\n\031percentage_s"
    "ide_lane_left\030\006 \001(\001\022\"\n\032percentage_side_l"
    "ane_right\030\007 \001(\001\022C\n\tcandidate\030\010 \003(\01320.osi"
    "3.DetectedMovingObject.CandidateMovingOb"
    "ject\0226\n\017radar_specifics\030d \001(\0132\035.osi3.Rad"
    "arSpecificObjectData\0226\n\017lidar_specifics\030"
    "e \001(\0132\035.osi3.LidarSpecificObjectData\0228\n\020"
    "camera_specifics\030f \001(\0132\036.osi3.CameraSpec"
    "ificObjectData\022@\n\024ultrasonic_specifics\030g"
    " \001(\0132\".osi3.UltrasonicSpecificObjectData"
    "\032\363\001\n\025CandidateMovingObject\022\023\n\013probabilit"
    "y\030\001 \001(\001\022%\n\004type\030\002 \001(\0162\027.osi3.MovingObjec"
    "t.Type\022H\n\026vehicle_classification\030\003 \001(\0132("
    ".osi3.MovingObject.VehicleClassification"
    "\022&\n\thead_pose\030\004 \001(\0132\023.osi3.Orientation3d"
    "\022,\n\017upper_body_pose\030\005 \001(\0132\023.osi3.Orienta"
    "tion3d\"\352\002\n\016ReferencePoint\022\033\n\027REFERENCE_P"
    "OINT_UNKNOWN\020\000\022\031\n\025REFERENCE_POINT_OTHER\020"
    "\001\022\032\n\026REFERENCE_POINT_CENTER\020\002\022\037\n\033REFEREN"
    "CE_POINT_MIDDLE_LEFT\020\003\022 \n\034REFERENCE_POIN"
    "T_MIDDLE_RIGHT\020\004\022\037\n\033REFERENCE_POINT_REAR"
    "_MIDDLE\020\005\022\035\n\031REFERENCE_POINT_REAR_LEFT\020\006"
    "\022\036\n\032REFERENCE_POINT_REAR_RIGHT\020\007\022 \n\034REFE"
    "RENCE_POINT_FRONT_MIDDLE\020\010\022\036\n\032REFERENCE_"
    "POINT_FRONT_LEFT\020\t\022\037\n\033REFERENCE_POINT_FR"
    "ONT_RIGHT\020\n\"\233\001\n\rMovementState\022\032\n\026MOVEMEN"
    "T_STATE_UNKNOWN\020\000\022\030\n\024MOVEMENT_STATE_OTHE"
    "R\020\001\022\035\n\031MOVEMENT_STATE_STATIONARY\020\002\022\031\n\025MO"
    "VEMENT_STATE_MOVING\020\003\022\032\n\026MOVEMENT_STATE_"
    "STOPPED\020\004B\002H\001", 2253);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_detectedobject.proto", &protobuf_RegisterTypes);
  DetectedItemHeader::default_instance_ = new DetectedItemHeader();
  DetectedStationaryObject::default_instance_ = new DetectedStationaryObject();
  DetectedStationaryObject_CandidateStationaryObject::default_instance_ = new DetectedStationaryObject_CandidateStationaryObject();
  DetectedMovingObject::default_instance_ = new DetectedMovingObject();
  DetectedMovingObject_CandidateMovingObject::default_instance_ = new DetectedMovingObject_CandidateMovingObject();
  DetectedItemHeader::default_instance_->InitAsDefaultInstance();
  DetectedStationaryObject::default_instance_->InitAsDefaultInstance();
  DetectedStationaryObject_CandidateStationaryObject::default_instance_->InitAsDefaultInstance();
  DetectedMovingObject::default_instance_->InitAsDefaultInstance();
  DetectedMovingObject_CandidateMovingObject::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5fdetectedobject_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5fdetectedobject_2eproto {
  StaticDescriptorInitializer_osi_5fdetectedobject_2eproto() {
    protobuf_AddDesc_osi_5fdetectedobject_2eproto();
  }
} static_descriptor_initializer_osi_5fdetectedobject_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* DetectedItemHeader_MeasurementState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedItemHeader_MeasurementState_descriptor_;
}
bool DetectedItemHeader_MeasurementState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DetectedItemHeader_MeasurementState DetectedItemHeader::MEASUREMENT_STATE_UNKNOWN;
const DetectedItemHeader_MeasurementState DetectedItemHeader::MEASUREMENT_STATE_OTHER;
const DetectedItemHeader_MeasurementState DetectedItemHeader::MEASUREMENT_STATE_MEASURED;
const DetectedItemHeader_MeasurementState DetectedItemHeader::MEASUREMENT_STATE_PREDICTED;
const DetectedItemHeader_MeasurementState DetectedItemHeader::MeasurementState_MIN;
const DetectedItemHeader_MeasurementState DetectedItemHeader::MeasurementState_MAX;
const int DetectedItemHeader::MeasurementState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedItemHeader::kTrackingIdFieldNumber;
const int DetectedItemHeader::kGroundTruthIdFieldNumber;
const int DetectedItemHeader::kExistenceProbabilityFieldNumber;
const int DetectedItemHeader::kAgeFieldNumber;
const int DetectedItemHeader::kMeasurementStateFieldNumber;
const int DetectedItemHeader::kSensorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedItemHeader::DetectedItemHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedItemHeader)
}

void DetectedItemHeader::InitAsDefaultInstance() {
  tracking_id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
}

DetectedItemHeader::DetectedItemHeader(const DetectedItemHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedItemHeader)
}

void DetectedItemHeader::SharedCtor() {
  _cached_size_ = 0;
  tracking_id_ = NULL;
  existence_probability_ = 0;
  age_ = 0;
  measurement_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedItemHeader::~DetectedItemHeader() {
  // @@protoc_insertion_point(destructor:osi3.DetectedItemHeader)
  SharedDtor();
}

void DetectedItemHeader::SharedDtor() {
  if (this != default_instance_) {
    delete tracking_id_;
  }
}

void DetectedItemHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedItemHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedItemHeader_descriptor_;
}

const DetectedItemHeader& DetectedItemHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fdetectedobject_2eproto();
  return *default_instance_;
}

DetectedItemHeader* DetectedItemHeader::default_instance_ = NULL;

DetectedItemHeader* DetectedItemHeader::New(::google::protobuf::Arena* arena) const {
  DetectedItemHeader* n = new DetectedItemHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedItemHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedItemHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DetectedItemHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DetectedItemHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 29u) {
    ZR_(existence_probability_, age_);
    if (has_tracking_id()) {
      if (tracking_id_ != NULL) tracking_id_->::osi3::Identifier::Clear();
    }
    measurement_state_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ground_truth_id_.Clear();
  sensor_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DetectedItemHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedItemHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Identifier tracking_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tracking_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ground_truth_id;
        break;
      }

      // repeated .osi3.Identifier ground_truth_id = 2;
      case 2: {
        if (tag == 18) {
         parse_ground_truth_id:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ground_truth_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ground_truth_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_ground_truth_id;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(25)) goto parse_existence_probability;
        break;
      }

      // optional double existence_probability = 3;
      case 3: {
        if (tag == 25) {
         parse_existence_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
          set_has_existence_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_age;
        break;
      }

      // optional double age = 4;
      case 4: {
        if (tag == 33) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_measurement_state;
        break;
      }

      // optional .osi3.DetectedItemHeader.MeasurementState measurement_state = 5;
      case 5: {
        if (tag == 40) {
         parse_measurement_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::DetectedItemHeader_MeasurementState_IsValid(value)) {
            set_measurement_state(static_cast< ::osi3::DetectedItemHeader_MeasurementState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sensor_id;
        break;
      }

      // repeated .osi3.Identifier sensor_id = 6;
      case 6: {
        if (tag == 50) {
         parse_sensor_id:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sensor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_sensor_id;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedItemHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedItemHeader)
  return false;
#undef DO_
}

void DetectedItemHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedItemHeader)
  // optional .osi3.Identifier tracking_id = 1;
  if (has_tracking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tracking_id_, output);
  }

  // repeated .osi3.Identifier ground_truth_id = 2;
  for (unsigned int i = 0, n = this->ground_truth_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ground_truth_id(i), output);
  }

  // optional double existence_probability = 3;
  if (has_existence_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->existence_probability(), output);
  }

  // optional double age = 4;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->age(), output);
  }

  // optional .osi3.DetectedItemHeader.MeasurementState measurement_state = 5;
  if (has_measurement_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->measurement_state(), output);
  }

  // repeated .osi3.Identifier sensor_id = 6;
  for (unsigned int i = 0, n = this->sensor_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sensor_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedItemHeader)
}

::google::protobuf::uint8* DetectedItemHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedItemHeader)
  // optional .osi3.Identifier tracking_id = 1;
  if (has_tracking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tracking_id_, false, target);
  }

  // repeated .osi3.Identifier ground_truth_id = 2;
  for (unsigned int i = 0, n = this->ground_truth_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->ground_truth_id(i), false, target);
  }

  // optional double existence_probability = 3;
  if (has_existence_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->existence_probability(), target);
  }

  // optional double age = 4;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->age(), target);
  }

  // optional .osi3.DetectedItemHeader.MeasurementState measurement_state = 5;
  if (has_measurement_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->measurement_state(), target);
  }

  // repeated .osi3.Identifier sensor_id = 6;
  for (unsigned int i = 0, n = this->sensor_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->sensor_id(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedItemHeader)
  return target;
}

int DetectedItemHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedItemHeader)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 29u) {
    // optional .osi3.Identifier tracking_id = 1;
    if (has_tracking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tracking_id_);
    }

    // optional double existence_probability = 3;
    if (has_existence_probability()) {
      total_size += 1 + 8;
    }

    // optional double age = 4;
    if (has_age()) {
      total_size += 1 + 8;
    }

    // optional .osi3.DetectedItemHeader.MeasurementState measurement_state = 5;
    if (has_measurement_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->measurement_state());
    }

  }
  // repeated .osi3.Identifier ground_truth_id = 2;
  total_size += 1 * this->ground_truth_id_size();
  for (int i = 0; i < this->ground_truth_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ground_truth_id(i));
  }

  // repeated .osi3.Identifier sensor_id = 6;
  total_size += 1 * this->sensor_id_size();
  for (int i = 0; i < this->sensor_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensor_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedItemHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedItemHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectedItemHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedItemHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedItemHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedItemHeader)
    MergeFrom(*source);
  }
}

void DetectedItemHeader::MergeFrom(const DetectedItemHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedItemHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ground_truth_id_.MergeFrom(from.ground_truth_id_);
  sensor_id_.MergeFrom(from.sensor_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tracking_id()) {
      mutable_tracking_id()->::osi3::Identifier::MergeFrom(from.tracking_id());
    }
    if (from.has_existence_probability()) {
      set_existence_probability(from.existence_probability());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_measurement_state()) {
      set_measurement_state(from.measurement_state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DetectedItemHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedItemHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedItemHeader::CopyFrom(const DetectedItemHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedItemHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedItemHeader::IsInitialized() const {

  return true;
}

void DetectedItemHeader::Swap(DetectedItemHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedItemHeader::InternalSwap(DetectedItemHeader* other) {
  std::swap(tracking_id_, other->tracking_id_);
  ground_truth_id_.UnsafeArenaSwap(&other->ground_truth_id_);
  std::swap(existence_probability_, other->existence_probability_);
  std::swap(age_, other->age_);
  std::swap(measurement_state_, other->measurement_state_);
  sensor_id_.UnsafeArenaSwap(&other->sensor_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedItemHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedItemHeader_descriptor_;
  metadata.reflection = DetectedItemHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectedItemHeader

// optional .osi3.Identifier tracking_id = 1;
bool DetectedItemHeader::has_tracking_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectedItemHeader::set_has_tracking_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectedItemHeader::clear_has_tracking_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedItemHeader::clear_tracking_id() {
  if (tracking_id_ != NULL) tracking_id_->::osi3::Identifier::Clear();
  clear_has_tracking_id();
}
const ::osi3::Identifier& DetectedItemHeader::tracking_id() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedItemHeader.tracking_id)
  return tracking_id_ != NULL ? *tracking_id_ : *default_instance_->tracking_id_;
}
::osi3::Identifier* DetectedItemHeader::mutable_tracking_id() {
  set_has_tracking_id();
  if (tracking_id_ == NULL) {
    tracking_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedItemHeader.tracking_id)
  return tracking_id_;
}
::osi3::Identifier* DetectedItemHeader::release_tracking_id() {
  // @@protoc_insertion_point(field_release:osi3.DetectedItemHeader.tracking_id)
  clear_has_tracking_id();
  ::osi3::Identifier* temp = tracking_id_;
  tracking_id_ = NULL;
  return temp;
}
void DetectedItemHeader::set_allocated_tracking_id(::osi3::Identifier* tracking_id) {
  delete tracking_id_;
  tracking_id_ = tracking_id;
  if (tracking_id) {
    set_has_tracking_id();
  } else {
    clear_has_tracking_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedItemHeader.tracking_id)
}

// repeated .osi3.Identifier ground_truth_id = 2;
int DetectedItemHeader::ground_truth_id_size() const {
  return ground_truth_id_.size();
}
void DetectedItemHeader::clear_ground_truth_id() {
  ground_truth_id_.Clear();
}
const ::osi3::Identifier& DetectedItemHeader::ground_truth_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedItemHeader.ground_truth_id)
  return ground_truth_id_.Get(index);
}
::osi3::Identifier* DetectedItemHeader::mutable_ground_truth_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedItemHeader.ground_truth_id)
  return ground_truth_id_.Mutable(index);
}
::osi3::Identifier* DetectedItemHeader::add_ground_truth_id() {
  // @@protoc_insertion_point(field_add:osi3.DetectedItemHeader.ground_truth_id)
  return ground_truth_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
DetectedItemHeader::mutable_ground_truth_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedItemHeader.ground_truth_id)
  return &ground_truth_id_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
DetectedItemHeader::ground_truth_id() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedItemHeader.ground_truth_id)
  return ground_truth_id_;
}

// optional double existence_probability = 3;
bool DetectedItemHeader::has_existence_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DetectedItemHeader::set_has_existence_probability() {
  _has_bits_[0] |= 0x00000004u;
}
void DetectedItemHeader::clear_has_existence_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
void DetectedItemHeader::clear_existence_probability() {
  existence_probability_ = 0;
  clear_has_existence_probability();
}
 double DetectedItemHeader::existence_probability() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedItemHeader.existence_probability)
  return existence_probability_;
}
 void DetectedItemHeader::set_existence_probability(double value) {
  set_has_existence_probability();
  existence_probability_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedItemHeader.existence_probability)
}

// optional double age = 4;
bool DetectedItemHeader::has_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DetectedItemHeader::set_has_age() {
  _has_bits_[0] |= 0x00000008u;
}
void DetectedItemHeader::clear_has_age() {
  _has_bits_[0] &= ~0x00000008u;
}
void DetectedItemHeader::clear_age() {
  age_ = 0;
  clear_has_age();
}
 double DetectedItemHeader::age() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedItemHeader.age)
  return age_;
}
 void DetectedItemHeader::set_age(double value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedItemHeader.age)
}

// optional .osi3.DetectedItemHeader.MeasurementState measurement_state = 5;
bool DetectedItemHeader::has_measurement_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DetectedItemHeader::set_has_measurement_state() {
  _has_bits_[0] |= 0x00000010u;
}
void DetectedItemHeader::clear_has_measurement_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void DetectedItemHeader::clear_measurement_state() {
  measurement_state_ = 0;
  clear_has_measurement_state();
}
 ::osi3::DetectedItemHeader_MeasurementState DetectedItemHeader::measurement_state() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedItemHeader.measurement_state)
  return static_cast< ::osi3::DetectedItemHeader_MeasurementState >(measurement_state_);
}
 void DetectedItemHeader::set_measurement_state(::osi3::DetectedItemHeader_MeasurementState value) {
  assert(::osi3::DetectedItemHeader_MeasurementState_IsValid(value));
  set_has_measurement_state();
  measurement_state_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedItemHeader.measurement_state)
}

// repeated .osi3.Identifier sensor_id = 6;
int DetectedItemHeader::sensor_id_size() const {
  return sensor_id_.size();
}
void DetectedItemHeader::clear_sensor_id() {
  sensor_id_.Clear();
}
const ::osi3::Identifier& DetectedItemHeader::sensor_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedItemHeader.sensor_id)
  return sensor_id_.Get(index);
}
::osi3::Identifier* DetectedItemHeader::mutable_sensor_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedItemHeader.sensor_id)
  return sensor_id_.Mutable(index);
}
::osi3::Identifier* DetectedItemHeader::add_sensor_id() {
  // @@protoc_insertion_point(field_add:osi3.DetectedItemHeader.sensor_id)
  return sensor_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
DetectedItemHeader::mutable_sensor_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedItemHeader.sensor_id)
  return &sensor_id_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
DetectedItemHeader::sensor_id() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedItemHeader.sensor_id)
  return sensor_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedStationaryObject_CandidateStationaryObject::kProbabilityFieldNumber;
const int DetectedStationaryObject_CandidateStationaryObject::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedStationaryObject_CandidateStationaryObject::DetectedStationaryObject_CandidateStationaryObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedStationaryObject.CandidateStationaryObject)
}

void DetectedStationaryObject_CandidateStationaryObject::InitAsDefaultInstance() {
  classification_ = const_cast< ::osi3::StationaryObject_Classification*>(&::osi3::StationaryObject_Classification::default_instance());
}

DetectedStationaryObject_CandidateStationaryObject::DetectedStationaryObject_CandidateStationaryObject(const DetectedStationaryObject_CandidateStationaryObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedStationaryObject.CandidateStationaryObject)
}

void DetectedStationaryObject_CandidateStationaryObject::SharedCtor() {
  _cached_size_ = 0;
  probability_ = 0;
  classification_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedStationaryObject_CandidateStationaryObject::~DetectedStationaryObject_CandidateStationaryObject() {
  // @@protoc_insertion_point(destructor:osi3.DetectedStationaryObject.CandidateStationaryObject)
  SharedDtor();
}

void DetectedStationaryObject_CandidateStationaryObject::SharedDtor() {
  if (this != default_instance_) {
    delete classification_;
  }
}

void DetectedStationaryObject_CandidateStationaryObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedStationaryObject_CandidateStationaryObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedStationaryObject_CandidateStationaryObject_descriptor_;
}

const DetectedStationaryObject_CandidateStationaryObject& DetectedStationaryObject_CandidateStationaryObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fdetectedobject_2eproto();
  return *default_instance_;
}

DetectedStationaryObject_CandidateStationaryObject* DetectedStationaryObject_CandidateStationaryObject::default_instance_ = NULL;

DetectedStationaryObject_CandidateStationaryObject* DetectedStationaryObject_CandidateStationaryObject::New(::google::protobuf::Arena* arena) const {
  DetectedStationaryObject_CandidateStationaryObject* n = new DetectedStationaryObject_CandidateStationaryObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedStationaryObject_CandidateStationaryObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  if (_has_bits_[0 / 32] & 3u) {
    probability_ = 0;
    if (has_classification()) {
      if (classification_ != NULL) classification_->::osi3::StationaryObject_Classification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DetectedStationaryObject_CandidateStationaryObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_classification;
        break;
      }

      // optional .osi3.StationaryObject.Classification classification = 2;
      case 2: {
        if (tag == 18) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedStationaryObject.CandidateStationaryObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedStationaryObject.CandidateStationaryObject)
  return false;
#undef DO_
}

void DetectedStationaryObject_CandidateStationaryObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  // optional double probability = 1;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // optional .osi3.StationaryObject.Classification classification = 2;
  if (has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classification_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedStationaryObject.CandidateStationaryObject)
}

::google::protobuf::uint8* DetectedStationaryObject_CandidateStationaryObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  // optional double probability = 1;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // optional .osi3.StationaryObject.Classification classification = 2;
  if (has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->classification_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedStationaryObject.CandidateStationaryObject)
  return target;
}

int DetectedStationaryObject_CandidateStationaryObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double probability = 1;
    if (has_probability()) {
      total_size += 1 + 8;
    }

    // optional .osi3.StationaryObject.Classification classification = 2;
    if (has_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->classification_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedStationaryObject_CandidateStationaryObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectedStationaryObject_CandidateStationaryObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedStationaryObject_CandidateStationaryObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedStationaryObject.CandidateStationaryObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedStationaryObject.CandidateStationaryObject)
    MergeFrom(*source);
  }
}

void DetectedStationaryObject_CandidateStationaryObject::MergeFrom(const DetectedStationaryObject_CandidateStationaryObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_classification()) {
      mutable_classification()->::osi3::StationaryObject_Classification::MergeFrom(from.classification());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DetectedStationaryObject_CandidateStationaryObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedStationaryObject_CandidateStationaryObject::CopyFrom(const DetectedStationaryObject_CandidateStationaryObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedStationaryObject_CandidateStationaryObject::IsInitialized() const {

  return true;
}

void DetectedStationaryObject_CandidateStationaryObject::Swap(DetectedStationaryObject_CandidateStationaryObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedStationaryObject_CandidateStationaryObject::InternalSwap(DetectedStationaryObject_CandidateStationaryObject* other) {
  std::swap(probability_, other->probability_);
  std::swap(classification_, other->classification_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedStationaryObject_CandidateStationaryObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedStationaryObject_CandidateStationaryObject_descriptor_;
  metadata.reflection = DetectedStationaryObject_CandidateStationaryObject_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedStationaryObject::kHeaderFieldNumber;
const int DetectedStationaryObject::kBaseFieldNumber;
const int DetectedStationaryObject::kBaseRmseFieldNumber;
const int DetectedStationaryObject::kCandidateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedStationaryObject::DetectedStationaryObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedStationaryObject)
}

void DetectedStationaryObject::InitAsDefaultInstance() {
  header_ = const_cast< ::osi3::DetectedItemHeader*>(&::osi3::DetectedItemHeader::default_instance());
  base_ = const_cast< ::osi3::BaseStationary*>(&::osi3::BaseStationary::default_instance());
  base_rmse_ = const_cast< ::osi3::BaseStationary*>(&::osi3::BaseStationary::default_instance());
}

DetectedStationaryObject::DetectedStationaryObject(const DetectedStationaryObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedStationaryObject)
}

void DetectedStationaryObject::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  base_ = NULL;
  base_rmse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedStationaryObject::~DetectedStationaryObject() {
  // @@protoc_insertion_point(destructor:osi3.DetectedStationaryObject)
  SharedDtor();
}

void DetectedStationaryObject::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete base_;
    delete base_rmse_;
  }
}

void DetectedStationaryObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedStationaryObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedStationaryObject_descriptor_;
}

const DetectedStationaryObject& DetectedStationaryObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fdetectedobject_2eproto();
  return *default_instance_;
}

DetectedStationaryObject* DetectedStationaryObject::default_instance_ = NULL;

DetectedStationaryObject* DetectedStationaryObject::New(::google::protobuf::Arena* arena) const {
  DetectedStationaryObject* n = new DetectedStationaryObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedStationaryObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedStationaryObject)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      if (header_ != NULL) header_->::osi3::DetectedItemHeader::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
    }
    if (has_base_rmse()) {
      if (base_rmse_ != NULL) base_rmse_->::osi3::BaseStationary::Clear();
    }
  }
  candidate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DetectedStationaryObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedStationaryObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.DetectedItemHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .osi3.BaseStationary base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_base_rmse;
        break;
      }

      // optional .osi3.BaseStationary base_rmse = 3;
      case 3: {
        if (tag == 26) {
         parse_base_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_candidate;
        break;
      }

      // repeated .osi3.DetectedStationaryObject.CandidateStationaryObject candidate = 4;
      case 4: {
        if (tag == 34) {
         parse_candidate:
          DO_(input->IncrementRecursionDepth());
         parse_loop_candidate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_candidate;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedStationaryObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedStationaryObject)
  return false;
#undef DO_
}

void DetectedStationaryObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedStationaryObject)
  // optional .osi3.DetectedItemHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .osi3.BaseStationary base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // optional .osi3.BaseStationary base_rmse = 3;
  if (has_base_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->base_rmse_, output);
  }

  // repeated .osi3.DetectedStationaryObject.CandidateStationaryObject candidate = 4;
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->candidate(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedStationaryObject)
}

::google::protobuf::uint8* DetectedStationaryObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedStationaryObject)
  // optional .osi3.DetectedItemHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .osi3.BaseStationary base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->base_, false, target);
  }

  // optional .osi3.BaseStationary base_rmse = 3;
  if (has_base_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->base_rmse_, false, target);
  }

  // repeated .osi3.DetectedStationaryObject.CandidateStationaryObject candidate = 4;
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->candidate(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedStationaryObject)
  return target;
}

int DetectedStationaryObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedStationaryObject)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .osi3.DetectedItemHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .osi3.BaseStationary base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_);
    }

    // optional .osi3.BaseStationary base_rmse = 3;
    if (has_base_rmse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_rmse_);
    }

  }
  // repeated .osi3.DetectedStationaryObject.CandidateStationaryObject candidate = 4;
  total_size += 1 * this->candidate_size();
  for (int i = 0; i < this->candidate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->candidate(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedStationaryObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedStationaryObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectedStationaryObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedStationaryObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedStationaryObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedStationaryObject)
    MergeFrom(*source);
  }
}

void DetectedStationaryObject::MergeFrom(const DetectedStationaryObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedStationaryObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  candidate_.MergeFrom(from.candidate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from.header());
    }
    if (from.has_base()) {
      mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
    }
    if (from.has_base_rmse()) {
      mutable_base_rmse()->::osi3::BaseStationary::MergeFrom(from.base_rmse());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DetectedStationaryObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedStationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedStationaryObject::CopyFrom(const DetectedStationaryObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedStationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedStationaryObject::IsInitialized() const {

  return true;
}

void DetectedStationaryObject::Swap(DetectedStationaryObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedStationaryObject::InternalSwap(DetectedStationaryObject* other) {
  std::swap(header_, other->header_);
  std::swap(base_, other->base_);
  std::swap(base_rmse_, other->base_rmse_);
  candidate_.UnsafeArenaSwap(&other->candidate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedStationaryObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedStationaryObject_descriptor_;
  metadata.reflection = DetectedStationaryObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectedStationaryObject_CandidateStationaryObject

// optional double probability = 1;
bool DetectedStationaryObject_CandidateStationaryObject::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectedStationaryObject_CandidateStationaryObject::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectedStationaryObject_CandidateStationaryObject::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedStationaryObject_CandidateStationaryObject::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
 double DetectedStationaryObject_CandidateStationaryObject::probability() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedStationaryObject.CandidateStationaryObject.probability)
  return probability_;
}
 void DetectedStationaryObject_CandidateStationaryObject::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedStationaryObject.CandidateStationaryObject.probability)
}

// optional .osi3.StationaryObject.Classification classification = 2;
bool DetectedStationaryObject_CandidateStationaryObject::has_classification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectedStationaryObject_CandidateStationaryObject::set_has_classification() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectedStationaryObject_CandidateStationaryObject::clear_has_classification() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectedStationaryObject_CandidateStationaryObject::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::StationaryObject_Classification::Clear();
  clear_has_classification();
}
const ::osi3::StationaryObject_Classification& DetectedStationaryObject_CandidateStationaryObject::classification() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedStationaryObject.CandidateStationaryObject.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
::osi3::StationaryObject_Classification* DetectedStationaryObject_CandidateStationaryObject::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::StationaryObject_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedStationaryObject.CandidateStationaryObject.classification)
  return classification_;
}
::osi3::StationaryObject_Classification* DetectedStationaryObject_CandidateStationaryObject::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.DetectedStationaryObject.CandidateStationaryObject.classification)
  clear_has_classification();
  ::osi3::StationaryObject_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
void DetectedStationaryObject_CandidateStationaryObject::set_allocated_classification(::osi3::StationaryObject_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedStationaryObject.CandidateStationaryObject.classification)
}

// -------------------------------------------------------------------

// DetectedStationaryObject

// optional .osi3.DetectedItemHeader header = 1;
bool DetectedStationaryObject::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectedStationaryObject::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectedStationaryObject::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedStationaryObject::clear_header() {
  if (header_ != NULL) header_->::osi3::DetectedItemHeader::Clear();
  clear_has_header();
}
const ::osi3::DetectedItemHeader& DetectedStationaryObject::header() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedStationaryObject.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::osi3::DetectedItemHeader* DetectedStationaryObject::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::osi3::DetectedItemHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedStationaryObject.header)
  return header_;
}
::osi3::DetectedItemHeader* DetectedStationaryObject::release_header() {
  // @@protoc_insertion_point(field_release:osi3.DetectedStationaryObject.header)
  clear_has_header();
  ::osi3::DetectedItemHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DetectedStationaryObject::set_allocated_header(::osi3::DetectedItemHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedStationaryObject.header)
}

// optional .osi3.BaseStationary base = 2;
bool DetectedStationaryObject::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectedStationaryObject::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectedStationaryObject::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectedStationaryObject::clear_base() {
  if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
  clear_has_base();
}
const ::osi3::BaseStationary& DetectedStationaryObject::base() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedStationaryObject.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::osi3::BaseStationary* DetectedStationaryObject::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::osi3::BaseStationary;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedStationaryObject.base)
  return base_;
}
::osi3::BaseStationary* DetectedStationaryObject::release_base() {
  // @@protoc_insertion_point(field_release:osi3.DetectedStationaryObject.base)
  clear_has_base();
  ::osi3::BaseStationary* temp = base_;
  base_ = NULL;
  return temp;
}
void DetectedStationaryObject::set_allocated_base(::osi3::BaseStationary* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedStationaryObject.base)
}

// optional .osi3.BaseStationary base_rmse = 3;
bool DetectedStationaryObject::has_base_rmse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DetectedStationaryObject::set_has_base_rmse() {
  _has_bits_[0] |= 0x00000004u;
}
void DetectedStationaryObject::clear_has_base_rmse() {
  _has_bits_[0] &= ~0x00000004u;
}
void DetectedStationaryObject::clear_base_rmse() {
  if (base_rmse_ != NULL) base_rmse_->::osi3::BaseStationary::Clear();
  clear_has_base_rmse();
}
const ::osi3::BaseStationary& DetectedStationaryObject::base_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedStationaryObject.base_rmse)
  return base_rmse_ != NULL ? *base_rmse_ : *default_instance_->base_rmse_;
}
::osi3::BaseStationary* DetectedStationaryObject::mutable_base_rmse() {
  set_has_base_rmse();
  if (base_rmse_ == NULL) {
    base_rmse_ = new ::osi3::BaseStationary;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedStationaryObject.base_rmse)
  return base_rmse_;
}
::osi3::BaseStationary* DetectedStationaryObject::release_base_rmse() {
  // @@protoc_insertion_point(field_release:osi3.DetectedStationaryObject.base_rmse)
  clear_has_base_rmse();
  ::osi3::BaseStationary* temp = base_rmse_;
  base_rmse_ = NULL;
  return temp;
}
void DetectedStationaryObject::set_allocated_base_rmse(::osi3::BaseStationary* base_rmse) {
  delete base_rmse_;
  base_rmse_ = base_rmse;
  if (base_rmse) {
    set_has_base_rmse();
  } else {
    clear_has_base_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedStationaryObject.base_rmse)
}

// repeated .osi3.DetectedStationaryObject.CandidateStationaryObject candidate = 4;
int DetectedStationaryObject::candidate_size() const {
  return candidate_.size();
}
void DetectedStationaryObject::clear_candidate() {
  candidate_.Clear();
}
const ::osi3::DetectedStationaryObject_CandidateStationaryObject& DetectedStationaryObject::candidate(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedStationaryObject.candidate)
  return candidate_.Get(index);
}
::osi3::DetectedStationaryObject_CandidateStationaryObject* DetectedStationaryObject::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedStationaryObject.candidate)
  return candidate_.Mutable(index);
}
::osi3::DetectedStationaryObject_CandidateStationaryObject* DetectedStationaryObject::add_candidate() {
  // @@protoc_insertion_point(field_add:osi3.DetectedStationaryObject.candidate)
  return candidate_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::DetectedStationaryObject_CandidateStationaryObject >*
DetectedStationaryObject::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedStationaryObject.candidate)
  return &candidate_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedStationaryObject_CandidateStationaryObject >&
DetectedStationaryObject::candidate() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedStationaryObject.candidate)
  return candidate_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DetectedMovingObject_ReferencePoint_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedMovingObject_ReferencePoint_descriptor_;
}
bool DetectedMovingObject_ReferencePoint_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_UNKNOWN;
const DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_OTHER;
const DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_CENTER;
const DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_MIDDLE_LEFT;
const DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_MIDDLE_RIGHT;
const DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_REAR_MIDDLE;
const DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_REAR_LEFT;
const DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_REAR_RIGHT;
const DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_FRONT_MIDDLE;
const DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_FRONT_LEFT;
const DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_FRONT_RIGHT;
const DetectedMovingObject_ReferencePoint DetectedMovingObject::ReferencePoint_MIN;
const DetectedMovingObject_ReferencePoint DetectedMovingObject::ReferencePoint_MAX;
const int DetectedMovingObject::ReferencePoint_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DetectedMovingObject_MovementState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedMovingObject_MovementState_descriptor_;
}
bool DetectedMovingObject_MovementState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_UNKNOWN;
const DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_OTHER;
const DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_STATIONARY;
const DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_MOVING;
const DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_STOPPED;
const DetectedMovingObject_MovementState DetectedMovingObject::MovementState_MIN;
const DetectedMovingObject_MovementState DetectedMovingObject::MovementState_MAX;
const int DetectedMovingObject::MovementState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedMovingObject_CandidateMovingObject::kProbabilityFieldNumber;
const int DetectedMovingObject_CandidateMovingObject::kTypeFieldNumber;
const int DetectedMovingObject_CandidateMovingObject::kVehicleClassificationFieldNumber;
const int DetectedMovingObject_CandidateMovingObject::kHeadPoseFieldNumber;
const int DetectedMovingObject_CandidateMovingObject::kUpperBodyPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedMovingObject_CandidateMovingObject::DetectedMovingObject_CandidateMovingObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedMovingObject.CandidateMovingObject)
}

void DetectedMovingObject_CandidateMovingObject::InitAsDefaultInstance() {
  vehicle_classification_ = const_cast< ::osi3::MovingObject_VehicleClassification*>(&::osi3::MovingObject_VehicleClassification::default_instance());
  head_pose_ = const_cast< ::osi3::Orientation3d*>(&::osi3::Orientation3d::default_instance());
  upper_body_pose_ = const_cast< ::osi3::Orientation3d*>(&::osi3::Orientation3d::default_instance());
}

DetectedMovingObject_CandidateMovingObject::DetectedMovingObject_CandidateMovingObject(const DetectedMovingObject_CandidateMovingObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedMovingObject.CandidateMovingObject)
}

void DetectedMovingObject_CandidateMovingObject::SharedCtor() {
  _cached_size_ = 0;
  probability_ = 0;
  type_ = 0;
  vehicle_classification_ = NULL;
  head_pose_ = NULL;
  upper_body_pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedMovingObject_CandidateMovingObject::~DetectedMovingObject_CandidateMovingObject() {
  // @@protoc_insertion_point(destructor:osi3.DetectedMovingObject.CandidateMovingObject)
  SharedDtor();
}

void DetectedMovingObject_CandidateMovingObject::SharedDtor() {
  if (this != default_instance_) {
    delete vehicle_classification_;
    delete head_pose_;
    delete upper_body_pose_;
  }
}

void DetectedMovingObject_CandidateMovingObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedMovingObject_CandidateMovingObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedMovingObject_CandidateMovingObject_descriptor_;
}

const DetectedMovingObject_CandidateMovingObject& DetectedMovingObject_CandidateMovingObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fdetectedobject_2eproto();
  return *default_instance_;
}

DetectedMovingObject_CandidateMovingObject* DetectedMovingObject_CandidateMovingObject::default_instance_ = NULL;

DetectedMovingObject_CandidateMovingObject* DetectedMovingObject_CandidateMovingObject::New(::google::protobuf::Arena* arena) const {
  DetectedMovingObject_CandidateMovingObject* n = new DetectedMovingObject_CandidateMovingObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedMovingObject_CandidateMovingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedMovingObject.CandidateMovingObject)
  if (_has_bits_[0 / 32] & 31u) {
    probability_ = 0;
    type_ = 0;
    if (has_vehicle_classification()) {
      if (vehicle_classification_ != NULL) vehicle_classification_->::osi3::MovingObject_VehicleClassification::Clear();
    }
    if (has_head_pose()) {
      if (head_pose_ != NULL) head_pose_->::osi3::Orientation3d::Clear();
    }
    if (has_upper_body_pose()) {
      if (upper_body_pose_ != NULL) upper_body_pose_->::osi3::Orientation3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DetectedMovingObject_CandidateMovingObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedMovingObject.CandidateMovingObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .osi3.MovingObject.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::MovingObject_Type_IsValid(value)) {
            set_type(static_cast< ::osi3::MovingObject_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vehicle_classification;
        break;
      }

      // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 3;
      case 3: {
        if (tag == 26) {
         parse_vehicle_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_classification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_head_pose;
        break;
      }

      // optional .osi3.Orientation3d head_pose = 4;
      case 4: {
        if (tag == 34) {
         parse_head_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_upper_body_pose;
        break;
      }

      // optional .osi3.Orientation3d upper_body_pose = 5;
      case 5: {
        if (tag == 42) {
         parse_upper_body_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upper_body_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedMovingObject.CandidateMovingObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedMovingObject.CandidateMovingObject)
  return false;
#undef DO_
}

void DetectedMovingObject_CandidateMovingObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedMovingObject.CandidateMovingObject)
  // optional double probability = 1;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // optional .osi3.MovingObject.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 3;
  if (has_vehicle_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->vehicle_classification_, output);
  }

  // optional .osi3.Orientation3d head_pose = 4;
  if (has_head_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->head_pose_, output);
  }

  // optional .osi3.Orientation3d upper_body_pose = 5;
  if (has_upper_body_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->upper_body_pose_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedMovingObject.CandidateMovingObject)
}

::google::protobuf::uint8* DetectedMovingObject_CandidateMovingObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedMovingObject.CandidateMovingObject)
  // optional double probability = 1;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // optional .osi3.MovingObject.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 3;
  if (has_vehicle_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->vehicle_classification_, false, target);
  }

  // optional .osi3.Orientation3d head_pose = 4;
  if (has_head_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->head_pose_, false, target);
  }

  // optional .osi3.Orientation3d upper_body_pose = 5;
  if (has_upper_body_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->upper_body_pose_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedMovingObject.CandidateMovingObject)
  return target;
}

int DetectedMovingObject_CandidateMovingObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedMovingObject.CandidateMovingObject)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional double probability = 1;
    if (has_probability()) {
      total_size += 1 + 8;
    }

    // optional .osi3.MovingObject.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 3;
    if (has_vehicle_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_classification_);
    }

    // optional .osi3.Orientation3d head_pose = 4;
    if (has_head_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->head_pose_);
    }

    // optional .osi3.Orientation3d upper_body_pose = 5;
    if (has_upper_body_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->upper_body_pose_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedMovingObject_CandidateMovingObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedMovingObject.CandidateMovingObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectedMovingObject_CandidateMovingObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedMovingObject_CandidateMovingObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedMovingObject.CandidateMovingObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedMovingObject.CandidateMovingObject)
    MergeFrom(*source);
  }
}

void DetectedMovingObject_CandidateMovingObject::MergeFrom(const DetectedMovingObject_CandidateMovingObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedMovingObject.CandidateMovingObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_vehicle_classification()) {
      mutable_vehicle_classification()->::osi3::MovingObject_VehicleClassification::MergeFrom(from.vehicle_classification());
    }
    if (from.has_head_pose()) {
      mutable_head_pose()->::osi3::Orientation3d::MergeFrom(from.head_pose());
    }
    if (from.has_upper_body_pose()) {
      mutable_upper_body_pose()->::osi3::Orientation3d::MergeFrom(from.upper_body_pose());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DetectedMovingObject_CandidateMovingObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedMovingObject.CandidateMovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedMovingObject_CandidateMovingObject::CopyFrom(const DetectedMovingObject_CandidateMovingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedMovingObject.CandidateMovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedMovingObject_CandidateMovingObject::IsInitialized() const {

  return true;
}

void DetectedMovingObject_CandidateMovingObject::Swap(DetectedMovingObject_CandidateMovingObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedMovingObject_CandidateMovingObject::InternalSwap(DetectedMovingObject_CandidateMovingObject* other) {
  std::swap(probability_, other->probability_);
  std::swap(type_, other->type_);
  std::swap(vehicle_classification_, other->vehicle_classification_);
  std::swap(head_pose_, other->head_pose_);
  std::swap(upper_body_pose_, other->upper_body_pose_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedMovingObject_CandidateMovingObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedMovingObject_CandidateMovingObject_descriptor_;
  metadata.reflection = DetectedMovingObject_CandidateMovingObject_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedMovingObject::kHeaderFieldNumber;
const int DetectedMovingObject::kBaseFieldNumber;
const int DetectedMovingObject::kBaseRmseFieldNumber;
const int DetectedMovingObject::kReferencePointFieldNumber;
const int DetectedMovingObject::kMovementStateFieldNumber;
const int DetectedMovingObject::kPercentageSideLaneLeftFieldNumber;
const int DetectedMovingObject::kPercentageSideLaneRightFieldNumber;
const int DetectedMovingObject::kCandidateFieldNumber;
const int DetectedMovingObject::kRadarSpecificsFieldNumber;
const int DetectedMovingObject::kLidarSpecificsFieldNumber;
const int DetectedMovingObject::kCameraSpecificsFieldNumber;
const int DetectedMovingObject::kUltrasonicSpecificsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedMovingObject::DetectedMovingObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedMovingObject)
}

void DetectedMovingObject::InitAsDefaultInstance() {
  header_ = const_cast< ::osi3::DetectedItemHeader*>(&::osi3::DetectedItemHeader::default_instance());
  base_ = const_cast< ::osi3::BaseMoving*>(&::osi3::BaseMoving::default_instance());
  base_rmse_ = const_cast< ::osi3::BaseMoving*>(&::osi3::BaseMoving::default_instance());
  radar_specifics_ = const_cast< ::osi3::RadarSpecificObjectData*>(&::osi3::RadarSpecificObjectData::default_instance());
  lidar_specifics_ = const_cast< ::osi3::LidarSpecificObjectData*>(&::osi3::LidarSpecificObjectData::default_instance());
  camera_specifics_ = const_cast< ::osi3::CameraSpecificObjectData*>(&::osi3::CameraSpecificObjectData::default_instance());
  ultrasonic_specifics_ = const_cast< ::osi3::UltrasonicSpecificObjectData*>(&::osi3::UltrasonicSpecificObjectData::default_instance());
}

DetectedMovingObject::DetectedMovingObject(const DetectedMovingObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedMovingObject)
}

void DetectedMovingObject::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  base_ = NULL;
  base_rmse_ = NULL;
  reference_point_ = 0;
  movement_state_ = 0;
  percentage_side_lane_left_ = 0;
  percentage_side_lane_right_ = 0;
  radar_specifics_ = NULL;
  lidar_specifics_ = NULL;
  camera_specifics_ = NULL;
  ultrasonic_specifics_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedMovingObject::~DetectedMovingObject() {
  // @@protoc_insertion_point(destructor:osi3.DetectedMovingObject)
  SharedDtor();
}

void DetectedMovingObject::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete base_;
    delete base_rmse_;
    delete radar_specifics_;
    delete lidar_specifics_;
    delete camera_specifics_;
    delete ultrasonic_specifics_;
  }
}

void DetectedMovingObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedMovingObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedMovingObject_descriptor_;
}

const DetectedMovingObject& DetectedMovingObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fdetectedobject_2eproto();
  return *default_instance_;
}

DetectedMovingObject* DetectedMovingObject::default_instance_ = NULL;

DetectedMovingObject* DetectedMovingObject::New(::google::protobuf::Arena* arena) const {
  DetectedMovingObject* n = new DetectedMovingObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedMovingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedMovingObject)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DetectedMovingObject, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DetectedMovingObject*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(reference_point_, percentage_side_lane_right_);
    if (has_header()) {
      if (header_ != NULL) header_->::osi3::DetectedItemHeader::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::osi3::BaseMoving::Clear();
    }
    if (has_base_rmse()) {
      if (base_rmse_ != NULL) base_rmse_->::osi3::BaseMoving::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    if (has_radar_specifics()) {
      if (radar_specifics_ != NULL) radar_specifics_->::osi3::RadarSpecificObjectData::Clear();
    }
    if (has_lidar_specifics()) {
      if (lidar_specifics_ != NULL) lidar_specifics_->::osi3::LidarSpecificObjectData::Clear();
    }
    if (has_camera_specifics()) {
      if (camera_specifics_ != NULL) camera_specifics_->::osi3::CameraSpecificObjectData::Clear();
    }
    if (has_ultrasonic_specifics()) {
      if (ultrasonic_specifics_ != NULL) ultrasonic_specifics_->::osi3::UltrasonicSpecificObjectData::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  candidate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DetectedMovingObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedMovingObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.DetectedItemHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .osi3.BaseMoving base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_base_rmse;
        break;
      }

      // optional .osi3.BaseMoving base_rmse = 3;
      case 3: {
        if (tag == 26) {
         parse_base_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reference_point;
        break;
      }

      // optional .osi3.DetectedMovingObject.ReferencePoint reference_point = 4;
      case 4: {
        if (tag == 32) {
         parse_reference_point:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::DetectedMovingObject_ReferencePoint_IsValid(value)) {
            set_reference_point(static_cast< ::osi3::DetectedMovingObject_ReferencePoint >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_movement_state;
        break;
      }

      // optional .osi3.DetectedMovingObject.MovementState movement_state = 5;
      case 5: {
        if (tag == 40) {
         parse_movement_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::DetectedMovingObject_MovementState_IsValid(value)) {
            set_movement_state(static_cast< ::osi3::DetectedMovingObject_MovementState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_percentage_side_lane_left;
        break;
      }

      // optional double percentage_side_lane_left = 6;
      case 6: {
        if (tag == 49) {
         parse_percentage_side_lane_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percentage_side_lane_left_)));
          set_has_percentage_side_lane_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_percentage_side_lane_right;
        break;
      }

      // optional double percentage_side_lane_right = 7;
      case 7: {
        if (tag == 57) {
         parse_percentage_side_lane_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percentage_side_lane_right_)));
          set_has_percentage_side_lane_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_candidate;
        break;
      }

      // repeated .osi3.DetectedMovingObject.CandidateMovingObject candidate = 8;
      case 8: {
        if (tag == 66) {
         parse_candidate:
          DO_(input->IncrementRecursionDepth());
         parse_loop_candidate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_candidate;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(802)) goto parse_radar_specifics;
        break;
      }

      // optional .osi3.RadarSpecificObjectData radar_specifics = 100;
      case 100: {
        if (tag == 802) {
         parse_radar_specifics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radar_specifics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_lidar_specifics;
        break;
      }

      // optional .osi3.LidarSpecificObjectData lidar_specifics = 101;
      case 101: {
        if (tag == 810) {
         parse_lidar_specifics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lidar_specifics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_camera_specifics;
        break;
      }

      // optional .osi3.CameraSpecificObjectData camera_specifics = 102;
      case 102: {
        if (tag == 818) {
         parse_camera_specifics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_specifics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_ultrasonic_specifics;
        break;
      }

      // optional .osi3.UltrasonicSpecificObjectData ultrasonic_specifics = 103;
      case 103: {
        if (tag == 826) {
         parse_ultrasonic_specifics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ultrasonic_specifics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedMovingObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedMovingObject)
  return false;
#undef DO_
}

void DetectedMovingObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedMovingObject)
  // optional .osi3.DetectedItemHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .osi3.BaseMoving base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // optional .osi3.BaseMoving base_rmse = 3;
  if (has_base_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->base_rmse_, output);
  }

  // optional .osi3.DetectedMovingObject.ReferencePoint reference_point = 4;
  if (has_reference_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reference_point(), output);
  }

  // optional .osi3.DetectedMovingObject.MovementState movement_state = 5;
  if (has_movement_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->movement_state(), output);
  }

  // optional double percentage_side_lane_left = 6;
  if (has_percentage_side_lane_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->percentage_side_lane_left(), output);
  }

  // optional double percentage_side_lane_right = 7;
  if (has_percentage_side_lane_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->percentage_side_lane_right(), output);
  }

  // repeated .osi3.DetectedMovingObject.CandidateMovingObject candidate = 8;
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->candidate(i), output);
  }

  // optional .osi3.RadarSpecificObjectData radar_specifics = 100;
  if (has_radar_specifics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->radar_specifics_, output);
  }

  // optional .osi3.LidarSpecificObjectData lidar_specifics = 101;
  if (has_lidar_specifics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->lidar_specifics_, output);
  }

  // optional .osi3.CameraSpecificObjectData camera_specifics = 102;
  if (has_camera_specifics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->camera_specifics_, output);
  }

  // optional .osi3.UltrasonicSpecificObjectData ultrasonic_specifics = 103;
  if (has_ultrasonic_specifics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->ultrasonic_specifics_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedMovingObject)
}

::google::protobuf::uint8* DetectedMovingObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedMovingObject)
  // optional .osi3.DetectedItemHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .osi3.BaseMoving base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->base_, false, target);
  }

  // optional .osi3.BaseMoving base_rmse = 3;
  if (has_base_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->base_rmse_, false, target);
  }

  // optional .osi3.DetectedMovingObject.ReferencePoint reference_point = 4;
  if (has_reference_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reference_point(), target);
  }

  // optional .osi3.DetectedMovingObject.MovementState movement_state = 5;
  if (has_movement_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->movement_state(), target);
  }

  // optional double percentage_side_lane_left = 6;
  if (has_percentage_side_lane_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->percentage_side_lane_left(), target);
  }

  // optional double percentage_side_lane_right = 7;
  if (has_percentage_side_lane_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->percentage_side_lane_right(), target);
  }

  // repeated .osi3.DetectedMovingObject.CandidateMovingObject candidate = 8;
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->candidate(i), false, target);
  }

  // optional .osi3.RadarSpecificObjectData radar_specifics = 100;
  if (has_radar_specifics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->radar_specifics_, false, target);
  }

  // optional .osi3.LidarSpecificObjectData lidar_specifics = 101;
  if (has_lidar_specifics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *this->lidar_specifics_, false, target);
  }

  // optional .osi3.CameraSpecificObjectData camera_specifics = 102;
  if (has_camera_specifics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, *this->camera_specifics_, false, target);
  }

  // optional .osi3.UltrasonicSpecificObjectData ultrasonic_specifics = 103;
  if (has_ultrasonic_specifics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        103, *this->ultrasonic_specifics_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedMovingObject)
  return target;
}

int DetectedMovingObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedMovingObject)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional .osi3.DetectedItemHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .osi3.BaseMoving base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_);
    }

    // optional .osi3.BaseMoving base_rmse = 3;
    if (has_base_rmse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_rmse_);
    }

    // optional .osi3.DetectedMovingObject.ReferencePoint reference_point = 4;
    if (has_reference_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reference_point());
    }

    // optional .osi3.DetectedMovingObject.MovementState movement_state = 5;
    if (has_movement_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->movement_state());
    }

    // optional double percentage_side_lane_left = 6;
    if (has_percentage_side_lane_left()) {
      total_size += 1 + 8;
    }

    // optional double percentage_side_lane_right = 7;
    if (has_percentage_side_lane_right()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .osi3.RadarSpecificObjectData radar_specifics = 100;
    if (has_radar_specifics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->radar_specifics_);
    }

    // optional .osi3.LidarSpecificObjectData lidar_specifics = 101;
    if (has_lidar_specifics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lidar_specifics_);
    }

    // optional .osi3.CameraSpecificObjectData camera_specifics = 102;
    if (has_camera_specifics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->camera_specifics_);
    }

    // optional .osi3.UltrasonicSpecificObjectData ultrasonic_specifics = 103;
    if (has_ultrasonic_specifics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ultrasonic_specifics_);
    }

  }
  // repeated .osi3.DetectedMovingObject.CandidateMovingObject candidate = 8;
  total_size += 1 * this->candidate_size();
  for (int i = 0; i < this->candidate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->candidate(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedMovingObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedMovingObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectedMovingObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedMovingObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedMovingObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedMovingObject)
    MergeFrom(*source);
  }
}

void DetectedMovingObject::MergeFrom(const DetectedMovingObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedMovingObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  candidate_.MergeFrom(from.candidate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from.header());
    }
    if (from.has_base()) {
      mutable_base()->::osi3::BaseMoving::MergeFrom(from.base());
    }
    if (from.has_base_rmse()) {
      mutable_base_rmse()->::osi3::BaseMoving::MergeFrom(from.base_rmse());
    }
    if (from.has_reference_point()) {
      set_reference_point(from.reference_point());
    }
    if (from.has_movement_state()) {
      set_movement_state(from.movement_state());
    }
    if (from.has_percentage_side_lane_left()) {
      set_percentage_side_lane_left(from.percentage_side_lane_left());
    }
    if (from.has_percentage_side_lane_right()) {
      set_percentage_side_lane_right(from.percentage_side_lane_right());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_radar_specifics()) {
      mutable_radar_specifics()->::osi3::RadarSpecificObjectData::MergeFrom(from.radar_specifics());
    }
    if (from.has_lidar_specifics()) {
      mutable_lidar_specifics()->::osi3::LidarSpecificObjectData::MergeFrom(from.lidar_specifics());
    }
    if (from.has_camera_specifics()) {
      mutable_camera_specifics()->::osi3::CameraSpecificObjectData::MergeFrom(from.camera_specifics());
    }
    if (from.has_ultrasonic_specifics()) {
      mutable_ultrasonic_specifics()->::osi3::UltrasonicSpecificObjectData::MergeFrom(from.ultrasonic_specifics());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DetectedMovingObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedMovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedMovingObject::CopyFrom(const DetectedMovingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedMovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedMovingObject::IsInitialized() const {

  return true;
}

void DetectedMovingObject::Swap(DetectedMovingObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedMovingObject::InternalSwap(DetectedMovingObject* other) {
  std::swap(header_, other->header_);
  std::swap(base_, other->base_);
  std::swap(base_rmse_, other->base_rmse_);
  std::swap(reference_point_, other->reference_point_);
  std::swap(movement_state_, other->movement_state_);
  std::swap(percentage_side_lane_left_, other->percentage_side_lane_left_);
  std::swap(percentage_side_lane_right_, other->percentage_side_lane_right_);
  candidate_.UnsafeArenaSwap(&other->candidate_);
  std::swap(radar_specifics_, other->radar_specifics_);
  std::swap(lidar_specifics_, other->lidar_specifics_);
  std::swap(camera_specifics_, other->camera_specifics_);
  std::swap(ultrasonic_specifics_, other->ultrasonic_specifics_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedMovingObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedMovingObject_descriptor_;
  metadata.reflection = DetectedMovingObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectedMovingObject_CandidateMovingObject

// optional double probability = 1;
bool DetectedMovingObject_CandidateMovingObject::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectedMovingObject_CandidateMovingObject::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectedMovingObject_CandidateMovingObject::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedMovingObject_CandidateMovingObject::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
 double DetectedMovingObject_CandidateMovingObject::probability() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.CandidateMovingObject.probability)
  return probability_;
}
 void DetectedMovingObject_CandidateMovingObject::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedMovingObject.CandidateMovingObject.probability)
}

// optional .osi3.MovingObject.Type type = 2;
bool DetectedMovingObject_CandidateMovingObject::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectedMovingObject_CandidateMovingObject::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectedMovingObject_CandidateMovingObject::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectedMovingObject_CandidateMovingObject::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::osi3::MovingObject_Type DetectedMovingObject_CandidateMovingObject::type() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.CandidateMovingObject.type)
  return static_cast< ::osi3::MovingObject_Type >(type_);
}
 void DetectedMovingObject_CandidateMovingObject::set_type(::osi3::MovingObject_Type value) {
  assert(::osi3::MovingObject_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedMovingObject.CandidateMovingObject.type)
}

// optional .osi3.MovingObject.VehicleClassification vehicle_classification = 3;
bool DetectedMovingObject_CandidateMovingObject::has_vehicle_classification() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DetectedMovingObject_CandidateMovingObject::set_has_vehicle_classification() {
  _has_bits_[0] |= 0x00000004u;
}
void DetectedMovingObject_CandidateMovingObject::clear_has_vehicle_classification() {
  _has_bits_[0] &= ~0x00000004u;
}
void DetectedMovingObject_CandidateMovingObject::clear_vehicle_classification() {
  if (vehicle_classification_ != NULL) vehicle_classification_->::osi3::MovingObject_VehicleClassification::Clear();
  clear_has_vehicle_classification();
}
const ::osi3::MovingObject_VehicleClassification& DetectedMovingObject_CandidateMovingObject::vehicle_classification() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.CandidateMovingObject.vehicle_classification)
  return vehicle_classification_ != NULL ? *vehicle_classification_ : *default_instance_->vehicle_classification_;
}
::osi3::MovingObject_VehicleClassification* DetectedMovingObject_CandidateMovingObject::mutable_vehicle_classification() {
  set_has_vehicle_classification();
  if (vehicle_classification_ == NULL) {
    vehicle_classification_ = new ::osi3::MovingObject_VehicleClassification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedMovingObject.CandidateMovingObject.vehicle_classification)
  return vehicle_classification_;
}
::osi3::MovingObject_VehicleClassification* DetectedMovingObject_CandidateMovingObject::release_vehicle_classification() {
  // @@protoc_insertion_point(field_release:osi3.DetectedMovingObject.CandidateMovingObject.vehicle_classification)
  clear_has_vehicle_classification();
  ::osi3::MovingObject_VehicleClassification* temp = vehicle_classification_;
  vehicle_classification_ = NULL;
  return temp;
}
void DetectedMovingObject_CandidateMovingObject::set_allocated_vehicle_classification(::osi3::MovingObject_VehicleClassification* vehicle_classification) {
  delete vehicle_classification_;
  vehicle_classification_ = vehicle_classification;
  if (vehicle_classification) {
    set_has_vehicle_classification();
  } else {
    clear_has_vehicle_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedMovingObject.CandidateMovingObject.vehicle_classification)
}

// optional .osi3.Orientation3d head_pose = 4;
bool DetectedMovingObject_CandidateMovingObject::has_head_pose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DetectedMovingObject_CandidateMovingObject::set_has_head_pose() {
  _has_bits_[0] |= 0x00000008u;
}
void DetectedMovingObject_CandidateMovingObject::clear_has_head_pose() {
  _has_bits_[0] &= ~0x00000008u;
}
void DetectedMovingObject_CandidateMovingObject::clear_head_pose() {
  if (head_pose_ != NULL) head_pose_->::osi3::Orientation3d::Clear();
  clear_has_head_pose();
}
const ::osi3::Orientation3d& DetectedMovingObject_CandidateMovingObject::head_pose() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.CandidateMovingObject.head_pose)
  return head_pose_ != NULL ? *head_pose_ : *default_instance_->head_pose_;
}
::osi3::Orientation3d* DetectedMovingObject_CandidateMovingObject::mutable_head_pose() {
  set_has_head_pose();
  if (head_pose_ == NULL) {
    head_pose_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedMovingObject.CandidateMovingObject.head_pose)
  return head_pose_;
}
::osi3::Orientation3d* DetectedMovingObject_CandidateMovingObject::release_head_pose() {
  // @@protoc_insertion_point(field_release:osi3.DetectedMovingObject.CandidateMovingObject.head_pose)
  clear_has_head_pose();
  ::osi3::Orientation3d* temp = head_pose_;
  head_pose_ = NULL;
  return temp;
}
void DetectedMovingObject_CandidateMovingObject::set_allocated_head_pose(::osi3::Orientation3d* head_pose) {
  delete head_pose_;
  head_pose_ = head_pose;
  if (head_pose) {
    set_has_head_pose();
  } else {
    clear_has_head_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedMovingObject.CandidateMovingObject.head_pose)
}

// optional .osi3.Orientation3d upper_body_pose = 5;
bool DetectedMovingObject_CandidateMovingObject::has_upper_body_pose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DetectedMovingObject_CandidateMovingObject::set_has_upper_body_pose() {
  _has_bits_[0] |= 0x00000010u;
}
void DetectedMovingObject_CandidateMovingObject::clear_has_upper_body_pose() {
  _has_bits_[0] &= ~0x00000010u;
}
void DetectedMovingObject_CandidateMovingObject::clear_upper_body_pose() {
  if (upper_body_pose_ != NULL) upper_body_pose_->::osi3::Orientation3d::Clear();
  clear_has_upper_body_pose();
}
const ::osi3::Orientation3d& DetectedMovingObject_CandidateMovingObject::upper_body_pose() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.CandidateMovingObject.upper_body_pose)
  return upper_body_pose_ != NULL ? *upper_body_pose_ : *default_instance_->upper_body_pose_;
}
::osi3::Orientation3d* DetectedMovingObject_CandidateMovingObject::mutable_upper_body_pose() {
  set_has_upper_body_pose();
  if (upper_body_pose_ == NULL) {
    upper_body_pose_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedMovingObject.CandidateMovingObject.upper_body_pose)
  return upper_body_pose_;
}
::osi3::Orientation3d* DetectedMovingObject_CandidateMovingObject::release_upper_body_pose() {
  // @@protoc_insertion_point(field_release:osi3.DetectedMovingObject.CandidateMovingObject.upper_body_pose)
  clear_has_upper_body_pose();
  ::osi3::Orientation3d* temp = upper_body_pose_;
  upper_body_pose_ = NULL;
  return temp;
}
void DetectedMovingObject_CandidateMovingObject::set_allocated_upper_body_pose(::osi3::Orientation3d* upper_body_pose) {
  delete upper_body_pose_;
  upper_body_pose_ = upper_body_pose;
  if (upper_body_pose) {
    set_has_upper_body_pose();
  } else {
    clear_has_upper_body_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedMovingObject.CandidateMovingObject.upper_body_pose)
}

// -------------------------------------------------------------------

// DetectedMovingObject

// optional .osi3.DetectedItemHeader header = 1;
bool DetectedMovingObject::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectedMovingObject::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectedMovingObject::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedMovingObject::clear_header() {
  if (header_ != NULL) header_->::osi3::DetectedItemHeader::Clear();
  clear_has_header();
}
const ::osi3::DetectedItemHeader& DetectedMovingObject::header() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::osi3::DetectedItemHeader* DetectedMovingObject::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::osi3::DetectedItemHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedMovingObject.header)
  return header_;
}
::osi3::DetectedItemHeader* DetectedMovingObject::release_header() {
  // @@protoc_insertion_point(field_release:osi3.DetectedMovingObject.header)
  clear_has_header();
  ::osi3::DetectedItemHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DetectedMovingObject::set_allocated_header(::osi3::DetectedItemHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedMovingObject.header)
}

// optional .osi3.BaseMoving base = 2;
bool DetectedMovingObject::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectedMovingObject::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectedMovingObject::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectedMovingObject::clear_base() {
  if (base_ != NULL) base_->::osi3::BaseMoving::Clear();
  clear_has_base();
}
const ::osi3::BaseMoving& DetectedMovingObject::base() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::osi3::BaseMoving* DetectedMovingObject::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::osi3::BaseMoving;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedMovingObject.base)
  return base_;
}
::osi3::BaseMoving* DetectedMovingObject::release_base() {
  // @@protoc_insertion_point(field_release:osi3.DetectedMovingObject.base)
  clear_has_base();
  ::osi3::BaseMoving* temp = base_;
  base_ = NULL;
  return temp;
}
void DetectedMovingObject::set_allocated_base(::osi3::BaseMoving* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedMovingObject.base)
}

// optional .osi3.BaseMoving base_rmse = 3;
bool DetectedMovingObject::has_base_rmse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DetectedMovingObject::set_has_base_rmse() {
  _has_bits_[0] |= 0x00000004u;
}
void DetectedMovingObject::clear_has_base_rmse() {
  _has_bits_[0] &= ~0x00000004u;
}
void DetectedMovingObject::clear_base_rmse() {
  if (base_rmse_ != NULL) base_rmse_->::osi3::BaseMoving::Clear();
  clear_has_base_rmse();
}
const ::osi3::BaseMoving& DetectedMovingObject::base_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.base_rmse)
  return base_rmse_ != NULL ? *base_rmse_ : *default_instance_->base_rmse_;
}
::osi3::BaseMoving* DetectedMovingObject::mutable_base_rmse() {
  set_has_base_rmse();
  if (base_rmse_ == NULL) {
    base_rmse_ = new ::osi3::BaseMoving;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedMovingObject.base_rmse)
  return base_rmse_;
}
::osi3::BaseMoving* DetectedMovingObject::release_base_rmse() {
  // @@protoc_insertion_point(field_release:osi3.DetectedMovingObject.base_rmse)
  clear_has_base_rmse();
  ::osi3::BaseMoving* temp = base_rmse_;
  base_rmse_ = NULL;
  return temp;
}
void DetectedMovingObject::set_allocated_base_rmse(::osi3::BaseMoving* base_rmse) {
  delete base_rmse_;
  base_rmse_ = base_rmse;
  if (base_rmse) {
    set_has_base_rmse();
  } else {
    clear_has_base_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedMovingObject.base_rmse)
}

// optional .osi3.DetectedMovingObject.ReferencePoint reference_point = 4;
bool DetectedMovingObject::has_reference_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DetectedMovingObject::set_has_reference_point() {
  _has_bits_[0] |= 0x00000008u;
}
void DetectedMovingObject::clear_has_reference_point() {
  _has_bits_[0] &= ~0x00000008u;
}
void DetectedMovingObject::clear_reference_point() {
  reference_point_ = 0;
  clear_has_reference_point();
}
 ::osi3::DetectedMovingObject_ReferencePoint DetectedMovingObject::reference_point() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.reference_point)
  return static_cast< ::osi3::DetectedMovingObject_ReferencePoint >(reference_point_);
}
 void DetectedMovingObject::set_reference_point(::osi3::DetectedMovingObject_ReferencePoint value) {
  assert(::osi3::DetectedMovingObject_ReferencePoint_IsValid(value));
  set_has_reference_point();
  reference_point_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedMovingObject.reference_point)
}

// optional .osi3.DetectedMovingObject.MovementState movement_state = 5;
bool DetectedMovingObject::has_movement_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DetectedMovingObject::set_has_movement_state() {
  _has_bits_[0] |= 0x00000010u;
}
void DetectedMovingObject::clear_has_movement_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void DetectedMovingObject::clear_movement_state() {
  movement_state_ = 0;
  clear_has_movement_state();
}
 ::osi3::DetectedMovingObject_MovementState DetectedMovingObject::movement_state() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.movement_state)
  return static_cast< ::osi3::DetectedMovingObject_MovementState >(movement_state_);
}
 void DetectedMovingObject::set_movement_state(::osi3::DetectedMovingObject_MovementState value) {
  assert(::osi3::DetectedMovingObject_MovementState_IsValid(value));
  set_has_movement_state();
  movement_state_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedMovingObject.movement_state)
}

// optional double percentage_side_lane_left = 6;
bool DetectedMovingObject::has_percentage_side_lane_left() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DetectedMovingObject::set_has_percentage_side_lane_left() {
  _has_bits_[0] |= 0x00000020u;
}
void DetectedMovingObject::clear_has_percentage_side_lane_left() {
  _has_bits_[0] &= ~0x00000020u;
}
void DetectedMovingObject::clear_percentage_side_lane_left() {
  percentage_side_lane_left_ = 0;
  clear_has_percentage_side_lane_left();
}
 double DetectedMovingObject::percentage_side_lane_left() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.percentage_side_lane_left)
  return percentage_side_lane_left_;
}
 void DetectedMovingObject::set_percentage_side_lane_left(double value) {
  set_has_percentage_side_lane_left();
  percentage_side_lane_left_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedMovingObject.percentage_side_lane_left)
}

// optional double percentage_side_lane_right = 7;
bool DetectedMovingObject::has_percentage_side_lane_right() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DetectedMovingObject::set_has_percentage_side_lane_right() {
  _has_bits_[0] |= 0x00000040u;
}
void DetectedMovingObject::clear_has_percentage_side_lane_right() {
  _has_bits_[0] &= ~0x00000040u;
}
void DetectedMovingObject::clear_percentage_side_lane_right() {
  percentage_side_lane_right_ = 0;
  clear_has_percentage_side_lane_right();
}
 double DetectedMovingObject::percentage_side_lane_right() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.percentage_side_lane_right)
  return percentage_side_lane_right_;
}
 void DetectedMovingObject::set_percentage_side_lane_right(double value) {
  set_has_percentage_side_lane_right();
  percentage_side_lane_right_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedMovingObject.percentage_side_lane_right)
}

// repeated .osi3.DetectedMovingObject.CandidateMovingObject candidate = 8;
int DetectedMovingObject::candidate_size() const {
  return candidate_.size();
}
void DetectedMovingObject::clear_candidate() {
  candidate_.Clear();
}
const ::osi3::DetectedMovingObject_CandidateMovingObject& DetectedMovingObject::candidate(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.candidate)
  return candidate_.Get(index);
}
::osi3::DetectedMovingObject_CandidateMovingObject* DetectedMovingObject::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedMovingObject.candidate)
  return candidate_.Mutable(index);
}
::osi3::DetectedMovingObject_CandidateMovingObject* DetectedMovingObject::add_candidate() {
  // @@protoc_insertion_point(field_add:osi3.DetectedMovingObject.candidate)
  return candidate_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::DetectedMovingObject_CandidateMovingObject >*
DetectedMovingObject::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedMovingObject.candidate)
  return &candidate_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedMovingObject_CandidateMovingObject >&
DetectedMovingObject::candidate() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedMovingObject.candidate)
  return candidate_;
}

// optional .osi3.RadarSpecificObjectData radar_specifics = 100;
bool DetectedMovingObject::has_radar_specifics() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DetectedMovingObject::set_has_radar_specifics() {
  _has_bits_[0] |= 0x00000100u;
}
void DetectedMovingObject::clear_has_radar_specifics() {
  _has_bits_[0] &= ~0x00000100u;
}
void DetectedMovingObject::clear_radar_specifics() {
  if (radar_specifics_ != NULL) radar_specifics_->::osi3::RadarSpecificObjectData::Clear();
  clear_has_radar_specifics();
}
const ::osi3::RadarSpecificObjectData& DetectedMovingObject::radar_specifics() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.radar_specifics)
  return radar_specifics_ != NULL ? *radar_specifics_ : *default_instance_->radar_specifics_;
}
::osi3::RadarSpecificObjectData* DetectedMovingObject::mutable_radar_specifics() {
  set_has_radar_specifics();
  if (radar_specifics_ == NULL) {
    radar_specifics_ = new ::osi3::RadarSpecificObjectData;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedMovingObject.radar_specifics)
  return radar_specifics_;
}
::osi3::RadarSpecificObjectData* DetectedMovingObject::release_radar_specifics() {
  // @@protoc_insertion_point(field_release:osi3.DetectedMovingObject.radar_specifics)
  clear_has_radar_specifics();
  ::osi3::RadarSpecificObjectData* temp = radar_specifics_;
  radar_specifics_ = NULL;
  return temp;
}
void DetectedMovingObject::set_allocated_radar_specifics(::osi3::RadarSpecificObjectData* radar_specifics) {
  delete radar_specifics_;
  radar_specifics_ = radar_specifics;
  if (radar_specifics) {
    set_has_radar_specifics();
  } else {
    clear_has_radar_specifics();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedMovingObject.radar_specifics)
}

// optional .osi3.LidarSpecificObjectData lidar_specifics = 101;
bool DetectedMovingObject::has_lidar_specifics() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DetectedMovingObject::set_has_lidar_specifics() {
  _has_bits_[0] |= 0x00000200u;
}
void DetectedMovingObject::clear_has_lidar_specifics() {
  _has_bits_[0] &= ~0x00000200u;
}
void DetectedMovingObject::clear_lidar_specifics() {
  if (lidar_specifics_ != NULL) lidar_specifics_->::osi3::LidarSpecificObjectData::Clear();
  clear_has_lidar_specifics();
}
const ::osi3::LidarSpecificObjectData& DetectedMovingObject::lidar_specifics() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.lidar_specifics)
  return lidar_specifics_ != NULL ? *lidar_specifics_ : *default_instance_->lidar_specifics_;
}
::osi3::LidarSpecificObjectData* DetectedMovingObject::mutable_lidar_specifics() {
  set_has_lidar_specifics();
  if (lidar_specifics_ == NULL) {
    lidar_specifics_ = new ::osi3::LidarSpecificObjectData;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedMovingObject.lidar_specifics)
  return lidar_specifics_;
}
::osi3::LidarSpecificObjectData* DetectedMovingObject::release_lidar_specifics() {
  // @@protoc_insertion_point(field_release:osi3.DetectedMovingObject.lidar_specifics)
  clear_has_lidar_specifics();
  ::osi3::LidarSpecificObjectData* temp = lidar_specifics_;
  lidar_specifics_ = NULL;
  return temp;
}
void DetectedMovingObject::set_allocated_lidar_specifics(::osi3::LidarSpecificObjectData* lidar_specifics) {
  delete lidar_specifics_;
  lidar_specifics_ = lidar_specifics;
  if (lidar_specifics) {
    set_has_lidar_specifics();
  } else {
    clear_has_lidar_specifics();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedMovingObject.lidar_specifics)
}

// optional .osi3.CameraSpecificObjectData camera_specifics = 102;
bool DetectedMovingObject::has_camera_specifics() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DetectedMovingObject::set_has_camera_specifics() {
  _has_bits_[0] |= 0x00000400u;
}
void DetectedMovingObject::clear_has_camera_specifics() {
  _has_bits_[0] &= ~0x00000400u;
}
void DetectedMovingObject::clear_camera_specifics() {
  if (camera_specifics_ != NULL) camera_specifics_->::osi3::CameraSpecificObjectData::Clear();
  clear_has_camera_specifics();
}
const ::osi3::CameraSpecificObjectData& DetectedMovingObject::camera_specifics() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.camera_specifics)
  return camera_specifics_ != NULL ? *camera_specifics_ : *default_instance_->camera_specifics_;
}
::osi3::CameraSpecificObjectData* DetectedMovingObject::mutable_camera_specifics() {
  set_has_camera_specifics();
  if (camera_specifics_ == NULL) {
    camera_specifics_ = new ::osi3::CameraSpecificObjectData;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedMovingObject.camera_specifics)
  return camera_specifics_;
}
::osi3::CameraSpecificObjectData* DetectedMovingObject::release_camera_specifics() {
  // @@protoc_insertion_point(field_release:osi3.DetectedMovingObject.camera_specifics)
  clear_has_camera_specifics();
  ::osi3::CameraSpecificObjectData* temp = camera_specifics_;
  camera_specifics_ = NULL;
  return temp;
}
void DetectedMovingObject::set_allocated_camera_specifics(::osi3::CameraSpecificObjectData* camera_specifics) {
  delete camera_specifics_;
  camera_specifics_ = camera_specifics;
  if (camera_specifics) {
    set_has_camera_specifics();
  } else {
    clear_has_camera_specifics();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedMovingObject.camera_specifics)
}

// optional .osi3.UltrasonicSpecificObjectData ultrasonic_specifics = 103;
bool DetectedMovingObject::has_ultrasonic_specifics() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DetectedMovingObject::set_has_ultrasonic_specifics() {
  _has_bits_[0] |= 0x00000800u;
}
void DetectedMovingObject::clear_has_ultrasonic_specifics() {
  _has_bits_[0] &= ~0x00000800u;
}
void DetectedMovingObject::clear_ultrasonic_specifics() {
  if (ultrasonic_specifics_ != NULL) ultrasonic_specifics_->::osi3::UltrasonicSpecificObjectData::Clear();
  clear_has_ultrasonic_specifics();
}
const ::osi3::UltrasonicSpecificObjectData& DetectedMovingObject::ultrasonic_specifics() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedMovingObject.ultrasonic_specifics)
  return ultrasonic_specifics_ != NULL ? *ultrasonic_specifics_ : *default_instance_->ultrasonic_specifics_;
}
::osi3::UltrasonicSpecificObjectData* DetectedMovingObject::mutable_ultrasonic_specifics() {
  set_has_ultrasonic_specifics();
  if (ultrasonic_specifics_ == NULL) {
    ultrasonic_specifics_ = new ::osi3::UltrasonicSpecificObjectData;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedMovingObject.ultrasonic_specifics)
  return ultrasonic_specifics_;
}
::osi3::UltrasonicSpecificObjectData* DetectedMovingObject::release_ultrasonic_specifics() {
  // @@protoc_insertion_point(field_release:osi3.DetectedMovingObject.ultrasonic_specifics)
  clear_has_ultrasonic_specifics();
  ::osi3::UltrasonicSpecificObjectData* temp = ultrasonic_specifics_;
  ultrasonic_specifics_ = NULL;
  return temp;
}
void DetectedMovingObject::set_allocated_ultrasonic_specifics(::osi3::UltrasonicSpecificObjectData* ultrasonic_specifics) {
  delete ultrasonic_specifics_;
  ultrasonic_specifics_ = ultrasonic_specifics;
  if (ultrasonic_specifics) {
    set_has_ultrasonic_specifics();
  } else {
    clear_has_ultrasonic_specifics();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedMovingObject.ultrasonic_specifics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
