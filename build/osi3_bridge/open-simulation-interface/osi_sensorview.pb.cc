// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensorview.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_sensorview.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* SensorView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorView_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericSensorView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericSensorView_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarSensorView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarSensorView_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarSensorView_Reflection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarSensorView_Reflection_reflection_ = NULL;
const ::google::protobuf::Descriptor* LidarSensorView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LidarSensorView_reflection_ = NULL;
const ::google::protobuf::Descriptor* LidarSensorView_Reflection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LidarSensorView_Reflection_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraSensorView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraSensorView_reflection_ = NULL;
const ::google::protobuf::Descriptor* UltrasonicSensorView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UltrasonicSensorView_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5fsensorview_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5fsensorview_2eproto() {
  protobuf_AddDesc_osi_5fsensorview_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_sensorview.proto");
  GOOGLE_CHECK(file != NULL);
  SensorView_descriptor_ = file->message_type(0);
  static const int SensorView_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, mounting_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, mounting_position_rmse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, host_vehicle_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, global_ground_truth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, host_vehicle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, generic_sensor_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, radar_sensor_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, lidar_sensor_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, camera_sensor_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, ultrasonic_sensor_view_),
  };
  SensorView_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SensorView_descriptor_,
      SensorView::default_instance_,
      SensorView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, _has_bits_[0]),
      -1,
      -1,
      sizeof(SensorView),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorView, _internal_metadata_),
      -1);
  GenericSensorView_descriptor_ = file->message_type(1);
  static const int GenericSensorView_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericSensorView, view_configuration_),
  };
  GenericSensorView_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GenericSensorView_descriptor_,
      GenericSensorView::default_instance_,
      GenericSensorView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericSensorView, _has_bits_[0]),
      -1,
      -1,
      sizeof(GenericSensorView),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericSensorView, _internal_metadata_),
      -1);
  RadarSensorView_descriptor_ = file->message_type(2);
  static const int RadarSensorView_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorView, view_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorView, reflection_),
  };
  RadarSensorView_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadarSensorView_descriptor_,
      RadarSensorView::default_instance_,
      RadarSensorView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorView, _has_bits_[0]),
      -1,
      -1,
      sizeof(RadarSensorView),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorView, _internal_metadata_),
      -1);
  RadarSensorView_Reflection_descriptor_ = RadarSensorView_descriptor_->nested_type(0);
  static const int RadarSensorView_Reflection_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorView_Reflection, signal_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorView_Reflection, time_of_flight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorView_Reflection, doppler_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorView_Reflection, source_horizontal_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorView_Reflection, source_vertical_angle_),
  };
  RadarSensorView_Reflection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadarSensorView_Reflection_descriptor_,
      RadarSensorView_Reflection::default_instance_,
      RadarSensorView_Reflection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorView_Reflection, _has_bits_[0]),
      -1,
      -1,
      sizeof(RadarSensorView_Reflection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSensorView_Reflection, _internal_metadata_),
      -1);
  LidarSensorView_descriptor_ = file->message_type(3);
  static const int LidarSensorView_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorView, view_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorView, reflection_),
  };
  LidarSensorView_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LidarSensorView_descriptor_,
      LidarSensorView::default_instance_,
      LidarSensorView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorView, _has_bits_[0]),
      -1,
      -1,
      sizeof(LidarSensorView),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorView, _internal_metadata_),
      -1);
  LidarSensorView_Reflection_descriptor_ = LidarSensorView_descriptor_->nested_type(0);
  static const int LidarSensorView_Reflection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorView_Reflection, signal_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorView_Reflection, time_of_flight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorView_Reflection, doppler_shift_),
  };
  LidarSensorView_Reflection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LidarSensorView_Reflection_descriptor_,
      LidarSensorView_Reflection::default_instance_,
      LidarSensorView_Reflection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorView_Reflection, _has_bits_[0]),
      -1,
      -1,
      sizeof(LidarSensorView_Reflection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarSensorView_Reflection, _internal_metadata_),
      -1);
  CameraSensorView_descriptor_ = file->message_type(4);
  static const int CameraSensorView_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorView, view_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorView, image_data_),
  };
  CameraSensorView_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CameraSensorView_descriptor_,
      CameraSensorView::default_instance_,
      CameraSensorView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorView, _has_bits_[0]),
      -1,
      -1,
      sizeof(CameraSensorView),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensorView, _internal_metadata_),
      -1);
  UltrasonicSensorView_descriptor_ = file->message_type(5);
  static const int UltrasonicSensorView_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltrasonicSensorView, view_configuration_),
  };
  UltrasonicSensorView_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UltrasonicSensorView_descriptor_,
      UltrasonicSensorView::default_instance_,
      UltrasonicSensorView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltrasonicSensorView, _has_bits_[0]),
      -1,
      -1,
      sizeof(UltrasonicSensorView),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltrasonicSensorView, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5fsensorview_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SensorView_descriptor_, &SensorView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GenericSensorView_descriptor_, &GenericSensorView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadarSensorView_descriptor_, &RadarSensorView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadarSensorView_Reflection_descriptor_, &RadarSensorView_Reflection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LidarSensorView_descriptor_, &LidarSensorView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LidarSensorView_Reflection_descriptor_, &LidarSensorView_Reflection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CameraSensorView_descriptor_, &CameraSensorView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UltrasonicSensorView_descriptor_, &UltrasonicSensorView::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5fsensorview_2eproto() {
  delete SensorView::default_instance_;
  delete SensorView_reflection_;
  delete GenericSensorView::default_instance_;
  delete GenericSensorView_reflection_;
  delete RadarSensorView::default_instance_;
  delete RadarSensorView_reflection_;
  delete RadarSensorView_Reflection::default_instance_;
  delete RadarSensorView_Reflection_reflection_;
  delete LidarSensorView::default_instance_;
  delete LidarSensorView_reflection_;
  delete LidarSensorView_Reflection::default_instance_;
  delete LidarSensorView_Reflection_reflection_;
  delete CameraSensorView::default_instance_;
  delete CameraSensorView_reflection_;
  delete UltrasonicSensorView::default_instance_;
  delete UltrasonicSensorView_reflection_;
}

void protobuf_AddDesc_osi_5fsensorview_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5fsensorview_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::osi3::protobuf_AddDesc_osi_5fversion_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fcommon_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fgroundtruth_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fsensorviewconfiguration_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fhostvehicledata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024osi_sensorview.proto\022\004osi3\032\021osi_versio"
    "n.proto\032\020osi_common.proto\032\025osi_groundtru"
    "th.proto\032!osi_sensorviewconfiguration.pr"
    "oto\032\031osi_hostvehicledata.proto\"\205\005\n\nSenso"
    "rView\022\'\n\007version\030\001 \001(\0132\026.osi3.InterfaceV"
    "ersion\022\"\n\ttimestamp\030\002 \001(\0132\017.osi3.Timesta"
    "mp\022#\n\tsensor_id\030\003 \001(\0132\020.osi3.Identifier\022"
    "1\n\021mounting_position\030\004 \001(\0132\026.osi3.Mounti"
    "ngPosition\0226\n\026mounting_position_rmse\030\005 \001"
    "(\0132\026.osi3.MountingPosition\0220\n\021host_vehic"
    "le_data\030\006 \001(\0132\025.osi3.HostVehicleData\022.\n\023"
    "global_ground_truth\030\007 \001(\0132\021.osi3.GroundT"
    "ruth\022)\n\017host_vehicle_id\030\010 \001(\0132\020.osi3.Ide"
    "ntifier\0225\n\023generic_sensor_view\030\350\007 \003(\0132\027."
    "osi3.GenericSensorView\0221\n\021radar_sensor_v"
    "iew\030\351\007 \003(\0132\025.osi3.RadarSensorView\0221\n\021lid"
    "ar_sensor_view\030\352\007 \003(\0132\025.osi3.LidarSensor"
    "View\0223\n\022camera_sensor_view\030\353\007 \003(\0132\026.osi3"
    ".CameraSensorView\022;\n\026ultrasonic_sensor_v"
    "iew\030\354\007 \003(\0132\032.osi3.UltrasonicSensorView\"U"
    "\n\021GenericSensorView\022@\n\022view_configuratio"
    "n\030\001 \001(\0132$.osi3.GenericSensorViewConfigur"
    "ation\"\236\002\n\017RadarSensorView\022>\n\022view_config"
    "uration\030\001 \001(\0132\".osi3.RadarSensorViewConf"
    "iguration\0224\n\nreflection\030\002 \003(\0132 .osi3.Rad"
    "arSensorView.Reflection\032\224\001\n\nReflection\022\027"
    "\n\017signal_strength\030\001 \001(\001\022\026\n\016time_of_fligh"
    "t\030\002 \001(\001\022\025\n\rdoppler_shift\030\003 \001(\001\022\037\n\027source"
    "_horizontal_angle\030\004 \001(\001\022\035\n\025source_vertic"
    "al_angle\030\005 \001(\001\"\335\001\n\017LidarSensorView\022>\n\022vi"
    "ew_configuration\030\001 \001(\0132\".osi3.LidarSenso"
    "rViewConfiguration\0224\n\nreflection\030\002 \003(\0132 "
    ".osi3.LidarSensorView.Reflection\032T\n\nRefl"
    "ection\022\027\n\017signal_strength\030\001 \001(\001\022\026\n\016time_"
    "of_flight\030\002 \001(\001\022\025\n\rdoppler_shift\030\003 \001(\001\"g"
    "\n\020CameraSensorView\022\?\n\022view_configuration"
    "\030\001 \001(\0132#.osi3.CameraSensorViewConfigurat"
    "ion\022\022\n\nimage_data\030\002 \001(\014\"[\n\024UltrasonicSen"
    "sorView\022C\n\022view_configuration\030\001 \001(\0132\'.os"
    "i3.UltrasonicSensorViewConfigurationB\002H\001", 1600);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_sensorview.proto", &protobuf_RegisterTypes);
  SensorView::default_instance_ = new SensorView();
  GenericSensorView::default_instance_ = new GenericSensorView();
  RadarSensorView::default_instance_ = new RadarSensorView();
  RadarSensorView_Reflection::default_instance_ = new RadarSensorView_Reflection();
  LidarSensorView::default_instance_ = new LidarSensorView();
  LidarSensorView_Reflection::default_instance_ = new LidarSensorView_Reflection();
  CameraSensorView::default_instance_ = new CameraSensorView();
  UltrasonicSensorView::default_instance_ = new UltrasonicSensorView();
  SensorView::default_instance_->InitAsDefaultInstance();
  GenericSensorView::default_instance_->InitAsDefaultInstance();
  RadarSensorView::default_instance_->InitAsDefaultInstance();
  RadarSensorView_Reflection::default_instance_->InitAsDefaultInstance();
  LidarSensorView::default_instance_->InitAsDefaultInstance();
  LidarSensorView_Reflection::default_instance_->InitAsDefaultInstance();
  CameraSensorView::default_instance_->InitAsDefaultInstance();
  UltrasonicSensorView::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5fsensorview_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5fsensorview_2eproto {
  StaticDescriptorInitializer_osi_5fsensorview_2eproto() {
    protobuf_AddDesc_osi_5fsensorview_2eproto();
  }
} static_descriptor_initializer_osi_5fsensorview_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorView::kVersionFieldNumber;
const int SensorView::kTimestampFieldNumber;
const int SensorView::kSensorIdFieldNumber;
const int SensorView::kMountingPositionFieldNumber;
const int SensorView::kMountingPositionRmseFieldNumber;
const int SensorView::kHostVehicleDataFieldNumber;
const int SensorView::kGlobalGroundTruthFieldNumber;
const int SensorView::kHostVehicleIdFieldNumber;
const int SensorView::kGenericSensorViewFieldNumber;
const int SensorView::kRadarSensorViewFieldNumber;
const int SensorView::kLidarSensorViewFieldNumber;
const int SensorView::kCameraSensorViewFieldNumber;
const int SensorView::kUltrasonicSensorViewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorView::SensorView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.SensorView)
}

void SensorView::InitAsDefaultInstance() {
  version_ = const_cast< ::osi3::InterfaceVersion*>(&::osi3::InterfaceVersion::default_instance());
  timestamp_ = const_cast< ::osi3::Timestamp*>(&::osi3::Timestamp::default_instance());
  sensor_id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  mounting_position_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
  mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
  host_vehicle_data_ = const_cast< ::osi3::HostVehicleData*>(&::osi3::HostVehicleData::default_instance());
  global_ground_truth_ = const_cast< ::osi3::GroundTruth*>(&::osi3::GroundTruth::default_instance());
  host_vehicle_id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
}

SensorView::SensorView(const SensorView& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.SensorView)
}

void SensorView::SharedCtor() {
  _cached_size_ = 0;
  version_ = NULL;
  timestamp_ = NULL;
  sensor_id_ = NULL;
  mounting_position_ = NULL;
  mounting_position_rmse_ = NULL;
  host_vehicle_data_ = NULL;
  global_ground_truth_ = NULL;
  host_vehicle_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorView::~SensorView() {
  // @@protoc_insertion_point(destructor:osi3.SensorView)
  SharedDtor();
}

void SensorView::SharedDtor() {
  if (this != default_instance_) {
    delete version_;
    delete timestamp_;
    delete sensor_id_;
    delete mounting_position_;
    delete mounting_position_rmse_;
    delete host_vehicle_data_;
    delete global_ground_truth_;
    delete host_vehicle_id_;
  }
}

void SensorView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorView_descriptor_;
}

const SensorView& SensorView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorview_2eproto();
  return *default_instance_;
}

SensorView* SensorView::default_instance_ = NULL;

SensorView* SensorView::New(::google::protobuf::Arena* arena) const {
  SensorView* n = new SensorView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorView::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SensorView)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_version()) {
      if (version_ != NULL) version_->::osi3::InterfaceVersion::Clear();
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::osi3::Timestamp::Clear();
    }
    if (has_sensor_id()) {
      if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
    }
    if (has_mounting_position()) {
      if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
    }
    if (has_mounting_position_rmse()) {
      if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
    }
    if (has_host_vehicle_data()) {
      if (host_vehicle_data_ != NULL) host_vehicle_data_->::osi3::HostVehicleData::Clear();
    }
    if (has_global_ground_truth()) {
      if (global_ground_truth_ != NULL) global_ground_truth_->::osi3::GroundTruth::Clear();
    }
    if (has_host_vehicle_id()) {
      if (host_vehicle_id_ != NULL) host_vehicle_id_->::osi3::Identifier::Clear();
    }
  }
  generic_sensor_view_.Clear();
  radar_sensor_view_.Clear();
  lidar_sensor_view_.Clear();
  camera_sensor_view_.Clear();
  ultrasonic_sensor_view_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SensorView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.SensorView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.InterfaceVersion version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .osi3.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sensor_id;
        break;
      }

      // optional .osi3.Identifier sensor_id = 3;
      case 3: {
        if (tag == 26) {
         parse_sensor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mounting_position;
        break;
      }

      // optional .osi3.MountingPosition mounting_position = 4;
      case 4: {
        if (tag == 34) {
         parse_mounting_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mounting_position_rmse;
        break;
      }

      // optional .osi3.MountingPosition mounting_position_rmse = 5;
      case 5: {
        if (tag == 42) {
         parse_mounting_position_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_host_vehicle_data;
        break;
      }

      // optional .osi3.HostVehicleData host_vehicle_data = 6;
      case 6: {
        if (tag == 50) {
         parse_host_vehicle_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host_vehicle_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_global_ground_truth;
        break;
      }

      // optional .osi3.GroundTruth global_ground_truth = 7;
      case 7: {
        if (tag == 58) {
         parse_global_ground_truth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_global_ground_truth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_host_vehicle_id;
        break;
      }

      // optional .osi3.Identifier host_vehicle_id = 8;
      case 8: {
        if (tag == 66) {
         parse_host_vehicle_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host_vehicle_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_generic_sensor_view;
        break;
      }

      // repeated .osi3.GenericSensorView generic_sensor_view = 1000;
      case 1000: {
        if (tag == 8002) {
         parse_generic_sensor_view:
          DO_(input->IncrementRecursionDepth());
         parse_loop_generic_sensor_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_generic_sensor_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_loop_generic_sensor_view;
        if (input->ExpectTag(8010)) goto parse_loop_radar_sensor_view;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.RadarSensorView radar_sensor_view = 1001;
      case 1001: {
        if (tag == 8010) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_radar_sensor_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_radar_sensor_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_loop_radar_sensor_view;
        if (input->ExpectTag(8018)) goto parse_loop_lidar_sensor_view;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.LidarSensorView lidar_sensor_view = 1002;
      case 1002: {
        if (tag == 8018) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lidar_sensor_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lidar_sensor_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8018)) goto parse_loop_lidar_sensor_view;
        if (input->ExpectTag(8026)) goto parse_loop_camera_sensor_view;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.CameraSensorView camera_sensor_view = 1003;
      case 1003: {
        if (tag == 8026) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_camera_sensor_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_camera_sensor_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8026)) goto parse_loop_camera_sensor_view;
        if (input->ExpectTag(8034)) goto parse_loop_ultrasonic_sensor_view;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.UltrasonicSensorView ultrasonic_sensor_view = 1004;
      case 1004: {
        if (tag == 8034) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_ultrasonic_sensor_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ultrasonic_sensor_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8034)) goto parse_loop_ultrasonic_sensor_view;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.SensorView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.SensorView)
  return false;
#undef DO_
}

void SensorView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.SensorView)
  // optional .osi3.InterfaceVersion version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->version_, output);
  }

  // optional .osi3.Timestamp timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  // optional .osi3.Identifier sensor_id = 3;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sensor_id_, output);
  }

  // optional .osi3.MountingPosition mounting_position = 4;
  if (has_mounting_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mounting_position_, output);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 5;
  if (has_mounting_position_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->mounting_position_rmse_, output);
  }

  // optional .osi3.HostVehicleData host_vehicle_data = 6;
  if (has_host_vehicle_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->host_vehicle_data_, output);
  }

  // optional .osi3.GroundTruth global_ground_truth = 7;
  if (has_global_ground_truth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->global_ground_truth_, output);
  }

  // optional .osi3.Identifier host_vehicle_id = 8;
  if (has_host_vehicle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->host_vehicle_id_, output);
  }

  // repeated .osi3.GenericSensorView generic_sensor_view = 1000;
  for (unsigned int i = 0, n = this->generic_sensor_view_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->generic_sensor_view(i), output);
  }

  // repeated .osi3.RadarSensorView radar_sensor_view = 1001;
  for (unsigned int i = 0, n = this->radar_sensor_view_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->radar_sensor_view(i), output);
  }

  // repeated .osi3.LidarSensorView lidar_sensor_view = 1002;
  for (unsigned int i = 0, n = this->lidar_sensor_view_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1002, this->lidar_sensor_view(i), output);
  }

  // repeated .osi3.CameraSensorView camera_sensor_view = 1003;
  for (unsigned int i = 0, n = this->camera_sensor_view_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1003, this->camera_sensor_view(i), output);
  }

  // repeated .osi3.UltrasonicSensorView ultrasonic_sensor_view = 1004;
  for (unsigned int i = 0, n = this->ultrasonic_sensor_view_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1004, this->ultrasonic_sensor_view(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.SensorView)
}

::google::protobuf::uint8* SensorView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SensorView)
  // optional .osi3.InterfaceVersion version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->version_, false, target);
  }

  // optional .osi3.Timestamp timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->timestamp_, false, target);
  }

  // optional .osi3.Identifier sensor_id = 3;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->sensor_id_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position = 4;
  if (has_mounting_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->mounting_position_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 5;
  if (has_mounting_position_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->mounting_position_rmse_, false, target);
  }

  // optional .osi3.HostVehicleData host_vehicle_data = 6;
  if (has_host_vehicle_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->host_vehicle_data_, false, target);
  }

  // optional .osi3.GroundTruth global_ground_truth = 7;
  if (has_global_ground_truth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->global_ground_truth_, false, target);
  }

  // optional .osi3.Identifier host_vehicle_id = 8;
  if (has_host_vehicle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->host_vehicle_id_, false, target);
  }

  // repeated .osi3.GenericSensorView generic_sensor_view = 1000;
  for (unsigned int i = 0, n = this->generic_sensor_view_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1000, this->generic_sensor_view(i), false, target);
  }

  // repeated .osi3.RadarSensorView radar_sensor_view = 1001;
  for (unsigned int i = 0, n = this->radar_sensor_view_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1001, this->radar_sensor_view(i), false, target);
  }

  // repeated .osi3.LidarSensorView lidar_sensor_view = 1002;
  for (unsigned int i = 0, n = this->lidar_sensor_view_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1002, this->lidar_sensor_view(i), false, target);
  }

  // repeated .osi3.CameraSensorView camera_sensor_view = 1003;
  for (unsigned int i = 0, n = this->camera_sensor_view_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1003, this->camera_sensor_view(i), false, target);
  }

  // repeated .osi3.UltrasonicSensorView ultrasonic_sensor_view = 1004;
  for (unsigned int i = 0, n = this->ultrasonic_sensor_view_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1004, this->ultrasonic_sensor_view(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SensorView)
  return target;
}

int SensorView::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SensorView)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .osi3.InterfaceVersion version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->version_);
    }

    // optional .osi3.Timestamp timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timestamp_);
    }

    // optional .osi3.Identifier sensor_id = 3;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 4;
    if (has_mounting_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 5;
    if (has_mounting_position_rmse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_rmse_);
    }

    // optional .osi3.HostVehicleData host_vehicle_data = 6;
    if (has_host_vehicle_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->host_vehicle_data_);
    }

    // optional .osi3.GroundTruth global_ground_truth = 7;
    if (has_global_ground_truth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->global_ground_truth_);
    }

    // optional .osi3.Identifier host_vehicle_id = 8;
    if (has_host_vehicle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->host_vehicle_id_);
    }

  }
  // repeated .osi3.GenericSensorView generic_sensor_view = 1000;
  total_size += 2 * this->generic_sensor_view_size();
  for (int i = 0; i < this->generic_sensor_view_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->generic_sensor_view(i));
  }

  // repeated .osi3.RadarSensorView radar_sensor_view = 1001;
  total_size += 2 * this->radar_sensor_view_size();
  for (int i = 0; i < this->radar_sensor_view_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->radar_sensor_view(i));
  }

  // repeated .osi3.LidarSensorView lidar_sensor_view = 1002;
  total_size += 2 * this->lidar_sensor_view_size();
  for (int i = 0; i < this->lidar_sensor_view_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lidar_sensor_view(i));
  }

  // repeated .osi3.CameraSensorView camera_sensor_view = 1003;
  total_size += 2 * this->camera_sensor_view_size();
  for (int i = 0; i < this->camera_sensor_view_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera_sensor_view(i));
  }

  // repeated .osi3.UltrasonicSensorView ultrasonic_sensor_view = 1004;
  total_size += 2 * this->ultrasonic_sensor_view_size();
  for (int i = 0; i < this->ultrasonic_sensor_view_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ultrasonic_sensor_view(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.SensorView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SensorView* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.SensorView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.SensorView)
    MergeFrom(*source);
  }
}

void SensorView::MergeFrom(const SensorView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.SensorView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  generic_sensor_view_.MergeFrom(from.generic_sensor_view_);
  radar_sensor_view_.MergeFrom(from.radar_sensor_view_);
  lidar_sensor_view_.MergeFrom(from.lidar_sensor_view_);
  camera_sensor_view_.MergeFrom(from.camera_sensor_view_);
  ultrasonic_sensor_view_.MergeFrom(from.ultrasonic_sensor_view_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::osi3::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_sensor_id()) {
      mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
    }
    if (from.has_mounting_position()) {
      mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
    }
    if (from.has_mounting_position_rmse()) {
      mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
    }
    if (from.has_host_vehicle_data()) {
      mutable_host_vehicle_data()->::osi3::HostVehicleData::MergeFrom(from.host_vehicle_data());
    }
    if (from.has_global_ground_truth()) {
      mutable_global_ground_truth()->::osi3::GroundTruth::MergeFrom(from.global_ground_truth());
    }
    if (from.has_host_vehicle_id()) {
      mutable_host_vehicle_id()->::osi3::Identifier::MergeFrom(from.host_vehicle_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SensorView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.SensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorView::CopyFrom(const SensorView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorView::IsInitialized() const {

  return true;
}

void SensorView::Swap(SensorView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorView::InternalSwap(SensorView* other) {
  std::swap(version_, other->version_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(mounting_position_, other->mounting_position_);
  std::swap(mounting_position_rmse_, other->mounting_position_rmse_);
  std::swap(host_vehicle_data_, other->host_vehicle_data_);
  std::swap(global_ground_truth_, other->global_ground_truth_);
  std::swap(host_vehicle_id_, other->host_vehicle_id_);
  generic_sensor_view_.UnsafeArenaSwap(&other->generic_sensor_view_);
  radar_sensor_view_.UnsafeArenaSwap(&other->radar_sensor_view_);
  lidar_sensor_view_.UnsafeArenaSwap(&other->lidar_sensor_view_);
  camera_sensor_view_.UnsafeArenaSwap(&other->camera_sensor_view_);
  ultrasonic_sensor_view_.UnsafeArenaSwap(&other->ultrasonic_sensor_view_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorView_descriptor_;
  metadata.reflection = SensorView_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorView

// optional .osi3.InterfaceVersion version = 1;
bool SensorView::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SensorView::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SensorView::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SensorView::clear_version() {
  if (version_ != NULL) version_->::osi3::InterfaceVersion::Clear();
  clear_has_version();
}
const ::osi3::InterfaceVersion& SensorView::version() const {
  // @@protoc_insertion_point(field_get:osi3.SensorView.version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
::osi3::InterfaceVersion* SensorView::mutable_version() {
  set_has_version();
  if (version_ == NULL) {
    version_ = new ::osi3::InterfaceVersion;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorView.version)
  return version_;
}
::osi3::InterfaceVersion* SensorView::release_version() {
  // @@protoc_insertion_point(field_release:osi3.SensorView.version)
  clear_has_version();
  ::osi3::InterfaceVersion* temp = version_;
  version_ = NULL;
  return temp;
}
void SensorView::set_allocated_version(::osi3::InterfaceVersion* version) {
  delete version_;
  version_ = version;
  if (version) {
    set_has_version();
  } else {
    clear_has_version();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorView.version)
}

// optional .osi3.Timestamp timestamp = 2;
bool SensorView::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SensorView::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void SensorView::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void SensorView::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::osi3::Timestamp::Clear();
  clear_has_timestamp();
}
const ::osi3::Timestamp& SensorView::timestamp() const {
  // @@protoc_insertion_point(field_get:osi3.SensorView.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::osi3::Timestamp* SensorView::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorView.timestamp)
  return timestamp_;
}
::osi3::Timestamp* SensorView::release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.SensorView.timestamp)
  clear_has_timestamp();
  ::osi3::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void SensorView::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorView.timestamp)
}

// optional .osi3.Identifier sensor_id = 3;
bool SensorView::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SensorView::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SensorView::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SensorView::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
const ::osi3::Identifier& SensorView::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.SensorView.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
::osi3::Identifier* SensorView::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorView.sensor_id)
  return sensor_id_;
}
::osi3::Identifier* SensorView::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.SensorView.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
void SensorView::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorView.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 4;
bool SensorView::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SensorView::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000008u;
}
void SensorView::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000008u;
}
void SensorView::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
const ::osi3::MountingPosition& SensorView::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.SensorView.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
::osi3::MountingPosition* SensorView::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorView.mounting_position)
  return mounting_position_;
}
::osi3::MountingPosition* SensorView::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.SensorView.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
void SensorView::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorView.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 5;
bool SensorView::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SensorView::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000010u;
}
void SensorView::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000010u;
}
void SensorView::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
const ::osi3::MountingPosition& SensorView::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.SensorView.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
::osi3::MountingPosition* SensorView::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorView.mounting_position_rmse)
  return mounting_position_rmse_;
}
::osi3::MountingPosition* SensorView::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.SensorView.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
void SensorView::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorView.mounting_position_rmse)
}

// optional .osi3.HostVehicleData host_vehicle_data = 6;
bool SensorView::has_host_vehicle_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SensorView::set_has_host_vehicle_data() {
  _has_bits_[0] |= 0x00000020u;
}
void SensorView::clear_has_host_vehicle_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void SensorView::clear_host_vehicle_data() {
  if (host_vehicle_data_ != NULL) host_vehicle_data_->::osi3::HostVehicleData::Clear();
  clear_has_host_vehicle_data();
}
const ::osi3::HostVehicleData& SensorView::host_vehicle_data() const {
  // @@protoc_insertion_point(field_get:osi3.SensorView.host_vehicle_data)
  return host_vehicle_data_ != NULL ? *host_vehicle_data_ : *default_instance_->host_vehicle_data_;
}
::osi3::HostVehicleData* SensorView::mutable_host_vehicle_data() {
  set_has_host_vehicle_data();
  if (host_vehicle_data_ == NULL) {
    host_vehicle_data_ = new ::osi3::HostVehicleData;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorView.host_vehicle_data)
  return host_vehicle_data_;
}
::osi3::HostVehicleData* SensorView::release_host_vehicle_data() {
  // @@protoc_insertion_point(field_release:osi3.SensorView.host_vehicle_data)
  clear_has_host_vehicle_data();
  ::osi3::HostVehicleData* temp = host_vehicle_data_;
  host_vehicle_data_ = NULL;
  return temp;
}
void SensorView::set_allocated_host_vehicle_data(::osi3::HostVehicleData* host_vehicle_data) {
  delete host_vehicle_data_;
  host_vehicle_data_ = host_vehicle_data;
  if (host_vehicle_data) {
    set_has_host_vehicle_data();
  } else {
    clear_has_host_vehicle_data();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorView.host_vehicle_data)
}

// optional .osi3.GroundTruth global_ground_truth = 7;
bool SensorView::has_global_ground_truth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SensorView::set_has_global_ground_truth() {
  _has_bits_[0] |= 0x00000040u;
}
void SensorView::clear_has_global_ground_truth() {
  _has_bits_[0] &= ~0x00000040u;
}
void SensorView::clear_global_ground_truth() {
  if (global_ground_truth_ != NULL) global_ground_truth_->::osi3::GroundTruth::Clear();
  clear_has_global_ground_truth();
}
const ::osi3::GroundTruth& SensorView::global_ground_truth() const {
  // @@protoc_insertion_point(field_get:osi3.SensorView.global_ground_truth)
  return global_ground_truth_ != NULL ? *global_ground_truth_ : *default_instance_->global_ground_truth_;
}
::osi3::GroundTruth* SensorView::mutable_global_ground_truth() {
  set_has_global_ground_truth();
  if (global_ground_truth_ == NULL) {
    global_ground_truth_ = new ::osi3::GroundTruth;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorView.global_ground_truth)
  return global_ground_truth_;
}
::osi3::GroundTruth* SensorView::release_global_ground_truth() {
  // @@protoc_insertion_point(field_release:osi3.SensorView.global_ground_truth)
  clear_has_global_ground_truth();
  ::osi3::GroundTruth* temp = global_ground_truth_;
  global_ground_truth_ = NULL;
  return temp;
}
void SensorView::set_allocated_global_ground_truth(::osi3::GroundTruth* global_ground_truth) {
  delete global_ground_truth_;
  global_ground_truth_ = global_ground_truth;
  if (global_ground_truth) {
    set_has_global_ground_truth();
  } else {
    clear_has_global_ground_truth();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorView.global_ground_truth)
}

// optional .osi3.Identifier host_vehicle_id = 8;
bool SensorView::has_host_vehicle_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SensorView::set_has_host_vehicle_id() {
  _has_bits_[0] |= 0x00000080u;
}
void SensorView::clear_has_host_vehicle_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void SensorView::clear_host_vehicle_id() {
  if (host_vehicle_id_ != NULL) host_vehicle_id_->::osi3::Identifier::Clear();
  clear_has_host_vehicle_id();
}
const ::osi3::Identifier& SensorView::host_vehicle_id() const {
  // @@protoc_insertion_point(field_get:osi3.SensorView.host_vehicle_id)
  return host_vehicle_id_ != NULL ? *host_vehicle_id_ : *default_instance_->host_vehicle_id_;
}
::osi3::Identifier* SensorView::mutable_host_vehicle_id() {
  set_has_host_vehicle_id();
  if (host_vehicle_id_ == NULL) {
    host_vehicle_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorView.host_vehicle_id)
  return host_vehicle_id_;
}
::osi3::Identifier* SensorView::release_host_vehicle_id() {
  // @@protoc_insertion_point(field_release:osi3.SensorView.host_vehicle_id)
  clear_has_host_vehicle_id();
  ::osi3::Identifier* temp = host_vehicle_id_;
  host_vehicle_id_ = NULL;
  return temp;
}
void SensorView::set_allocated_host_vehicle_id(::osi3::Identifier* host_vehicle_id) {
  delete host_vehicle_id_;
  host_vehicle_id_ = host_vehicle_id;
  if (host_vehicle_id) {
    set_has_host_vehicle_id();
  } else {
    clear_has_host_vehicle_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorView.host_vehicle_id)
}

// repeated .osi3.GenericSensorView generic_sensor_view = 1000;
int SensorView::generic_sensor_view_size() const {
  return generic_sensor_view_.size();
}
void SensorView::clear_generic_sensor_view() {
  generic_sensor_view_.Clear();
}
const ::osi3::GenericSensorView& SensorView::generic_sensor_view(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorView.generic_sensor_view)
  return generic_sensor_view_.Get(index);
}
::osi3::GenericSensorView* SensorView::mutable_generic_sensor_view(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorView.generic_sensor_view)
  return generic_sensor_view_.Mutable(index);
}
::osi3::GenericSensorView* SensorView::add_generic_sensor_view() {
  // @@protoc_insertion_point(field_add:osi3.SensorView.generic_sensor_view)
  return generic_sensor_view_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::GenericSensorView >*
SensorView::mutable_generic_sensor_view() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorView.generic_sensor_view)
  return &generic_sensor_view_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::GenericSensorView >&
SensorView::generic_sensor_view() const {
  // @@protoc_insertion_point(field_list:osi3.SensorView.generic_sensor_view)
  return generic_sensor_view_;
}

// repeated .osi3.RadarSensorView radar_sensor_view = 1001;
int SensorView::radar_sensor_view_size() const {
  return radar_sensor_view_.size();
}
void SensorView::clear_radar_sensor_view() {
  radar_sensor_view_.Clear();
}
const ::osi3::RadarSensorView& SensorView::radar_sensor_view(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorView.radar_sensor_view)
  return radar_sensor_view_.Get(index);
}
::osi3::RadarSensorView* SensorView::mutable_radar_sensor_view(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorView.radar_sensor_view)
  return radar_sensor_view_.Mutable(index);
}
::osi3::RadarSensorView* SensorView::add_radar_sensor_view() {
  // @@protoc_insertion_point(field_add:osi3.SensorView.radar_sensor_view)
  return radar_sensor_view_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorView >*
SensorView::mutable_radar_sensor_view() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorView.radar_sensor_view)
  return &radar_sensor_view_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorView >&
SensorView::radar_sensor_view() const {
  // @@protoc_insertion_point(field_list:osi3.SensorView.radar_sensor_view)
  return radar_sensor_view_;
}

// repeated .osi3.LidarSensorView lidar_sensor_view = 1002;
int SensorView::lidar_sensor_view_size() const {
  return lidar_sensor_view_.size();
}
void SensorView::clear_lidar_sensor_view() {
  lidar_sensor_view_.Clear();
}
const ::osi3::LidarSensorView& SensorView::lidar_sensor_view(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorView.lidar_sensor_view)
  return lidar_sensor_view_.Get(index);
}
::osi3::LidarSensorView* SensorView::mutable_lidar_sensor_view(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorView.lidar_sensor_view)
  return lidar_sensor_view_.Mutable(index);
}
::osi3::LidarSensorView* SensorView::add_lidar_sensor_view() {
  // @@protoc_insertion_point(field_add:osi3.SensorView.lidar_sensor_view)
  return lidar_sensor_view_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::LidarSensorView >*
SensorView::mutable_lidar_sensor_view() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorView.lidar_sensor_view)
  return &lidar_sensor_view_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::LidarSensorView >&
SensorView::lidar_sensor_view() const {
  // @@protoc_insertion_point(field_list:osi3.SensorView.lidar_sensor_view)
  return lidar_sensor_view_;
}

// repeated .osi3.CameraSensorView camera_sensor_view = 1003;
int SensorView::camera_sensor_view_size() const {
  return camera_sensor_view_.size();
}
void SensorView::clear_camera_sensor_view() {
  camera_sensor_view_.Clear();
}
const ::osi3::CameraSensorView& SensorView::camera_sensor_view(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorView.camera_sensor_view)
  return camera_sensor_view_.Get(index);
}
::osi3::CameraSensorView* SensorView::mutable_camera_sensor_view(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorView.camera_sensor_view)
  return camera_sensor_view_.Mutable(index);
}
::osi3::CameraSensorView* SensorView::add_camera_sensor_view() {
  // @@protoc_insertion_point(field_add:osi3.SensorView.camera_sensor_view)
  return camera_sensor_view_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::CameraSensorView >*
SensorView::mutable_camera_sensor_view() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorView.camera_sensor_view)
  return &camera_sensor_view_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::CameraSensorView >&
SensorView::camera_sensor_view() const {
  // @@protoc_insertion_point(field_list:osi3.SensorView.camera_sensor_view)
  return camera_sensor_view_;
}

// repeated .osi3.UltrasonicSensorView ultrasonic_sensor_view = 1004;
int SensorView::ultrasonic_sensor_view_size() const {
  return ultrasonic_sensor_view_.size();
}
void SensorView::clear_ultrasonic_sensor_view() {
  ultrasonic_sensor_view_.Clear();
}
const ::osi3::UltrasonicSensorView& SensorView::ultrasonic_sensor_view(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorView.ultrasonic_sensor_view)
  return ultrasonic_sensor_view_.Get(index);
}
::osi3::UltrasonicSensorView* SensorView::mutable_ultrasonic_sensor_view(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorView.ultrasonic_sensor_view)
  return ultrasonic_sensor_view_.Mutable(index);
}
::osi3::UltrasonicSensorView* SensorView::add_ultrasonic_sensor_view() {
  // @@protoc_insertion_point(field_add:osi3.SensorView.ultrasonic_sensor_view)
  return ultrasonic_sensor_view_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::UltrasonicSensorView >*
SensorView::mutable_ultrasonic_sensor_view() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorView.ultrasonic_sensor_view)
  return &ultrasonic_sensor_view_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::UltrasonicSensorView >&
SensorView::ultrasonic_sensor_view() const {
  // @@protoc_insertion_point(field_list:osi3.SensorView.ultrasonic_sensor_view)
  return ultrasonic_sensor_view_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericSensorView::kViewConfigurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericSensorView::GenericSensorView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.GenericSensorView)
}

void GenericSensorView::InitAsDefaultInstance() {
  view_configuration_ = const_cast< ::osi3::GenericSensorViewConfiguration*>(&::osi3::GenericSensorViewConfiguration::default_instance());
}

GenericSensorView::GenericSensorView(const GenericSensorView& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.GenericSensorView)
}

void GenericSensorView::SharedCtor() {
  _cached_size_ = 0;
  view_configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericSensorView::~GenericSensorView() {
  // @@protoc_insertion_point(destructor:osi3.GenericSensorView)
  SharedDtor();
}

void GenericSensorView::SharedDtor() {
  if (this != default_instance_) {
    delete view_configuration_;
  }
}

void GenericSensorView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericSensorView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericSensorView_descriptor_;
}

const GenericSensorView& GenericSensorView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorview_2eproto();
  return *default_instance_;
}

GenericSensorView* GenericSensorView::default_instance_ = NULL;

GenericSensorView* GenericSensorView::New(::google::protobuf::Arena* arena) const {
  GenericSensorView* n = new GenericSensorView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenericSensorView::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.GenericSensorView)
  if (has_view_configuration()) {
    if (view_configuration_ != NULL) view_configuration_->::osi3::GenericSensorViewConfiguration::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GenericSensorView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.GenericSensorView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.GenericSensorViewConfiguration view_configuration = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.GenericSensorView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.GenericSensorView)
  return false;
#undef DO_
}

void GenericSensorView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.GenericSensorView)
  // optional .osi3.GenericSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->view_configuration_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.GenericSensorView)
}

::google::protobuf::uint8* GenericSensorView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.GenericSensorView)
  // optional .osi3.GenericSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->view_configuration_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.GenericSensorView)
  return target;
}

int GenericSensorView::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.GenericSensorView)
  int total_size = 0;

  // optional .osi3.GenericSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->view_configuration_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericSensorView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.GenericSensorView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GenericSensorView* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericSensorView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.GenericSensorView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.GenericSensorView)
    MergeFrom(*source);
  }
}

void GenericSensorView::MergeFrom(const GenericSensorView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.GenericSensorView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_view_configuration()) {
      mutable_view_configuration()->::osi3::GenericSensorViewConfiguration::MergeFrom(from.view_configuration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GenericSensorView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.GenericSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericSensorView::CopyFrom(const GenericSensorView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.GenericSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericSensorView::IsInitialized() const {

  return true;
}

void GenericSensorView::Swap(GenericSensorView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericSensorView::InternalSwap(GenericSensorView* other) {
  std::swap(view_configuration_, other->view_configuration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenericSensorView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericSensorView_descriptor_;
  metadata.reflection = GenericSensorView_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenericSensorView

// optional .osi3.GenericSensorViewConfiguration view_configuration = 1;
bool GenericSensorView::has_view_configuration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GenericSensorView::set_has_view_configuration() {
  _has_bits_[0] |= 0x00000001u;
}
void GenericSensorView::clear_has_view_configuration() {
  _has_bits_[0] &= ~0x00000001u;
}
void GenericSensorView::clear_view_configuration() {
  if (view_configuration_ != NULL) view_configuration_->::osi3::GenericSensorViewConfiguration::Clear();
  clear_has_view_configuration();
}
const ::osi3::GenericSensorViewConfiguration& GenericSensorView::view_configuration() const {
  // @@protoc_insertion_point(field_get:osi3.GenericSensorView.view_configuration)
  return view_configuration_ != NULL ? *view_configuration_ : *default_instance_->view_configuration_;
}
::osi3::GenericSensorViewConfiguration* GenericSensorView::mutable_view_configuration() {
  set_has_view_configuration();
  if (view_configuration_ == NULL) {
    view_configuration_ = new ::osi3::GenericSensorViewConfiguration;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GenericSensorView.view_configuration)
  return view_configuration_;
}
::osi3::GenericSensorViewConfiguration* GenericSensorView::release_view_configuration() {
  // @@protoc_insertion_point(field_release:osi3.GenericSensorView.view_configuration)
  clear_has_view_configuration();
  ::osi3::GenericSensorViewConfiguration* temp = view_configuration_;
  view_configuration_ = NULL;
  return temp;
}
void GenericSensorView::set_allocated_view_configuration(::osi3::GenericSensorViewConfiguration* view_configuration) {
  delete view_configuration_;
  view_configuration_ = view_configuration;
  if (view_configuration) {
    set_has_view_configuration();
  } else {
    clear_has_view_configuration();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GenericSensorView.view_configuration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarSensorView_Reflection::kSignalStrengthFieldNumber;
const int RadarSensorView_Reflection::kTimeOfFlightFieldNumber;
const int RadarSensorView_Reflection::kDopplerShiftFieldNumber;
const int RadarSensorView_Reflection::kSourceHorizontalAngleFieldNumber;
const int RadarSensorView_Reflection::kSourceVerticalAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarSensorView_Reflection::RadarSensorView_Reflection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RadarSensorView.Reflection)
}

void RadarSensorView_Reflection::InitAsDefaultInstance() {
}

RadarSensorView_Reflection::RadarSensorView_Reflection(const RadarSensorView_Reflection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.RadarSensorView.Reflection)
}

void RadarSensorView_Reflection::SharedCtor() {
  _cached_size_ = 0;
  signal_strength_ = 0;
  time_of_flight_ = 0;
  doppler_shift_ = 0;
  source_horizontal_angle_ = 0;
  source_vertical_angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarSensorView_Reflection::~RadarSensorView_Reflection() {
  // @@protoc_insertion_point(destructor:osi3.RadarSensorView.Reflection)
  SharedDtor();
}

void RadarSensorView_Reflection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RadarSensorView_Reflection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarSensorView_Reflection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarSensorView_Reflection_descriptor_;
}

const RadarSensorView_Reflection& RadarSensorView_Reflection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorview_2eproto();
  return *default_instance_;
}

RadarSensorView_Reflection* RadarSensorView_Reflection::default_instance_ = NULL;

RadarSensorView_Reflection* RadarSensorView_Reflection::New(::google::protobuf::Arena* arena) const {
  RadarSensorView_Reflection* n = new RadarSensorView_Reflection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarSensorView_Reflection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarSensorView.Reflection)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RadarSensorView_Reflection, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RadarSensorView_Reflection*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(signal_strength_, source_vertical_angle_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RadarSensorView_Reflection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RadarSensorView.Reflection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double signal_strength = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &signal_strength_)));
          set_has_signal_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_time_of_flight;
        break;
      }

      // optional double time_of_flight = 2;
      case 2: {
        if (tag == 17) {
         parse_time_of_flight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_of_flight_)));
          set_has_time_of_flight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_doppler_shift;
        break;
      }

      // optional double doppler_shift = 3;
      case 3: {
        if (tag == 25) {
         parse_doppler_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doppler_shift_)));
          set_has_doppler_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_source_horizontal_angle;
        break;
      }

      // optional double source_horizontal_angle = 4;
      case 4: {
        if (tag == 33) {
         parse_source_horizontal_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &source_horizontal_angle_)));
          set_has_source_horizontal_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_source_vertical_angle;
        break;
      }

      // optional double source_vertical_angle = 5;
      case 5: {
        if (tag == 41) {
         parse_source_vertical_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &source_vertical_angle_)));
          set_has_source_vertical_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RadarSensorView.Reflection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RadarSensorView.Reflection)
  return false;
#undef DO_
}

void RadarSensorView_Reflection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RadarSensorView.Reflection)
  // optional double signal_strength = 1;
  if (has_signal_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->signal_strength(), output);
  }

  // optional double time_of_flight = 2;
  if (has_time_of_flight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time_of_flight(), output);
  }

  // optional double doppler_shift = 3;
  if (has_doppler_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->doppler_shift(), output);
  }

  // optional double source_horizontal_angle = 4;
  if (has_source_horizontal_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->source_horizontal_angle(), output);
  }

  // optional double source_vertical_angle = 5;
  if (has_source_vertical_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->source_vertical_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RadarSensorView.Reflection)
}

::google::protobuf::uint8* RadarSensorView_Reflection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarSensorView.Reflection)
  // optional double signal_strength = 1;
  if (has_signal_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->signal_strength(), target);
  }

  // optional double time_of_flight = 2;
  if (has_time_of_flight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time_of_flight(), target);
  }

  // optional double doppler_shift = 3;
  if (has_doppler_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->doppler_shift(), target);
  }

  // optional double source_horizontal_angle = 4;
  if (has_source_horizontal_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->source_horizontal_angle(), target);
  }

  // optional double source_vertical_angle = 5;
  if (has_source_vertical_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->source_vertical_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarSensorView.Reflection)
  return target;
}

int RadarSensorView_Reflection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarSensorView.Reflection)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional double signal_strength = 1;
    if (has_signal_strength()) {
      total_size += 1 + 8;
    }

    // optional double time_of_flight = 2;
    if (has_time_of_flight()) {
      total_size += 1 + 8;
    }

    // optional double doppler_shift = 3;
    if (has_doppler_shift()) {
      total_size += 1 + 8;
    }

    // optional double source_horizontal_angle = 4;
    if (has_source_horizontal_angle()) {
      total_size += 1 + 8;
    }

    // optional double source_vertical_angle = 5;
    if (has_source_vertical_angle()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarSensorView_Reflection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RadarSensorView.Reflection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RadarSensorView_Reflection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarSensorView_Reflection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RadarSensorView.Reflection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RadarSensorView.Reflection)
    MergeFrom(*source);
  }
}

void RadarSensorView_Reflection::MergeFrom(const RadarSensorView_Reflection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarSensorView.Reflection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signal_strength()) {
      set_signal_strength(from.signal_strength());
    }
    if (from.has_time_of_flight()) {
      set_time_of_flight(from.time_of_flight());
    }
    if (from.has_doppler_shift()) {
      set_doppler_shift(from.doppler_shift());
    }
    if (from.has_source_horizontal_angle()) {
      set_source_horizontal_angle(from.source_horizontal_angle());
    }
    if (from.has_source_vertical_angle()) {
      set_source_vertical_angle(from.source_vertical_angle());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RadarSensorView_Reflection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RadarSensorView.Reflection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarSensorView_Reflection::CopyFrom(const RadarSensorView_Reflection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarSensorView.Reflection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSensorView_Reflection::IsInitialized() const {

  return true;
}

void RadarSensorView_Reflection::Swap(RadarSensorView_Reflection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarSensorView_Reflection::InternalSwap(RadarSensorView_Reflection* other) {
  std::swap(signal_strength_, other->signal_strength_);
  std::swap(time_of_flight_, other->time_of_flight_);
  std::swap(doppler_shift_, other->doppler_shift_);
  std::swap(source_horizontal_angle_, other->source_horizontal_angle_);
  std::swap(source_vertical_angle_, other->source_vertical_angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarSensorView_Reflection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarSensorView_Reflection_descriptor_;
  metadata.reflection = RadarSensorView_Reflection_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarSensorView::kViewConfigurationFieldNumber;
const int RadarSensorView::kReflectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarSensorView::RadarSensorView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RadarSensorView)
}

void RadarSensorView::InitAsDefaultInstance() {
  view_configuration_ = const_cast< ::osi3::RadarSensorViewConfiguration*>(&::osi3::RadarSensorViewConfiguration::default_instance());
}

RadarSensorView::RadarSensorView(const RadarSensorView& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.RadarSensorView)
}

void RadarSensorView::SharedCtor() {
  _cached_size_ = 0;
  view_configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarSensorView::~RadarSensorView() {
  // @@protoc_insertion_point(destructor:osi3.RadarSensorView)
  SharedDtor();
}

void RadarSensorView::SharedDtor() {
  if (this != default_instance_) {
    delete view_configuration_;
  }
}

void RadarSensorView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarSensorView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarSensorView_descriptor_;
}

const RadarSensorView& RadarSensorView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorview_2eproto();
  return *default_instance_;
}

RadarSensorView* RadarSensorView::default_instance_ = NULL;

RadarSensorView* RadarSensorView::New(::google::protobuf::Arena* arena) const {
  RadarSensorView* n = new RadarSensorView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarSensorView::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarSensorView)
  if (has_view_configuration()) {
    if (view_configuration_ != NULL) view_configuration_->::osi3::RadarSensorViewConfiguration::Clear();
  }
  reflection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RadarSensorView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RadarSensorView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.RadarSensorViewConfiguration view_configuration = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reflection;
        break;
      }

      // repeated .osi3.RadarSensorView.Reflection reflection = 2;
      case 2: {
        if (tag == 18) {
         parse_reflection:
          DO_(input->IncrementRecursionDepth());
         parse_loop_reflection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_reflection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_reflection;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RadarSensorView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RadarSensorView)
  return false;
#undef DO_
}

void RadarSensorView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RadarSensorView)
  // optional .osi3.RadarSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->view_configuration_, output);
  }

  // repeated .osi3.RadarSensorView.Reflection reflection = 2;
  for (unsigned int i = 0, n = this->reflection_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reflection(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RadarSensorView)
}

::google::protobuf::uint8* RadarSensorView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarSensorView)
  // optional .osi3.RadarSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->view_configuration_, false, target);
  }

  // repeated .osi3.RadarSensorView.Reflection reflection = 2;
  for (unsigned int i = 0, n = this->reflection_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->reflection(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarSensorView)
  return target;
}

int RadarSensorView::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarSensorView)
  int total_size = 0;

  // optional .osi3.RadarSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->view_configuration_);
  }

  // repeated .osi3.RadarSensorView.Reflection reflection = 2;
  total_size += 1 * this->reflection_size();
  for (int i = 0; i < this->reflection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reflection(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarSensorView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RadarSensorView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RadarSensorView* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarSensorView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RadarSensorView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RadarSensorView)
    MergeFrom(*source);
  }
}

void RadarSensorView::MergeFrom(const RadarSensorView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarSensorView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  reflection_.MergeFrom(from.reflection_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_view_configuration()) {
      mutable_view_configuration()->::osi3::RadarSensorViewConfiguration::MergeFrom(from.view_configuration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RadarSensorView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RadarSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarSensorView::CopyFrom(const RadarSensorView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSensorView::IsInitialized() const {

  return true;
}

void RadarSensorView::Swap(RadarSensorView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarSensorView::InternalSwap(RadarSensorView* other) {
  std::swap(view_configuration_, other->view_configuration_);
  reflection_.UnsafeArenaSwap(&other->reflection_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarSensorView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarSensorView_descriptor_;
  metadata.reflection = RadarSensorView_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarSensorView_Reflection

// optional double signal_strength = 1;
bool RadarSensorView_Reflection::has_signal_strength() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarSensorView_Reflection::set_has_signal_strength() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarSensorView_Reflection::clear_has_signal_strength() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarSensorView_Reflection::clear_signal_strength() {
  signal_strength_ = 0;
  clear_has_signal_strength();
}
 double RadarSensorView_Reflection::signal_strength() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorView.Reflection.signal_strength)
  return signal_strength_;
}
 void RadarSensorView_Reflection::set_signal_strength(double value) {
  set_has_signal_strength();
  signal_strength_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorView.Reflection.signal_strength)
}

// optional double time_of_flight = 2;
bool RadarSensorView_Reflection::has_time_of_flight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarSensorView_Reflection::set_has_time_of_flight() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarSensorView_Reflection::clear_has_time_of_flight() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarSensorView_Reflection::clear_time_of_flight() {
  time_of_flight_ = 0;
  clear_has_time_of_flight();
}
 double RadarSensorView_Reflection::time_of_flight() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorView.Reflection.time_of_flight)
  return time_of_flight_;
}
 void RadarSensorView_Reflection::set_time_of_flight(double value) {
  set_has_time_of_flight();
  time_of_flight_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorView.Reflection.time_of_flight)
}

// optional double doppler_shift = 3;
bool RadarSensorView_Reflection::has_doppler_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RadarSensorView_Reflection::set_has_doppler_shift() {
  _has_bits_[0] |= 0x00000004u;
}
void RadarSensorView_Reflection::clear_has_doppler_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
void RadarSensorView_Reflection::clear_doppler_shift() {
  doppler_shift_ = 0;
  clear_has_doppler_shift();
}
 double RadarSensorView_Reflection::doppler_shift() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorView.Reflection.doppler_shift)
  return doppler_shift_;
}
 void RadarSensorView_Reflection::set_doppler_shift(double value) {
  set_has_doppler_shift();
  doppler_shift_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorView.Reflection.doppler_shift)
}

// optional double source_horizontal_angle = 4;
bool RadarSensorView_Reflection::has_source_horizontal_angle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RadarSensorView_Reflection::set_has_source_horizontal_angle() {
  _has_bits_[0] |= 0x00000008u;
}
void RadarSensorView_Reflection::clear_has_source_horizontal_angle() {
  _has_bits_[0] &= ~0x00000008u;
}
void RadarSensorView_Reflection::clear_source_horizontal_angle() {
  source_horizontal_angle_ = 0;
  clear_has_source_horizontal_angle();
}
 double RadarSensorView_Reflection::source_horizontal_angle() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorView.Reflection.source_horizontal_angle)
  return source_horizontal_angle_;
}
 void RadarSensorView_Reflection::set_source_horizontal_angle(double value) {
  set_has_source_horizontal_angle();
  source_horizontal_angle_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorView.Reflection.source_horizontal_angle)
}

// optional double source_vertical_angle = 5;
bool RadarSensorView_Reflection::has_source_vertical_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RadarSensorView_Reflection::set_has_source_vertical_angle() {
  _has_bits_[0] |= 0x00000010u;
}
void RadarSensorView_Reflection::clear_has_source_vertical_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
void RadarSensorView_Reflection::clear_source_vertical_angle() {
  source_vertical_angle_ = 0;
  clear_has_source_vertical_angle();
}
 double RadarSensorView_Reflection::source_vertical_angle() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorView.Reflection.source_vertical_angle)
  return source_vertical_angle_;
}
 void RadarSensorView_Reflection::set_source_vertical_angle(double value) {
  set_has_source_vertical_angle();
  source_vertical_angle_ = value;
  // @@protoc_insertion_point(field_set:osi3.RadarSensorView.Reflection.source_vertical_angle)
}

// -------------------------------------------------------------------

// RadarSensorView

// optional .osi3.RadarSensorViewConfiguration view_configuration = 1;
bool RadarSensorView::has_view_configuration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarSensorView::set_has_view_configuration() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarSensorView::clear_has_view_configuration() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarSensorView::clear_view_configuration() {
  if (view_configuration_ != NULL) view_configuration_->::osi3::RadarSensorViewConfiguration::Clear();
  clear_has_view_configuration();
}
const ::osi3::RadarSensorViewConfiguration& RadarSensorView::view_configuration() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorView.view_configuration)
  return view_configuration_ != NULL ? *view_configuration_ : *default_instance_->view_configuration_;
}
::osi3::RadarSensorViewConfiguration* RadarSensorView::mutable_view_configuration() {
  set_has_view_configuration();
  if (view_configuration_ == NULL) {
    view_configuration_ = new ::osi3::RadarSensorViewConfiguration;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RadarSensorView.view_configuration)
  return view_configuration_;
}
::osi3::RadarSensorViewConfiguration* RadarSensorView::release_view_configuration() {
  // @@protoc_insertion_point(field_release:osi3.RadarSensorView.view_configuration)
  clear_has_view_configuration();
  ::osi3::RadarSensorViewConfiguration* temp = view_configuration_;
  view_configuration_ = NULL;
  return temp;
}
void RadarSensorView::set_allocated_view_configuration(::osi3::RadarSensorViewConfiguration* view_configuration) {
  delete view_configuration_;
  view_configuration_ = view_configuration;
  if (view_configuration) {
    set_has_view_configuration();
  } else {
    clear_has_view_configuration();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RadarSensorView.view_configuration)
}

// repeated .osi3.RadarSensorView.Reflection reflection = 2;
int RadarSensorView::reflection_size() const {
  return reflection_.size();
}
void RadarSensorView::clear_reflection() {
  reflection_.Clear();
}
const ::osi3::RadarSensorView_Reflection& RadarSensorView::reflection(int index) const {
  // @@protoc_insertion_point(field_get:osi3.RadarSensorView.reflection)
  return reflection_.Get(index);
}
::osi3::RadarSensorView_Reflection* RadarSensorView::mutable_reflection(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.RadarSensorView.reflection)
  return reflection_.Mutable(index);
}
::osi3::RadarSensorView_Reflection* RadarSensorView::add_reflection() {
  // @@protoc_insertion_point(field_add:osi3.RadarSensorView.reflection)
  return reflection_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorView_Reflection >*
RadarSensorView::mutable_reflection() {
  // @@protoc_insertion_point(field_mutable_list:osi3.RadarSensorView.reflection)
  return &reflection_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::RadarSensorView_Reflection >&
RadarSensorView::reflection() const {
  // @@protoc_insertion_point(field_list:osi3.RadarSensorView.reflection)
  return reflection_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarSensorView_Reflection::kSignalStrengthFieldNumber;
const int LidarSensorView_Reflection::kTimeOfFlightFieldNumber;
const int LidarSensorView_Reflection::kDopplerShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarSensorView_Reflection::LidarSensorView_Reflection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LidarSensorView.Reflection)
}

void LidarSensorView_Reflection::InitAsDefaultInstance() {
}

LidarSensorView_Reflection::LidarSensorView_Reflection(const LidarSensorView_Reflection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.LidarSensorView.Reflection)
}

void LidarSensorView_Reflection::SharedCtor() {
  _cached_size_ = 0;
  signal_strength_ = 0;
  time_of_flight_ = 0;
  doppler_shift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LidarSensorView_Reflection::~LidarSensorView_Reflection() {
  // @@protoc_insertion_point(destructor:osi3.LidarSensorView.Reflection)
  SharedDtor();
}

void LidarSensorView_Reflection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LidarSensorView_Reflection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarSensorView_Reflection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LidarSensorView_Reflection_descriptor_;
}

const LidarSensorView_Reflection& LidarSensorView_Reflection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorview_2eproto();
  return *default_instance_;
}

LidarSensorView_Reflection* LidarSensorView_Reflection::default_instance_ = NULL;

LidarSensorView_Reflection* LidarSensorView_Reflection::New(::google::protobuf::Arena* arena) const {
  LidarSensorView_Reflection* n = new LidarSensorView_Reflection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LidarSensorView_Reflection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LidarSensorView.Reflection)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LidarSensorView_Reflection, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LidarSensorView_Reflection*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(signal_strength_, doppler_shift_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LidarSensorView_Reflection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LidarSensorView.Reflection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double signal_strength = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &signal_strength_)));
          set_has_signal_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_time_of_flight;
        break;
      }

      // optional double time_of_flight = 2;
      case 2: {
        if (tag == 17) {
         parse_time_of_flight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_of_flight_)));
          set_has_time_of_flight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_doppler_shift;
        break;
      }

      // optional double doppler_shift = 3;
      case 3: {
        if (tag == 25) {
         parse_doppler_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doppler_shift_)));
          set_has_doppler_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LidarSensorView.Reflection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LidarSensorView.Reflection)
  return false;
#undef DO_
}

void LidarSensorView_Reflection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LidarSensorView.Reflection)
  // optional double signal_strength = 1;
  if (has_signal_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->signal_strength(), output);
  }

  // optional double time_of_flight = 2;
  if (has_time_of_flight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time_of_flight(), output);
  }

  // optional double doppler_shift = 3;
  if (has_doppler_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->doppler_shift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LidarSensorView.Reflection)
}

::google::protobuf::uint8* LidarSensorView_Reflection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LidarSensorView.Reflection)
  // optional double signal_strength = 1;
  if (has_signal_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->signal_strength(), target);
  }

  // optional double time_of_flight = 2;
  if (has_time_of_flight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time_of_flight(), target);
  }

  // optional double doppler_shift = 3;
  if (has_doppler_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->doppler_shift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LidarSensorView.Reflection)
  return target;
}

int LidarSensorView_Reflection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LidarSensorView.Reflection)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double signal_strength = 1;
    if (has_signal_strength()) {
      total_size += 1 + 8;
    }

    // optional double time_of_flight = 2;
    if (has_time_of_flight()) {
      total_size += 1 + 8;
    }

    // optional double doppler_shift = 3;
    if (has_doppler_shift()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarSensorView_Reflection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LidarSensorView.Reflection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LidarSensorView_Reflection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarSensorView_Reflection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LidarSensorView.Reflection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LidarSensorView.Reflection)
    MergeFrom(*source);
  }
}

void LidarSensorView_Reflection::MergeFrom(const LidarSensorView_Reflection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LidarSensorView.Reflection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signal_strength()) {
      set_signal_strength(from.signal_strength());
    }
    if (from.has_time_of_flight()) {
      set_time_of_flight(from.time_of_flight());
    }
    if (from.has_doppler_shift()) {
      set_doppler_shift(from.doppler_shift());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LidarSensorView_Reflection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LidarSensorView.Reflection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarSensorView_Reflection::CopyFrom(const LidarSensorView_Reflection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LidarSensorView.Reflection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarSensorView_Reflection::IsInitialized() const {

  return true;
}

void LidarSensorView_Reflection::Swap(LidarSensorView_Reflection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarSensorView_Reflection::InternalSwap(LidarSensorView_Reflection* other) {
  std::swap(signal_strength_, other->signal_strength_);
  std::swap(time_of_flight_, other->time_of_flight_);
  std::swap(doppler_shift_, other->doppler_shift_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarSensorView_Reflection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LidarSensorView_Reflection_descriptor_;
  metadata.reflection = LidarSensorView_Reflection_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarSensorView::kViewConfigurationFieldNumber;
const int LidarSensorView::kReflectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarSensorView::LidarSensorView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LidarSensorView)
}

void LidarSensorView::InitAsDefaultInstance() {
  view_configuration_ = const_cast< ::osi3::LidarSensorViewConfiguration*>(&::osi3::LidarSensorViewConfiguration::default_instance());
}

LidarSensorView::LidarSensorView(const LidarSensorView& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.LidarSensorView)
}

void LidarSensorView::SharedCtor() {
  _cached_size_ = 0;
  view_configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LidarSensorView::~LidarSensorView() {
  // @@protoc_insertion_point(destructor:osi3.LidarSensorView)
  SharedDtor();
}

void LidarSensorView::SharedDtor() {
  if (this != default_instance_) {
    delete view_configuration_;
  }
}

void LidarSensorView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarSensorView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LidarSensorView_descriptor_;
}

const LidarSensorView& LidarSensorView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorview_2eproto();
  return *default_instance_;
}

LidarSensorView* LidarSensorView::default_instance_ = NULL;

LidarSensorView* LidarSensorView::New(::google::protobuf::Arena* arena) const {
  LidarSensorView* n = new LidarSensorView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LidarSensorView::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LidarSensorView)
  if (has_view_configuration()) {
    if (view_configuration_ != NULL) view_configuration_->::osi3::LidarSensorViewConfiguration::Clear();
  }
  reflection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LidarSensorView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LidarSensorView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.LidarSensorViewConfiguration view_configuration = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reflection;
        break;
      }

      // repeated .osi3.LidarSensorView.Reflection reflection = 2;
      case 2: {
        if (tag == 18) {
         parse_reflection:
          DO_(input->IncrementRecursionDepth());
         parse_loop_reflection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_reflection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_reflection;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LidarSensorView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LidarSensorView)
  return false;
#undef DO_
}

void LidarSensorView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LidarSensorView)
  // optional .osi3.LidarSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->view_configuration_, output);
  }

  // repeated .osi3.LidarSensorView.Reflection reflection = 2;
  for (unsigned int i = 0, n = this->reflection_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reflection(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LidarSensorView)
}

::google::protobuf::uint8* LidarSensorView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LidarSensorView)
  // optional .osi3.LidarSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->view_configuration_, false, target);
  }

  // repeated .osi3.LidarSensorView.Reflection reflection = 2;
  for (unsigned int i = 0, n = this->reflection_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->reflection(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LidarSensorView)
  return target;
}

int LidarSensorView::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LidarSensorView)
  int total_size = 0;

  // optional .osi3.LidarSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->view_configuration_);
  }

  // repeated .osi3.LidarSensorView.Reflection reflection = 2;
  total_size += 1 * this->reflection_size();
  for (int i = 0; i < this->reflection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reflection(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarSensorView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LidarSensorView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LidarSensorView* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarSensorView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LidarSensorView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LidarSensorView)
    MergeFrom(*source);
  }
}

void LidarSensorView::MergeFrom(const LidarSensorView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LidarSensorView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  reflection_.MergeFrom(from.reflection_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_view_configuration()) {
      mutable_view_configuration()->::osi3::LidarSensorViewConfiguration::MergeFrom(from.view_configuration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LidarSensorView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LidarSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarSensorView::CopyFrom(const LidarSensorView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LidarSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarSensorView::IsInitialized() const {

  return true;
}

void LidarSensorView::Swap(LidarSensorView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarSensorView::InternalSwap(LidarSensorView* other) {
  std::swap(view_configuration_, other->view_configuration_);
  reflection_.UnsafeArenaSwap(&other->reflection_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarSensorView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LidarSensorView_descriptor_;
  metadata.reflection = LidarSensorView_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LidarSensorView_Reflection

// optional double signal_strength = 1;
bool LidarSensorView_Reflection::has_signal_strength() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LidarSensorView_Reflection::set_has_signal_strength() {
  _has_bits_[0] |= 0x00000001u;
}
void LidarSensorView_Reflection::clear_has_signal_strength() {
  _has_bits_[0] &= ~0x00000001u;
}
void LidarSensorView_Reflection::clear_signal_strength() {
  signal_strength_ = 0;
  clear_has_signal_strength();
}
 double LidarSensorView_Reflection::signal_strength() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorView.Reflection.signal_strength)
  return signal_strength_;
}
 void LidarSensorView_Reflection::set_signal_strength(double value) {
  set_has_signal_strength();
  signal_strength_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorView.Reflection.signal_strength)
}

// optional double time_of_flight = 2;
bool LidarSensorView_Reflection::has_time_of_flight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LidarSensorView_Reflection::set_has_time_of_flight() {
  _has_bits_[0] |= 0x00000002u;
}
void LidarSensorView_Reflection::clear_has_time_of_flight() {
  _has_bits_[0] &= ~0x00000002u;
}
void LidarSensorView_Reflection::clear_time_of_flight() {
  time_of_flight_ = 0;
  clear_has_time_of_flight();
}
 double LidarSensorView_Reflection::time_of_flight() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorView.Reflection.time_of_flight)
  return time_of_flight_;
}
 void LidarSensorView_Reflection::set_time_of_flight(double value) {
  set_has_time_of_flight();
  time_of_flight_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorView.Reflection.time_of_flight)
}

// optional double doppler_shift = 3;
bool LidarSensorView_Reflection::has_doppler_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LidarSensorView_Reflection::set_has_doppler_shift() {
  _has_bits_[0] |= 0x00000004u;
}
void LidarSensorView_Reflection::clear_has_doppler_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
void LidarSensorView_Reflection::clear_doppler_shift() {
  doppler_shift_ = 0;
  clear_has_doppler_shift();
}
 double LidarSensorView_Reflection::doppler_shift() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorView.Reflection.doppler_shift)
  return doppler_shift_;
}
 void LidarSensorView_Reflection::set_doppler_shift(double value) {
  set_has_doppler_shift();
  doppler_shift_ = value;
  // @@protoc_insertion_point(field_set:osi3.LidarSensorView.Reflection.doppler_shift)
}

// -------------------------------------------------------------------

// LidarSensorView

// optional .osi3.LidarSensorViewConfiguration view_configuration = 1;
bool LidarSensorView::has_view_configuration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LidarSensorView::set_has_view_configuration() {
  _has_bits_[0] |= 0x00000001u;
}
void LidarSensorView::clear_has_view_configuration() {
  _has_bits_[0] &= ~0x00000001u;
}
void LidarSensorView::clear_view_configuration() {
  if (view_configuration_ != NULL) view_configuration_->::osi3::LidarSensorViewConfiguration::Clear();
  clear_has_view_configuration();
}
const ::osi3::LidarSensorViewConfiguration& LidarSensorView::view_configuration() const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorView.view_configuration)
  return view_configuration_ != NULL ? *view_configuration_ : *default_instance_->view_configuration_;
}
::osi3::LidarSensorViewConfiguration* LidarSensorView::mutable_view_configuration() {
  set_has_view_configuration();
  if (view_configuration_ == NULL) {
    view_configuration_ = new ::osi3::LidarSensorViewConfiguration;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LidarSensorView.view_configuration)
  return view_configuration_;
}
::osi3::LidarSensorViewConfiguration* LidarSensorView::release_view_configuration() {
  // @@protoc_insertion_point(field_release:osi3.LidarSensorView.view_configuration)
  clear_has_view_configuration();
  ::osi3::LidarSensorViewConfiguration* temp = view_configuration_;
  view_configuration_ = NULL;
  return temp;
}
void LidarSensorView::set_allocated_view_configuration(::osi3::LidarSensorViewConfiguration* view_configuration) {
  delete view_configuration_;
  view_configuration_ = view_configuration;
  if (view_configuration) {
    set_has_view_configuration();
  } else {
    clear_has_view_configuration();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.LidarSensorView.view_configuration)
}

// repeated .osi3.LidarSensorView.Reflection reflection = 2;
int LidarSensorView::reflection_size() const {
  return reflection_.size();
}
void LidarSensorView::clear_reflection() {
  reflection_.Clear();
}
const ::osi3::LidarSensorView_Reflection& LidarSensorView::reflection(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LidarSensorView.reflection)
  return reflection_.Get(index);
}
::osi3::LidarSensorView_Reflection* LidarSensorView::mutable_reflection(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LidarSensorView.reflection)
  return reflection_.Mutable(index);
}
::osi3::LidarSensorView_Reflection* LidarSensorView::add_reflection() {
  // @@protoc_insertion_point(field_add:osi3.LidarSensorView.reflection)
  return reflection_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::LidarSensorView_Reflection >*
LidarSensorView::mutable_reflection() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LidarSensorView.reflection)
  return &reflection_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::LidarSensorView_Reflection >&
LidarSensorView::reflection() const {
  // @@protoc_insertion_point(field_list:osi3.LidarSensorView.reflection)
  return reflection_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraSensorView::kViewConfigurationFieldNumber;
const int CameraSensorView::kImageDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraSensorView::CameraSensorView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.CameraSensorView)
}

void CameraSensorView::InitAsDefaultInstance() {
  view_configuration_ = const_cast< ::osi3::CameraSensorViewConfiguration*>(&::osi3::CameraSensorViewConfiguration::default_instance());
}

CameraSensorView::CameraSensorView(const CameraSensorView& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.CameraSensorView)
}

void CameraSensorView::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  view_configuration_ = NULL;
  image_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraSensorView::~CameraSensorView() {
  // @@protoc_insertion_point(destructor:osi3.CameraSensorView)
  SharedDtor();
}

void CameraSensorView::SharedDtor() {
  image_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete view_configuration_;
  }
}

void CameraSensorView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraSensorView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraSensorView_descriptor_;
}

const CameraSensorView& CameraSensorView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorview_2eproto();
  return *default_instance_;
}

CameraSensorView* CameraSensorView::default_instance_ = NULL;

CameraSensorView* CameraSensorView::New(::google::protobuf::Arena* arena) const {
  CameraSensorView* n = new CameraSensorView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraSensorView::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraSensorView)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_view_configuration()) {
      if (view_configuration_ != NULL) view_configuration_->::osi3::CameraSensorViewConfiguration::Clear();
    }
    if (has_image_data()) {
      image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CameraSensorView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.CameraSensorView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.CameraSensorViewConfiguration view_configuration = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image_data;
        break;
      }

      // optional bytes image_data = 2;
      case 2: {
        if (tag == 18) {
         parse_image_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.CameraSensorView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.CameraSensorView)
  return false;
#undef DO_
}

void CameraSensorView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.CameraSensorView)
  // optional .osi3.CameraSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->view_configuration_, output);
  }

  // optional bytes image_data = 2;
  if (has_image_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->image_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.CameraSensorView)
}

::google::protobuf::uint8* CameraSensorView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraSensorView)
  // optional .osi3.CameraSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->view_configuration_, false, target);
  }

  // optional bytes image_data = 2;
  if (has_image_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->image_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraSensorView)
  return target;
}

int CameraSensorView::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraSensorView)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .osi3.CameraSensorViewConfiguration view_configuration = 1;
    if (has_view_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->view_configuration_);
    }

    // optional bytes image_data = 2;
    if (has_image_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->image_data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraSensorView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.CameraSensorView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CameraSensorView* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraSensorView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.CameraSensorView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.CameraSensorView)
    MergeFrom(*source);
  }
}

void CameraSensorView::MergeFrom(const CameraSensorView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraSensorView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_view_configuration()) {
      mutable_view_configuration()->::osi3::CameraSensorViewConfiguration::MergeFrom(from.view_configuration());
    }
    if (from.has_image_data()) {
      set_has_image_data();
      image_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CameraSensorView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.CameraSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSensorView::CopyFrom(const CameraSensorView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSensorView::IsInitialized() const {

  return true;
}

void CameraSensorView::Swap(CameraSensorView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraSensorView::InternalSwap(CameraSensorView* other) {
  std::swap(view_configuration_, other->view_configuration_);
  image_data_.Swap(&other->image_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraSensorView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraSensorView_descriptor_;
  metadata.reflection = CameraSensorView_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraSensorView

// optional .osi3.CameraSensorViewConfiguration view_configuration = 1;
bool CameraSensorView::has_view_configuration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CameraSensorView::set_has_view_configuration() {
  _has_bits_[0] |= 0x00000001u;
}
void CameraSensorView::clear_has_view_configuration() {
  _has_bits_[0] &= ~0x00000001u;
}
void CameraSensorView::clear_view_configuration() {
  if (view_configuration_ != NULL) view_configuration_->::osi3::CameraSensorViewConfiguration::Clear();
  clear_has_view_configuration();
}
const ::osi3::CameraSensorViewConfiguration& CameraSensorView::view_configuration() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorView.view_configuration)
  return view_configuration_ != NULL ? *view_configuration_ : *default_instance_->view_configuration_;
}
::osi3::CameraSensorViewConfiguration* CameraSensorView::mutable_view_configuration() {
  set_has_view_configuration();
  if (view_configuration_ == NULL) {
    view_configuration_ = new ::osi3::CameraSensorViewConfiguration;
  }
  // @@protoc_insertion_point(field_mutable:osi3.CameraSensorView.view_configuration)
  return view_configuration_;
}
::osi3::CameraSensorViewConfiguration* CameraSensorView::release_view_configuration() {
  // @@protoc_insertion_point(field_release:osi3.CameraSensorView.view_configuration)
  clear_has_view_configuration();
  ::osi3::CameraSensorViewConfiguration* temp = view_configuration_;
  view_configuration_ = NULL;
  return temp;
}
void CameraSensorView::set_allocated_view_configuration(::osi3::CameraSensorViewConfiguration* view_configuration) {
  delete view_configuration_;
  view_configuration_ = view_configuration;
  if (view_configuration) {
    set_has_view_configuration();
  } else {
    clear_has_view_configuration();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.CameraSensorView.view_configuration)
}

// optional bytes image_data = 2;
bool CameraSensorView::has_image_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CameraSensorView::set_has_image_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CameraSensorView::clear_has_image_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CameraSensorView::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_data();
}
 const ::std::string& CameraSensorView::image_data() const {
  // @@protoc_insertion_point(field_get:osi3.CameraSensorView.image_data)
  return image_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraSensorView::set_image_data(const ::std::string& value) {
  set_has_image_data();
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:osi3.CameraSensorView.image_data)
}
 void CameraSensorView::set_image_data(const char* value) {
  set_has_image_data();
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.CameraSensorView.image_data)
}
 void CameraSensorView::set_image_data(const void* value, size_t size) {
  set_has_image_data();
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.CameraSensorView.image_data)
}
 ::std::string* CameraSensorView::mutable_image_data() {
  set_has_image_data();
  // @@protoc_insertion_point(field_mutable:osi3.CameraSensorView.image_data)
  return image_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraSensorView::release_image_data() {
  // @@protoc_insertion_point(field_release:osi3.CameraSensorView.image_data)
  clear_has_image_data();
  return image_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraSensorView::set_allocated_image_data(::std::string* image_data) {
  if (image_data != NULL) {
    set_has_image_data();
  } else {
    clear_has_image_data();
  }
  image_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:osi3.CameraSensorView.image_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UltrasonicSensorView::kViewConfigurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UltrasonicSensorView::UltrasonicSensorView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicSensorView)
}

void UltrasonicSensorView::InitAsDefaultInstance() {
  view_configuration_ = const_cast< ::osi3::UltrasonicSensorViewConfiguration*>(&::osi3::UltrasonicSensorViewConfiguration::default_instance());
}

UltrasonicSensorView::UltrasonicSensorView(const UltrasonicSensorView& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicSensorView)
}

void UltrasonicSensorView::SharedCtor() {
  _cached_size_ = 0;
  view_configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UltrasonicSensorView::~UltrasonicSensorView() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicSensorView)
  SharedDtor();
}

void UltrasonicSensorView::SharedDtor() {
  if (this != default_instance_) {
    delete view_configuration_;
  }
}

void UltrasonicSensorView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltrasonicSensorView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UltrasonicSensorView_descriptor_;
}

const UltrasonicSensorView& UltrasonicSensorView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensorview_2eproto();
  return *default_instance_;
}

UltrasonicSensorView* UltrasonicSensorView::default_instance_ = NULL;

UltrasonicSensorView* UltrasonicSensorView::New(::google::protobuf::Arena* arena) const {
  UltrasonicSensorView* n = new UltrasonicSensorView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UltrasonicSensorView::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicSensorView)
  if (has_view_configuration()) {
    if (view_configuration_ != NULL) view_configuration_->::osi3::UltrasonicSensorViewConfiguration::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UltrasonicSensorView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicSensorView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.UltrasonicSensorViewConfiguration view_configuration = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicSensorView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicSensorView)
  return false;
#undef DO_
}

void UltrasonicSensorView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicSensorView)
  // optional .osi3.UltrasonicSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->view_configuration_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicSensorView)
}

::google::protobuf::uint8* UltrasonicSensorView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicSensorView)
  // optional .osi3.UltrasonicSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->view_configuration_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicSensorView)
  return target;
}

int UltrasonicSensorView::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicSensorView)
  int total_size = 0;

  // optional .osi3.UltrasonicSensorViewConfiguration view_configuration = 1;
  if (has_view_configuration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->view_configuration_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltrasonicSensorView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicSensorView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UltrasonicSensorView* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UltrasonicSensorView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicSensorView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicSensorView)
    MergeFrom(*source);
  }
}

void UltrasonicSensorView::MergeFrom(const UltrasonicSensorView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicSensorView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_view_configuration()) {
      mutable_view_configuration()->::osi3::UltrasonicSensorViewConfiguration::MergeFrom(from.view_configuration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UltrasonicSensorView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicSensorView::CopyFrom(const UltrasonicSensorView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicSensorView::IsInitialized() const {

  return true;
}

void UltrasonicSensorView::Swap(UltrasonicSensorView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UltrasonicSensorView::InternalSwap(UltrasonicSensorView* other) {
  std::swap(view_configuration_, other->view_configuration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UltrasonicSensorView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UltrasonicSensorView_descriptor_;
  metadata.reflection = UltrasonicSensorView_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UltrasonicSensorView

// optional .osi3.UltrasonicSensorViewConfiguration view_configuration = 1;
bool UltrasonicSensorView::has_view_configuration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UltrasonicSensorView::set_has_view_configuration() {
  _has_bits_[0] |= 0x00000001u;
}
void UltrasonicSensorView::clear_has_view_configuration() {
  _has_bits_[0] &= ~0x00000001u;
}
void UltrasonicSensorView::clear_view_configuration() {
  if (view_configuration_ != NULL) view_configuration_->::osi3::UltrasonicSensorViewConfiguration::Clear();
  clear_has_view_configuration();
}
const ::osi3::UltrasonicSensorViewConfiguration& UltrasonicSensorView::view_configuration() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSensorView.view_configuration)
  return view_configuration_ != NULL ? *view_configuration_ : *default_instance_->view_configuration_;
}
::osi3::UltrasonicSensorViewConfiguration* UltrasonicSensorView::mutable_view_configuration() {
  set_has_view_configuration();
  if (view_configuration_ == NULL) {
    view_configuration_ = new ::osi3::UltrasonicSensorViewConfiguration;
  }
  // @@protoc_insertion_point(field_mutable:osi3.UltrasonicSensorView.view_configuration)
  return view_configuration_;
}
::osi3::UltrasonicSensorViewConfiguration* UltrasonicSensorView::release_view_configuration() {
  // @@protoc_insertion_point(field_release:osi3.UltrasonicSensorView.view_configuration)
  clear_has_view_configuration();
  ::osi3::UltrasonicSensorViewConfiguration* temp = view_configuration_;
  view_configuration_ = NULL;
  return temp;
}
void UltrasonicSensorView::set_allocated_view_configuration(::osi3::UltrasonicSensorViewConfiguration* view_configuration) {
  delete view_configuration_;
  view_configuration_ = view_configuration;
  if (view_configuration) {
    set_has_view_configuration();
  } else {
    clear_has_view_configuration();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.UltrasonicSensorView.view_configuration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
