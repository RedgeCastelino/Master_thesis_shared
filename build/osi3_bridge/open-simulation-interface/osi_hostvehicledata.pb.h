// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_hostvehicledata.proto

#ifndef PROTOBUF_osi_5fhostvehicledata_2eproto__INCLUDED
#define PROTOBUF_osi_5fhostvehicledata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)

namespace osi3 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_osi_5fhostvehicledata_2eproto();
void protobuf_AssignDesc_osi_5fhostvehicledata_2eproto();
void protobuf_ShutdownFile_osi_5fhostvehicledata_2eproto();

class HostVehicleData;

// ===================================================================

class HostVehicleData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData) */ {
 public:
  HostVehicleData();
  virtual ~HostVehicleData();

  HostVehicleData(const HostVehicleData& from);

  inline HostVehicleData& operator=(const HostVehicleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HostVehicleData& default_instance();

  void Swap(HostVehicleData* other);

  // implements Message ----------------------------------------------

  inline HostVehicleData* New() const { return New(NULL); }

  HostVehicleData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HostVehicleData& from);
  void MergeFrom(const HostVehicleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HostVehicleData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.BaseMoving location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::osi3::BaseMoving& location() const;
  ::osi3::BaseMoving* mutable_location();
  ::osi3::BaseMoving* release_location();
  void set_allocated_location(::osi3::BaseMoving* location);

  // optional .osi3.BaseMoving location_rmse = 2;
  bool has_location_rmse() const;
  void clear_location_rmse();
  static const int kLocationRmseFieldNumber = 2;
  const ::osi3::BaseMoving& location_rmse() const;
  ::osi3::BaseMoving* mutable_location_rmse();
  ::osi3::BaseMoving* release_location_rmse();
  void set_allocated_location_rmse(::osi3::BaseMoving* location_rmse);

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData)
 private:
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_location_rmse();
  inline void clear_has_location_rmse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::BaseMoving* location_;
  ::osi3::BaseMoving* location_rmse_;
  friend void  protobuf_AddDesc_osi_5fhostvehicledata_2eproto();
  friend void protobuf_AssignDesc_osi_5fhostvehicledata_2eproto();
  friend void protobuf_ShutdownFile_osi_5fhostvehicledata_2eproto();

  void InitAsDefaultInstance();
  static HostVehicleData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HostVehicleData

// optional .osi3.BaseMoving location = 1;
inline bool HostVehicleData::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HostVehicleData::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HostVehicleData::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HostVehicleData::clear_location() {
  if (location_ != NULL) location_->::osi3::BaseMoving::Clear();
  clear_has_location();
}
inline const ::osi3::BaseMoving& HostVehicleData::location() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::osi3::BaseMoving* HostVehicleData::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::osi3::BaseMoving;
  }
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.location)
  return location_;
}
inline ::osi3::BaseMoving* HostVehicleData::release_location() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.location)
  clear_has_location();
  ::osi3::BaseMoving* temp = location_;
  location_ = NULL;
  return temp;
}
inline void HostVehicleData::set_allocated_location(::osi3::BaseMoving* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.location)
}

// optional .osi3.BaseMoving location_rmse = 2;
inline bool HostVehicleData::has_location_rmse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HostVehicleData::set_has_location_rmse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HostVehicleData::clear_has_location_rmse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HostVehicleData::clear_location_rmse() {
  if (location_rmse_ != NULL) location_rmse_->::osi3::BaseMoving::Clear();
  clear_has_location_rmse();
}
inline const ::osi3::BaseMoving& HostVehicleData::location_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.location_rmse)
  return location_rmse_ != NULL ? *location_rmse_ : *default_instance_->location_rmse_;
}
inline ::osi3::BaseMoving* HostVehicleData::mutable_location_rmse() {
  set_has_location_rmse();
  if (location_rmse_ == NULL) {
    location_rmse_ = new ::osi3::BaseMoving;
  }
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.location_rmse)
  return location_rmse_;
}
inline ::osi3::BaseMoving* HostVehicleData::release_location_rmse() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.location_rmse)
  clear_has_location_rmse();
  ::osi3::BaseMoving* temp = location_rmse_;
  location_rmse_ = NULL;
  return temp;
}
inline void HostVehicleData::set_allocated_location_rmse(::osi3::BaseMoving* location_rmse) {
  delete location_rmse_;
  location_rmse_ = location_rmse;
  if (location_rmse) {
    set_has_location_rmse();
  } else {
    clear_has_location_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.location_rmse)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osi_5fhostvehicledata_2eproto__INCLUDED
