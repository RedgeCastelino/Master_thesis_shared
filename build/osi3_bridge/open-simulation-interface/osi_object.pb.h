// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_object.proto

#ifndef PROTOBUF_osi_5fobject_2eproto__INCLUDED
#define PROTOBUF_osi_5fobject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)

namespace osi3 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_osi_5fobject_2eproto();
void protobuf_AssignDesc_osi_5fobject_2eproto();
void protobuf_ShutdownFile_osi_5fobject_2eproto();

class MovingObject;
class MovingObject_VehicleAttributes;
class MovingObject_VehicleClassification;
class MovingObject_VehicleClassification_LightState;
class StationaryObject;
class StationaryObject_Classification;

enum StationaryObject_Classification_Type {
  StationaryObject_Classification_Type_TYPE_UNKNOWN = 0,
  StationaryObject_Classification_Type_TYPE_OTHER = 1,
  StationaryObject_Classification_Type_TYPE_BRIDGE = 2,
  StationaryObject_Classification_Type_TYPE_BUILDING = 3,
  StationaryObject_Classification_Type_TYPE_POLE = 4,
  StationaryObject_Classification_Type_TYPE_PYLON = 5,
  StationaryObject_Classification_Type_TYPE_DELINEATOR = 6,
  StationaryObject_Classification_Type_TYPE_TREE = 7,
  StationaryObject_Classification_Type_TYPE_BARRIER = 8,
  StationaryObject_Classification_Type_TYPE_VEGETATION = 9,
  StationaryObject_Classification_Type_TYPE_CURBSTONE = 10,
  StationaryObject_Classification_Type_TYPE_WALL = 11,
  StationaryObject_Classification_Type_TYPE_VERTICAL_STRUCTURE = 12,
  StationaryObject_Classification_Type_TYPE_RECTANGULAR_STRUCTURE = 13,
  StationaryObject_Classification_Type_TYPE_OVERHEAD_STRUCTURE = 14,
  StationaryObject_Classification_Type_TYPE_REFLECTIVE_STRUCTURE = 15,
  StationaryObject_Classification_Type_TYPE_CONSTRUCTION_SITE_ELEMENT = 16
};
bool StationaryObject_Classification_Type_IsValid(int value);
const StationaryObject_Classification_Type StationaryObject_Classification_Type_Type_MIN = StationaryObject_Classification_Type_TYPE_UNKNOWN;
const StationaryObject_Classification_Type StationaryObject_Classification_Type_Type_MAX = StationaryObject_Classification_Type_TYPE_CONSTRUCTION_SITE_ELEMENT;
const int StationaryObject_Classification_Type_Type_ARRAYSIZE = StationaryObject_Classification_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Type_descriptor();
inline const ::std::string& StationaryObject_Classification_Type_Name(StationaryObject_Classification_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    StationaryObject_Classification_Type_descriptor(), value);
}
inline bool StationaryObject_Classification_Type_Parse(
    const ::std::string& name, StationaryObject_Classification_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StationaryObject_Classification_Type>(
    StationaryObject_Classification_Type_descriptor(), name, value);
}
enum StationaryObject_Classification_Material {
  StationaryObject_Classification_Material_MATERIAL_UNKNOWN = 0,
  StationaryObject_Classification_Material_MATERIAL_OTHER = 1,
  StationaryObject_Classification_Material_MATERIAL_WOOD = 2,
  StationaryObject_Classification_Material_MATERIAL_PLASTIC = 3,
  StationaryObject_Classification_Material_MATERIAL_CONCRETE = 4,
  StationaryObject_Classification_Material_MATERIAL_METAL = 5,
  StationaryObject_Classification_Material_MATERIAL_STONE = 6,
  StationaryObject_Classification_Material_MATERIAL_GLAS = 7,
  StationaryObject_Classification_Material_MATERIAL_MUD = 8
};
bool StationaryObject_Classification_Material_IsValid(int value);
const StationaryObject_Classification_Material StationaryObject_Classification_Material_Material_MIN = StationaryObject_Classification_Material_MATERIAL_UNKNOWN;
const StationaryObject_Classification_Material StationaryObject_Classification_Material_Material_MAX = StationaryObject_Classification_Material_MATERIAL_MUD;
const int StationaryObject_Classification_Material_Material_ARRAYSIZE = StationaryObject_Classification_Material_Material_MAX + 1;

const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Material_descriptor();
inline const ::std::string& StationaryObject_Classification_Material_Name(StationaryObject_Classification_Material value) {
  return ::google::protobuf::internal::NameOfEnum(
    StationaryObject_Classification_Material_descriptor(), value);
}
inline bool StationaryObject_Classification_Material_Parse(
    const ::std::string& name, StationaryObject_Classification_Material* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StationaryObject_Classification_Material>(
    StationaryObject_Classification_Material_descriptor(), name, value);
}
enum StationaryObject_Classification_Density {
  StationaryObject_Classification_Density_DENSITY_UNKNOWN = 0,
  StationaryObject_Classification_Density_DENSITY_OTHER = 1,
  StationaryObject_Classification_Density_DENSITY_SOLID = 2,
  StationaryObject_Classification_Density_DENSITY_SMALL_MESH = 3,
  StationaryObject_Classification_Density_DENSITY_MEDIAN_MESH = 4,
  StationaryObject_Classification_Density_DENSITY_LARGE_MESH = 5,
  StationaryObject_Classification_Density_DENSITY_OPEN = 6
};
bool StationaryObject_Classification_Density_IsValid(int value);
const StationaryObject_Classification_Density StationaryObject_Classification_Density_Density_MIN = StationaryObject_Classification_Density_DENSITY_UNKNOWN;
const StationaryObject_Classification_Density StationaryObject_Classification_Density_Density_MAX = StationaryObject_Classification_Density_DENSITY_OPEN;
const int StationaryObject_Classification_Density_Density_ARRAYSIZE = StationaryObject_Classification_Density_Density_MAX + 1;

const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Density_descriptor();
inline const ::std::string& StationaryObject_Classification_Density_Name(StationaryObject_Classification_Density value) {
  return ::google::protobuf::internal::NameOfEnum(
    StationaryObject_Classification_Density_descriptor(), value);
}
inline bool StationaryObject_Classification_Density_Parse(
    const ::std::string& name, StationaryObject_Classification_Density* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StationaryObject_Classification_Density>(
    StationaryObject_Classification_Density_descriptor(), name, value);
}
enum StationaryObject_Classification_Color {
  StationaryObject_Classification_Color_COLOR_UNKNOWN = 0,
  StationaryObject_Classification_Color_COLOR_OTHER = 1,
  StationaryObject_Classification_Color_COLOR_YELLOW = 2,
  StationaryObject_Classification_Color_COLOR_GREEN = 3,
  StationaryObject_Classification_Color_COLOR_BLUE = 4,
  StationaryObject_Classification_Color_COLOR_VIOLET = 5,
  StationaryObject_Classification_Color_COLOR_RED = 6,
  StationaryObject_Classification_Color_COLOR_ORANGE = 7,
  StationaryObject_Classification_Color_COLOR_BLACK = 8,
  StationaryObject_Classification_Color_COLOR_GREY = 9,
  StationaryObject_Classification_Color_COLOR_WHITE = 10
};
bool StationaryObject_Classification_Color_IsValid(int value);
const StationaryObject_Classification_Color StationaryObject_Classification_Color_Color_MIN = StationaryObject_Classification_Color_COLOR_UNKNOWN;
const StationaryObject_Classification_Color StationaryObject_Classification_Color_Color_MAX = StationaryObject_Classification_Color_COLOR_WHITE;
const int StationaryObject_Classification_Color_Color_ARRAYSIZE = StationaryObject_Classification_Color_Color_MAX + 1;

const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Color_descriptor();
inline const ::std::string& StationaryObject_Classification_Color_Name(StationaryObject_Classification_Color value) {
  return ::google::protobuf::internal::NameOfEnum(
    StationaryObject_Classification_Color_descriptor(), value);
}
inline bool StationaryObject_Classification_Color_Parse(
    const ::std::string& name, StationaryObject_Classification_Color* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StationaryObject_Classification_Color>(
    StationaryObject_Classification_Color_descriptor(), name, value);
}
enum MovingObject_VehicleClassification_LightState_IndicatorState {
  MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_UNKNOWN = 0,
  MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_OTHER = 1,
  MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_OFF = 2,
  MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_LEFT = 3,
  MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_RIGHT = 4,
  MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_WARNING = 5
};
bool MovingObject_VehicleClassification_LightState_IndicatorState_IsValid(int value);
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState_IndicatorState_IndicatorState_MIN = MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_UNKNOWN;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState_IndicatorState_IndicatorState_MAX = MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_WARNING;
const int MovingObject_VehicleClassification_LightState_IndicatorState_IndicatorState_ARRAYSIZE = MovingObject_VehicleClassification_LightState_IndicatorState_IndicatorState_MAX + 1;

const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_LightState_IndicatorState_descriptor();
inline const ::std::string& MovingObject_VehicleClassification_LightState_IndicatorState_Name(MovingObject_VehicleClassification_LightState_IndicatorState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MovingObject_VehicleClassification_LightState_IndicatorState_descriptor(), value);
}
inline bool MovingObject_VehicleClassification_LightState_IndicatorState_Parse(
    const ::std::string& name, MovingObject_VehicleClassification_LightState_IndicatorState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MovingObject_VehicleClassification_LightState_IndicatorState>(
    MovingObject_VehicleClassification_LightState_IndicatorState_descriptor(), name, value);
}
enum MovingObject_VehicleClassification_LightState_GenericLightState {
  MovingObject_VehicleClassification_LightState_GenericLightState_GENERIC_LIGHT_STATE_UNKNOWN = 0,
  MovingObject_VehicleClassification_LightState_GenericLightState_GENERIC_LIGHT_STATE_OTHER = 1,
  MovingObject_VehicleClassification_LightState_GenericLightState_GENERIC_LIGHT_STATE_OFF = 2,
  MovingObject_VehicleClassification_LightState_GenericLightState_GENERIC_LIGHT_STATE_ON = 3
};
bool MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(int value);
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState_GenericLightState_GenericLightState_MIN = MovingObject_VehicleClassification_LightState_GenericLightState_GENERIC_LIGHT_STATE_UNKNOWN;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState_GenericLightState_GenericLightState_MAX = MovingObject_VehicleClassification_LightState_GenericLightState_GENERIC_LIGHT_STATE_ON;
const int MovingObject_VehicleClassification_LightState_GenericLightState_GenericLightState_ARRAYSIZE = MovingObject_VehicleClassification_LightState_GenericLightState_GenericLightState_MAX + 1;

const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_LightState_GenericLightState_descriptor();
inline const ::std::string& MovingObject_VehicleClassification_LightState_GenericLightState_Name(MovingObject_VehicleClassification_LightState_GenericLightState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MovingObject_VehicleClassification_LightState_GenericLightState_descriptor(), value);
}
inline bool MovingObject_VehicleClassification_LightState_GenericLightState_Parse(
    const ::std::string& name, MovingObject_VehicleClassification_LightState_GenericLightState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MovingObject_VehicleClassification_LightState_GenericLightState>(
    MovingObject_VehicleClassification_LightState_GenericLightState_descriptor(), name, value);
}
enum MovingObject_VehicleClassification_LightState_BrakeLightState {
  MovingObject_VehicleClassification_LightState_BrakeLightState_BRAKE_LIGHT_STATE_UNKNOWN = 0,
  MovingObject_VehicleClassification_LightState_BrakeLightState_BRAKE_LIGHT_STATE_OTHER = 1,
  MovingObject_VehicleClassification_LightState_BrakeLightState_BRAKE_LIGHT_STATE_OFF = 2,
  MovingObject_VehicleClassification_LightState_BrakeLightState_BRAKE_LIGHT_STATE_NORMAL = 3,
  MovingObject_VehicleClassification_LightState_BrakeLightState_BRAKE_LIGHT_STATE_STRONG = 4
};
bool MovingObject_VehicleClassification_LightState_BrakeLightState_IsValid(int value);
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState_BrakeLightState_BrakeLightState_MIN = MovingObject_VehicleClassification_LightState_BrakeLightState_BRAKE_LIGHT_STATE_UNKNOWN;
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState_BrakeLightState_BrakeLightState_MAX = MovingObject_VehicleClassification_LightState_BrakeLightState_BRAKE_LIGHT_STATE_STRONG;
const int MovingObject_VehicleClassification_LightState_BrakeLightState_BrakeLightState_ARRAYSIZE = MovingObject_VehicleClassification_LightState_BrakeLightState_BrakeLightState_MAX + 1;

const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_LightState_BrakeLightState_descriptor();
inline const ::std::string& MovingObject_VehicleClassification_LightState_BrakeLightState_Name(MovingObject_VehicleClassification_LightState_BrakeLightState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MovingObject_VehicleClassification_LightState_BrakeLightState_descriptor(), value);
}
inline bool MovingObject_VehicleClassification_LightState_BrakeLightState_Parse(
    const ::std::string& name, MovingObject_VehicleClassification_LightState_BrakeLightState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MovingObject_VehicleClassification_LightState_BrakeLightState>(
    MovingObject_VehicleClassification_LightState_BrakeLightState_descriptor(), name, value);
}
enum MovingObject_VehicleClassification_Type {
  MovingObject_VehicleClassification_Type_TYPE_UNKNOWN = 0,
  MovingObject_VehicleClassification_Type_TYPE_OTHER = 1,
  MovingObject_VehicleClassification_Type_TYPE_SMALL_CAR = 2,
  MovingObject_VehicleClassification_Type_TYPE_COMPACT_CAR = 3,
  MovingObject_VehicleClassification_Type_TYPE_MEDIUM_CAR = 4,
  MovingObject_VehicleClassification_Type_TYPE_LUXURY_CAR = 5,
  MovingObject_VehicleClassification_Type_TYPE_DELIVERY_VAN = 6,
  MovingObject_VehicleClassification_Type_TYPE_HEAVY_TRUCK = 7,
  MovingObject_VehicleClassification_Type_TYPE_SEMITRAILER = 8,
  MovingObject_VehicleClassification_Type_TYPE_TRAILER = 9,
  MovingObject_VehicleClassification_Type_TYPE_MOTORBIKE = 10,
  MovingObject_VehicleClassification_Type_TYPE_BICYCLE = 11,
  MovingObject_VehicleClassification_Type_TYPE_BUS = 12,
  MovingObject_VehicleClassification_Type_TYPE_TRAM = 13,
  MovingObject_VehicleClassification_Type_TYPE_TRAIN = 14,
  MovingObject_VehicleClassification_Type_TYPE_WHEELCHAIR = 15
};
bool MovingObject_VehicleClassification_Type_IsValid(int value);
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification_Type_Type_MIN = MovingObject_VehicleClassification_Type_TYPE_UNKNOWN;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification_Type_Type_MAX = MovingObject_VehicleClassification_Type_TYPE_WHEELCHAIR;
const int MovingObject_VehicleClassification_Type_Type_ARRAYSIZE = MovingObject_VehicleClassification_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_Type_descriptor();
inline const ::std::string& MovingObject_VehicleClassification_Type_Name(MovingObject_VehicleClassification_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MovingObject_VehicleClassification_Type_descriptor(), value);
}
inline bool MovingObject_VehicleClassification_Type_Parse(
    const ::std::string& name, MovingObject_VehicleClassification_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MovingObject_VehicleClassification_Type>(
    MovingObject_VehicleClassification_Type_descriptor(), name, value);
}
enum MovingObject_Type {
  MovingObject_Type_TYPE_UNKNOWN = 0,
  MovingObject_Type_TYPE_OTHER = 1,
  MovingObject_Type_TYPE_VEHICLE = 2,
  MovingObject_Type_TYPE_PEDESTRIAN = 3,
  MovingObject_Type_TYPE_ANIMAL = 4
};
bool MovingObject_Type_IsValid(int value);
const MovingObject_Type MovingObject_Type_Type_MIN = MovingObject_Type_TYPE_UNKNOWN;
const MovingObject_Type MovingObject_Type_Type_MAX = MovingObject_Type_TYPE_ANIMAL;
const int MovingObject_Type_Type_ARRAYSIZE = MovingObject_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MovingObject_Type_descriptor();
inline const ::std::string& MovingObject_Type_Name(MovingObject_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MovingObject_Type_descriptor(), value);
}
inline bool MovingObject_Type_Parse(
    const ::std::string& name, MovingObject_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MovingObject_Type>(
    MovingObject_Type_descriptor(), name, value);
}
// ===================================================================

class StationaryObject_Classification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.StationaryObject.Classification) */ {
 public:
  StationaryObject_Classification();
  virtual ~StationaryObject_Classification();

  StationaryObject_Classification(const StationaryObject_Classification& from);

  inline StationaryObject_Classification& operator=(const StationaryObject_Classification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StationaryObject_Classification& default_instance();

  void Swap(StationaryObject_Classification* other);

  // implements Message ----------------------------------------------

  inline StationaryObject_Classification* New() const { return New(NULL); }

  StationaryObject_Classification* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StationaryObject_Classification& from);
  void MergeFrom(const StationaryObject_Classification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StationaryObject_Classification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StationaryObject_Classification_Type Type;
  static const Type TYPE_UNKNOWN =
    StationaryObject_Classification_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    StationaryObject_Classification_Type_TYPE_OTHER;
  static const Type TYPE_BRIDGE =
    StationaryObject_Classification_Type_TYPE_BRIDGE;
  static const Type TYPE_BUILDING =
    StationaryObject_Classification_Type_TYPE_BUILDING;
  static const Type TYPE_POLE =
    StationaryObject_Classification_Type_TYPE_POLE;
  static const Type TYPE_PYLON =
    StationaryObject_Classification_Type_TYPE_PYLON;
  static const Type TYPE_DELINEATOR =
    StationaryObject_Classification_Type_TYPE_DELINEATOR;
  static const Type TYPE_TREE =
    StationaryObject_Classification_Type_TYPE_TREE;
  static const Type TYPE_BARRIER =
    StationaryObject_Classification_Type_TYPE_BARRIER;
  static const Type TYPE_VEGETATION =
    StationaryObject_Classification_Type_TYPE_VEGETATION;
  static const Type TYPE_CURBSTONE =
    StationaryObject_Classification_Type_TYPE_CURBSTONE;
  static const Type TYPE_WALL =
    StationaryObject_Classification_Type_TYPE_WALL;
  static const Type TYPE_VERTICAL_STRUCTURE =
    StationaryObject_Classification_Type_TYPE_VERTICAL_STRUCTURE;
  static const Type TYPE_RECTANGULAR_STRUCTURE =
    StationaryObject_Classification_Type_TYPE_RECTANGULAR_STRUCTURE;
  static const Type TYPE_OVERHEAD_STRUCTURE =
    StationaryObject_Classification_Type_TYPE_OVERHEAD_STRUCTURE;
  static const Type TYPE_REFLECTIVE_STRUCTURE =
    StationaryObject_Classification_Type_TYPE_REFLECTIVE_STRUCTURE;
  static const Type TYPE_CONSTRUCTION_SITE_ELEMENT =
    StationaryObject_Classification_Type_TYPE_CONSTRUCTION_SITE_ELEMENT;
  static inline bool Type_IsValid(int value) {
    return StationaryObject_Classification_Type_IsValid(value);
  }
  static const Type Type_MIN =
    StationaryObject_Classification_Type_Type_MIN;
  static const Type Type_MAX =
    StationaryObject_Classification_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    StationaryObject_Classification_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return StationaryObject_Classification_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return StationaryObject_Classification_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return StationaryObject_Classification_Type_Parse(name, value);
  }

  typedef StationaryObject_Classification_Material Material;
  static const Material MATERIAL_UNKNOWN =
    StationaryObject_Classification_Material_MATERIAL_UNKNOWN;
  static const Material MATERIAL_OTHER =
    StationaryObject_Classification_Material_MATERIAL_OTHER;
  static const Material MATERIAL_WOOD =
    StationaryObject_Classification_Material_MATERIAL_WOOD;
  static const Material MATERIAL_PLASTIC =
    StationaryObject_Classification_Material_MATERIAL_PLASTIC;
  static const Material MATERIAL_CONCRETE =
    StationaryObject_Classification_Material_MATERIAL_CONCRETE;
  static const Material MATERIAL_METAL =
    StationaryObject_Classification_Material_MATERIAL_METAL;
  static const Material MATERIAL_STONE =
    StationaryObject_Classification_Material_MATERIAL_STONE;
  static const Material MATERIAL_GLAS =
    StationaryObject_Classification_Material_MATERIAL_GLAS;
  static const Material MATERIAL_MUD =
    StationaryObject_Classification_Material_MATERIAL_MUD;
  static inline bool Material_IsValid(int value) {
    return StationaryObject_Classification_Material_IsValid(value);
  }
  static const Material Material_MIN =
    StationaryObject_Classification_Material_Material_MIN;
  static const Material Material_MAX =
    StationaryObject_Classification_Material_Material_MAX;
  static const int Material_ARRAYSIZE =
    StationaryObject_Classification_Material_Material_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Material_descriptor() {
    return StationaryObject_Classification_Material_descriptor();
  }
  static inline const ::std::string& Material_Name(Material value) {
    return StationaryObject_Classification_Material_Name(value);
  }
  static inline bool Material_Parse(const ::std::string& name,
      Material* value) {
    return StationaryObject_Classification_Material_Parse(name, value);
  }

  typedef StationaryObject_Classification_Density Density;
  static const Density DENSITY_UNKNOWN =
    StationaryObject_Classification_Density_DENSITY_UNKNOWN;
  static const Density DENSITY_OTHER =
    StationaryObject_Classification_Density_DENSITY_OTHER;
  static const Density DENSITY_SOLID =
    StationaryObject_Classification_Density_DENSITY_SOLID;
  static const Density DENSITY_SMALL_MESH =
    StationaryObject_Classification_Density_DENSITY_SMALL_MESH;
  static const Density DENSITY_MEDIAN_MESH =
    StationaryObject_Classification_Density_DENSITY_MEDIAN_MESH;
  static const Density DENSITY_LARGE_MESH =
    StationaryObject_Classification_Density_DENSITY_LARGE_MESH;
  static const Density DENSITY_OPEN =
    StationaryObject_Classification_Density_DENSITY_OPEN;
  static inline bool Density_IsValid(int value) {
    return StationaryObject_Classification_Density_IsValid(value);
  }
  static const Density Density_MIN =
    StationaryObject_Classification_Density_Density_MIN;
  static const Density Density_MAX =
    StationaryObject_Classification_Density_Density_MAX;
  static const int Density_ARRAYSIZE =
    StationaryObject_Classification_Density_Density_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Density_descriptor() {
    return StationaryObject_Classification_Density_descriptor();
  }
  static inline const ::std::string& Density_Name(Density value) {
    return StationaryObject_Classification_Density_Name(value);
  }
  static inline bool Density_Parse(const ::std::string& name,
      Density* value) {
    return StationaryObject_Classification_Density_Parse(name, value);
  }

  typedef StationaryObject_Classification_Color Color;
  static const Color COLOR_UNKNOWN =
    StationaryObject_Classification_Color_COLOR_UNKNOWN;
  static const Color COLOR_OTHER =
    StationaryObject_Classification_Color_COLOR_OTHER;
  static const Color COLOR_YELLOW =
    StationaryObject_Classification_Color_COLOR_YELLOW;
  static const Color COLOR_GREEN =
    StationaryObject_Classification_Color_COLOR_GREEN;
  static const Color COLOR_BLUE =
    StationaryObject_Classification_Color_COLOR_BLUE;
  static const Color COLOR_VIOLET =
    StationaryObject_Classification_Color_COLOR_VIOLET;
  static const Color COLOR_RED =
    StationaryObject_Classification_Color_COLOR_RED;
  static const Color COLOR_ORANGE =
    StationaryObject_Classification_Color_COLOR_ORANGE;
  static const Color COLOR_BLACK =
    StationaryObject_Classification_Color_COLOR_BLACK;
  static const Color COLOR_GREY =
    StationaryObject_Classification_Color_COLOR_GREY;
  static const Color COLOR_WHITE =
    StationaryObject_Classification_Color_COLOR_WHITE;
  static inline bool Color_IsValid(int value) {
    return StationaryObject_Classification_Color_IsValid(value);
  }
  static const Color Color_MIN =
    StationaryObject_Classification_Color_Color_MIN;
  static const Color Color_MAX =
    StationaryObject_Classification_Color_Color_MAX;
  static const int Color_ARRAYSIZE =
    StationaryObject_Classification_Color_Color_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Color_descriptor() {
    return StationaryObject_Classification_Color_descriptor();
  }
  static inline const ::std::string& Color_Name(Color value) {
    return StationaryObject_Classification_Color_Name(value);
  }
  static inline bool Color_Parse(const ::std::string& name,
      Color* value) {
    return StationaryObject_Classification_Color_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.StationaryObject.Classification.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::osi3::StationaryObject_Classification_Type type() const;
  void set_type(::osi3::StationaryObject_Classification_Type value);

  // optional .osi3.StationaryObject.Classification.Material material = 2;
  bool has_material() const;
  void clear_material();
  static const int kMaterialFieldNumber = 2;
  ::osi3::StationaryObject_Classification_Material material() const;
  void set_material(::osi3::StationaryObject_Classification_Material value);

  // optional .osi3.StationaryObject.Classification.Density density = 3;
  bool has_density() const;
  void clear_density();
  static const int kDensityFieldNumber = 3;
  ::osi3::StationaryObject_Classification_Density density() const;
  void set_density(::osi3::StationaryObject_Classification_Density value);

  // optional .osi3.StationaryObject.Classification.Color color = 4;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 4;
  ::osi3::StationaryObject_Classification_Color color() const;
  void set_color(::osi3::StationaryObject_Classification_Color value);

  // @@protoc_insertion_point(class_scope:osi3.StationaryObject.Classification)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_density();
  inline void clear_has_density();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int material_;
  int density_;
  int color_;
  friend void  protobuf_AddDesc_osi_5fobject_2eproto();
  friend void protobuf_AssignDesc_osi_5fobject_2eproto();
  friend void protobuf_ShutdownFile_osi_5fobject_2eproto();

  void InitAsDefaultInstance();
  static StationaryObject_Classification* default_instance_;
};
// -------------------------------------------------------------------

class StationaryObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.StationaryObject) */ {
 public:
  StationaryObject();
  virtual ~StationaryObject();

  StationaryObject(const StationaryObject& from);

  inline StationaryObject& operator=(const StationaryObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StationaryObject& default_instance();

  void Swap(StationaryObject* other);

  // implements Message ----------------------------------------------

  inline StationaryObject* New() const { return New(NULL); }

  StationaryObject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StationaryObject& from);
  void MergeFrom(const StationaryObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StationaryObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StationaryObject_Classification Classification;

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::osi3::Identifier& id() const;
  ::osi3::Identifier* mutable_id();
  ::osi3::Identifier* release_id();
  void set_allocated_id(::osi3::Identifier* id);

  // optional .osi3.BaseStationary base = 2;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 2;
  const ::osi3::BaseStationary& base() const;
  ::osi3::BaseStationary* mutable_base();
  ::osi3::BaseStationary* release_base();
  void set_allocated_base(::osi3::BaseStationary* base);

  // optional .osi3.StationaryObject.Classification classification = 3;
  bool has_classification() const;
  void clear_classification();
  static const int kClassificationFieldNumber = 3;
  const ::osi3::StationaryObject_Classification& classification() const;
  ::osi3::StationaryObject_Classification* mutable_classification();
  ::osi3::StationaryObject_Classification* release_classification();
  void set_allocated_classification(::osi3::StationaryObject_Classification* classification);

  // @@protoc_insertion_point(class_scope:osi3.StationaryObject)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_classification();
  inline void clear_has_classification();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* id_;
  ::osi3::BaseStationary* base_;
  ::osi3::StationaryObject_Classification* classification_;
  friend void  protobuf_AddDesc_osi_5fobject_2eproto();
  friend void protobuf_AssignDesc_osi_5fobject_2eproto();
  friend void protobuf_ShutdownFile_osi_5fobject_2eproto();

  void InitAsDefaultInstance();
  static StationaryObject* default_instance_;
};
// -------------------------------------------------------------------

class MovingObject_VehicleAttributes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.MovingObject.VehicleAttributes) */ {
 public:
  MovingObject_VehicleAttributes();
  virtual ~MovingObject_VehicleAttributes();

  MovingObject_VehicleAttributes(const MovingObject_VehicleAttributes& from);

  inline MovingObject_VehicleAttributes& operator=(const MovingObject_VehicleAttributes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MovingObject_VehicleAttributes& default_instance();

  void Swap(MovingObject_VehicleAttributes* other);

  // implements Message ----------------------------------------------

  inline MovingObject_VehicleAttributes* New() const { return New(NULL); }

  MovingObject_VehicleAttributes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MovingObject_VehicleAttributes& from);
  void MergeFrom(const MovingObject_VehicleAttributes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MovingObject_VehicleAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier driver_id = 1;
  bool has_driver_id() const;
  void clear_driver_id();
  static const int kDriverIdFieldNumber = 1;
  const ::osi3::Identifier& driver_id() const;
  ::osi3::Identifier* mutable_driver_id();
  ::osi3::Identifier* release_driver_id();
  void set_allocated_driver_id(::osi3::Identifier* driver_id);

  // optional double radius_wheel = 2;
  bool has_radius_wheel() const;
  void clear_radius_wheel();
  static const int kRadiusWheelFieldNumber = 2;
  double radius_wheel() const;
  void set_radius_wheel(double value);

  // optional uint32 number_wheels = 3;
  bool has_number_wheels() const;
  void clear_number_wheels();
  static const int kNumberWheelsFieldNumber = 3;
  ::google::protobuf::uint32 number_wheels() const;
  void set_number_wheels(::google::protobuf::uint32 value);

  // optional .osi3.Vector3d bbcenter_to_rear = 4;
  bool has_bbcenter_to_rear() const;
  void clear_bbcenter_to_rear();
  static const int kBbcenterToRearFieldNumber = 4;
  const ::osi3::Vector3d& bbcenter_to_rear() const;
  ::osi3::Vector3d* mutable_bbcenter_to_rear();
  ::osi3::Vector3d* release_bbcenter_to_rear();
  void set_allocated_bbcenter_to_rear(::osi3::Vector3d* bbcenter_to_rear);

  // optional .osi3.Vector3d bbcenter_to_front = 5;
  bool has_bbcenter_to_front() const;
  void clear_bbcenter_to_front();
  static const int kBbcenterToFrontFieldNumber = 5;
  const ::osi3::Vector3d& bbcenter_to_front() const;
  ::osi3::Vector3d* mutable_bbcenter_to_front();
  ::osi3::Vector3d* release_bbcenter_to_front();
  void set_allocated_bbcenter_to_front(::osi3::Vector3d* bbcenter_to_front);

  // optional double ground_clearance = 6;
  bool has_ground_clearance() const;
  void clear_ground_clearance();
  static const int kGroundClearanceFieldNumber = 6;
  double ground_clearance() const;
  void set_ground_clearance(double value);

  // @@protoc_insertion_point(class_scope:osi3.MovingObject.VehicleAttributes)
 private:
  inline void set_has_driver_id();
  inline void clear_has_driver_id();
  inline void set_has_radius_wheel();
  inline void clear_has_radius_wheel();
  inline void set_has_number_wheels();
  inline void clear_has_number_wheels();
  inline void set_has_bbcenter_to_rear();
  inline void clear_has_bbcenter_to_rear();
  inline void set_has_bbcenter_to_front();
  inline void clear_has_bbcenter_to_front();
  inline void set_has_ground_clearance();
  inline void clear_has_ground_clearance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* driver_id_;
  double radius_wheel_;
  ::osi3::Vector3d* bbcenter_to_rear_;
  ::osi3::Vector3d* bbcenter_to_front_;
  double ground_clearance_;
  ::google::protobuf::uint32 number_wheels_;
  friend void  protobuf_AddDesc_osi_5fobject_2eproto();
  friend void protobuf_AssignDesc_osi_5fobject_2eproto();
  friend void protobuf_ShutdownFile_osi_5fobject_2eproto();

  void InitAsDefaultInstance();
  static MovingObject_VehicleAttributes* default_instance_;
};
// -------------------------------------------------------------------

class MovingObject_VehicleClassification_LightState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.MovingObject.VehicleClassification.LightState) */ {
 public:
  MovingObject_VehicleClassification_LightState();
  virtual ~MovingObject_VehicleClassification_LightState();

  MovingObject_VehicleClassification_LightState(const MovingObject_VehicleClassification_LightState& from);

  inline MovingObject_VehicleClassification_LightState& operator=(const MovingObject_VehicleClassification_LightState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MovingObject_VehicleClassification_LightState& default_instance();

  void Swap(MovingObject_VehicleClassification_LightState* other);

  // implements Message ----------------------------------------------

  inline MovingObject_VehicleClassification_LightState* New() const { return New(NULL); }

  MovingObject_VehicleClassification_LightState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MovingObject_VehicleClassification_LightState& from);
  void MergeFrom(const MovingObject_VehicleClassification_LightState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MovingObject_VehicleClassification_LightState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MovingObject_VehicleClassification_LightState_IndicatorState IndicatorState;
  static const IndicatorState INDICATOR_STATE_UNKNOWN =
    MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_UNKNOWN;
  static const IndicatorState INDICATOR_STATE_OTHER =
    MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_OTHER;
  static const IndicatorState INDICATOR_STATE_OFF =
    MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_OFF;
  static const IndicatorState INDICATOR_STATE_LEFT =
    MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_LEFT;
  static const IndicatorState INDICATOR_STATE_RIGHT =
    MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_RIGHT;
  static const IndicatorState INDICATOR_STATE_WARNING =
    MovingObject_VehicleClassification_LightState_IndicatorState_INDICATOR_STATE_WARNING;
  static inline bool IndicatorState_IsValid(int value) {
    return MovingObject_VehicleClassification_LightState_IndicatorState_IsValid(value);
  }
  static const IndicatorState IndicatorState_MIN =
    MovingObject_VehicleClassification_LightState_IndicatorState_IndicatorState_MIN;
  static const IndicatorState IndicatorState_MAX =
    MovingObject_VehicleClassification_LightState_IndicatorState_IndicatorState_MAX;
  static const int IndicatorState_ARRAYSIZE =
    MovingObject_VehicleClassification_LightState_IndicatorState_IndicatorState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IndicatorState_descriptor() {
    return MovingObject_VehicleClassification_LightState_IndicatorState_descriptor();
  }
  static inline const ::std::string& IndicatorState_Name(IndicatorState value) {
    return MovingObject_VehicleClassification_LightState_IndicatorState_Name(value);
  }
  static inline bool IndicatorState_Parse(const ::std::string& name,
      IndicatorState* value) {
    return MovingObject_VehicleClassification_LightState_IndicatorState_Parse(name, value);
  }

  typedef MovingObject_VehicleClassification_LightState_GenericLightState GenericLightState;
  static const GenericLightState GENERIC_LIGHT_STATE_UNKNOWN =
    MovingObject_VehicleClassification_LightState_GenericLightState_GENERIC_LIGHT_STATE_UNKNOWN;
  static const GenericLightState GENERIC_LIGHT_STATE_OTHER =
    MovingObject_VehicleClassification_LightState_GenericLightState_GENERIC_LIGHT_STATE_OTHER;
  static const GenericLightState GENERIC_LIGHT_STATE_OFF =
    MovingObject_VehicleClassification_LightState_GenericLightState_GENERIC_LIGHT_STATE_OFF;
  static const GenericLightState GENERIC_LIGHT_STATE_ON =
    MovingObject_VehicleClassification_LightState_GenericLightState_GENERIC_LIGHT_STATE_ON;
  static inline bool GenericLightState_IsValid(int value) {
    return MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value);
  }
  static const GenericLightState GenericLightState_MIN =
    MovingObject_VehicleClassification_LightState_GenericLightState_GenericLightState_MIN;
  static const GenericLightState GenericLightState_MAX =
    MovingObject_VehicleClassification_LightState_GenericLightState_GenericLightState_MAX;
  static const int GenericLightState_ARRAYSIZE =
    MovingObject_VehicleClassification_LightState_GenericLightState_GenericLightState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GenericLightState_descriptor() {
    return MovingObject_VehicleClassification_LightState_GenericLightState_descriptor();
  }
  static inline const ::std::string& GenericLightState_Name(GenericLightState value) {
    return MovingObject_VehicleClassification_LightState_GenericLightState_Name(value);
  }
  static inline bool GenericLightState_Parse(const ::std::string& name,
      GenericLightState* value) {
    return MovingObject_VehicleClassification_LightState_GenericLightState_Parse(name, value);
  }

  typedef MovingObject_VehicleClassification_LightState_BrakeLightState BrakeLightState;
  static const BrakeLightState BRAKE_LIGHT_STATE_UNKNOWN =
    MovingObject_VehicleClassification_LightState_BrakeLightState_BRAKE_LIGHT_STATE_UNKNOWN;
  static const BrakeLightState BRAKE_LIGHT_STATE_OTHER =
    MovingObject_VehicleClassification_LightState_BrakeLightState_BRAKE_LIGHT_STATE_OTHER;
  static const BrakeLightState BRAKE_LIGHT_STATE_OFF =
    MovingObject_VehicleClassification_LightState_BrakeLightState_BRAKE_LIGHT_STATE_OFF;
  static const BrakeLightState BRAKE_LIGHT_STATE_NORMAL =
    MovingObject_VehicleClassification_LightState_BrakeLightState_BRAKE_LIGHT_STATE_NORMAL;
  static const BrakeLightState BRAKE_LIGHT_STATE_STRONG =
    MovingObject_VehicleClassification_LightState_BrakeLightState_BRAKE_LIGHT_STATE_STRONG;
  static inline bool BrakeLightState_IsValid(int value) {
    return MovingObject_VehicleClassification_LightState_BrakeLightState_IsValid(value);
  }
  static const BrakeLightState BrakeLightState_MIN =
    MovingObject_VehicleClassification_LightState_BrakeLightState_BrakeLightState_MIN;
  static const BrakeLightState BrakeLightState_MAX =
    MovingObject_VehicleClassification_LightState_BrakeLightState_BrakeLightState_MAX;
  static const int BrakeLightState_ARRAYSIZE =
    MovingObject_VehicleClassification_LightState_BrakeLightState_BrakeLightState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BrakeLightState_descriptor() {
    return MovingObject_VehicleClassification_LightState_BrakeLightState_descriptor();
  }
  static inline const ::std::string& BrakeLightState_Name(BrakeLightState value) {
    return MovingObject_VehicleClassification_LightState_BrakeLightState_Name(value);
  }
  static inline bool BrakeLightState_Parse(const ::std::string& name,
      BrakeLightState* value) {
    return MovingObject_VehicleClassification_LightState_BrakeLightState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
  bool has_indicator_state() const;
  void clear_indicator_state();
  static const int kIndicatorStateFieldNumber = 1;
  ::osi3::MovingObject_VehicleClassification_LightState_IndicatorState indicator_state() const;
  void set_indicator_state(::osi3::MovingObject_VehicleClassification_LightState_IndicatorState value);

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
  bool has_front_fog_light() const;
  void clear_front_fog_light();
  static const int kFrontFogLightFieldNumber = 2;
  ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState front_fog_light() const;
  void set_front_fog_light(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value);

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
  bool has_rear_fog_light() const;
  void clear_rear_fog_light();
  static const int kRearFogLightFieldNumber = 3;
  ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState rear_fog_light() const;
  void set_rear_fog_light(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value);

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
  bool has_head_light() const;
  void clear_head_light();
  static const int kHeadLightFieldNumber = 4;
  ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState head_light() const;
  void set_head_light(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value);

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
  bool has_high_beam() const;
  void clear_high_beam();
  static const int kHighBeamFieldNumber = 5;
  ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState high_beam() const;
  void set_high_beam(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value);

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
  bool has_reversing_light() const;
  void clear_reversing_light();
  static const int kReversingLightFieldNumber = 6;
  ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState reversing_light() const;
  void set_reversing_light(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value);

  // optional .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
  bool has_brake_light_state() const;
  void clear_brake_light_state();
  static const int kBrakeLightStateFieldNumber = 7;
  ::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState brake_light_state() const;
  void set_brake_light_state(::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState value);

  // optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
  bool has_license_plate_illumination_rear() const;
  void clear_license_plate_illumination_rear();
  static const int kLicensePlateIlluminationRearFieldNumber = 8;
  ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState license_plate_illumination_rear() const;
  void set_license_plate_illumination_rear(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value);

  // @@protoc_insertion_point(class_scope:osi3.MovingObject.VehicleClassification.LightState)
 private:
  inline void set_has_indicator_state();
  inline void clear_has_indicator_state();
  inline void set_has_front_fog_light();
  inline void clear_has_front_fog_light();
  inline void set_has_rear_fog_light();
  inline void clear_has_rear_fog_light();
  inline void set_has_head_light();
  inline void clear_has_head_light();
  inline void set_has_high_beam();
  inline void clear_has_high_beam();
  inline void set_has_reversing_light();
  inline void clear_has_reversing_light();
  inline void set_has_brake_light_state();
  inline void clear_has_brake_light_state();
  inline void set_has_license_plate_illumination_rear();
  inline void clear_has_license_plate_illumination_rear();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int indicator_state_;
  int front_fog_light_;
  int rear_fog_light_;
  int head_light_;
  int high_beam_;
  int reversing_light_;
  int brake_light_state_;
  int license_plate_illumination_rear_;
  friend void  protobuf_AddDesc_osi_5fobject_2eproto();
  friend void protobuf_AssignDesc_osi_5fobject_2eproto();
  friend void protobuf_ShutdownFile_osi_5fobject_2eproto();

  void InitAsDefaultInstance();
  static MovingObject_VehicleClassification_LightState* default_instance_;
};
// -------------------------------------------------------------------

class MovingObject_VehicleClassification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.MovingObject.VehicleClassification) */ {
 public:
  MovingObject_VehicleClassification();
  virtual ~MovingObject_VehicleClassification();

  MovingObject_VehicleClassification(const MovingObject_VehicleClassification& from);

  inline MovingObject_VehicleClassification& operator=(const MovingObject_VehicleClassification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MovingObject_VehicleClassification& default_instance();

  void Swap(MovingObject_VehicleClassification* other);

  // implements Message ----------------------------------------------

  inline MovingObject_VehicleClassification* New() const { return New(NULL); }

  MovingObject_VehicleClassification* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MovingObject_VehicleClassification& from);
  void MergeFrom(const MovingObject_VehicleClassification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MovingObject_VehicleClassification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MovingObject_VehicleClassification_LightState LightState;

  typedef MovingObject_VehicleClassification_Type Type;
  static const Type TYPE_UNKNOWN =
    MovingObject_VehicleClassification_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    MovingObject_VehicleClassification_Type_TYPE_OTHER;
  static const Type TYPE_SMALL_CAR =
    MovingObject_VehicleClassification_Type_TYPE_SMALL_CAR;
  static const Type TYPE_COMPACT_CAR =
    MovingObject_VehicleClassification_Type_TYPE_COMPACT_CAR;
  static const Type TYPE_MEDIUM_CAR =
    MovingObject_VehicleClassification_Type_TYPE_MEDIUM_CAR;
  static const Type TYPE_LUXURY_CAR =
    MovingObject_VehicleClassification_Type_TYPE_LUXURY_CAR;
  static const Type TYPE_DELIVERY_VAN =
    MovingObject_VehicleClassification_Type_TYPE_DELIVERY_VAN;
  static const Type TYPE_HEAVY_TRUCK =
    MovingObject_VehicleClassification_Type_TYPE_HEAVY_TRUCK;
  static const Type TYPE_SEMITRAILER =
    MovingObject_VehicleClassification_Type_TYPE_SEMITRAILER;
  static const Type TYPE_TRAILER =
    MovingObject_VehicleClassification_Type_TYPE_TRAILER;
  static const Type TYPE_MOTORBIKE =
    MovingObject_VehicleClassification_Type_TYPE_MOTORBIKE;
  static const Type TYPE_BICYCLE =
    MovingObject_VehicleClassification_Type_TYPE_BICYCLE;
  static const Type TYPE_BUS =
    MovingObject_VehicleClassification_Type_TYPE_BUS;
  static const Type TYPE_TRAM =
    MovingObject_VehicleClassification_Type_TYPE_TRAM;
  static const Type TYPE_TRAIN =
    MovingObject_VehicleClassification_Type_TYPE_TRAIN;
  static const Type TYPE_WHEELCHAIR =
    MovingObject_VehicleClassification_Type_TYPE_WHEELCHAIR;
  static inline bool Type_IsValid(int value) {
    return MovingObject_VehicleClassification_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MovingObject_VehicleClassification_Type_Type_MIN;
  static const Type Type_MAX =
    MovingObject_VehicleClassification_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MovingObject_VehicleClassification_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MovingObject_VehicleClassification_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MovingObject_VehicleClassification_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MovingObject_VehicleClassification_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.MovingObject.VehicleClassification.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::osi3::MovingObject_VehicleClassification_Type type() const;
  void set_type(::osi3::MovingObject_VehicleClassification_Type value);

  // optional .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
  bool has_light_state() const;
  void clear_light_state();
  static const int kLightStateFieldNumber = 2;
  const ::osi3::MovingObject_VehicleClassification_LightState& light_state() const;
  ::osi3::MovingObject_VehicleClassification_LightState* mutable_light_state();
  ::osi3::MovingObject_VehicleClassification_LightState* release_light_state();
  void set_allocated_light_state(::osi3::MovingObject_VehicleClassification_LightState* light_state);

  // optional bool has_trailer = 3;
  bool has_has_trailer() const;
  void clear_has_trailer();
  static const int kHasTrailerFieldNumber = 3;
  bool has_trailer() const;
  void set_has_trailer(bool value);

  // optional .osi3.Identifier trailer_id = 4;
  bool has_trailer_id() const;
  void clear_trailer_id();
  static const int kTrailerIdFieldNumber = 4;
  const ::osi3::Identifier& trailer_id() const;
  ::osi3::Identifier* mutable_trailer_id();
  ::osi3::Identifier* release_trailer_id();
  void set_allocated_trailer_id(::osi3::Identifier* trailer_id);

  // @@protoc_insertion_point(class_scope:osi3.MovingObject.VehicleClassification)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_light_state();
  inline void clear_has_light_state();
  inline void set_has_has_trailer();
  inline void clear_has_has_trailer();
  inline void set_has_trailer_id();
  inline void clear_has_trailer_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::MovingObject_VehicleClassification_LightState* light_state_;
  int type_;
  bool has_trailer_;
  ::osi3::Identifier* trailer_id_;
  friend void  protobuf_AddDesc_osi_5fobject_2eproto();
  friend void protobuf_AssignDesc_osi_5fobject_2eproto();
  friend void protobuf_ShutdownFile_osi_5fobject_2eproto();

  void InitAsDefaultInstance();
  static MovingObject_VehicleClassification* default_instance_;
};
// -------------------------------------------------------------------

class MovingObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.MovingObject) */ {
 public:
  MovingObject();
  virtual ~MovingObject();

  MovingObject(const MovingObject& from);

  inline MovingObject& operator=(const MovingObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MovingObject& default_instance();

  void Swap(MovingObject* other);

  // implements Message ----------------------------------------------

  inline MovingObject* New() const { return New(NULL); }

  MovingObject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MovingObject& from);
  void MergeFrom(const MovingObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MovingObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MovingObject_VehicleAttributes VehicleAttributes;
  typedef MovingObject_VehicleClassification VehicleClassification;

  typedef MovingObject_Type Type;
  static const Type TYPE_UNKNOWN =
    MovingObject_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    MovingObject_Type_TYPE_OTHER;
  static const Type TYPE_VEHICLE =
    MovingObject_Type_TYPE_VEHICLE;
  static const Type TYPE_PEDESTRIAN =
    MovingObject_Type_TYPE_PEDESTRIAN;
  static const Type TYPE_ANIMAL =
    MovingObject_Type_TYPE_ANIMAL;
  static inline bool Type_IsValid(int value) {
    return MovingObject_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MovingObject_Type_Type_MIN;
  static const Type Type_MAX =
    MovingObject_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MovingObject_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MovingObject_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MovingObject_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MovingObject_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::osi3::Identifier& id() const;
  ::osi3::Identifier* mutable_id();
  ::osi3::Identifier* release_id();
  void set_allocated_id(::osi3::Identifier* id);

  // optional .osi3.BaseMoving base = 2;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 2;
  const ::osi3::BaseMoving& base() const;
  ::osi3::BaseMoving* mutable_base();
  ::osi3::BaseMoving* release_base();
  void set_allocated_base(::osi3::BaseMoving* base);

  // optional .osi3.MovingObject.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::osi3::MovingObject_Type type() const;
  void set_type(::osi3::MovingObject_Type value);

  // repeated .osi3.Identifier assigned_lane_id = 4;
  int assigned_lane_id_size() const;
  void clear_assigned_lane_id();
  static const int kAssignedLaneIdFieldNumber = 4;
  const ::osi3::Identifier& assigned_lane_id(int index) const;
  ::osi3::Identifier* mutable_assigned_lane_id(int index);
  ::osi3::Identifier* add_assigned_lane_id();
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
      mutable_assigned_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
      assigned_lane_id() const;

  // optional .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
  bool has_vehicle_attributes() const;
  void clear_vehicle_attributes();
  static const int kVehicleAttributesFieldNumber = 5;
  const ::osi3::MovingObject_VehicleAttributes& vehicle_attributes() const;
  ::osi3::MovingObject_VehicleAttributes* mutable_vehicle_attributes();
  ::osi3::MovingObject_VehicleAttributes* release_vehicle_attributes();
  void set_allocated_vehicle_attributes(::osi3::MovingObject_VehicleAttributes* vehicle_attributes);

  // optional .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
  bool has_vehicle_classification() const;
  void clear_vehicle_classification();
  static const int kVehicleClassificationFieldNumber = 6;
  const ::osi3::MovingObject_VehicleClassification& vehicle_classification() const;
  ::osi3::MovingObject_VehicleClassification* mutable_vehicle_classification();
  ::osi3::MovingObject_VehicleClassification* release_vehicle_classification();
  void set_allocated_vehicle_classification(::osi3::MovingObject_VehicleClassification* vehicle_classification);

  // @@protoc_insertion_point(class_scope:osi3.MovingObject)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_vehicle_attributes();
  inline void clear_has_vehicle_attributes();
  inline void set_has_vehicle_classification();
  inline void clear_has_vehicle_classification();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* id_;
  ::osi3::BaseMoving* base_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier > assigned_lane_id_;
  ::osi3::MovingObject_VehicleAttributes* vehicle_attributes_;
  ::osi3::MovingObject_VehicleClassification* vehicle_classification_;
  int type_;
  friend void  protobuf_AddDesc_osi_5fobject_2eproto();
  friend void protobuf_AssignDesc_osi_5fobject_2eproto();
  friend void protobuf_ShutdownFile_osi_5fobject_2eproto();

  void InitAsDefaultInstance();
  static MovingObject* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StationaryObject_Classification

// optional .osi3.StationaryObject.Classification.Type type = 1;
inline bool StationaryObject_Classification::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StationaryObject_Classification::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StationaryObject_Classification::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StationaryObject_Classification::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::osi3::StationaryObject_Classification_Type StationaryObject_Classification::type() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.Classification.type)
  return static_cast< ::osi3::StationaryObject_Classification_Type >(type_);
}
inline void StationaryObject_Classification::set_type(::osi3::StationaryObject_Classification_Type value) {
  assert(::osi3::StationaryObject_Classification_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.StationaryObject.Classification.type)
}

// optional .osi3.StationaryObject.Classification.Material material = 2;
inline bool StationaryObject_Classification::has_material() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StationaryObject_Classification::set_has_material() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StationaryObject_Classification::clear_has_material() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StationaryObject_Classification::clear_material() {
  material_ = 0;
  clear_has_material();
}
inline ::osi3::StationaryObject_Classification_Material StationaryObject_Classification::material() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.Classification.material)
  return static_cast< ::osi3::StationaryObject_Classification_Material >(material_);
}
inline void StationaryObject_Classification::set_material(::osi3::StationaryObject_Classification_Material value) {
  assert(::osi3::StationaryObject_Classification_Material_IsValid(value));
  set_has_material();
  material_ = value;
  // @@protoc_insertion_point(field_set:osi3.StationaryObject.Classification.material)
}

// optional .osi3.StationaryObject.Classification.Density density = 3;
inline bool StationaryObject_Classification::has_density() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StationaryObject_Classification::set_has_density() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StationaryObject_Classification::clear_has_density() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StationaryObject_Classification::clear_density() {
  density_ = 0;
  clear_has_density();
}
inline ::osi3::StationaryObject_Classification_Density StationaryObject_Classification::density() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.Classification.density)
  return static_cast< ::osi3::StationaryObject_Classification_Density >(density_);
}
inline void StationaryObject_Classification::set_density(::osi3::StationaryObject_Classification_Density value) {
  assert(::osi3::StationaryObject_Classification_Density_IsValid(value));
  set_has_density();
  density_ = value;
  // @@protoc_insertion_point(field_set:osi3.StationaryObject.Classification.density)
}

// optional .osi3.StationaryObject.Classification.Color color = 4;
inline bool StationaryObject_Classification::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StationaryObject_Classification::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StationaryObject_Classification::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StationaryObject_Classification::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::osi3::StationaryObject_Classification_Color StationaryObject_Classification::color() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.Classification.color)
  return static_cast< ::osi3::StationaryObject_Classification_Color >(color_);
}
inline void StationaryObject_Classification::set_color(::osi3::StationaryObject_Classification_Color value) {
  assert(::osi3::StationaryObject_Classification_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:osi3.StationaryObject.Classification.color)
}

// -------------------------------------------------------------------

// StationaryObject

// optional .osi3.Identifier id = 1;
inline bool StationaryObject::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StationaryObject::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StationaryObject::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StationaryObject::clear_id() {
  if (id_ != NULL) id_->::osi3::Identifier::Clear();
  clear_has_id();
}
inline const ::osi3::Identifier& StationaryObject::id() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::osi3::Identifier* StationaryObject::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.StationaryObject.id)
  return id_;
}
inline ::osi3::Identifier* StationaryObject::release_id() {
  // @@protoc_insertion_point(field_release:osi3.StationaryObject.id)
  clear_has_id();
  ::osi3::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline void StationaryObject::set_allocated_id(::osi3::Identifier* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.StationaryObject.id)
}

// optional .osi3.BaseStationary base = 2;
inline bool StationaryObject::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StationaryObject::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StationaryObject::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StationaryObject::clear_base() {
  if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
  clear_has_base();
}
inline const ::osi3::BaseStationary& StationaryObject::base() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::osi3::BaseStationary* StationaryObject::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::osi3::BaseStationary;
  }
  // @@protoc_insertion_point(field_mutable:osi3.StationaryObject.base)
  return base_;
}
inline ::osi3::BaseStationary* StationaryObject::release_base() {
  // @@protoc_insertion_point(field_release:osi3.StationaryObject.base)
  clear_has_base();
  ::osi3::BaseStationary* temp = base_;
  base_ = NULL;
  return temp;
}
inline void StationaryObject::set_allocated_base(::osi3::BaseStationary* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.StationaryObject.base)
}

// optional .osi3.StationaryObject.Classification classification = 3;
inline bool StationaryObject::has_classification() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StationaryObject::set_has_classification() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StationaryObject::clear_has_classification() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StationaryObject::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::StationaryObject_Classification::Clear();
  clear_has_classification();
}
inline const ::osi3::StationaryObject_Classification& StationaryObject::classification() const {
  // @@protoc_insertion_point(field_get:osi3.StationaryObject.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
inline ::osi3::StationaryObject_Classification* StationaryObject::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::StationaryObject_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.StationaryObject.classification)
  return classification_;
}
inline ::osi3::StationaryObject_Classification* StationaryObject::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.StationaryObject.classification)
  clear_has_classification();
  ::osi3::StationaryObject_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
inline void StationaryObject::set_allocated_classification(::osi3::StationaryObject_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.StationaryObject.classification)
}

// -------------------------------------------------------------------

// MovingObject_VehicleAttributes

// optional .osi3.Identifier driver_id = 1;
inline bool MovingObject_VehicleAttributes::has_driver_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MovingObject_VehicleAttributes::set_has_driver_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MovingObject_VehicleAttributes::clear_has_driver_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MovingObject_VehicleAttributes::clear_driver_id() {
  if (driver_id_ != NULL) driver_id_->::osi3::Identifier::Clear();
  clear_has_driver_id();
}
inline const ::osi3::Identifier& MovingObject_VehicleAttributes::driver_id() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleAttributes.driver_id)
  return driver_id_ != NULL ? *driver_id_ : *default_instance_->driver_id_;
}
inline ::osi3::Identifier* MovingObject_VehicleAttributes::mutable_driver_id() {
  set_has_driver_id();
  if (driver_id_ == NULL) {
    driver_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.VehicleAttributes.driver_id)
  return driver_id_;
}
inline ::osi3::Identifier* MovingObject_VehicleAttributes::release_driver_id() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.VehicleAttributes.driver_id)
  clear_has_driver_id();
  ::osi3::Identifier* temp = driver_id_;
  driver_id_ = NULL;
  return temp;
}
inline void MovingObject_VehicleAttributes::set_allocated_driver_id(::osi3::Identifier* driver_id) {
  delete driver_id_;
  driver_id_ = driver_id;
  if (driver_id) {
    set_has_driver_id();
  } else {
    clear_has_driver_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.VehicleAttributes.driver_id)
}

// optional double radius_wheel = 2;
inline bool MovingObject_VehicleAttributes::has_radius_wheel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MovingObject_VehicleAttributes::set_has_radius_wheel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MovingObject_VehicleAttributes::clear_has_radius_wheel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MovingObject_VehicleAttributes::clear_radius_wheel() {
  radius_wheel_ = 0;
  clear_has_radius_wheel();
}
inline double MovingObject_VehicleAttributes::radius_wheel() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleAttributes.radius_wheel)
  return radius_wheel_;
}
inline void MovingObject_VehicleAttributes::set_radius_wheel(double value) {
  set_has_radius_wheel();
  radius_wheel_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleAttributes.radius_wheel)
}

// optional uint32 number_wheels = 3;
inline bool MovingObject_VehicleAttributes::has_number_wheels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MovingObject_VehicleAttributes::set_has_number_wheels() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MovingObject_VehicleAttributes::clear_has_number_wheels() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MovingObject_VehicleAttributes::clear_number_wheels() {
  number_wheels_ = 0u;
  clear_has_number_wheels();
}
inline ::google::protobuf::uint32 MovingObject_VehicleAttributes::number_wheels() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleAttributes.number_wheels)
  return number_wheels_;
}
inline void MovingObject_VehicleAttributes::set_number_wheels(::google::protobuf::uint32 value) {
  set_has_number_wheels();
  number_wheels_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleAttributes.number_wheels)
}

// optional .osi3.Vector3d bbcenter_to_rear = 4;
inline bool MovingObject_VehicleAttributes::has_bbcenter_to_rear() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MovingObject_VehicleAttributes::set_has_bbcenter_to_rear() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MovingObject_VehicleAttributes::clear_has_bbcenter_to_rear() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MovingObject_VehicleAttributes::clear_bbcenter_to_rear() {
  if (bbcenter_to_rear_ != NULL) bbcenter_to_rear_->::osi3::Vector3d::Clear();
  clear_has_bbcenter_to_rear();
}
inline const ::osi3::Vector3d& MovingObject_VehicleAttributes::bbcenter_to_rear() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleAttributes.bbcenter_to_rear)
  return bbcenter_to_rear_ != NULL ? *bbcenter_to_rear_ : *default_instance_->bbcenter_to_rear_;
}
inline ::osi3::Vector3d* MovingObject_VehicleAttributes::mutable_bbcenter_to_rear() {
  set_has_bbcenter_to_rear();
  if (bbcenter_to_rear_ == NULL) {
    bbcenter_to_rear_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.VehicleAttributes.bbcenter_to_rear)
  return bbcenter_to_rear_;
}
inline ::osi3::Vector3d* MovingObject_VehicleAttributes::release_bbcenter_to_rear() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.VehicleAttributes.bbcenter_to_rear)
  clear_has_bbcenter_to_rear();
  ::osi3::Vector3d* temp = bbcenter_to_rear_;
  bbcenter_to_rear_ = NULL;
  return temp;
}
inline void MovingObject_VehicleAttributes::set_allocated_bbcenter_to_rear(::osi3::Vector3d* bbcenter_to_rear) {
  delete bbcenter_to_rear_;
  bbcenter_to_rear_ = bbcenter_to_rear;
  if (bbcenter_to_rear) {
    set_has_bbcenter_to_rear();
  } else {
    clear_has_bbcenter_to_rear();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.VehicleAttributes.bbcenter_to_rear)
}

// optional .osi3.Vector3d bbcenter_to_front = 5;
inline bool MovingObject_VehicleAttributes::has_bbcenter_to_front() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MovingObject_VehicleAttributes::set_has_bbcenter_to_front() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MovingObject_VehicleAttributes::clear_has_bbcenter_to_front() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MovingObject_VehicleAttributes::clear_bbcenter_to_front() {
  if (bbcenter_to_front_ != NULL) bbcenter_to_front_->::osi3::Vector3d::Clear();
  clear_has_bbcenter_to_front();
}
inline const ::osi3::Vector3d& MovingObject_VehicleAttributes::bbcenter_to_front() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleAttributes.bbcenter_to_front)
  return bbcenter_to_front_ != NULL ? *bbcenter_to_front_ : *default_instance_->bbcenter_to_front_;
}
inline ::osi3::Vector3d* MovingObject_VehicleAttributes::mutable_bbcenter_to_front() {
  set_has_bbcenter_to_front();
  if (bbcenter_to_front_ == NULL) {
    bbcenter_to_front_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.VehicleAttributes.bbcenter_to_front)
  return bbcenter_to_front_;
}
inline ::osi3::Vector3d* MovingObject_VehicleAttributes::release_bbcenter_to_front() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.VehicleAttributes.bbcenter_to_front)
  clear_has_bbcenter_to_front();
  ::osi3::Vector3d* temp = bbcenter_to_front_;
  bbcenter_to_front_ = NULL;
  return temp;
}
inline void MovingObject_VehicleAttributes::set_allocated_bbcenter_to_front(::osi3::Vector3d* bbcenter_to_front) {
  delete bbcenter_to_front_;
  bbcenter_to_front_ = bbcenter_to_front;
  if (bbcenter_to_front) {
    set_has_bbcenter_to_front();
  } else {
    clear_has_bbcenter_to_front();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.VehicleAttributes.bbcenter_to_front)
}

// optional double ground_clearance = 6;
inline bool MovingObject_VehicleAttributes::has_ground_clearance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MovingObject_VehicleAttributes::set_has_ground_clearance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MovingObject_VehicleAttributes::clear_has_ground_clearance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MovingObject_VehicleAttributes::clear_ground_clearance() {
  ground_clearance_ = 0;
  clear_has_ground_clearance();
}
inline double MovingObject_VehicleAttributes::ground_clearance() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleAttributes.ground_clearance)
  return ground_clearance_;
}
inline void MovingObject_VehicleAttributes::set_ground_clearance(double value) {
  set_has_ground_clearance();
  ground_clearance_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleAttributes.ground_clearance)
}

// -------------------------------------------------------------------

// MovingObject_VehicleClassification_LightState

// optional .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
inline bool MovingObject_VehicleClassification_LightState::has_indicator_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MovingObject_VehicleClassification_LightState::set_has_indicator_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MovingObject_VehicleClassification_LightState::clear_has_indicator_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MovingObject_VehicleClassification_LightState::clear_indicator_state() {
  indicator_state_ = 0;
  clear_has_indicator_state();
}
inline ::osi3::MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::indicator_state() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.indicator_state)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_IndicatorState >(indicator_state_);
}
inline void MovingObject_VehicleClassification_LightState::set_indicator_state(::osi3::MovingObject_VehicleClassification_LightState_IndicatorState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_IndicatorState_IsValid(value));
  set_has_indicator_state();
  indicator_state_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.indicator_state)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
inline bool MovingObject_VehicleClassification_LightState::has_front_fog_light() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MovingObject_VehicleClassification_LightState::set_has_front_fog_light() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MovingObject_VehicleClassification_LightState::clear_has_front_fog_light() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MovingObject_VehicleClassification_LightState::clear_front_fog_light() {
  front_fog_light_ = 0;
  clear_has_front_fog_light();
}
inline ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::front_fog_light() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.front_fog_light)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(front_fog_light_);
}
inline void MovingObject_VehicleClassification_LightState::set_front_fog_light(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value));
  set_has_front_fog_light();
  front_fog_light_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.front_fog_light)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
inline bool MovingObject_VehicleClassification_LightState::has_rear_fog_light() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MovingObject_VehicleClassification_LightState::set_has_rear_fog_light() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MovingObject_VehicleClassification_LightState::clear_has_rear_fog_light() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MovingObject_VehicleClassification_LightState::clear_rear_fog_light() {
  rear_fog_light_ = 0;
  clear_has_rear_fog_light();
}
inline ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::rear_fog_light() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.rear_fog_light)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(rear_fog_light_);
}
inline void MovingObject_VehicleClassification_LightState::set_rear_fog_light(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value));
  set_has_rear_fog_light();
  rear_fog_light_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.rear_fog_light)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
inline bool MovingObject_VehicleClassification_LightState::has_head_light() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MovingObject_VehicleClassification_LightState::set_has_head_light() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MovingObject_VehicleClassification_LightState::clear_has_head_light() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MovingObject_VehicleClassification_LightState::clear_head_light() {
  head_light_ = 0;
  clear_has_head_light();
}
inline ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::head_light() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.head_light)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(head_light_);
}
inline void MovingObject_VehicleClassification_LightState::set_head_light(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value));
  set_has_head_light();
  head_light_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.head_light)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
inline bool MovingObject_VehicleClassification_LightState::has_high_beam() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MovingObject_VehicleClassification_LightState::set_has_high_beam() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MovingObject_VehicleClassification_LightState::clear_has_high_beam() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MovingObject_VehicleClassification_LightState::clear_high_beam() {
  high_beam_ = 0;
  clear_has_high_beam();
}
inline ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::high_beam() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.high_beam)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(high_beam_);
}
inline void MovingObject_VehicleClassification_LightState::set_high_beam(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value));
  set_has_high_beam();
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.high_beam)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
inline bool MovingObject_VehicleClassification_LightState::has_reversing_light() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MovingObject_VehicleClassification_LightState::set_has_reversing_light() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MovingObject_VehicleClassification_LightState::clear_has_reversing_light() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MovingObject_VehicleClassification_LightState::clear_reversing_light() {
  reversing_light_ = 0;
  clear_has_reversing_light();
}
inline ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::reversing_light() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.reversing_light)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(reversing_light_);
}
inline void MovingObject_VehicleClassification_LightState::set_reversing_light(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value));
  set_has_reversing_light();
  reversing_light_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.reversing_light)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
inline bool MovingObject_VehicleClassification_LightState::has_brake_light_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MovingObject_VehicleClassification_LightState::set_has_brake_light_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MovingObject_VehicleClassification_LightState::clear_has_brake_light_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MovingObject_VehicleClassification_LightState::clear_brake_light_state() {
  brake_light_state_ = 0;
  clear_has_brake_light_state();
}
inline ::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::brake_light_state() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.brake_light_state)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState >(brake_light_state_);
}
inline void MovingObject_VehicleClassification_LightState::set_brake_light_state(::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState_IsValid(value));
  set_has_brake_light_state();
  brake_light_state_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.brake_light_state)
}

// optional .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
inline bool MovingObject_VehicleClassification_LightState::has_license_plate_illumination_rear() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MovingObject_VehicleClassification_LightState::set_has_license_plate_illumination_rear() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MovingObject_VehicleClassification_LightState::clear_has_license_plate_illumination_rear() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MovingObject_VehicleClassification_LightState::clear_license_plate_illumination_rear() {
  license_plate_illumination_rear_ = 0;
  clear_has_license_plate_illumination_rear();
}
inline ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::license_plate_illumination_rear() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.LightState.license_plate_illumination_rear)
  return static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(license_plate_illumination_rear_);
}
inline void MovingObject_VehicleClassification_LightState::set_license_plate_illumination_rear(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState value) {
  assert(::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(value));
  set_has_license_plate_illumination_rear();
  license_plate_illumination_rear_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.LightState.license_plate_illumination_rear)
}

// -------------------------------------------------------------------

// MovingObject_VehicleClassification

// optional .osi3.MovingObject.VehicleClassification.Type type = 1;
inline bool MovingObject_VehicleClassification::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MovingObject_VehicleClassification::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MovingObject_VehicleClassification::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MovingObject_VehicleClassification::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::osi3::MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::type() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.type)
  return static_cast< ::osi3::MovingObject_VehicleClassification_Type >(type_);
}
inline void MovingObject_VehicleClassification::set_type(::osi3::MovingObject_VehicleClassification_Type value) {
  assert(::osi3::MovingObject_VehicleClassification_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.type)
}

// optional .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
inline bool MovingObject_VehicleClassification::has_light_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MovingObject_VehicleClassification::set_has_light_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MovingObject_VehicleClassification::clear_has_light_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MovingObject_VehicleClassification::clear_light_state() {
  if (light_state_ != NULL) light_state_->::osi3::MovingObject_VehicleClassification_LightState::Clear();
  clear_has_light_state();
}
inline const ::osi3::MovingObject_VehicleClassification_LightState& MovingObject_VehicleClassification::light_state() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.light_state)
  return light_state_ != NULL ? *light_state_ : *default_instance_->light_state_;
}
inline ::osi3::MovingObject_VehicleClassification_LightState* MovingObject_VehicleClassification::mutable_light_state() {
  set_has_light_state();
  if (light_state_ == NULL) {
    light_state_ = new ::osi3::MovingObject_VehicleClassification_LightState;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.VehicleClassification.light_state)
  return light_state_;
}
inline ::osi3::MovingObject_VehicleClassification_LightState* MovingObject_VehicleClassification::release_light_state() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.VehicleClassification.light_state)
  clear_has_light_state();
  ::osi3::MovingObject_VehicleClassification_LightState* temp = light_state_;
  light_state_ = NULL;
  return temp;
}
inline void MovingObject_VehicleClassification::set_allocated_light_state(::osi3::MovingObject_VehicleClassification_LightState* light_state) {
  delete light_state_;
  light_state_ = light_state;
  if (light_state) {
    set_has_light_state();
  } else {
    clear_has_light_state();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.VehicleClassification.light_state)
}

// optional bool has_trailer = 3;
inline bool MovingObject_VehicleClassification::has_has_trailer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MovingObject_VehicleClassification::set_has_has_trailer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MovingObject_VehicleClassification::clear_has_has_trailer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MovingObject_VehicleClassification::clear_has_trailer() {
  has_trailer_ = false;
  clear_has_has_trailer();
}
inline bool MovingObject_VehicleClassification::has_trailer() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.has_trailer)
  return has_trailer_;
}
inline void MovingObject_VehicleClassification::set_has_trailer(bool value) {
  set_has_has_trailer();
  has_trailer_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.VehicleClassification.has_trailer)
}

// optional .osi3.Identifier trailer_id = 4;
inline bool MovingObject_VehicleClassification::has_trailer_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MovingObject_VehicleClassification::set_has_trailer_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MovingObject_VehicleClassification::clear_has_trailer_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MovingObject_VehicleClassification::clear_trailer_id() {
  if (trailer_id_ != NULL) trailer_id_->::osi3::Identifier::Clear();
  clear_has_trailer_id();
}
inline const ::osi3::Identifier& MovingObject_VehicleClassification::trailer_id() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.VehicleClassification.trailer_id)
  return trailer_id_ != NULL ? *trailer_id_ : *default_instance_->trailer_id_;
}
inline ::osi3::Identifier* MovingObject_VehicleClassification::mutable_trailer_id() {
  set_has_trailer_id();
  if (trailer_id_ == NULL) {
    trailer_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.VehicleClassification.trailer_id)
  return trailer_id_;
}
inline ::osi3::Identifier* MovingObject_VehicleClassification::release_trailer_id() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.VehicleClassification.trailer_id)
  clear_has_trailer_id();
  ::osi3::Identifier* temp = trailer_id_;
  trailer_id_ = NULL;
  return temp;
}
inline void MovingObject_VehicleClassification::set_allocated_trailer_id(::osi3::Identifier* trailer_id) {
  delete trailer_id_;
  trailer_id_ = trailer_id;
  if (trailer_id) {
    set_has_trailer_id();
  } else {
    clear_has_trailer_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.VehicleClassification.trailer_id)
}

// -------------------------------------------------------------------

// MovingObject

// optional .osi3.Identifier id = 1;
inline bool MovingObject::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MovingObject::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MovingObject::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MovingObject::clear_id() {
  if (id_ != NULL) id_->::osi3::Identifier::Clear();
  clear_has_id();
}
inline const ::osi3::Identifier& MovingObject::id() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::osi3::Identifier* MovingObject::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.id)
  return id_;
}
inline ::osi3::Identifier* MovingObject::release_id() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.id)
  clear_has_id();
  ::osi3::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline void MovingObject::set_allocated_id(::osi3::Identifier* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.id)
}

// optional .osi3.BaseMoving base = 2;
inline bool MovingObject::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MovingObject::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MovingObject::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MovingObject::clear_base() {
  if (base_ != NULL) base_->::osi3::BaseMoving::Clear();
  clear_has_base();
}
inline const ::osi3::BaseMoving& MovingObject::base() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::osi3::BaseMoving* MovingObject::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::osi3::BaseMoving;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.base)
  return base_;
}
inline ::osi3::BaseMoving* MovingObject::release_base() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.base)
  clear_has_base();
  ::osi3::BaseMoving* temp = base_;
  base_ = NULL;
  return temp;
}
inline void MovingObject::set_allocated_base(::osi3::BaseMoving* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.base)
}

// optional .osi3.MovingObject.Type type = 3;
inline bool MovingObject::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MovingObject::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MovingObject::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MovingObject::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::osi3::MovingObject_Type MovingObject::type() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.type)
  return static_cast< ::osi3::MovingObject_Type >(type_);
}
inline void MovingObject::set_type(::osi3::MovingObject_Type value) {
  assert(::osi3::MovingObject_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.MovingObject.type)
}

// repeated .osi3.Identifier assigned_lane_id = 4;
inline int MovingObject::assigned_lane_id_size() const {
  return assigned_lane_id_.size();
}
inline void MovingObject::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
inline const ::osi3::Identifier& MovingObject::assigned_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.assigned_lane_id)
  return assigned_lane_id_.Get(index);
}
inline ::osi3::Identifier* MovingObject::mutable_assigned_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.assigned_lane_id)
  return assigned_lane_id_.Mutable(index);
}
inline ::osi3::Identifier* MovingObject::add_assigned_lane_id() {
  // @@protoc_insertion_point(field_add:osi3.MovingObject.assigned_lane_id)
  return assigned_lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
MovingObject::mutable_assigned_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.MovingObject.assigned_lane_id)
  return &assigned_lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
MovingObject::assigned_lane_id() const {
  // @@protoc_insertion_point(field_list:osi3.MovingObject.assigned_lane_id)
  return assigned_lane_id_;
}

// optional .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
inline bool MovingObject::has_vehicle_attributes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MovingObject::set_has_vehicle_attributes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MovingObject::clear_has_vehicle_attributes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MovingObject::clear_vehicle_attributes() {
  if (vehicle_attributes_ != NULL) vehicle_attributes_->::osi3::MovingObject_VehicleAttributes::Clear();
  clear_has_vehicle_attributes();
}
inline const ::osi3::MovingObject_VehicleAttributes& MovingObject::vehicle_attributes() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.vehicle_attributes)
  return vehicle_attributes_ != NULL ? *vehicle_attributes_ : *default_instance_->vehicle_attributes_;
}
inline ::osi3::MovingObject_VehicleAttributes* MovingObject::mutable_vehicle_attributes() {
  set_has_vehicle_attributes();
  if (vehicle_attributes_ == NULL) {
    vehicle_attributes_ = new ::osi3::MovingObject_VehicleAttributes;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.vehicle_attributes)
  return vehicle_attributes_;
}
inline ::osi3::MovingObject_VehicleAttributes* MovingObject::release_vehicle_attributes() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.vehicle_attributes)
  clear_has_vehicle_attributes();
  ::osi3::MovingObject_VehicleAttributes* temp = vehicle_attributes_;
  vehicle_attributes_ = NULL;
  return temp;
}
inline void MovingObject::set_allocated_vehicle_attributes(::osi3::MovingObject_VehicleAttributes* vehicle_attributes) {
  delete vehicle_attributes_;
  vehicle_attributes_ = vehicle_attributes;
  if (vehicle_attributes) {
    set_has_vehicle_attributes();
  } else {
    clear_has_vehicle_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.vehicle_attributes)
}

// optional .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
inline bool MovingObject::has_vehicle_classification() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MovingObject::set_has_vehicle_classification() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MovingObject::clear_has_vehicle_classification() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MovingObject::clear_vehicle_classification() {
  if (vehicle_classification_ != NULL) vehicle_classification_->::osi3::MovingObject_VehicleClassification::Clear();
  clear_has_vehicle_classification();
}
inline const ::osi3::MovingObject_VehicleClassification& MovingObject::vehicle_classification() const {
  // @@protoc_insertion_point(field_get:osi3.MovingObject.vehicle_classification)
  return vehicle_classification_ != NULL ? *vehicle_classification_ : *default_instance_->vehicle_classification_;
}
inline ::osi3::MovingObject_VehicleClassification* MovingObject::mutable_vehicle_classification() {
  set_has_vehicle_classification();
  if (vehicle_classification_ == NULL) {
    vehicle_classification_ = new ::osi3::MovingObject_VehicleClassification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MovingObject.vehicle_classification)
  return vehicle_classification_;
}
inline ::osi3::MovingObject_VehicleClassification* MovingObject::release_vehicle_classification() {
  // @@protoc_insertion_point(field_release:osi3.MovingObject.vehicle_classification)
  clear_has_vehicle_classification();
  ::osi3::MovingObject_VehicleClassification* temp = vehicle_classification_;
  vehicle_classification_ = NULL;
  return temp;
}
inline void MovingObject::set_allocated_vehicle_classification(::osi3::MovingObject_VehicleClassification* vehicle_classification) {
  delete vehicle_classification_;
  vehicle_classification_ = vehicle_classification;
  if (vehicle_classification) {
    set_has_vehicle_classification();
  } else {
    clear_has_vehicle_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MovingObject.vehicle_classification)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::osi3::StationaryObject_Classification_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::StationaryObject_Classification_Type>() {
  return ::osi3::StationaryObject_Classification_Type_descriptor();
}
template <> struct is_proto_enum< ::osi3::StationaryObject_Classification_Material> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::StationaryObject_Classification_Material>() {
  return ::osi3::StationaryObject_Classification_Material_descriptor();
}
template <> struct is_proto_enum< ::osi3::StationaryObject_Classification_Density> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::StationaryObject_Classification_Density>() {
  return ::osi3::StationaryObject_Classification_Density_descriptor();
}
template <> struct is_proto_enum< ::osi3::StationaryObject_Classification_Color> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::StationaryObject_Classification_Color>() {
  return ::osi3::StationaryObject_Classification_Color_descriptor();
}
template <> struct is_proto_enum< ::osi3::MovingObject_VehicleClassification_LightState_IndicatorState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::MovingObject_VehicleClassification_LightState_IndicatorState>() {
  return ::osi3::MovingObject_VehicleClassification_LightState_IndicatorState_descriptor();
}
template <> struct is_proto_enum< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>() {
  return ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState_descriptor();
}
template <> struct is_proto_enum< ::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState>() {
  return ::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState_descriptor();
}
template <> struct is_proto_enum< ::osi3::MovingObject_VehicleClassification_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::MovingObject_VehicleClassification_Type>() {
  return ::osi3::MovingObject_VehicleClassification_Type_descriptor();
}
template <> struct is_proto_enum< ::osi3::MovingObject_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::MovingObject_Type>() {
  return ::osi3::MovingObject_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osi_5fobject_2eproto__INCLUDED
