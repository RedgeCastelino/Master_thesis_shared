// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedtrafficlight.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_detectedtrafficlight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* DetectedTrafficLight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedTrafficLight_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectedTrafficLight_CandidateTrafficLight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedTrafficLight_CandidateTrafficLight_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5fdetectedtrafficlight_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5fdetectedtrafficlight_2eproto() {
  protobuf_AddDesc_osi_5fdetectedtrafficlight_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_detectedtrafficlight.proto");
  GOOGLE_CHECK(file != NULL);
  DetectedTrafficLight_descriptor_ = file->message_type(0);
  static const int DetectedTrafficLight_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedTrafficLight, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedTrafficLight, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedTrafficLight, base_rmse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedTrafficLight, candidate_),
  };
  DetectedTrafficLight_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectedTrafficLight_descriptor_,
      DetectedTrafficLight::default_instance_,
      DetectedTrafficLight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedTrafficLight, _has_bits_[0]),
      -1,
      -1,
      sizeof(DetectedTrafficLight),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedTrafficLight, _internal_metadata_),
      -1);
  DetectedTrafficLight_CandidateTrafficLight_descriptor_ = DetectedTrafficLight_descriptor_->nested_type(0);
  static const int DetectedTrafficLight_CandidateTrafficLight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedTrafficLight_CandidateTrafficLight, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedTrafficLight_CandidateTrafficLight, classification_),
  };
  DetectedTrafficLight_CandidateTrafficLight_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectedTrafficLight_CandidateTrafficLight_descriptor_,
      DetectedTrafficLight_CandidateTrafficLight::default_instance_,
      DetectedTrafficLight_CandidateTrafficLight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedTrafficLight_CandidateTrafficLight, _has_bits_[0]),
      -1,
      -1,
      sizeof(DetectedTrafficLight_CandidateTrafficLight),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedTrafficLight_CandidateTrafficLight, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5fdetectedtrafficlight_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectedTrafficLight_descriptor_, &DetectedTrafficLight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectedTrafficLight_CandidateTrafficLight_descriptor_, &DetectedTrafficLight_CandidateTrafficLight::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5fdetectedtrafficlight_2eproto() {
  delete DetectedTrafficLight::default_instance_;
  delete DetectedTrafficLight_reflection_;
  delete DetectedTrafficLight_CandidateTrafficLight::default_instance_;
  delete DetectedTrafficLight_CandidateTrafficLight_reflection_;
}

void protobuf_AddDesc_osi_5fdetectedtrafficlight_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5fdetectedtrafficlight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::osi3::protobuf_AddDesc_osi_5fcommon_2eproto();
  ::osi3::protobuf_AddDesc_osi_5ftrafficlight_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fdetectedobject_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036osi_detectedtrafficlight.proto\022\004osi3\032\020"
    "osi_common.proto\032\026osi_trafficlight.proto"
    "\032\030osi_detectedobject.proto\"\273\002\n\024DetectedT"
    "rafficLight\022(\n\006header\030\001 \001(\0132\030.osi3.Detec"
    "tedItemHeader\022\"\n\004base\030\002 \001(\0132\024.osi3.BaseS"
    "tationary\022\'\n\tbase_rmse\030\003 \001(\0132\024.osi3.Base"
    "Stationary\022C\n\tcandidate\030\004 \003(\01320.osi3.Det"
    "ectedTrafficLight.CandidateTrafficLight\032"
    "g\n\025CandidateTrafficLight\022\023\n\013probability\030"
    "\001 \001(\001\0229\n\016classification\030\002 \001(\0132!.osi3.Tra"
    "fficLight.ClassificationB\002H\001", 428);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_detectedtrafficlight.proto", &protobuf_RegisterTypes);
  DetectedTrafficLight::default_instance_ = new DetectedTrafficLight();
  DetectedTrafficLight_CandidateTrafficLight::default_instance_ = new DetectedTrafficLight_CandidateTrafficLight();
  DetectedTrafficLight::default_instance_->InitAsDefaultInstance();
  DetectedTrafficLight_CandidateTrafficLight::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5fdetectedtrafficlight_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5fdetectedtrafficlight_2eproto {
  StaticDescriptorInitializer_osi_5fdetectedtrafficlight_2eproto() {
    protobuf_AddDesc_osi_5fdetectedtrafficlight_2eproto();
  }
} static_descriptor_initializer_osi_5fdetectedtrafficlight_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedTrafficLight_CandidateTrafficLight::kProbabilityFieldNumber;
const int DetectedTrafficLight_CandidateTrafficLight::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedTrafficLight_CandidateTrafficLight::DetectedTrafficLight_CandidateTrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedTrafficLight.CandidateTrafficLight)
}

void DetectedTrafficLight_CandidateTrafficLight::InitAsDefaultInstance() {
  classification_ = const_cast< ::osi3::TrafficLight_Classification*>(&::osi3::TrafficLight_Classification::default_instance());
}

DetectedTrafficLight_CandidateTrafficLight::DetectedTrafficLight_CandidateTrafficLight(const DetectedTrafficLight_CandidateTrafficLight& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficLight.CandidateTrafficLight)
}

void DetectedTrafficLight_CandidateTrafficLight::SharedCtor() {
  _cached_size_ = 0;
  probability_ = 0;
  classification_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedTrafficLight_CandidateTrafficLight::~DetectedTrafficLight_CandidateTrafficLight() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficLight.CandidateTrafficLight)
  SharedDtor();
}

void DetectedTrafficLight_CandidateTrafficLight::SharedDtor() {
  if (this != default_instance_) {
    delete classification_;
  }
}

void DetectedTrafficLight_CandidateTrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedTrafficLight_CandidateTrafficLight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedTrafficLight_CandidateTrafficLight_descriptor_;
}

const DetectedTrafficLight_CandidateTrafficLight& DetectedTrafficLight_CandidateTrafficLight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fdetectedtrafficlight_2eproto();
  return *default_instance_;
}

DetectedTrafficLight_CandidateTrafficLight* DetectedTrafficLight_CandidateTrafficLight::default_instance_ = NULL;

DetectedTrafficLight_CandidateTrafficLight* DetectedTrafficLight_CandidateTrafficLight::New(::google::protobuf::Arena* arena) const {
  DetectedTrafficLight_CandidateTrafficLight* n = new DetectedTrafficLight_CandidateTrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedTrafficLight_CandidateTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  if (_has_bits_[0 / 32] & 3u) {
    probability_ = 0;
    if (has_classification()) {
      if (classification_ != NULL) classification_->::osi3::TrafficLight_Classification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DetectedTrafficLight_CandidateTrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_classification;
        break;
      }

      // optional .osi3.TrafficLight.Classification classification = 2;
      case 2: {
        if (tag == 18) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedTrafficLight.CandidateTrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedTrafficLight.CandidateTrafficLight)
  return false;
#undef DO_
}

void DetectedTrafficLight_CandidateTrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  // optional double probability = 1;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // optional .osi3.TrafficLight.Classification classification = 2;
  if (has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classification_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedTrafficLight.CandidateTrafficLight)
}

::google::protobuf::uint8* DetectedTrafficLight_CandidateTrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  // optional double probability = 1;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // optional .osi3.TrafficLight.Classification classification = 2;
  if (has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->classification_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficLight.CandidateTrafficLight)
  return target;
}

int DetectedTrafficLight_CandidateTrafficLight::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double probability = 1;
    if (has_probability()) {
      total_size += 1 + 8;
    }

    // optional .osi3.TrafficLight.Classification classification = 2;
    if (has_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->classification_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedTrafficLight_CandidateTrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectedTrafficLight_CandidateTrafficLight* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedTrafficLight_CandidateTrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedTrafficLight.CandidateTrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedTrafficLight.CandidateTrafficLight)
    MergeFrom(*source);
  }
}

void DetectedTrafficLight_CandidateTrafficLight::MergeFrom(const DetectedTrafficLight_CandidateTrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_classification()) {
      mutable_classification()->::osi3::TrafficLight_Classification::MergeFrom(from.classification());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DetectedTrafficLight_CandidateTrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedTrafficLight_CandidateTrafficLight::CopyFrom(const DetectedTrafficLight_CandidateTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficLight_CandidateTrafficLight::IsInitialized() const {

  return true;
}

void DetectedTrafficLight_CandidateTrafficLight::Swap(DetectedTrafficLight_CandidateTrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedTrafficLight_CandidateTrafficLight::InternalSwap(DetectedTrafficLight_CandidateTrafficLight* other) {
  std::swap(probability_, other->probability_);
  std::swap(classification_, other->classification_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedTrafficLight_CandidateTrafficLight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedTrafficLight_CandidateTrafficLight_descriptor_;
  metadata.reflection = DetectedTrafficLight_CandidateTrafficLight_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedTrafficLight::kHeaderFieldNumber;
const int DetectedTrafficLight::kBaseFieldNumber;
const int DetectedTrafficLight::kBaseRmseFieldNumber;
const int DetectedTrafficLight::kCandidateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedTrafficLight::DetectedTrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedTrafficLight)
}

void DetectedTrafficLight::InitAsDefaultInstance() {
  header_ = const_cast< ::osi3::DetectedItemHeader*>(&::osi3::DetectedItemHeader::default_instance());
  base_ = const_cast< ::osi3::BaseStationary*>(&::osi3::BaseStationary::default_instance());
  base_rmse_ = const_cast< ::osi3::BaseStationary*>(&::osi3::BaseStationary::default_instance());
}

DetectedTrafficLight::DetectedTrafficLight(const DetectedTrafficLight& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficLight)
}

void DetectedTrafficLight::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  base_ = NULL;
  base_rmse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedTrafficLight::~DetectedTrafficLight() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficLight)
  SharedDtor();
}

void DetectedTrafficLight::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete base_;
    delete base_rmse_;
  }
}

void DetectedTrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedTrafficLight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedTrafficLight_descriptor_;
}

const DetectedTrafficLight& DetectedTrafficLight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fdetectedtrafficlight_2eproto();
  return *default_instance_;
}

DetectedTrafficLight* DetectedTrafficLight::default_instance_ = NULL;

DetectedTrafficLight* DetectedTrafficLight::New(::google::protobuf::Arena* arena) const {
  DetectedTrafficLight* n = new DetectedTrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficLight)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      if (header_ != NULL) header_->::osi3::DetectedItemHeader::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
    }
    if (has_base_rmse()) {
      if (base_rmse_ != NULL) base_rmse_->::osi3::BaseStationary::Clear();
    }
  }
  candidate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DetectedTrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedTrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.DetectedItemHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .osi3.BaseStationary base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_base_rmse;
        break;
      }

      // optional .osi3.BaseStationary base_rmse = 3;
      case 3: {
        if (tag == 26) {
         parse_base_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_candidate;
        break;
      }

      // repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
      case 4: {
        if (tag == 34) {
         parse_candidate:
          DO_(input->IncrementRecursionDepth());
         parse_loop_candidate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_candidate;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedTrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedTrafficLight)
  return false;
#undef DO_
}

void DetectedTrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedTrafficLight)
  // optional .osi3.DetectedItemHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .osi3.BaseStationary base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // optional .osi3.BaseStationary base_rmse = 3;
  if (has_base_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->base_rmse_, output);
  }

  // repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->candidate(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedTrafficLight)
}

::google::protobuf::uint8* DetectedTrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficLight)
  // optional .osi3.DetectedItemHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .osi3.BaseStationary base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->base_, false, target);
  }

  // optional .osi3.BaseStationary base_rmse = 3;
  if (has_base_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->base_rmse_, false, target);
  }

  // repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->candidate(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficLight)
  return target;
}

int DetectedTrafficLight::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficLight)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .osi3.DetectedItemHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .osi3.BaseStationary base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_);
    }

    // optional .osi3.BaseStationary base_rmse = 3;
    if (has_base_rmse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_rmse_);
    }

  }
  // repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
  total_size += 1 * this->candidate_size();
  for (int i = 0; i < this->candidate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->candidate(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedTrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedTrafficLight)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectedTrafficLight* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedTrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedTrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedTrafficLight)
    MergeFrom(*source);
  }
}

void DetectedTrafficLight::MergeFrom(const DetectedTrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficLight)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  candidate_.MergeFrom(from.candidate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from.header());
    }
    if (from.has_base()) {
      mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
    }
    if (from.has_base_rmse()) {
      mutable_base_rmse()->::osi3::BaseStationary::MergeFrom(from.base_rmse());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DetectedTrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedTrafficLight::CopyFrom(const DetectedTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficLight::IsInitialized() const {

  return true;
}

void DetectedTrafficLight::Swap(DetectedTrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedTrafficLight::InternalSwap(DetectedTrafficLight* other) {
  std::swap(header_, other->header_);
  std::swap(base_, other->base_);
  std::swap(base_rmse_, other->base_rmse_);
  candidate_.UnsafeArenaSwap(&other->candidate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedTrafficLight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedTrafficLight_descriptor_;
  metadata.reflection = DetectedTrafficLight_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectedTrafficLight_CandidateTrafficLight

// optional double probability = 1;
bool DetectedTrafficLight_CandidateTrafficLight::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectedTrafficLight_CandidateTrafficLight::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectedTrafficLight_CandidateTrafficLight::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedTrafficLight_CandidateTrafficLight::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
 double DetectedTrafficLight_CandidateTrafficLight::probability() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficLight.CandidateTrafficLight.probability)
  return probability_;
}
 void DetectedTrafficLight_CandidateTrafficLight::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedTrafficLight.CandidateTrafficLight.probability)
}

// optional .osi3.TrafficLight.Classification classification = 2;
bool DetectedTrafficLight_CandidateTrafficLight::has_classification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectedTrafficLight_CandidateTrafficLight::set_has_classification() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectedTrafficLight_CandidateTrafficLight::clear_has_classification() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectedTrafficLight_CandidateTrafficLight::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::TrafficLight_Classification::Clear();
  clear_has_classification();
}
const ::osi3::TrafficLight_Classification& DetectedTrafficLight_CandidateTrafficLight::classification() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficLight.CandidateTrafficLight.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
::osi3::TrafficLight_Classification* DetectedTrafficLight_CandidateTrafficLight::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::TrafficLight_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficLight.CandidateTrafficLight.classification)
  return classification_;
}
::osi3::TrafficLight_Classification* DetectedTrafficLight_CandidateTrafficLight::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficLight.CandidateTrafficLight.classification)
  clear_has_classification();
  ::osi3::TrafficLight_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
void DetectedTrafficLight_CandidateTrafficLight::set_allocated_classification(::osi3::TrafficLight_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficLight.CandidateTrafficLight.classification)
}

// -------------------------------------------------------------------

// DetectedTrafficLight

// optional .osi3.DetectedItemHeader header = 1;
bool DetectedTrafficLight::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectedTrafficLight::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectedTrafficLight::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedTrafficLight::clear_header() {
  if (header_ != NULL) header_->::osi3::DetectedItemHeader::Clear();
  clear_has_header();
}
const ::osi3::DetectedItemHeader& DetectedTrafficLight::header() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficLight.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::osi3::DetectedItemHeader* DetectedTrafficLight::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::osi3::DetectedItemHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficLight.header)
  return header_;
}
::osi3::DetectedItemHeader* DetectedTrafficLight::release_header() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficLight.header)
  clear_has_header();
  ::osi3::DetectedItemHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DetectedTrafficLight::set_allocated_header(::osi3::DetectedItemHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficLight.header)
}

// optional .osi3.BaseStationary base = 2;
bool DetectedTrafficLight::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectedTrafficLight::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectedTrafficLight::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectedTrafficLight::clear_base() {
  if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
  clear_has_base();
}
const ::osi3::BaseStationary& DetectedTrafficLight::base() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficLight.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::osi3::BaseStationary* DetectedTrafficLight::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::osi3::BaseStationary;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficLight.base)
  return base_;
}
::osi3::BaseStationary* DetectedTrafficLight::release_base() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficLight.base)
  clear_has_base();
  ::osi3::BaseStationary* temp = base_;
  base_ = NULL;
  return temp;
}
void DetectedTrafficLight::set_allocated_base(::osi3::BaseStationary* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficLight.base)
}

// optional .osi3.BaseStationary base_rmse = 3;
bool DetectedTrafficLight::has_base_rmse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DetectedTrafficLight::set_has_base_rmse() {
  _has_bits_[0] |= 0x00000004u;
}
void DetectedTrafficLight::clear_has_base_rmse() {
  _has_bits_[0] &= ~0x00000004u;
}
void DetectedTrafficLight::clear_base_rmse() {
  if (base_rmse_ != NULL) base_rmse_->::osi3::BaseStationary::Clear();
  clear_has_base_rmse();
}
const ::osi3::BaseStationary& DetectedTrafficLight::base_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficLight.base_rmse)
  return base_rmse_ != NULL ? *base_rmse_ : *default_instance_->base_rmse_;
}
::osi3::BaseStationary* DetectedTrafficLight::mutable_base_rmse() {
  set_has_base_rmse();
  if (base_rmse_ == NULL) {
    base_rmse_ = new ::osi3::BaseStationary;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficLight.base_rmse)
  return base_rmse_;
}
::osi3::BaseStationary* DetectedTrafficLight::release_base_rmse() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficLight.base_rmse)
  clear_has_base_rmse();
  ::osi3::BaseStationary* temp = base_rmse_;
  base_rmse_ = NULL;
  return temp;
}
void DetectedTrafficLight::set_allocated_base_rmse(::osi3::BaseStationary* base_rmse) {
  delete base_rmse_;
  base_rmse_ = base_rmse;
  if (base_rmse) {
    set_has_base_rmse();
  } else {
    clear_has_base_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficLight.base_rmse)
}

// repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
int DetectedTrafficLight::candidate_size() const {
  return candidate_.size();
}
void DetectedTrafficLight::clear_candidate() {
  candidate_.Clear();
}
const ::osi3::DetectedTrafficLight_CandidateTrafficLight& DetectedTrafficLight::candidate(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficLight.candidate)
  return candidate_.Get(index);
}
::osi3::DetectedTrafficLight_CandidateTrafficLight* DetectedTrafficLight::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficLight.candidate)
  return candidate_.Mutable(index);
}
::osi3::DetectedTrafficLight_CandidateTrafficLight* DetectedTrafficLight::add_candidate() {
  // @@protoc_insertion_point(field_add:osi3.DetectedTrafficLight.candidate)
  return candidate_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficLight_CandidateTrafficLight >*
DetectedTrafficLight::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedTrafficLight.candidate)
  return &candidate_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficLight_CandidateTrafficLight >&
DetectedTrafficLight::candidate() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedTrafficLight.candidate)
  return candidate_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
