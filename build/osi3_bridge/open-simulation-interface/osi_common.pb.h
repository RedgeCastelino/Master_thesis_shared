// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_common.proto

#ifndef PROTOBUF_osi_5fcommon_2eproto__INCLUDED
#define PROTOBUF_osi_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_osi_5fcommon_2eproto();
void protobuf_AssignDesc_osi_5fcommon_2eproto();
void protobuf_ShutdownFile_osi_5fcommon_2eproto();

class BaseMoving;
class BaseStationary;
class Dimension3d;
class Identifier;
class MountingPosition;
class Orientation3d;
class Spherical3d;
class Timestamp;
class Vector2d;
class Vector3d;

// ===================================================================

class Vector3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Vector3d) */ {
 public:
  Vector3d();
  virtual ~Vector3d();

  Vector3d(const Vector3d& from);

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3d& default_instance();

  void Swap(Vector3d* other);

  // implements Message ----------------------------------------------

  inline Vector3d* New() const { return New(NULL); }

  Vector3d* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:osi3.Vector3d)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_osi_5fcommon_2eproto();
  friend void protobuf_AssignDesc_osi_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_osi_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Vector3d* default_instance_;
};
// -------------------------------------------------------------------

class Vector2d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Vector2d) */ {
 public:
  Vector2d();
  virtual ~Vector2d();

  Vector2d(const Vector2d& from);

  inline Vector2d& operator=(const Vector2d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2d& default_instance();

  void Swap(Vector2d* other);

  // implements Message ----------------------------------------------

  inline Vector2d* New() const { return New(NULL); }

  Vector2d* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2d& from);
  void MergeFrom(const Vector2d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector2d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:osi3.Vector2d)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  friend void  protobuf_AddDesc_osi_5fcommon_2eproto();
  friend void protobuf_AssignDesc_osi_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_osi_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Vector2d* default_instance_;
};
// -------------------------------------------------------------------

class Timestamp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Timestamp) */ {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Timestamp& default_instance();

  void Swap(Timestamp* other);

  // implements Message ----------------------------------------------

  inline Timestamp* New() const { return New(NULL); }

  Timestamp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Timestamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 seconds = 1;
  bool has_seconds() const;
  void clear_seconds();
  static const int kSecondsFieldNumber = 1;
  ::google::protobuf::int64 seconds() const;
  void set_seconds(::google::protobuf::int64 value);

  // optional uint32 nanos = 2;
  bool has_nanos() const;
  void clear_nanos();
  static const int kNanosFieldNumber = 2;
  ::google::protobuf::uint32 nanos() const;
  void set_nanos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:osi3.Timestamp)
 private:
  inline void set_has_seconds();
  inline void clear_has_seconds();
  inline void set_has_nanos();
  inline void clear_has_nanos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 seconds_;
  ::google::protobuf::uint32 nanos_;
  friend void  protobuf_AddDesc_osi_5fcommon_2eproto();
  friend void protobuf_AssignDesc_osi_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_osi_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Timestamp* default_instance_;
};
// -------------------------------------------------------------------

class Dimension3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Dimension3d) */ {
 public:
  Dimension3d();
  virtual ~Dimension3d();

  Dimension3d(const Dimension3d& from);

  inline Dimension3d& operator=(const Dimension3d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dimension3d& default_instance();

  void Swap(Dimension3d* other);

  // implements Message ----------------------------------------------

  inline Dimension3d* New() const { return New(NULL); }

  Dimension3d* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dimension3d& from);
  void MergeFrom(const Dimension3d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dimension3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double length = 1;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 1;
  double length() const;
  void set_length(double value);

  // optional double width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  double width() const;
  void set_width(double value);

  // optional double height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  double height() const;
  void set_height(double value);

  // @@protoc_insertion_point(class_scope:osi3.Dimension3d)
 private:
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double length_;
  double width_;
  double height_;
  friend void  protobuf_AddDesc_osi_5fcommon_2eproto();
  friend void protobuf_AssignDesc_osi_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_osi_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Dimension3d* default_instance_;
};
// -------------------------------------------------------------------

class Orientation3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Orientation3d) */ {
 public:
  Orientation3d();
  virtual ~Orientation3d();

  Orientation3d(const Orientation3d& from);

  inline Orientation3d& operator=(const Orientation3d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Orientation3d& default_instance();

  void Swap(Orientation3d* other);

  // implements Message ----------------------------------------------

  inline Orientation3d* New() const { return New(NULL); }

  Orientation3d* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Orientation3d& from);
  void MergeFrom(const Orientation3d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Orientation3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double roll = 1;
  bool has_roll() const;
  void clear_roll();
  static const int kRollFieldNumber = 1;
  double roll() const;
  void set_roll(double value);

  // optional double pitch = 2;
  bool has_pitch() const;
  void clear_pitch();
  static const int kPitchFieldNumber = 2;
  double pitch() const;
  void set_pitch(double value);

  // optional double yaw = 3;
  bool has_yaw() const;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  double yaw() const;
  void set_yaw(double value);

  // @@protoc_insertion_point(class_scope:osi3.Orientation3d)
 private:
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_yaw();
  inline void clear_has_yaw();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double roll_;
  double pitch_;
  double yaw_;
  friend void  protobuf_AddDesc_osi_5fcommon_2eproto();
  friend void protobuf_AssignDesc_osi_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_osi_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Orientation3d* default_instance_;
};
// -------------------------------------------------------------------

class Identifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Identifier) */ {
 public:
  Identifier();
  virtual ~Identifier();

  Identifier(const Identifier& from);

  inline Identifier& operator=(const Identifier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Identifier& default_instance();

  void Swap(Identifier* other);

  // implements Message ----------------------------------------------

  inline Identifier* New() const { return New(NULL); }

  Identifier* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Identifier& from);
  void MergeFrom(const Identifier& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Identifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:osi3.Identifier)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 value_;
  friend void  protobuf_AddDesc_osi_5fcommon_2eproto();
  friend void protobuf_AssignDesc_osi_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_osi_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Identifier* default_instance_;
};
// -------------------------------------------------------------------

class MountingPosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.MountingPosition) */ {
 public:
  MountingPosition();
  virtual ~MountingPosition();

  MountingPosition(const MountingPosition& from);

  inline MountingPosition& operator=(const MountingPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MountingPosition& default_instance();

  void Swap(MountingPosition* other);

  // implements Message ----------------------------------------------

  inline MountingPosition* New() const { return New(NULL); }

  MountingPosition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountingPosition& from);
  void MergeFrom(const MountingPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MountingPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.Vector3d position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* mutable_position();
  ::osi3::Vector3d* release_position();
  void set_allocated_position(::osi3::Vector3d* position);

  // optional .osi3.Orientation3d orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  const ::osi3::Orientation3d& orientation() const;
  ::osi3::Orientation3d* mutable_orientation();
  ::osi3::Orientation3d* release_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);

  // @@protoc_insertion_point(class_scope:osi3.MountingPosition)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_orientation();
  inline void clear_has_orientation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Vector3d* position_;
  ::osi3::Orientation3d* orientation_;
  friend void  protobuf_AddDesc_osi_5fcommon_2eproto();
  friend void protobuf_AssignDesc_osi_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_osi_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static MountingPosition* default_instance_;
};
// -------------------------------------------------------------------

class Spherical3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Spherical3d) */ {
 public:
  Spherical3d();
  virtual ~Spherical3d();

  Spherical3d(const Spherical3d& from);

  inline Spherical3d& operator=(const Spherical3d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Spherical3d& default_instance();

  void Swap(Spherical3d* other);

  // implements Message ----------------------------------------------

  inline Spherical3d* New() const { return New(NULL); }

  Spherical3d* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Spherical3d& from);
  void MergeFrom(const Spherical3d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Spherical3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double distance = 1;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 1;
  double distance() const;
  void set_distance(double value);

  // optional double azimuth = 2;
  bool has_azimuth() const;
  void clear_azimuth();
  static const int kAzimuthFieldNumber = 2;
  double azimuth() const;
  void set_azimuth(double value);

  // optional double elevation = 3;
  bool has_elevation() const;
  void clear_elevation();
  static const int kElevationFieldNumber = 3;
  double elevation() const;
  void set_elevation(double value);

  // @@protoc_insertion_point(class_scope:osi3.Spherical3d)
 private:
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_azimuth();
  inline void clear_has_azimuth();
  inline void set_has_elevation();
  inline void clear_has_elevation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double distance_;
  double azimuth_;
  double elevation_;
  friend void  protobuf_AddDesc_osi_5fcommon_2eproto();
  friend void protobuf_AssignDesc_osi_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_osi_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Spherical3d* default_instance_;
};
// -------------------------------------------------------------------

class BaseStationary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.BaseStationary) */ {
 public:
  BaseStationary();
  virtual ~BaseStationary();

  BaseStationary(const BaseStationary& from);

  inline BaseStationary& operator=(const BaseStationary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseStationary& default_instance();

  void Swap(BaseStationary* other);

  // implements Message ----------------------------------------------

  inline BaseStationary* New() const { return New(NULL); }

  BaseStationary* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseStationary& from);
  void MergeFrom(const BaseStationary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BaseStationary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.Dimension3d dimension = 1;
  bool has_dimension() const;
  void clear_dimension();
  static const int kDimensionFieldNumber = 1;
  const ::osi3::Dimension3d& dimension() const;
  ::osi3::Dimension3d* mutable_dimension();
  ::osi3::Dimension3d* release_dimension();
  void set_allocated_dimension(::osi3::Dimension3d* dimension);

  // optional .osi3.Vector3d position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* mutable_position();
  ::osi3::Vector3d* release_position();
  void set_allocated_position(::osi3::Vector3d* position);

  // optional .osi3.Orientation3d orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  const ::osi3::Orientation3d& orientation() const;
  ::osi3::Orientation3d* mutable_orientation();
  ::osi3::Orientation3d* release_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);

  // repeated .osi3.Vector2d base_polygon = 4;
  int base_polygon_size() const;
  void clear_base_polygon();
  static const int kBasePolygonFieldNumber = 4;
  const ::osi3::Vector2d& base_polygon(int index) const;
  ::osi3::Vector2d* mutable_base_polygon(int index);
  ::osi3::Vector2d* add_base_polygon();
  ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >*
      mutable_base_polygon();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >&
      base_polygon() const;

  // @@protoc_insertion_point(class_scope:osi3.BaseStationary)
 private:
  inline void set_has_dimension();
  inline void clear_has_dimension();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_orientation();
  inline void clear_has_orientation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Dimension3d* dimension_;
  ::osi3::Vector3d* position_;
  ::osi3::Orientation3d* orientation_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d > base_polygon_;
  friend void  protobuf_AddDesc_osi_5fcommon_2eproto();
  friend void protobuf_AssignDesc_osi_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_osi_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static BaseStationary* default_instance_;
};
// -------------------------------------------------------------------

class BaseMoving : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.BaseMoving) */ {
 public:
  BaseMoving();
  virtual ~BaseMoving();

  BaseMoving(const BaseMoving& from);

  inline BaseMoving& operator=(const BaseMoving& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseMoving& default_instance();

  void Swap(BaseMoving* other);

  // implements Message ----------------------------------------------

  inline BaseMoving* New() const { return New(NULL); }

  BaseMoving* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseMoving& from);
  void MergeFrom(const BaseMoving& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BaseMoving* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.Dimension3d dimension = 1;
  bool has_dimension() const;
  void clear_dimension();
  static const int kDimensionFieldNumber = 1;
  const ::osi3::Dimension3d& dimension() const;
  ::osi3::Dimension3d* mutable_dimension();
  ::osi3::Dimension3d* release_dimension();
  void set_allocated_dimension(::osi3::Dimension3d* dimension);

  // optional .osi3.Vector3d position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* mutable_position();
  ::osi3::Vector3d* release_position();
  void set_allocated_position(::osi3::Vector3d* position);

  // optional .osi3.Orientation3d orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  const ::osi3::Orientation3d& orientation() const;
  ::osi3::Orientation3d* mutable_orientation();
  ::osi3::Orientation3d* release_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);

  // optional .osi3.Vector3d velocity = 4;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  const ::osi3::Vector3d& velocity() const;
  ::osi3::Vector3d* mutable_velocity();
  ::osi3::Vector3d* release_velocity();
  void set_allocated_velocity(::osi3::Vector3d* velocity);

  // optional .osi3.Vector3d acceleration = 5;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 5;
  const ::osi3::Vector3d& acceleration() const;
  ::osi3::Vector3d* mutable_acceleration();
  ::osi3::Vector3d* release_acceleration();
  void set_allocated_acceleration(::osi3::Vector3d* acceleration);

  // optional .osi3.Orientation3d orientation_rate = 6;
  bool has_orientation_rate() const;
  void clear_orientation_rate();
  static const int kOrientationRateFieldNumber = 6;
  const ::osi3::Orientation3d& orientation_rate() const;
  ::osi3::Orientation3d* mutable_orientation_rate();
  ::osi3::Orientation3d* release_orientation_rate();
  void set_allocated_orientation_rate(::osi3::Orientation3d* orientation_rate);

  // repeated .osi3.Vector2d base_polygon = 7;
  int base_polygon_size() const;
  void clear_base_polygon();
  static const int kBasePolygonFieldNumber = 7;
  const ::osi3::Vector2d& base_polygon(int index) const;
  ::osi3::Vector2d* mutable_base_polygon(int index);
  ::osi3::Vector2d* add_base_polygon();
  ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >*
      mutable_base_polygon();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >&
      base_polygon() const;

  // @@protoc_insertion_point(class_scope:osi3.BaseMoving)
 private:
  inline void set_has_dimension();
  inline void clear_has_dimension();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_acceleration();
  inline void clear_has_acceleration();
  inline void set_has_orientation_rate();
  inline void clear_has_orientation_rate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Dimension3d* dimension_;
  ::osi3::Vector3d* position_;
  ::osi3::Orientation3d* orientation_;
  ::osi3::Vector3d* velocity_;
  ::osi3::Vector3d* acceleration_;
  ::osi3::Orientation3d* orientation_rate_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d > base_polygon_;
  friend void  protobuf_AddDesc_osi_5fcommon_2eproto();
  friend void protobuf_AssignDesc_osi_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_osi_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static BaseMoving* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3d

// optional double x = 1;
inline bool Vector3d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:osi3.Vector3d.x)
  return x_;
}
inline void Vector3d::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector3d.x)
}

// optional double y = 2;
inline bool Vector3d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:osi3.Vector3d.y)
  return y_;
}
inline void Vector3d::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector3d.y)
}

// optional double z = 3;
inline bool Vector3d::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3d::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3d::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3d::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:osi3.Vector3d.z)
  return z_;
}
inline void Vector3d::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector3d.z)
}

// -------------------------------------------------------------------

// Vector2d

// optional double x = 1;
inline bool Vector2d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector2d::x() const {
  // @@protoc_insertion_point(field_get:osi3.Vector2d.x)
  return x_;
}
inline void Vector2d::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector2d.x)
}

// optional double y = 2;
inline bool Vector2d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector2d::y() const {
  // @@protoc_insertion_point(field_get:osi3.Vector2d.y)
  return y_;
}
inline void Vector2d::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector2d.y)
}

// -------------------------------------------------------------------

// Timestamp

// optional int64 seconds = 1;
inline bool Timestamp::has_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Timestamp::set_has_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Timestamp::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Timestamp::clear_seconds() {
  seconds_ = GOOGLE_LONGLONG(0);
  clear_has_seconds();
}
inline ::google::protobuf::int64 Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:osi3.Timestamp.seconds)
  return seconds_;
}
inline void Timestamp::set_seconds(::google::protobuf::int64 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:osi3.Timestamp.seconds)
}

// optional uint32 nanos = 2;
inline bool Timestamp::has_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Timestamp::set_has_nanos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Timestamp::clear_has_nanos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Timestamp::clear_nanos() {
  nanos_ = 0u;
  clear_has_nanos();
}
inline ::google::protobuf::uint32 Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:osi3.Timestamp.nanos)
  return nanos_;
}
inline void Timestamp::set_nanos(::google::protobuf::uint32 value) {
  set_has_nanos();
  nanos_ = value;
  // @@protoc_insertion_point(field_set:osi3.Timestamp.nanos)
}

// -------------------------------------------------------------------

// Dimension3d

// optional double length = 1;
inline bool Dimension3d::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dimension3d::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dimension3d::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dimension3d::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double Dimension3d::length() const {
  // @@protoc_insertion_point(field_get:osi3.Dimension3d.length)
  return length_;
}
inline void Dimension3d::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:osi3.Dimension3d.length)
}

// optional double width = 2;
inline bool Dimension3d::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dimension3d::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dimension3d::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dimension3d::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double Dimension3d::width() const {
  // @@protoc_insertion_point(field_get:osi3.Dimension3d.width)
  return width_;
}
inline void Dimension3d::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:osi3.Dimension3d.width)
}

// optional double height = 3;
inline bool Dimension3d::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dimension3d::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dimension3d::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dimension3d::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double Dimension3d::height() const {
  // @@protoc_insertion_point(field_get:osi3.Dimension3d.height)
  return height_;
}
inline void Dimension3d::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:osi3.Dimension3d.height)
}

// -------------------------------------------------------------------

// Orientation3d

// optional double roll = 1;
inline bool Orientation3d::has_roll() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Orientation3d::set_has_roll() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Orientation3d::clear_has_roll() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Orientation3d::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline double Orientation3d::roll() const {
  // @@protoc_insertion_point(field_get:osi3.Orientation3d.roll)
  return roll_;
}
inline void Orientation3d::set_roll(double value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:osi3.Orientation3d.roll)
}

// optional double pitch = 2;
inline bool Orientation3d::has_pitch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Orientation3d::set_has_pitch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Orientation3d::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Orientation3d::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline double Orientation3d::pitch() const {
  // @@protoc_insertion_point(field_get:osi3.Orientation3d.pitch)
  return pitch_;
}
inline void Orientation3d::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:osi3.Orientation3d.pitch)
}

// optional double yaw = 3;
inline bool Orientation3d::has_yaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Orientation3d::set_has_yaw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Orientation3d::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Orientation3d::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline double Orientation3d::yaw() const {
  // @@protoc_insertion_point(field_get:osi3.Orientation3d.yaw)
  return yaw_;
}
inline void Orientation3d::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:osi3.Orientation3d.yaw)
}

// -------------------------------------------------------------------

// Identifier

// optional uint64 value = 1;
inline bool Identifier::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Identifier::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Identifier::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Identifier::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 Identifier::value() const {
  // @@protoc_insertion_point(field_get:osi3.Identifier.value)
  return value_;
}
inline void Identifier::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:osi3.Identifier.value)
}

// -------------------------------------------------------------------

// MountingPosition

// optional .osi3.Vector3d position = 1;
inline bool MountingPosition::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MountingPosition::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MountingPosition::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MountingPosition::clear_position() {
  if (position_ != NULL) position_->::osi3::Vector3d::Clear();
  clear_has_position();
}
inline const ::osi3::Vector3d& MountingPosition::position() const {
  // @@protoc_insertion_point(field_get:osi3.MountingPosition.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::osi3::Vector3d* MountingPosition::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MountingPosition.position)
  return position_;
}
inline ::osi3::Vector3d* MountingPosition::release_position() {
  // @@protoc_insertion_point(field_release:osi3.MountingPosition.position)
  clear_has_position();
  ::osi3::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline void MountingPosition::set_allocated_position(::osi3::Vector3d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MountingPosition.position)
}

// optional .osi3.Orientation3d orientation = 2;
inline bool MountingPosition::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MountingPosition::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MountingPosition::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MountingPosition::clear_orientation() {
  if (orientation_ != NULL) orientation_->::osi3::Orientation3d::Clear();
  clear_has_orientation();
}
inline const ::osi3::Orientation3d& MountingPosition::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.MountingPosition.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::osi3::Orientation3d* MountingPosition::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MountingPosition.orientation)
  return orientation_;
}
inline ::osi3::Orientation3d* MountingPosition::release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.MountingPosition.orientation)
  clear_has_orientation();
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void MountingPosition::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.MountingPosition.orientation)
}

// -------------------------------------------------------------------

// Spherical3d

// optional double distance = 1;
inline bool Spherical3d::has_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Spherical3d::set_has_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Spherical3d::clear_has_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Spherical3d::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline double Spherical3d::distance() const {
  // @@protoc_insertion_point(field_get:osi3.Spherical3d.distance)
  return distance_;
}
inline void Spherical3d::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:osi3.Spherical3d.distance)
}

// optional double azimuth = 2;
inline bool Spherical3d::has_azimuth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Spherical3d::set_has_azimuth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Spherical3d::clear_has_azimuth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Spherical3d::clear_azimuth() {
  azimuth_ = 0;
  clear_has_azimuth();
}
inline double Spherical3d::azimuth() const {
  // @@protoc_insertion_point(field_get:osi3.Spherical3d.azimuth)
  return azimuth_;
}
inline void Spherical3d::set_azimuth(double value) {
  set_has_azimuth();
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:osi3.Spherical3d.azimuth)
}

// optional double elevation = 3;
inline bool Spherical3d::has_elevation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Spherical3d::set_has_elevation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Spherical3d::clear_has_elevation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Spherical3d::clear_elevation() {
  elevation_ = 0;
  clear_has_elevation();
}
inline double Spherical3d::elevation() const {
  // @@protoc_insertion_point(field_get:osi3.Spherical3d.elevation)
  return elevation_;
}
inline void Spherical3d::set_elevation(double value) {
  set_has_elevation();
  elevation_ = value;
  // @@protoc_insertion_point(field_set:osi3.Spherical3d.elevation)
}

// -------------------------------------------------------------------

// BaseStationary

// optional .osi3.Dimension3d dimension = 1;
inline bool BaseStationary::has_dimension() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseStationary::set_has_dimension() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseStationary::clear_has_dimension() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseStationary::clear_dimension() {
  if (dimension_ != NULL) dimension_->::osi3::Dimension3d::Clear();
  clear_has_dimension();
}
inline const ::osi3::Dimension3d& BaseStationary::dimension() const {
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.dimension)
  return dimension_ != NULL ? *dimension_ : *default_instance_->dimension_;
}
inline ::osi3::Dimension3d* BaseStationary::mutable_dimension() {
  set_has_dimension();
  if (dimension_ == NULL) {
    dimension_ = new ::osi3::Dimension3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.dimension)
  return dimension_;
}
inline ::osi3::Dimension3d* BaseStationary::release_dimension() {
  // @@protoc_insertion_point(field_release:osi3.BaseStationary.dimension)
  clear_has_dimension();
  ::osi3::Dimension3d* temp = dimension_;
  dimension_ = NULL;
  return temp;
}
inline void BaseStationary::set_allocated_dimension(::osi3::Dimension3d* dimension) {
  delete dimension_;
  dimension_ = dimension;
  if (dimension) {
    set_has_dimension();
  } else {
    clear_has_dimension();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseStationary.dimension)
}

// optional .osi3.Vector3d position = 2;
inline bool BaseStationary::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseStationary::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseStationary::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseStationary::clear_position() {
  if (position_ != NULL) position_->::osi3::Vector3d::Clear();
  clear_has_position();
}
inline const ::osi3::Vector3d& BaseStationary::position() const {
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::osi3::Vector3d* BaseStationary::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.position)
  return position_;
}
inline ::osi3::Vector3d* BaseStationary::release_position() {
  // @@protoc_insertion_point(field_release:osi3.BaseStationary.position)
  clear_has_position();
  ::osi3::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline void BaseStationary::set_allocated_position(::osi3::Vector3d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseStationary.position)
}

// optional .osi3.Orientation3d orientation = 3;
inline bool BaseStationary::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseStationary::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseStationary::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseStationary::clear_orientation() {
  if (orientation_ != NULL) orientation_->::osi3::Orientation3d::Clear();
  clear_has_orientation();
}
inline const ::osi3::Orientation3d& BaseStationary::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::osi3::Orientation3d* BaseStationary::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.orientation)
  return orientation_;
}
inline ::osi3::Orientation3d* BaseStationary::release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.BaseStationary.orientation)
  clear_has_orientation();
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void BaseStationary::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseStationary.orientation)
}

// repeated .osi3.Vector2d base_polygon = 4;
inline int BaseStationary::base_polygon_size() const {
  return base_polygon_.size();
}
inline void BaseStationary::clear_base_polygon() {
  base_polygon_.Clear();
}
inline const ::osi3::Vector2d& BaseStationary::base_polygon(int index) const {
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.base_polygon)
  return base_polygon_.Get(index);
}
inline ::osi3::Vector2d* BaseStationary::mutable_base_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.base_polygon)
  return base_polygon_.Mutable(index);
}
inline ::osi3::Vector2d* BaseStationary::add_base_polygon() {
  // @@protoc_insertion_point(field_add:osi3.BaseStationary.base_polygon)
  return base_polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >*
BaseStationary::mutable_base_polygon() {
  // @@protoc_insertion_point(field_mutable_list:osi3.BaseStationary.base_polygon)
  return &base_polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >&
BaseStationary::base_polygon() const {
  // @@protoc_insertion_point(field_list:osi3.BaseStationary.base_polygon)
  return base_polygon_;
}

// -------------------------------------------------------------------

// BaseMoving

// optional .osi3.Dimension3d dimension = 1;
inline bool BaseMoving::has_dimension() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseMoving::set_has_dimension() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseMoving::clear_has_dimension() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseMoving::clear_dimension() {
  if (dimension_ != NULL) dimension_->::osi3::Dimension3d::Clear();
  clear_has_dimension();
}
inline const ::osi3::Dimension3d& BaseMoving::dimension() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.dimension)
  return dimension_ != NULL ? *dimension_ : *default_instance_->dimension_;
}
inline ::osi3::Dimension3d* BaseMoving::mutable_dimension() {
  set_has_dimension();
  if (dimension_ == NULL) {
    dimension_ = new ::osi3::Dimension3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.dimension)
  return dimension_;
}
inline ::osi3::Dimension3d* BaseMoving::release_dimension() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.dimension)
  clear_has_dimension();
  ::osi3::Dimension3d* temp = dimension_;
  dimension_ = NULL;
  return temp;
}
inline void BaseMoving::set_allocated_dimension(::osi3::Dimension3d* dimension) {
  delete dimension_;
  dimension_ = dimension;
  if (dimension) {
    set_has_dimension();
  } else {
    clear_has_dimension();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.dimension)
}

// optional .osi3.Vector3d position = 2;
inline bool BaseMoving::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseMoving::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseMoving::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseMoving::clear_position() {
  if (position_ != NULL) position_->::osi3::Vector3d::Clear();
  clear_has_position();
}
inline const ::osi3::Vector3d& BaseMoving::position() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::osi3::Vector3d* BaseMoving::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.position)
  return position_;
}
inline ::osi3::Vector3d* BaseMoving::release_position() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.position)
  clear_has_position();
  ::osi3::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline void BaseMoving::set_allocated_position(::osi3::Vector3d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.position)
}

// optional .osi3.Orientation3d orientation = 3;
inline bool BaseMoving::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseMoving::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseMoving::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseMoving::clear_orientation() {
  if (orientation_ != NULL) orientation_->::osi3::Orientation3d::Clear();
  clear_has_orientation();
}
inline const ::osi3::Orientation3d& BaseMoving::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::osi3::Orientation3d* BaseMoving::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.orientation)
  return orientation_;
}
inline ::osi3::Orientation3d* BaseMoving::release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.orientation)
  clear_has_orientation();
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void BaseMoving::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.orientation)
}

// optional .osi3.Vector3d velocity = 4;
inline bool BaseMoving::has_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseMoving::set_has_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseMoving::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseMoving::clear_velocity() {
  if (velocity_ != NULL) velocity_->::osi3::Vector3d::Clear();
  clear_has_velocity();
}
inline const ::osi3::Vector3d& BaseMoving::velocity() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::osi3::Vector3d* BaseMoving::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.velocity)
  return velocity_;
}
inline ::osi3::Vector3d* BaseMoving::release_velocity() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.velocity)
  clear_has_velocity();
  ::osi3::Vector3d* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void BaseMoving::set_allocated_velocity(::osi3::Vector3d* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.velocity)
}

// optional .osi3.Vector3d acceleration = 5;
inline bool BaseMoving::has_acceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaseMoving::set_has_acceleration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaseMoving::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaseMoving::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::osi3::Vector3d::Clear();
  clear_has_acceleration();
}
inline const ::osi3::Vector3d& BaseMoving::acceleration() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.acceleration)
  return acceleration_ != NULL ? *acceleration_ : *default_instance_->acceleration_;
}
inline ::osi3::Vector3d* BaseMoving::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    acceleration_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.acceleration)
  return acceleration_;
}
inline ::osi3::Vector3d* BaseMoving::release_acceleration() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.acceleration)
  clear_has_acceleration();
  ::osi3::Vector3d* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline void BaseMoving::set_allocated_acceleration(::osi3::Vector3d* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.acceleration)
}

// optional .osi3.Orientation3d orientation_rate = 6;
inline bool BaseMoving::has_orientation_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseMoving::set_has_orientation_rate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseMoving::clear_has_orientation_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseMoving::clear_orientation_rate() {
  if (orientation_rate_ != NULL) orientation_rate_->::osi3::Orientation3d::Clear();
  clear_has_orientation_rate();
}
inline const ::osi3::Orientation3d& BaseMoving::orientation_rate() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.orientation_rate)
  return orientation_rate_ != NULL ? *orientation_rate_ : *default_instance_->orientation_rate_;
}
inline ::osi3::Orientation3d* BaseMoving::mutable_orientation_rate() {
  set_has_orientation_rate();
  if (orientation_rate_ == NULL) {
    orientation_rate_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.orientation_rate)
  return orientation_rate_;
}
inline ::osi3::Orientation3d* BaseMoving::release_orientation_rate() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.orientation_rate)
  clear_has_orientation_rate();
  ::osi3::Orientation3d* temp = orientation_rate_;
  orientation_rate_ = NULL;
  return temp;
}
inline void BaseMoving::set_allocated_orientation_rate(::osi3::Orientation3d* orientation_rate) {
  delete orientation_rate_;
  orientation_rate_ = orientation_rate;
  if (orientation_rate) {
    set_has_orientation_rate();
  } else {
    clear_has_orientation_rate();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.orientation_rate)
}

// repeated .osi3.Vector2d base_polygon = 7;
inline int BaseMoving::base_polygon_size() const {
  return base_polygon_.size();
}
inline void BaseMoving::clear_base_polygon() {
  base_polygon_.Clear();
}
inline const ::osi3::Vector2d& BaseMoving::base_polygon(int index) const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.base_polygon)
  return base_polygon_.Get(index);
}
inline ::osi3::Vector2d* BaseMoving::mutable_base_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.base_polygon)
  return base_polygon_.Mutable(index);
}
inline ::osi3::Vector2d* BaseMoving::add_base_polygon() {
  // @@protoc_insertion_point(field_add:osi3.BaseMoving.base_polygon)
  return base_polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >*
BaseMoving::mutable_base_polygon() {
  // @@protoc_insertion_point(field_mutable_list:osi3.BaseMoving.base_polygon)
  return &base_polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >&
BaseMoving::base_polygon() const {
  // @@protoc_insertion_point(field_list:osi3.BaseMoving.base_polygon)
  return base_polygon_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osi_5fcommon_2eproto__INCLUDED
