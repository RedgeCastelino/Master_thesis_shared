// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensordata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_sensordata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* DetectedEntityHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedEntityHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DetectedEntityHeader_DataQualifier_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SensorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5fsensordata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5fsensordata_2eproto() {
  protobuf_AddDesc_osi_5fsensordata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_sensordata.proto");
  GOOGLE_CHECK(file != NULL);
  DetectedEntityHeader_descriptor_ = file->message_type(0);
  static const int DetectedEntityHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedEntityHeader, measurement_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedEntityHeader, cycle_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedEntityHeader, data_qualifier_),
  };
  DetectedEntityHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectedEntityHeader_descriptor_,
      DetectedEntityHeader::default_instance_,
      DetectedEntityHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedEntityHeader, _has_bits_[0]),
      -1,
      -1,
      sizeof(DetectedEntityHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedEntityHeader, _internal_metadata_),
      -1);
  DetectedEntityHeader_DataQualifier_descriptor_ = DetectedEntityHeader_descriptor_->enum_type(0);
  SensorData_descriptor_ = file->message_type(1);
  static const int SensorData_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, host_vehicle_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, host_vehicle_location_rmse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, mounting_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, mounting_position_rmse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, sensor_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, last_measurement_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, stationary_object_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, stationary_object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, moving_object_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, moving_object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, traffic_sign_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, traffic_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, traffic_light_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, traffic_light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, road_marking_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, road_marking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, lane_boundary_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, lane_boundary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, lane_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, occupant_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, occupant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, feature_data_),
  };
  SensorData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SensorData_descriptor_,
      SensorData::default_instance_,
      SensorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, _has_bits_[0]),
      -1,
      -1,
      sizeof(SensorData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5fsensordata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectedEntityHeader_descriptor_, &DetectedEntityHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SensorData_descriptor_, &SensorData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5fsensordata_2eproto() {
  delete DetectedEntityHeader::default_instance_;
  delete DetectedEntityHeader_reflection_;
  delete SensorData::default_instance_;
  delete SensorData_reflection_;
}

void protobuf_AddDesc_osi_5fsensordata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5fsensordata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::osi3::protobuf_AddDesc_osi_5fversion_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fcommon_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fdetectedtrafficsign_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fdetectedtrafficlight_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fdetectedroadmarking_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fdetectedlane_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fdetectedobject_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fdetectedoccupant_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fsensorview_2eproto();
  ::osi3::protobuf_AddDesc_osi_5ffeaturedata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024osi_sensordata.proto\022\004osi3\032\021osi_versio"
    "n.proto\032\020osi_common.proto\032\035osi_detectedt"
    "rafficsign.proto\032\036osi_detectedtrafficlig"
    "ht.proto\032\035osi_detectedroadmarking.proto\032"
    "\026osi_detectedlane.proto\032\030osi_detectedobj"
    "ect.proto\032\032osi_detectedoccupant.proto\032\024o"
    "si_sensorview.proto\032\025osi_featuredata.pro"
    "to\"\216\003\n\024DetectedEntityHeader\022)\n\020measureme"
    "nt_time\030\001 \001(\0132\017.osi3.Timestamp\022\025\n\rcycle_"
    "counter\030\002 \001(\004\022@\n\016data_qualifier\030\003 \001(\0162(."
    "osi3.DetectedEntityHeader.DataQualifier\""
    "\361\001\n\rDataQualifier\022\032\n\026DATA_QUALIFIER_UNKN"
    "OWN\020\000\022\030\n\024DATA_QUALIFIER_OTHER\020\001\022\034\n\030DATA_"
    "QUALIFIER_AVAILABLE\020\002\022$\n DATA_QUALIFIER_"
    "AVAILABLE_REDUCED\020\003\022 \n\034DATA_QUALIFIER_NO"
    "T_AVAILABLE\020\004\022\034\n\030DATA_QUALIFIER_BLINDNES"
    "S\020\005\022&\n\"DATA_QUALIFIER_TEMPORARY_AVAILABL"
    "E\020\006\"\226\n\n\nSensorData\022\'\n\007version\030\001 \001(\0132\026.os"
    "i3.InterfaceVersion\022\"\n\ttimestamp\030\002 \001(\0132\017"
    ".osi3.Timestamp\022/\n\025host_vehicle_location"
    "\030\003 \001(\0132\020.osi3.BaseMoving\0224\n\032host_vehicle"
    "_location_rmse\030\004 \001(\0132\020.osi3.BaseMoving\022#"
    "\n\tsensor_id\030\005 \001(\0132\020.osi3.Identifier\0221\n\021m"
    "ounting_position\030\006 \001(\0132\026.osi3.MountingPo"
    "sition\0226\n\026mounting_position_rmse\030\007 \001(\0132\026"
    ".osi3.MountingPosition\022%\n\013sensor_view\030\010 "
    "\003(\0132\020.osi3.SensorView\022.\n\025last_measuremen"
    "t_time\030\t \001(\0132\017.osi3.Timestamp\022<\n\030station"
    "ary_object_header\030\n \001(\0132\032.osi3.DetectedE"
    "ntityHeader\0229\n\021stationary_object\030\013 \003(\0132\036"
    ".osi3.DetectedStationaryObject\0228\n\024moving"
    "_object_header\030\014 \001(\0132\032.osi3.DetectedEnti"
    "tyHeader\0221\n\rmoving_object\030\r \003(\0132\032.osi3.D"
    "etectedMovingObject\0227\n\023traffic_sign_head"
    "er\030\016 \001(\0132\032.osi3.DetectedEntityHeader\022/\n\014"
    "traffic_sign\030\017 \003(\0132\031.osi3.DetectedTraffi"
    "cSign\0228\n\024traffic_light_header\030\020 \001(\0132\032.os"
    "i3.DetectedEntityHeader\0221\n\rtraffic_light"
    "\030\021 \003(\0132\032.osi3.DetectedTrafficLight\0227\n\023ro"
    "ad_marking_header\030\022 \001(\0132\032.osi3.DetectedE"
    "ntityHeader\022/\n\014road_marking\030\023 \003(\0132\031.osi3"
    ".DetectedRoadMarking\0228\n\024lane_boundary_he"
    "ader\030\024 \001(\0132\032.osi3.DetectedEntityHeader\0221"
    "\n\rlane_boundary\030\025 \003(\0132\032.osi3.DetectedLan"
    "eBoundary\022/\n\013lane_header\030\026 \001(\0132\032.osi3.De"
    "tectedEntityHeader\022 \n\004lane\030\027 \003(\0132\022.osi3."
    "DetectedLane\0223\n\017occupant_header\030\030 \001(\0132\032."
    "osi3.DetectedEntityHeader\022(\n\010occupant\030\031 "
    "\003(\0132\026.osi3.DetectedOccupant\022\'\n\014feature_d"
    "ata\030\032 \001(\0132\021.osi3.FeatureDataB\002H\001", 1992);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_sensordata.proto", &protobuf_RegisterTypes);
  DetectedEntityHeader::default_instance_ = new DetectedEntityHeader();
  SensorData::default_instance_ = new SensorData();
  DetectedEntityHeader::default_instance_->InitAsDefaultInstance();
  SensorData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5fsensordata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5fsensordata_2eproto {
  StaticDescriptorInitializer_osi_5fsensordata_2eproto() {
    protobuf_AddDesc_osi_5fsensordata_2eproto();
  }
} static_descriptor_initializer_osi_5fsensordata_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* DetectedEntityHeader_DataQualifier_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedEntityHeader_DataQualifier_descriptor_;
}
bool DetectedEntityHeader_DataQualifier_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_UNKNOWN;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_OTHER;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_AVAILABLE;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_AVAILABLE_REDUCED;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_NOT_AVAILABLE;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_BLINDNESS;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_TEMPORARY_AVAILABLE;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DataQualifier_MIN;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DataQualifier_MAX;
const int DetectedEntityHeader::DataQualifier_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedEntityHeader::kMeasurementTimeFieldNumber;
const int DetectedEntityHeader::kCycleCounterFieldNumber;
const int DetectedEntityHeader::kDataQualifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedEntityHeader::DetectedEntityHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedEntityHeader)
}

void DetectedEntityHeader::InitAsDefaultInstance() {
  measurement_time_ = const_cast< ::osi3::Timestamp*>(&::osi3::Timestamp::default_instance());
}

DetectedEntityHeader::DetectedEntityHeader(const DetectedEntityHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedEntityHeader)
}

void DetectedEntityHeader::SharedCtor() {
  _cached_size_ = 0;
  measurement_time_ = NULL;
  cycle_counter_ = GOOGLE_ULONGLONG(0);
  data_qualifier_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedEntityHeader::~DetectedEntityHeader() {
  // @@protoc_insertion_point(destructor:osi3.DetectedEntityHeader)
  SharedDtor();
}

void DetectedEntityHeader::SharedDtor() {
  if (this != default_instance_) {
    delete measurement_time_;
  }
}

void DetectedEntityHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedEntityHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedEntityHeader_descriptor_;
}

const DetectedEntityHeader& DetectedEntityHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensordata_2eproto();
  return *default_instance_;
}

DetectedEntityHeader* DetectedEntityHeader::default_instance_ = NULL;

DetectedEntityHeader* DetectedEntityHeader::New(::google::protobuf::Arena* arena) const {
  DetectedEntityHeader* n = new DetectedEntityHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedEntityHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedEntityHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DetectedEntityHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DetectedEntityHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(cycle_counter_, data_qualifier_);
    if (has_measurement_time()) {
      if (measurement_time_ != NULL) measurement_time_->::osi3::Timestamp::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DetectedEntityHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedEntityHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Timestamp measurement_time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_measurement_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cycle_counter;
        break;
      }

      // optional uint64 cycle_counter = 2;
      case 2: {
        if (tag == 16) {
         parse_cycle_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cycle_counter_)));
          set_has_cycle_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data_qualifier;
        break;
      }

      // optional .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
      case 3: {
        if (tag == 24) {
         parse_data_qualifier:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::DetectedEntityHeader_DataQualifier_IsValid(value)) {
            set_data_qualifier(static_cast< ::osi3::DetectedEntityHeader_DataQualifier >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedEntityHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedEntityHeader)
  return false;
#undef DO_
}

void DetectedEntityHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedEntityHeader)
  // optional .osi3.Timestamp measurement_time = 1;
  if (has_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->measurement_time_, output);
  }

  // optional uint64 cycle_counter = 2;
  if (has_cycle_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cycle_counter(), output);
  }

  // optional .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
  if (has_data_qualifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->data_qualifier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedEntityHeader)
}

::google::protobuf::uint8* DetectedEntityHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedEntityHeader)
  // optional .osi3.Timestamp measurement_time = 1;
  if (has_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->measurement_time_, false, target);
  }

  // optional uint64 cycle_counter = 2;
  if (has_cycle_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cycle_counter(), target);
  }

  // optional .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
  if (has_data_qualifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_qualifier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedEntityHeader)
  return target;
}

int DetectedEntityHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedEntityHeader)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .osi3.Timestamp measurement_time = 1;
    if (has_measurement_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->measurement_time_);
    }

    // optional uint64 cycle_counter = 2;
    if (has_cycle_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cycle_counter());
    }

    // optional .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
    if (has_data_qualifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_qualifier());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedEntityHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedEntityHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectedEntityHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedEntityHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedEntityHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedEntityHeader)
    MergeFrom(*source);
  }
}

void DetectedEntityHeader::MergeFrom(const DetectedEntityHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedEntityHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_measurement_time()) {
      mutable_measurement_time()->::osi3::Timestamp::MergeFrom(from.measurement_time());
    }
    if (from.has_cycle_counter()) {
      set_cycle_counter(from.cycle_counter());
    }
    if (from.has_data_qualifier()) {
      set_data_qualifier(from.data_qualifier());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DetectedEntityHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedEntityHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedEntityHeader::CopyFrom(const DetectedEntityHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedEntityHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedEntityHeader::IsInitialized() const {

  return true;
}

void DetectedEntityHeader::Swap(DetectedEntityHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedEntityHeader::InternalSwap(DetectedEntityHeader* other) {
  std::swap(measurement_time_, other->measurement_time_);
  std::swap(cycle_counter_, other->cycle_counter_);
  std::swap(data_qualifier_, other->data_qualifier_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedEntityHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedEntityHeader_descriptor_;
  metadata.reflection = DetectedEntityHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectedEntityHeader

// optional .osi3.Timestamp measurement_time = 1;
bool DetectedEntityHeader::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectedEntityHeader::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectedEntityHeader::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedEntityHeader::clear_measurement_time() {
  if (measurement_time_ != NULL) measurement_time_->::osi3::Timestamp::Clear();
  clear_has_measurement_time();
}
const ::osi3::Timestamp& DetectedEntityHeader::measurement_time() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedEntityHeader.measurement_time)
  return measurement_time_ != NULL ? *measurement_time_ : *default_instance_->measurement_time_;
}
::osi3::Timestamp* DetectedEntityHeader::mutable_measurement_time() {
  set_has_measurement_time();
  if (measurement_time_ == NULL) {
    measurement_time_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedEntityHeader.measurement_time)
  return measurement_time_;
}
::osi3::Timestamp* DetectedEntityHeader::release_measurement_time() {
  // @@protoc_insertion_point(field_release:osi3.DetectedEntityHeader.measurement_time)
  clear_has_measurement_time();
  ::osi3::Timestamp* temp = measurement_time_;
  measurement_time_ = NULL;
  return temp;
}
void DetectedEntityHeader::set_allocated_measurement_time(::osi3::Timestamp* measurement_time) {
  delete measurement_time_;
  measurement_time_ = measurement_time;
  if (measurement_time) {
    set_has_measurement_time();
  } else {
    clear_has_measurement_time();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedEntityHeader.measurement_time)
}

// optional uint64 cycle_counter = 2;
bool DetectedEntityHeader::has_cycle_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectedEntityHeader::set_has_cycle_counter() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectedEntityHeader::clear_has_cycle_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectedEntityHeader::clear_cycle_counter() {
  cycle_counter_ = GOOGLE_ULONGLONG(0);
  clear_has_cycle_counter();
}
 ::google::protobuf::uint64 DetectedEntityHeader::cycle_counter() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedEntityHeader.cycle_counter)
  return cycle_counter_;
}
 void DetectedEntityHeader::set_cycle_counter(::google::protobuf::uint64 value) {
  set_has_cycle_counter();
  cycle_counter_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedEntityHeader.cycle_counter)
}

// optional .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
bool DetectedEntityHeader::has_data_qualifier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DetectedEntityHeader::set_has_data_qualifier() {
  _has_bits_[0] |= 0x00000004u;
}
void DetectedEntityHeader::clear_has_data_qualifier() {
  _has_bits_[0] &= ~0x00000004u;
}
void DetectedEntityHeader::clear_data_qualifier() {
  data_qualifier_ = 0;
  clear_has_data_qualifier();
}
 ::osi3::DetectedEntityHeader_DataQualifier DetectedEntityHeader::data_qualifier() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedEntityHeader.data_qualifier)
  return static_cast< ::osi3::DetectedEntityHeader_DataQualifier >(data_qualifier_);
}
 void DetectedEntityHeader::set_data_qualifier(::osi3::DetectedEntityHeader_DataQualifier value) {
  assert(::osi3::DetectedEntityHeader_DataQualifier_IsValid(value));
  set_has_data_qualifier();
  data_qualifier_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedEntityHeader.data_qualifier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorData::kVersionFieldNumber;
const int SensorData::kTimestampFieldNumber;
const int SensorData::kHostVehicleLocationFieldNumber;
const int SensorData::kHostVehicleLocationRmseFieldNumber;
const int SensorData::kSensorIdFieldNumber;
const int SensorData::kMountingPositionFieldNumber;
const int SensorData::kMountingPositionRmseFieldNumber;
const int SensorData::kSensorViewFieldNumber;
const int SensorData::kLastMeasurementTimeFieldNumber;
const int SensorData::kStationaryObjectHeaderFieldNumber;
const int SensorData::kStationaryObjectFieldNumber;
const int SensorData::kMovingObjectHeaderFieldNumber;
const int SensorData::kMovingObjectFieldNumber;
const int SensorData::kTrafficSignHeaderFieldNumber;
const int SensorData::kTrafficSignFieldNumber;
const int SensorData::kTrafficLightHeaderFieldNumber;
const int SensorData::kTrafficLightFieldNumber;
const int SensorData::kRoadMarkingHeaderFieldNumber;
const int SensorData::kRoadMarkingFieldNumber;
const int SensorData::kLaneBoundaryHeaderFieldNumber;
const int SensorData::kLaneBoundaryFieldNumber;
const int SensorData::kLaneHeaderFieldNumber;
const int SensorData::kLaneFieldNumber;
const int SensorData::kOccupantHeaderFieldNumber;
const int SensorData::kOccupantFieldNumber;
const int SensorData::kFeatureDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorData::SensorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.SensorData)
}

void SensorData::InitAsDefaultInstance() {
  version_ = const_cast< ::osi3::InterfaceVersion*>(&::osi3::InterfaceVersion::default_instance());
  timestamp_ = const_cast< ::osi3::Timestamp*>(&::osi3::Timestamp::default_instance());
  host_vehicle_location_ = const_cast< ::osi3::BaseMoving*>(&::osi3::BaseMoving::default_instance());
  host_vehicle_location_rmse_ = const_cast< ::osi3::BaseMoving*>(&::osi3::BaseMoving::default_instance());
  sensor_id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  mounting_position_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
  mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(&::osi3::MountingPosition::default_instance());
  last_measurement_time_ = const_cast< ::osi3::Timestamp*>(&::osi3::Timestamp::default_instance());
  stationary_object_header_ = const_cast< ::osi3::DetectedEntityHeader*>(&::osi3::DetectedEntityHeader::default_instance());
  moving_object_header_ = const_cast< ::osi3::DetectedEntityHeader*>(&::osi3::DetectedEntityHeader::default_instance());
  traffic_sign_header_ = const_cast< ::osi3::DetectedEntityHeader*>(&::osi3::DetectedEntityHeader::default_instance());
  traffic_light_header_ = const_cast< ::osi3::DetectedEntityHeader*>(&::osi3::DetectedEntityHeader::default_instance());
  road_marking_header_ = const_cast< ::osi3::DetectedEntityHeader*>(&::osi3::DetectedEntityHeader::default_instance());
  lane_boundary_header_ = const_cast< ::osi3::DetectedEntityHeader*>(&::osi3::DetectedEntityHeader::default_instance());
  lane_header_ = const_cast< ::osi3::DetectedEntityHeader*>(&::osi3::DetectedEntityHeader::default_instance());
  occupant_header_ = const_cast< ::osi3::DetectedEntityHeader*>(&::osi3::DetectedEntityHeader::default_instance());
  feature_data_ = const_cast< ::osi3::FeatureData*>(&::osi3::FeatureData::default_instance());
}

SensorData::SensorData(const SensorData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.SensorData)
}

void SensorData::SharedCtor() {
  _cached_size_ = 0;
  version_ = NULL;
  timestamp_ = NULL;
  host_vehicle_location_ = NULL;
  host_vehicle_location_rmse_ = NULL;
  sensor_id_ = NULL;
  mounting_position_ = NULL;
  mounting_position_rmse_ = NULL;
  last_measurement_time_ = NULL;
  stationary_object_header_ = NULL;
  moving_object_header_ = NULL;
  traffic_sign_header_ = NULL;
  traffic_light_header_ = NULL;
  road_marking_header_ = NULL;
  lane_boundary_header_ = NULL;
  lane_header_ = NULL;
  occupant_header_ = NULL;
  feature_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:osi3.SensorData)
  SharedDtor();
}

void SensorData::SharedDtor() {
  if (this != default_instance_) {
    delete version_;
    delete timestamp_;
    delete host_vehicle_location_;
    delete host_vehicle_location_rmse_;
    delete sensor_id_;
    delete mounting_position_;
    delete mounting_position_rmse_;
    delete last_measurement_time_;
    delete stationary_object_header_;
    delete moving_object_header_;
    delete traffic_sign_header_;
    delete traffic_light_header_;
    delete road_marking_header_;
    delete lane_boundary_header_;
    delete lane_header_;
    delete occupant_header_;
    delete feature_data_;
  }
}

void SensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorData_descriptor_;
}

const SensorData& SensorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fsensordata_2eproto();
  return *default_instance_;
}

SensorData* SensorData::default_instance_ = NULL;

SensorData* SensorData::New(::google::protobuf::Arena* arena) const {
  SensorData* n = new SensorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SensorData)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_version()) {
      if (version_ != NULL) version_->::osi3::InterfaceVersion::Clear();
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::osi3::Timestamp::Clear();
    }
    if (has_host_vehicle_location()) {
      if (host_vehicle_location_ != NULL) host_vehicle_location_->::osi3::BaseMoving::Clear();
    }
    if (has_host_vehicle_location_rmse()) {
      if (host_vehicle_location_rmse_ != NULL) host_vehicle_location_rmse_->::osi3::BaseMoving::Clear();
    }
    if (has_sensor_id()) {
      if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
    }
    if (has_mounting_position()) {
      if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
    }
    if (has_mounting_position_rmse()) {
      if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 43776u) {
    if (has_last_measurement_time()) {
      if (last_measurement_time_ != NULL) last_measurement_time_->::osi3::Timestamp::Clear();
    }
    if (has_stationary_object_header()) {
      if (stationary_object_header_ != NULL) stationary_object_header_->::osi3::DetectedEntityHeader::Clear();
    }
    if (has_moving_object_header()) {
      if (moving_object_header_ != NULL) moving_object_header_->::osi3::DetectedEntityHeader::Clear();
    }
    if (has_traffic_sign_header()) {
      if (traffic_sign_header_ != NULL) traffic_sign_header_->::osi3::DetectedEntityHeader::Clear();
    }
    if (has_traffic_light_header()) {
      if (traffic_light_header_ != NULL) traffic_light_header_->::osi3::DetectedEntityHeader::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 11141120u) {
    if (has_road_marking_header()) {
      if (road_marking_header_ != NULL) road_marking_header_->::osi3::DetectedEntityHeader::Clear();
    }
    if (has_lane_boundary_header()) {
      if (lane_boundary_header_ != NULL) lane_boundary_header_->::osi3::DetectedEntityHeader::Clear();
    }
    if (has_lane_header()) {
      if (lane_header_ != NULL) lane_header_->::osi3::DetectedEntityHeader::Clear();
    }
    if (has_occupant_header()) {
      if (occupant_header_ != NULL) occupant_header_->::osi3::DetectedEntityHeader::Clear();
    }
  }
  if (has_feature_data()) {
    if (feature_data_ != NULL) feature_data_->::osi3::FeatureData::Clear();
  }
  sensor_view_.Clear();
  stationary_object_.Clear();
  moving_object_.Clear();
  traffic_sign_.Clear();
  traffic_light_.Clear();
  road_marking_.Clear();
  lane_boundary_.Clear();
  lane_.Clear();
  occupant_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.SensorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.InterfaceVersion version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .osi3.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_host_vehicle_location;
        break;
      }

      // optional .osi3.BaseMoving host_vehicle_location = 3;
      case 3: {
        if (tag == 26) {
         parse_host_vehicle_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host_vehicle_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_host_vehicle_location_rmse;
        break;
      }

      // optional .osi3.BaseMoving host_vehicle_location_rmse = 4;
      case 4: {
        if (tag == 34) {
         parse_host_vehicle_location_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host_vehicle_location_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sensor_id;
        break;
      }

      // optional .osi3.Identifier sensor_id = 5;
      case 5: {
        if (tag == 42) {
         parse_sensor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mounting_position;
        break;
      }

      // optional .osi3.MountingPosition mounting_position = 6;
      case 6: {
        if (tag == 50) {
         parse_mounting_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mounting_position_rmse;
        break;
      }

      // optional .osi3.MountingPosition mounting_position_rmse = 7;
      case 7: {
        if (tag == 58) {
         parse_mounting_position_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sensor_view;
        break;
      }

      // repeated .osi3.SensorView sensor_view = 8;
      case 8: {
        if (tag == 66) {
         parse_sensor_view:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sensor_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sensor_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_sensor_view;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(74)) goto parse_last_measurement_time;
        break;
      }

      // optional .osi3.Timestamp last_measurement_time = 9;
      case 9: {
        if (tag == 74) {
         parse_last_measurement_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_measurement_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_stationary_object_header;
        break;
      }

      // optional .osi3.DetectedEntityHeader stationary_object_header = 10;
      case 10: {
        if (tag == 82) {
         parse_stationary_object_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stationary_object_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_stationary_object;
        break;
      }

      // repeated .osi3.DetectedStationaryObject stationary_object = 11;
      case 11: {
        if (tag == 90) {
         parse_stationary_object:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stationary_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stationary_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_stationary_object;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(98)) goto parse_moving_object_header;
        break;
      }

      // optional .osi3.DetectedEntityHeader moving_object_header = 12;
      case 12: {
        if (tag == 98) {
         parse_moving_object_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moving_object_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_moving_object;
        break;
      }

      // repeated .osi3.DetectedMovingObject moving_object = 13;
      case 13: {
        if (tag == 106) {
         parse_moving_object:
          DO_(input->IncrementRecursionDepth());
         parse_loop_moving_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_moving_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_moving_object;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(114)) goto parse_traffic_sign_header;
        break;
      }

      // optional .osi3.DetectedEntityHeader traffic_sign_header = 14;
      case 14: {
        if (tag == 114) {
         parse_traffic_sign_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_sign_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_traffic_sign;
        break;
      }

      // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
      case 15: {
        if (tag == 122) {
         parse_traffic_sign:
          DO_(input->IncrementRecursionDepth());
         parse_loop_traffic_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_traffic_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_traffic_sign;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(130)) goto parse_traffic_light_header;
        break;
      }

      // optional .osi3.DetectedEntityHeader traffic_light_header = 16;
      case 16: {
        if (tag == 130) {
         parse_traffic_light_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_light_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_traffic_light;
        break;
      }

      // repeated .osi3.DetectedTrafficLight traffic_light = 17;
      case 17: {
        if (tag == 138) {
         parse_traffic_light:
          DO_(input->IncrementRecursionDepth());
         parse_loop_traffic_light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_loop_traffic_light;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(146)) goto parse_road_marking_header;
        break;
      }

      // optional .osi3.DetectedEntityHeader road_marking_header = 18;
      case 18: {
        if (tag == 146) {
         parse_road_marking_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_road_marking_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_road_marking;
        break;
      }

      // repeated .osi3.DetectedRoadMarking road_marking = 19;
      case 19: {
        if (tag == 154) {
         parse_road_marking:
          DO_(input->IncrementRecursionDepth());
         parse_loop_road_marking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_road_marking()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_loop_road_marking;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_lane_boundary_header;
        break;
      }

      // optional .osi3.DetectedEntityHeader lane_boundary_header = 20;
      case 20: {
        if (tag == 162) {
         parse_lane_boundary_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_boundary_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_lane_boundary;
        break;
      }

      // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
      case 21: {
        if (tag == 170) {
         parse_lane_boundary:
          DO_(input->IncrementRecursionDepth());
         parse_loop_lane_boundary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lane_boundary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_loop_lane_boundary;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(178)) goto parse_lane_header;
        break;
      }

      // optional .osi3.DetectedEntityHeader lane_header = 22;
      case 22: {
        if (tag == 178) {
         parse_lane_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_lane;
        break;
      }

      // repeated .osi3.DetectedLane lane = 23;
      case 23: {
        if (tag == 186) {
         parse_lane:
          DO_(input->IncrementRecursionDepth());
         parse_loop_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_loop_lane;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(194)) goto parse_occupant_header;
        break;
      }

      // optional .osi3.DetectedEntityHeader occupant_header = 24;
      case 24: {
        if (tag == 194) {
         parse_occupant_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_occupant_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_occupant;
        break;
      }

      // repeated .osi3.DetectedOccupant occupant = 25;
      case 25: {
        if (tag == 202) {
         parse_occupant:
          DO_(input->IncrementRecursionDepth());
         parse_loop_occupant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_occupant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_loop_occupant;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(210)) goto parse_feature_data;
        break;
      }

      // optional .osi3.FeatureData feature_data = 26;
      case 26: {
        if (tag == 210) {
         parse_feature_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feature_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.SensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.SensorData)
  return false;
#undef DO_
}

void SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.SensorData)
  // optional .osi3.InterfaceVersion version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->version_, output);
  }

  // optional .osi3.Timestamp timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  // optional .osi3.BaseMoving host_vehicle_location = 3;
  if (has_host_vehicle_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->host_vehicle_location_, output);
  }

  // optional .osi3.BaseMoving host_vehicle_location_rmse = 4;
  if (has_host_vehicle_location_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->host_vehicle_location_rmse_, output);
  }

  // optional .osi3.Identifier sensor_id = 5;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sensor_id_, output);
  }

  // optional .osi3.MountingPosition mounting_position = 6;
  if (has_mounting_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->mounting_position_, output);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 7;
  if (has_mounting_position_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->mounting_position_rmse_, output);
  }

  // repeated .osi3.SensorView sensor_view = 8;
  for (unsigned int i = 0, n = this->sensor_view_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sensor_view(i), output);
  }

  // optional .osi3.Timestamp last_measurement_time = 9;
  if (has_last_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->last_measurement_time_, output);
  }

  // optional .osi3.DetectedEntityHeader stationary_object_header = 10;
  if (has_stationary_object_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->stationary_object_header_, output);
  }

  // repeated .osi3.DetectedStationaryObject stationary_object = 11;
  for (unsigned int i = 0, n = this->stationary_object_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->stationary_object(i), output);
  }

  // optional .osi3.DetectedEntityHeader moving_object_header = 12;
  if (has_moving_object_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->moving_object_header_, output);
  }

  // repeated .osi3.DetectedMovingObject moving_object = 13;
  for (unsigned int i = 0, n = this->moving_object_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->moving_object(i), output);
  }

  // optional .osi3.DetectedEntityHeader traffic_sign_header = 14;
  if (has_traffic_sign_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->traffic_sign_header_, output);
  }

  // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
  for (unsigned int i = 0, n = this->traffic_sign_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->traffic_sign(i), output);
  }

  // optional .osi3.DetectedEntityHeader traffic_light_header = 16;
  if (has_traffic_light_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->traffic_light_header_, output);
  }

  // repeated .osi3.DetectedTrafficLight traffic_light = 17;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->traffic_light(i), output);
  }

  // optional .osi3.DetectedEntityHeader road_marking_header = 18;
  if (has_road_marking_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->road_marking_header_, output);
  }

  // repeated .osi3.DetectedRoadMarking road_marking = 19;
  for (unsigned int i = 0, n = this->road_marking_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->road_marking(i), output);
  }

  // optional .osi3.DetectedEntityHeader lane_boundary_header = 20;
  if (has_lane_boundary_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->lane_boundary_header_, output);
  }

  // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
  for (unsigned int i = 0, n = this->lane_boundary_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->lane_boundary(i), output);
  }

  // optional .osi3.DetectedEntityHeader lane_header = 22;
  if (has_lane_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->lane_header_, output);
  }

  // repeated .osi3.DetectedLane lane = 23;
  for (unsigned int i = 0, n = this->lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->lane(i), output);
  }

  // optional .osi3.DetectedEntityHeader occupant_header = 24;
  if (has_occupant_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->occupant_header_, output);
  }

  // repeated .osi3.DetectedOccupant occupant = 25;
  for (unsigned int i = 0, n = this->occupant_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->occupant(i), output);
  }

  // optional .osi3.FeatureData feature_data = 26;
  if (has_feature_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->feature_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.SensorData)
}

::google::protobuf::uint8* SensorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SensorData)
  // optional .osi3.InterfaceVersion version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->version_, false, target);
  }

  // optional .osi3.Timestamp timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->timestamp_, false, target);
  }

  // optional .osi3.BaseMoving host_vehicle_location = 3;
  if (has_host_vehicle_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->host_vehicle_location_, false, target);
  }

  // optional .osi3.BaseMoving host_vehicle_location_rmse = 4;
  if (has_host_vehicle_location_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->host_vehicle_location_rmse_, false, target);
  }

  // optional .osi3.Identifier sensor_id = 5;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->sensor_id_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position = 6;
  if (has_mounting_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->mounting_position_, false, target);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 7;
  if (has_mounting_position_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->mounting_position_rmse_, false, target);
  }

  // repeated .osi3.SensorView sensor_view = 8;
  for (unsigned int i = 0, n = this->sensor_view_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->sensor_view(i), false, target);
  }

  // optional .osi3.Timestamp last_measurement_time = 9;
  if (has_last_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->last_measurement_time_, false, target);
  }

  // optional .osi3.DetectedEntityHeader stationary_object_header = 10;
  if (has_stationary_object_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->stationary_object_header_, false, target);
  }

  // repeated .osi3.DetectedStationaryObject stationary_object = 11;
  for (unsigned int i = 0, n = this->stationary_object_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->stationary_object(i), false, target);
  }

  // optional .osi3.DetectedEntityHeader moving_object_header = 12;
  if (has_moving_object_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->moving_object_header_, false, target);
  }

  // repeated .osi3.DetectedMovingObject moving_object = 13;
  for (unsigned int i = 0, n = this->moving_object_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->moving_object(i), false, target);
  }

  // optional .osi3.DetectedEntityHeader traffic_sign_header = 14;
  if (has_traffic_sign_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->traffic_sign_header_, false, target);
  }

  // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
  for (unsigned int i = 0, n = this->traffic_sign_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->traffic_sign(i), false, target);
  }

  // optional .osi3.DetectedEntityHeader traffic_light_header = 16;
  if (has_traffic_light_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->traffic_light_header_, false, target);
  }

  // repeated .osi3.DetectedTrafficLight traffic_light = 17;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->traffic_light(i), false, target);
  }

  // optional .osi3.DetectedEntityHeader road_marking_header = 18;
  if (has_road_marking_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->road_marking_header_, false, target);
  }

  // repeated .osi3.DetectedRoadMarking road_marking = 19;
  for (unsigned int i = 0, n = this->road_marking_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->road_marking(i), false, target);
  }

  // optional .osi3.DetectedEntityHeader lane_boundary_header = 20;
  if (has_lane_boundary_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->lane_boundary_header_, false, target);
  }

  // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
  for (unsigned int i = 0, n = this->lane_boundary_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->lane_boundary(i), false, target);
  }

  // optional .osi3.DetectedEntityHeader lane_header = 22;
  if (has_lane_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->lane_header_, false, target);
  }

  // repeated .osi3.DetectedLane lane = 23;
  for (unsigned int i = 0, n = this->lane_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, this->lane(i), false, target);
  }

  // optional .osi3.DetectedEntityHeader occupant_header = 24;
  if (has_occupant_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->occupant_header_, false, target);
  }

  // repeated .osi3.DetectedOccupant occupant = 25;
  for (unsigned int i = 0, n = this->occupant_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, this->occupant(i), false, target);
  }

  // optional .osi3.FeatureData feature_data = 26;
  if (has_feature_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->feature_data_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SensorData)
  return target;
}

int SensorData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SensorData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional .osi3.InterfaceVersion version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->version_);
    }

    // optional .osi3.Timestamp timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timestamp_);
    }

    // optional .osi3.BaseMoving host_vehicle_location = 3;
    if (has_host_vehicle_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->host_vehicle_location_);
    }

    // optional .osi3.BaseMoving host_vehicle_location_rmse = 4;
    if (has_host_vehicle_location_rmse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->host_vehicle_location_rmse_);
    }

    // optional .osi3.Identifier sensor_id = 5;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 6;
    if (has_mounting_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 7;
    if (has_mounting_position_rmse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mounting_position_rmse_);
    }

  }
  if (_has_bits_[8 / 32] & 43776u) {
    // optional .osi3.Timestamp last_measurement_time = 9;
    if (has_last_measurement_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->last_measurement_time_);
    }

    // optional .osi3.DetectedEntityHeader stationary_object_header = 10;
    if (has_stationary_object_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stationary_object_header_);
    }

    // optional .osi3.DetectedEntityHeader moving_object_header = 12;
    if (has_moving_object_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->moving_object_header_);
    }

    // optional .osi3.DetectedEntityHeader traffic_sign_header = 14;
    if (has_traffic_sign_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->traffic_sign_header_);
    }

    // optional .osi3.DetectedEntityHeader traffic_light_header = 16;
    if (has_traffic_light_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->traffic_light_header_);
    }

  }
  if (_has_bits_[17 / 32] & 11141120u) {
    // optional .osi3.DetectedEntityHeader road_marking_header = 18;
    if (has_road_marking_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->road_marking_header_);
    }

    // optional .osi3.DetectedEntityHeader lane_boundary_header = 20;
    if (has_lane_boundary_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_boundary_header_);
    }

    // optional .osi3.DetectedEntityHeader lane_header = 22;
    if (has_lane_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_header_);
    }

    // optional .osi3.DetectedEntityHeader occupant_header = 24;
    if (has_occupant_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->occupant_header_);
    }

  }
  // optional .osi3.FeatureData feature_data = 26;
  if (has_feature_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->feature_data_);
  }

  // repeated .osi3.SensorView sensor_view = 8;
  total_size += 1 * this->sensor_view_size();
  for (int i = 0; i < this->sensor_view_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensor_view(i));
  }

  // repeated .osi3.DetectedStationaryObject stationary_object = 11;
  total_size += 1 * this->stationary_object_size();
  for (int i = 0; i < this->stationary_object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stationary_object(i));
  }

  // repeated .osi3.DetectedMovingObject moving_object = 13;
  total_size += 1 * this->moving_object_size();
  for (int i = 0; i < this->moving_object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moving_object(i));
  }

  // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
  total_size += 1 * this->traffic_sign_size();
  for (int i = 0; i < this->traffic_sign_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_sign(i));
  }

  // repeated .osi3.DetectedTrafficLight traffic_light = 17;
  total_size += 2 * this->traffic_light_size();
  for (int i = 0; i < this->traffic_light_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_light(i));
  }

  // repeated .osi3.DetectedRoadMarking road_marking = 19;
  total_size += 2 * this->road_marking_size();
  for (int i = 0; i < this->road_marking_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->road_marking(i));
  }

  // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
  total_size += 2 * this->lane_boundary_size();
  for (int i = 0; i < this->lane_boundary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_boundary(i));
  }

  // repeated .osi3.DetectedLane lane = 23;
  total_size += 2 * this->lane_size();
  for (int i = 0; i < this->lane_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane(i));
  }

  // repeated .osi3.DetectedOccupant occupant = 25;
  total_size += 2 * this->occupant_size();
  for (int i = 0; i < this->occupant_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->occupant(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.SensorData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SensorData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.SensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.SensorData)
    MergeFrom(*source);
  }
}

void SensorData::MergeFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.SensorData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sensor_view_.MergeFrom(from.sensor_view_);
  stationary_object_.MergeFrom(from.stationary_object_);
  moving_object_.MergeFrom(from.moving_object_);
  traffic_sign_.MergeFrom(from.traffic_sign_);
  traffic_light_.MergeFrom(from.traffic_light_);
  road_marking_.MergeFrom(from.road_marking_);
  lane_boundary_.MergeFrom(from.lane_boundary_);
  lane_.MergeFrom(from.lane_);
  occupant_.MergeFrom(from.occupant_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::osi3::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_host_vehicle_location()) {
      mutable_host_vehicle_location()->::osi3::BaseMoving::MergeFrom(from.host_vehicle_location());
    }
    if (from.has_host_vehicle_location_rmse()) {
      mutable_host_vehicle_location_rmse()->::osi3::BaseMoving::MergeFrom(from.host_vehicle_location_rmse());
    }
    if (from.has_sensor_id()) {
      mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
    }
    if (from.has_mounting_position()) {
      mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
    }
    if (from.has_mounting_position_rmse()) {
      mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_measurement_time()) {
      mutable_last_measurement_time()->::osi3::Timestamp::MergeFrom(from.last_measurement_time());
    }
    if (from.has_stationary_object_header()) {
      mutable_stationary_object_header()->::osi3::DetectedEntityHeader::MergeFrom(from.stationary_object_header());
    }
    if (from.has_moving_object_header()) {
      mutable_moving_object_header()->::osi3::DetectedEntityHeader::MergeFrom(from.moving_object_header());
    }
    if (from.has_traffic_sign_header()) {
      mutable_traffic_sign_header()->::osi3::DetectedEntityHeader::MergeFrom(from.traffic_sign_header());
    }
    if (from.has_traffic_light_header()) {
      mutable_traffic_light_header()->::osi3::DetectedEntityHeader::MergeFrom(from.traffic_light_header());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_road_marking_header()) {
      mutable_road_marking_header()->::osi3::DetectedEntityHeader::MergeFrom(from.road_marking_header());
    }
    if (from.has_lane_boundary_header()) {
      mutable_lane_boundary_header()->::osi3::DetectedEntityHeader::MergeFrom(from.lane_boundary_header());
    }
    if (from.has_lane_header()) {
      mutable_lane_header()->::osi3::DetectedEntityHeader::MergeFrom(from.lane_header());
    }
    if (from.has_occupant_header()) {
      mutable_occupant_header()->::osi3::DetectedEntityHeader::MergeFrom(from.occupant_header());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_feature_data()) {
      mutable_feature_data()->::osi3::FeatureData::MergeFrom(from.feature_data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {

  return true;
}

void SensorData::Swap(SensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorData::InternalSwap(SensorData* other) {
  std::swap(version_, other->version_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(host_vehicle_location_, other->host_vehicle_location_);
  std::swap(host_vehicle_location_rmse_, other->host_vehicle_location_rmse_);
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(mounting_position_, other->mounting_position_);
  std::swap(mounting_position_rmse_, other->mounting_position_rmse_);
  sensor_view_.UnsafeArenaSwap(&other->sensor_view_);
  std::swap(last_measurement_time_, other->last_measurement_time_);
  std::swap(stationary_object_header_, other->stationary_object_header_);
  stationary_object_.UnsafeArenaSwap(&other->stationary_object_);
  std::swap(moving_object_header_, other->moving_object_header_);
  moving_object_.UnsafeArenaSwap(&other->moving_object_);
  std::swap(traffic_sign_header_, other->traffic_sign_header_);
  traffic_sign_.UnsafeArenaSwap(&other->traffic_sign_);
  std::swap(traffic_light_header_, other->traffic_light_header_);
  traffic_light_.UnsafeArenaSwap(&other->traffic_light_);
  std::swap(road_marking_header_, other->road_marking_header_);
  road_marking_.UnsafeArenaSwap(&other->road_marking_);
  std::swap(lane_boundary_header_, other->lane_boundary_header_);
  lane_boundary_.UnsafeArenaSwap(&other->lane_boundary_);
  std::swap(lane_header_, other->lane_header_);
  lane_.UnsafeArenaSwap(&other->lane_);
  std::swap(occupant_header_, other->occupant_header_);
  occupant_.UnsafeArenaSwap(&other->occupant_);
  std::swap(feature_data_, other->feature_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorData_descriptor_;
  metadata.reflection = SensorData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorData

// optional .osi3.InterfaceVersion version = 1;
bool SensorData::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SensorData::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SensorData::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SensorData::clear_version() {
  if (version_ != NULL) version_->::osi3::InterfaceVersion::Clear();
  clear_has_version();
}
const ::osi3::InterfaceVersion& SensorData::version() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
::osi3::InterfaceVersion* SensorData::mutable_version() {
  set_has_version();
  if (version_ == NULL) {
    version_ = new ::osi3::InterfaceVersion;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.version)
  return version_;
}
::osi3::InterfaceVersion* SensorData::release_version() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.version)
  clear_has_version();
  ::osi3::InterfaceVersion* temp = version_;
  version_ = NULL;
  return temp;
}
void SensorData::set_allocated_version(::osi3::InterfaceVersion* version) {
  delete version_;
  version_ = version;
  if (version) {
    set_has_version();
  } else {
    clear_has_version();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.version)
}

// optional .osi3.Timestamp timestamp = 2;
bool SensorData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SensorData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void SensorData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void SensorData::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::osi3::Timestamp::Clear();
  clear_has_timestamp();
}
const ::osi3::Timestamp& SensorData::timestamp() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::osi3::Timestamp* SensorData::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.timestamp)
  return timestamp_;
}
::osi3::Timestamp* SensorData::release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.timestamp)
  clear_has_timestamp();
  ::osi3::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void SensorData::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.timestamp)
}

// optional .osi3.BaseMoving host_vehicle_location = 3;
bool SensorData::has_host_vehicle_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SensorData::set_has_host_vehicle_location() {
  _has_bits_[0] |= 0x00000004u;
}
void SensorData::clear_has_host_vehicle_location() {
  _has_bits_[0] &= ~0x00000004u;
}
void SensorData::clear_host_vehicle_location() {
  if (host_vehicle_location_ != NULL) host_vehicle_location_->::osi3::BaseMoving::Clear();
  clear_has_host_vehicle_location();
}
const ::osi3::BaseMoving& SensorData::host_vehicle_location() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.host_vehicle_location)
  return host_vehicle_location_ != NULL ? *host_vehicle_location_ : *default_instance_->host_vehicle_location_;
}
::osi3::BaseMoving* SensorData::mutable_host_vehicle_location() {
  set_has_host_vehicle_location();
  if (host_vehicle_location_ == NULL) {
    host_vehicle_location_ = new ::osi3::BaseMoving;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.host_vehicle_location)
  return host_vehicle_location_;
}
::osi3::BaseMoving* SensorData::release_host_vehicle_location() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.host_vehicle_location)
  clear_has_host_vehicle_location();
  ::osi3::BaseMoving* temp = host_vehicle_location_;
  host_vehicle_location_ = NULL;
  return temp;
}
void SensorData::set_allocated_host_vehicle_location(::osi3::BaseMoving* host_vehicle_location) {
  delete host_vehicle_location_;
  host_vehicle_location_ = host_vehicle_location;
  if (host_vehicle_location) {
    set_has_host_vehicle_location();
  } else {
    clear_has_host_vehicle_location();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.host_vehicle_location)
}

// optional .osi3.BaseMoving host_vehicle_location_rmse = 4;
bool SensorData::has_host_vehicle_location_rmse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SensorData::set_has_host_vehicle_location_rmse() {
  _has_bits_[0] |= 0x00000008u;
}
void SensorData::clear_has_host_vehicle_location_rmse() {
  _has_bits_[0] &= ~0x00000008u;
}
void SensorData::clear_host_vehicle_location_rmse() {
  if (host_vehicle_location_rmse_ != NULL) host_vehicle_location_rmse_->::osi3::BaseMoving::Clear();
  clear_has_host_vehicle_location_rmse();
}
const ::osi3::BaseMoving& SensorData::host_vehicle_location_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.host_vehicle_location_rmse)
  return host_vehicle_location_rmse_ != NULL ? *host_vehicle_location_rmse_ : *default_instance_->host_vehicle_location_rmse_;
}
::osi3::BaseMoving* SensorData::mutable_host_vehicle_location_rmse() {
  set_has_host_vehicle_location_rmse();
  if (host_vehicle_location_rmse_ == NULL) {
    host_vehicle_location_rmse_ = new ::osi3::BaseMoving;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.host_vehicle_location_rmse)
  return host_vehicle_location_rmse_;
}
::osi3::BaseMoving* SensorData::release_host_vehicle_location_rmse() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.host_vehicle_location_rmse)
  clear_has_host_vehicle_location_rmse();
  ::osi3::BaseMoving* temp = host_vehicle_location_rmse_;
  host_vehicle_location_rmse_ = NULL;
  return temp;
}
void SensorData::set_allocated_host_vehicle_location_rmse(::osi3::BaseMoving* host_vehicle_location_rmse) {
  delete host_vehicle_location_rmse_;
  host_vehicle_location_rmse_ = host_vehicle_location_rmse;
  if (host_vehicle_location_rmse) {
    set_has_host_vehicle_location_rmse();
  } else {
    clear_has_host_vehicle_location_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.host_vehicle_location_rmse)
}

// optional .osi3.Identifier sensor_id = 5;
bool SensorData::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SensorData::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000010u;
}
void SensorData::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void SensorData::clear_sensor_id() {
  if (sensor_id_ != NULL) sensor_id_->::osi3::Identifier::Clear();
  clear_has_sensor_id();
}
const ::osi3::Identifier& SensorData::sensor_id() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.sensor_id)
  return sensor_id_ != NULL ? *sensor_id_ : *default_instance_->sensor_id_;
}
::osi3::Identifier* SensorData::mutable_sensor_id() {
  set_has_sensor_id();
  if (sensor_id_ == NULL) {
    sensor_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.sensor_id)
  return sensor_id_;
}
::osi3::Identifier* SensorData::release_sensor_id() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.sensor_id)
  clear_has_sensor_id();
  ::osi3::Identifier* temp = sensor_id_;
  sensor_id_ = NULL;
  return temp;
}
void SensorData::set_allocated_sensor_id(::osi3::Identifier* sensor_id) {
  delete sensor_id_;
  sensor_id_ = sensor_id;
  if (sensor_id) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.sensor_id)
}

// optional .osi3.MountingPosition mounting_position = 6;
bool SensorData::has_mounting_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SensorData::set_has_mounting_position() {
  _has_bits_[0] |= 0x00000020u;
}
void SensorData::clear_has_mounting_position() {
  _has_bits_[0] &= ~0x00000020u;
}
void SensorData::clear_mounting_position() {
  if (mounting_position_ != NULL) mounting_position_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position();
}
const ::osi3::MountingPosition& SensorData::mounting_position() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.mounting_position)
  return mounting_position_ != NULL ? *mounting_position_ : *default_instance_->mounting_position_;
}
::osi3::MountingPosition* SensorData::mutable_mounting_position() {
  set_has_mounting_position();
  if (mounting_position_ == NULL) {
    mounting_position_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.mounting_position)
  return mounting_position_;
}
::osi3::MountingPosition* SensorData::release_mounting_position() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.mounting_position)
  clear_has_mounting_position();
  ::osi3::MountingPosition* temp = mounting_position_;
  mounting_position_ = NULL;
  return temp;
}
void SensorData::set_allocated_mounting_position(::osi3::MountingPosition* mounting_position) {
  delete mounting_position_;
  mounting_position_ = mounting_position;
  if (mounting_position) {
    set_has_mounting_position();
  } else {
    clear_has_mounting_position();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.mounting_position)
}

// optional .osi3.MountingPosition mounting_position_rmse = 7;
bool SensorData::has_mounting_position_rmse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SensorData::set_has_mounting_position_rmse() {
  _has_bits_[0] |= 0x00000040u;
}
void SensorData::clear_has_mounting_position_rmse() {
  _has_bits_[0] &= ~0x00000040u;
}
void SensorData::clear_mounting_position_rmse() {
  if (mounting_position_rmse_ != NULL) mounting_position_rmse_->::osi3::MountingPosition::Clear();
  clear_has_mounting_position_rmse();
}
const ::osi3::MountingPosition& SensorData::mounting_position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.mounting_position_rmse)
  return mounting_position_rmse_ != NULL ? *mounting_position_rmse_ : *default_instance_->mounting_position_rmse_;
}
::osi3::MountingPosition* SensorData::mutable_mounting_position_rmse() {
  set_has_mounting_position_rmse();
  if (mounting_position_rmse_ == NULL) {
    mounting_position_rmse_ = new ::osi3::MountingPosition;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.mounting_position_rmse)
  return mounting_position_rmse_;
}
::osi3::MountingPosition* SensorData::release_mounting_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.mounting_position_rmse)
  clear_has_mounting_position_rmse();
  ::osi3::MountingPosition* temp = mounting_position_rmse_;
  mounting_position_rmse_ = NULL;
  return temp;
}
void SensorData::set_allocated_mounting_position_rmse(::osi3::MountingPosition* mounting_position_rmse) {
  delete mounting_position_rmse_;
  mounting_position_rmse_ = mounting_position_rmse;
  if (mounting_position_rmse) {
    set_has_mounting_position_rmse();
  } else {
    clear_has_mounting_position_rmse();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.mounting_position_rmse)
}

// repeated .osi3.SensorView sensor_view = 8;
int SensorData::sensor_view_size() const {
  return sensor_view_.size();
}
void SensorData::clear_sensor_view() {
  sensor_view_.Clear();
}
const ::osi3::SensorView& SensorData::sensor_view(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.sensor_view)
  return sensor_view_.Get(index);
}
::osi3::SensorView* SensorData::mutable_sensor_view(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.sensor_view)
  return sensor_view_.Mutable(index);
}
::osi3::SensorView* SensorData::add_sensor_view() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.sensor_view)
  return sensor_view_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::SensorView >*
SensorData::mutable_sensor_view() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.sensor_view)
  return &sensor_view_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::SensorView >&
SensorData::sensor_view() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.sensor_view)
  return sensor_view_;
}

// optional .osi3.Timestamp last_measurement_time = 9;
bool SensorData::has_last_measurement_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SensorData::set_has_last_measurement_time() {
  _has_bits_[0] |= 0x00000100u;
}
void SensorData::clear_has_last_measurement_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void SensorData::clear_last_measurement_time() {
  if (last_measurement_time_ != NULL) last_measurement_time_->::osi3::Timestamp::Clear();
  clear_has_last_measurement_time();
}
const ::osi3::Timestamp& SensorData::last_measurement_time() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.last_measurement_time)
  return last_measurement_time_ != NULL ? *last_measurement_time_ : *default_instance_->last_measurement_time_;
}
::osi3::Timestamp* SensorData::mutable_last_measurement_time() {
  set_has_last_measurement_time();
  if (last_measurement_time_ == NULL) {
    last_measurement_time_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.last_measurement_time)
  return last_measurement_time_;
}
::osi3::Timestamp* SensorData::release_last_measurement_time() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.last_measurement_time)
  clear_has_last_measurement_time();
  ::osi3::Timestamp* temp = last_measurement_time_;
  last_measurement_time_ = NULL;
  return temp;
}
void SensorData::set_allocated_last_measurement_time(::osi3::Timestamp* last_measurement_time) {
  delete last_measurement_time_;
  last_measurement_time_ = last_measurement_time;
  if (last_measurement_time) {
    set_has_last_measurement_time();
  } else {
    clear_has_last_measurement_time();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.last_measurement_time)
}

// optional .osi3.DetectedEntityHeader stationary_object_header = 10;
bool SensorData::has_stationary_object_header() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SensorData::set_has_stationary_object_header() {
  _has_bits_[0] |= 0x00000200u;
}
void SensorData::clear_has_stationary_object_header() {
  _has_bits_[0] &= ~0x00000200u;
}
void SensorData::clear_stationary_object_header() {
  if (stationary_object_header_ != NULL) stationary_object_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_stationary_object_header();
}
const ::osi3::DetectedEntityHeader& SensorData::stationary_object_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.stationary_object_header)
  return stationary_object_header_ != NULL ? *stationary_object_header_ : *default_instance_->stationary_object_header_;
}
::osi3::DetectedEntityHeader* SensorData::mutable_stationary_object_header() {
  set_has_stationary_object_header();
  if (stationary_object_header_ == NULL) {
    stationary_object_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.stationary_object_header)
  return stationary_object_header_;
}
::osi3::DetectedEntityHeader* SensorData::release_stationary_object_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.stationary_object_header)
  clear_has_stationary_object_header();
  ::osi3::DetectedEntityHeader* temp = stationary_object_header_;
  stationary_object_header_ = NULL;
  return temp;
}
void SensorData::set_allocated_stationary_object_header(::osi3::DetectedEntityHeader* stationary_object_header) {
  delete stationary_object_header_;
  stationary_object_header_ = stationary_object_header;
  if (stationary_object_header) {
    set_has_stationary_object_header();
  } else {
    clear_has_stationary_object_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.stationary_object_header)
}

// repeated .osi3.DetectedStationaryObject stationary_object = 11;
int SensorData::stationary_object_size() const {
  return stationary_object_.size();
}
void SensorData::clear_stationary_object() {
  stationary_object_.Clear();
}
const ::osi3::DetectedStationaryObject& SensorData::stationary_object(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.stationary_object)
  return stationary_object_.Get(index);
}
::osi3::DetectedStationaryObject* SensorData::mutable_stationary_object(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.stationary_object)
  return stationary_object_.Mutable(index);
}
::osi3::DetectedStationaryObject* SensorData::add_stationary_object() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.stationary_object)
  return stationary_object_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::DetectedStationaryObject >*
SensorData::mutable_stationary_object() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.stationary_object)
  return &stationary_object_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedStationaryObject >&
SensorData::stationary_object() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.stationary_object)
  return stationary_object_;
}

// optional .osi3.DetectedEntityHeader moving_object_header = 12;
bool SensorData::has_moving_object_header() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SensorData::set_has_moving_object_header() {
  _has_bits_[0] |= 0x00000800u;
}
void SensorData::clear_has_moving_object_header() {
  _has_bits_[0] &= ~0x00000800u;
}
void SensorData::clear_moving_object_header() {
  if (moving_object_header_ != NULL) moving_object_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_moving_object_header();
}
const ::osi3::DetectedEntityHeader& SensorData::moving_object_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.moving_object_header)
  return moving_object_header_ != NULL ? *moving_object_header_ : *default_instance_->moving_object_header_;
}
::osi3::DetectedEntityHeader* SensorData::mutable_moving_object_header() {
  set_has_moving_object_header();
  if (moving_object_header_ == NULL) {
    moving_object_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.moving_object_header)
  return moving_object_header_;
}
::osi3::DetectedEntityHeader* SensorData::release_moving_object_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.moving_object_header)
  clear_has_moving_object_header();
  ::osi3::DetectedEntityHeader* temp = moving_object_header_;
  moving_object_header_ = NULL;
  return temp;
}
void SensorData::set_allocated_moving_object_header(::osi3::DetectedEntityHeader* moving_object_header) {
  delete moving_object_header_;
  moving_object_header_ = moving_object_header;
  if (moving_object_header) {
    set_has_moving_object_header();
  } else {
    clear_has_moving_object_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.moving_object_header)
}

// repeated .osi3.DetectedMovingObject moving_object = 13;
int SensorData::moving_object_size() const {
  return moving_object_.size();
}
void SensorData::clear_moving_object() {
  moving_object_.Clear();
}
const ::osi3::DetectedMovingObject& SensorData::moving_object(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.moving_object)
  return moving_object_.Get(index);
}
::osi3::DetectedMovingObject* SensorData::mutable_moving_object(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.moving_object)
  return moving_object_.Mutable(index);
}
::osi3::DetectedMovingObject* SensorData::add_moving_object() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.moving_object)
  return moving_object_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::DetectedMovingObject >*
SensorData::mutable_moving_object() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.moving_object)
  return &moving_object_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedMovingObject >&
SensorData::moving_object() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.moving_object)
  return moving_object_;
}

// optional .osi3.DetectedEntityHeader traffic_sign_header = 14;
bool SensorData::has_traffic_sign_header() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SensorData::set_has_traffic_sign_header() {
  _has_bits_[0] |= 0x00002000u;
}
void SensorData::clear_has_traffic_sign_header() {
  _has_bits_[0] &= ~0x00002000u;
}
void SensorData::clear_traffic_sign_header() {
  if (traffic_sign_header_ != NULL) traffic_sign_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_traffic_sign_header();
}
const ::osi3::DetectedEntityHeader& SensorData::traffic_sign_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.traffic_sign_header)
  return traffic_sign_header_ != NULL ? *traffic_sign_header_ : *default_instance_->traffic_sign_header_;
}
::osi3::DetectedEntityHeader* SensorData::mutable_traffic_sign_header() {
  set_has_traffic_sign_header();
  if (traffic_sign_header_ == NULL) {
    traffic_sign_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.traffic_sign_header)
  return traffic_sign_header_;
}
::osi3::DetectedEntityHeader* SensorData::release_traffic_sign_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.traffic_sign_header)
  clear_has_traffic_sign_header();
  ::osi3::DetectedEntityHeader* temp = traffic_sign_header_;
  traffic_sign_header_ = NULL;
  return temp;
}
void SensorData::set_allocated_traffic_sign_header(::osi3::DetectedEntityHeader* traffic_sign_header) {
  delete traffic_sign_header_;
  traffic_sign_header_ = traffic_sign_header;
  if (traffic_sign_header) {
    set_has_traffic_sign_header();
  } else {
    clear_has_traffic_sign_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.traffic_sign_header)
}

// repeated .osi3.DetectedTrafficSign traffic_sign = 15;
int SensorData::traffic_sign_size() const {
  return traffic_sign_.size();
}
void SensorData::clear_traffic_sign() {
  traffic_sign_.Clear();
}
const ::osi3::DetectedTrafficSign& SensorData::traffic_sign(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.traffic_sign)
  return traffic_sign_.Get(index);
}
::osi3::DetectedTrafficSign* SensorData::mutable_traffic_sign(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.traffic_sign)
  return traffic_sign_.Mutable(index);
}
::osi3::DetectedTrafficSign* SensorData::add_traffic_sign() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.traffic_sign)
  return traffic_sign_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficSign >*
SensorData::mutable_traffic_sign() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.traffic_sign)
  return &traffic_sign_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficSign >&
SensorData::traffic_sign() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.traffic_sign)
  return traffic_sign_;
}

// optional .osi3.DetectedEntityHeader traffic_light_header = 16;
bool SensorData::has_traffic_light_header() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SensorData::set_has_traffic_light_header() {
  _has_bits_[0] |= 0x00008000u;
}
void SensorData::clear_has_traffic_light_header() {
  _has_bits_[0] &= ~0x00008000u;
}
void SensorData::clear_traffic_light_header() {
  if (traffic_light_header_ != NULL) traffic_light_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_traffic_light_header();
}
const ::osi3::DetectedEntityHeader& SensorData::traffic_light_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.traffic_light_header)
  return traffic_light_header_ != NULL ? *traffic_light_header_ : *default_instance_->traffic_light_header_;
}
::osi3::DetectedEntityHeader* SensorData::mutable_traffic_light_header() {
  set_has_traffic_light_header();
  if (traffic_light_header_ == NULL) {
    traffic_light_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.traffic_light_header)
  return traffic_light_header_;
}
::osi3::DetectedEntityHeader* SensorData::release_traffic_light_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.traffic_light_header)
  clear_has_traffic_light_header();
  ::osi3::DetectedEntityHeader* temp = traffic_light_header_;
  traffic_light_header_ = NULL;
  return temp;
}
void SensorData::set_allocated_traffic_light_header(::osi3::DetectedEntityHeader* traffic_light_header) {
  delete traffic_light_header_;
  traffic_light_header_ = traffic_light_header;
  if (traffic_light_header) {
    set_has_traffic_light_header();
  } else {
    clear_has_traffic_light_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.traffic_light_header)
}

// repeated .osi3.DetectedTrafficLight traffic_light = 17;
int SensorData::traffic_light_size() const {
  return traffic_light_.size();
}
void SensorData::clear_traffic_light() {
  traffic_light_.Clear();
}
const ::osi3::DetectedTrafficLight& SensorData::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.traffic_light)
  return traffic_light_.Get(index);
}
::osi3::DetectedTrafficLight* SensorData::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.traffic_light)
  return traffic_light_.Mutable(index);
}
::osi3::DetectedTrafficLight* SensorData::add_traffic_light() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.traffic_light)
  return traffic_light_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficLight >*
SensorData::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.traffic_light)
  return &traffic_light_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedTrafficLight >&
SensorData::traffic_light() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.traffic_light)
  return traffic_light_;
}

// optional .osi3.DetectedEntityHeader road_marking_header = 18;
bool SensorData::has_road_marking_header() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SensorData::set_has_road_marking_header() {
  _has_bits_[0] |= 0x00020000u;
}
void SensorData::clear_has_road_marking_header() {
  _has_bits_[0] &= ~0x00020000u;
}
void SensorData::clear_road_marking_header() {
  if (road_marking_header_ != NULL) road_marking_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_road_marking_header();
}
const ::osi3::DetectedEntityHeader& SensorData::road_marking_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.road_marking_header)
  return road_marking_header_ != NULL ? *road_marking_header_ : *default_instance_->road_marking_header_;
}
::osi3::DetectedEntityHeader* SensorData::mutable_road_marking_header() {
  set_has_road_marking_header();
  if (road_marking_header_ == NULL) {
    road_marking_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.road_marking_header)
  return road_marking_header_;
}
::osi3::DetectedEntityHeader* SensorData::release_road_marking_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.road_marking_header)
  clear_has_road_marking_header();
  ::osi3::DetectedEntityHeader* temp = road_marking_header_;
  road_marking_header_ = NULL;
  return temp;
}
void SensorData::set_allocated_road_marking_header(::osi3::DetectedEntityHeader* road_marking_header) {
  delete road_marking_header_;
  road_marking_header_ = road_marking_header;
  if (road_marking_header) {
    set_has_road_marking_header();
  } else {
    clear_has_road_marking_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.road_marking_header)
}

// repeated .osi3.DetectedRoadMarking road_marking = 19;
int SensorData::road_marking_size() const {
  return road_marking_.size();
}
void SensorData::clear_road_marking() {
  road_marking_.Clear();
}
const ::osi3::DetectedRoadMarking& SensorData::road_marking(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.road_marking)
  return road_marking_.Get(index);
}
::osi3::DetectedRoadMarking* SensorData::mutable_road_marking(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.road_marking)
  return road_marking_.Mutable(index);
}
::osi3::DetectedRoadMarking* SensorData::add_road_marking() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.road_marking)
  return road_marking_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::DetectedRoadMarking >*
SensorData::mutable_road_marking() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.road_marking)
  return &road_marking_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedRoadMarking >&
SensorData::road_marking() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.road_marking)
  return road_marking_;
}

// optional .osi3.DetectedEntityHeader lane_boundary_header = 20;
bool SensorData::has_lane_boundary_header() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SensorData::set_has_lane_boundary_header() {
  _has_bits_[0] |= 0x00080000u;
}
void SensorData::clear_has_lane_boundary_header() {
  _has_bits_[0] &= ~0x00080000u;
}
void SensorData::clear_lane_boundary_header() {
  if (lane_boundary_header_ != NULL) lane_boundary_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_lane_boundary_header();
}
const ::osi3::DetectedEntityHeader& SensorData::lane_boundary_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.lane_boundary_header)
  return lane_boundary_header_ != NULL ? *lane_boundary_header_ : *default_instance_->lane_boundary_header_;
}
::osi3::DetectedEntityHeader* SensorData::mutable_lane_boundary_header() {
  set_has_lane_boundary_header();
  if (lane_boundary_header_ == NULL) {
    lane_boundary_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.lane_boundary_header)
  return lane_boundary_header_;
}
::osi3::DetectedEntityHeader* SensorData::release_lane_boundary_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.lane_boundary_header)
  clear_has_lane_boundary_header();
  ::osi3::DetectedEntityHeader* temp = lane_boundary_header_;
  lane_boundary_header_ = NULL;
  return temp;
}
void SensorData::set_allocated_lane_boundary_header(::osi3::DetectedEntityHeader* lane_boundary_header) {
  delete lane_boundary_header_;
  lane_boundary_header_ = lane_boundary_header;
  if (lane_boundary_header) {
    set_has_lane_boundary_header();
  } else {
    clear_has_lane_boundary_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.lane_boundary_header)
}

// repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
int SensorData::lane_boundary_size() const {
  return lane_boundary_.size();
}
void SensorData::clear_lane_boundary() {
  lane_boundary_.Clear();
}
const ::osi3::DetectedLaneBoundary& SensorData::lane_boundary(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.lane_boundary)
  return lane_boundary_.Get(index);
}
::osi3::DetectedLaneBoundary* SensorData::mutable_lane_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.lane_boundary)
  return lane_boundary_.Mutable(index);
}
::osi3::DetectedLaneBoundary* SensorData::add_lane_boundary() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.lane_boundary)
  return lane_boundary_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::DetectedLaneBoundary >*
SensorData::mutable_lane_boundary() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.lane_boundary)
  return &lane_boundary_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLaneBoundary >&
SensorData::lane_boundary() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.lane_boundary)
  return lane_boundary_;
}

// optional .osi3.DetectedEntityHeader lane_header = 22;
bool SensorData::has_lane_header() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SensorData::set_has_lane_header() {
  _has_bits_[0] |= 0x00200000u;
}
void SensorData::clear_has_lane_header() {
  _has_bits_[0] &= ~0x00200000u;
}
void SensorData::clear_lane_header() {
  if (lane_header_ != NULL) lane_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_lane_header();
}
const ::osi3::DetectedEntityHeader& SensorData::lane_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.lane_header)
  return lane_header_ != NULL ? *lane_header_ : *default_instance_->lane_header_;
}
::osi3::DetectedEntityHeader* SensorData::mutable_lane_header() {
  set_has_lane_header();
  if (lane_header_ == NULL) {
    lane_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.lane_header)
  return lane_header_;
}
::osi3::DetectedEntityHeader* SensorData::release_lane_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.lane_header)
  clear_has_lane_header();
  ::osi3::DetectedEntityHeader* temp = lane_header_;
  lane_header_ = NULL;
  return temp;
}
void SensorData::set_allocated_lane_header(::osi3::DetectedEntityHeader* lane_header) {
  delete lane_header_;
  lane_header_ = lane_header;
  if (lane_header) {
    set_has_lane_header();
  } else {
    clear_has_lane_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.lane_header)
}

// repeated .osi3.DetectedLane lane = 23;
int SensorData::lane_size() const {
  return lane_.size();
}
void SensorData::clear_lane() {
  lane_.Clear();
}
const ::osi3::DetectedLane& SensorData::lane(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.lane)
  return lane_.Get(index);
}
::osi3::DetectedLane* SensorData::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.lane)
  return lane_.Mutable(index);
}
::osi3::DetectedLane* SensorData::add_lane() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.lane)
  return lane_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::DetectedLane >*
SensorData::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.lane)
  return &lane_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLane >&
SensorData::lane() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.lane)
  return lane_;
}

// optional .osi3.DetectedEntityHeader occupant_header = 24;
bool SensorData::has_occupant_header() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SensorData::set_has_occupant_header() {
  _has_bits_[0] |= 0x00800000u;
}
void SensorData::clear_has_occupant_header() {
  _has_bits_[0] &= ~0x00800000u;
}
void SensorData::clear_occupant_header() {
  if (occupant_header_ != NULL) occupant_header_->::osi3::DetectedEntityHeader::Clear();
  clear_has_occupant_header();
}
const ::osi3::DetectedEntityHeader& SensorData::occupant_header() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.occupant_header)
  return occupant_header_ != NULL ? *occupant_header_ : *default_instance_->occupant_header_;
}
::osi3::DetectedEntityHeader* SensorData::mutable_occupant_header() {
  set_has_occupant_header();
  if (occupant_header_ == NULL) {
    occupant_header_ = new ::osi3::DetectedEntityHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.occupant_header)
  return occupant_header_;
}
::osi3::DetectedEntityHeader* SensorData::release_occupant_header() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.occupant_header)
  clear_has_occupant_header();
  ::osi3::DetectedEntityHeader* temp = occupant_header_;
  occupant_header_ = NULL;
  return temp;
}
void SensorData::set_allocated_occupant_header(::osi3::DetectedEntityHeader* occupant_header) {
  delete occupant_header_;
  occupant_header_ = occupant_header;
  if (occupant_header) {
    set_has_occupant_header();
  } else {
    clear_has_occupant_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.occupant_header)
}

// repeated .osi3.DetectedOccupant occupant = 25;
int SensorData::occupant_size() const {
  return occupant_.size();
}
void SensorData::clear_occupant() {
  occupant_.Clear();
}
const ::osi3::DetectedOccupant& SensorData::occupant(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.occupant)
  return occupant_.Get(index);
}
::osi3::DetectedOccupant* SensorData::mutable_occupant(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.occupant)
  return occupant_.Mutable(index);
}
::osi3::DetectedOccupant* SensorData::add_occupant() {
  // @@protoc_insertion_point(field_add:osi3.SensorData.occupant)
  return occupant_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::DetectedOccupant >*
SensorData::mutable_occupant() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorData.occupant)
  return &occupant_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedOccupant >&
SensorData::occupant() const {
  // @@protoc_insertion_point(field_list:osi3.SensorData.occupant)
  return occupant_;
}

// optional .osi3.FeatureData feature_data = 26;
bool SensorData::has_feature_data() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SensorData::set_has_feature_data() {
  _has_bits_[0] |= 0x02000000u;
}
void SensorData::clear_has_feature_data() {
  _has_bits_[0] &= ~0x02000000u;
}
void SensorData::clear_feature_data() {
  if (feature_data_ != NULL) feature_data_->::osi3::FeatureData::Clear();
  clear_has_feature_data();
}
const ::osi3::FeatureData& SensorData::feature_data() const {
  // @@protoc_insertion_point(field_get:osi3.SensorData.feature_data)
  return feature_data_ != NULL ? *feature_data_ : *default_instance_->feature_data_;
}
::osi3::FeatureData* SensorData::mutable_feature_data() {
  set_has_feature_data();
  if (feature_data_ == NULL) {
    feature_data_ = new ::osi3::FeatureData;
  }
  // @@protoc_insertion_point(field_mutable:osi3.SensorData.feature_data)
  return feature_data_;
}
::osi3::FeatureData* SensorData::release_feature_data() {
  // @@protoc_insertion_point(field_release:osi3.SensorData.feature_data)
  clear_has_feature_data();
  ::osi3::FeatureData* temp = feature_data_;
  feature_data_ = NULL;
  return temp;
}
void SensorData::set_allocated_feature_data(::osi3::FeatureData* feature_data) {
  delete feature_data_;
  feature_data_ = feature_data;
  if (feature_data) {
    set_has_feature_data();
  } else {
    clear_has_feature_data();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.SensorData.feature_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
