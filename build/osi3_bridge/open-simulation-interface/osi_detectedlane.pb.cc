// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedlane.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_detectedlane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* DetectedLane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedLane_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectedLane_CandidateLane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedLane_CandidateLane_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectedLaneBoundary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedLaneBoundary_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectedLaneBoundary_CandidateLaneBoundary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedLaneBoundary_CandidateLaneBoundary_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5fdetectedlane_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5fdetectedlane_2eproto() {
  protobuf_AddDesc_osi_5fdetectedlane_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_detectedlane.proto");
  GOOGLE_CHECK(file != NULL);
  DetectedLane_descriptor_ = file->message_type(0);
  static const int DetectedLane_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLane, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLane, candidate_),
  };
  DetectedLane_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectedLane_descriptor_,
      DetectedLane::default_instance_,
      DetectedLane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLane, _has_bits_[0]),
      -1,
      -1,
      sizeof(DetectedLane),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLane, _internal_metadata_),
      -1);
  DetectedLane_CandidateLane_descriptor_ = DetectedLane_descriptor_->nested_type(0);
  static const int DetectedLane_CandidateLane_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLane_CandidateLane, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLane_CandidateLane, classification_),
  };
  DetectedLane_CandidateLane_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectedLane_CandidateLane_descriptor_,
      DetectedLane_CandidateLane::default_instance_,
      DetectedLane_CandidateLane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLane_CandidateLane, _has_bits_[0]),
      -1,
      -1,
      sizeof(DetectedLane_CandidateLane),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLane_CandidateLane, _internal_metadata_),
      -1);
  DetectedLaneBoundary_descriptor_ = file->message_type(1);
  static const int DetectedLaneBoundary_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLaneBoundary, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLaneBoundary, candidate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLaneBoundary, boundary_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLaneBoundary, boundary_line_rmse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLaneBoundary, boundary_line_confidences_),
  };
  DetectedLaneBoundary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectedLaneBoundary_descriptor_,
      DetectedLaneBoundary::default_instance_,
      DetectedLaneBoundary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLaneBoundary, _has_bits_[0]),
      -1,
      -1,
      sizeof(DetectedLaneBoundary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLaneBoundary, _internal_metadata_),
      -1);
  DetectedLaneBoundary_CandidateLaneBoundary_descriptor_ = DetectedLaneBoundary_descriptor_->nested_type(0);
  static const int DetectedLaneBoundary_CandidateLaneBoundary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLaneBoundary_CandidateLaneBoundary, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLaneBoundary_CandidateLaneBoundary, classification_),
  };
  DetectedLaneBoundary_CandidateLaneBoundary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectedLaneBoundary_CandidateLaneBoundary_descriptor_,
      DetectedLaneBoundary_CandidateLaneBoundary::default_instance_,
      DetectedLaneBoundary_CandidateLaneBoundary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLaneBoundary_CandidateLaneBoundary, _has_bits_[0]),
      -1,
      -1,
      sizeof(DetectedLaneBoundary_CandidateLaneBoundary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLaneBoundary_CandidateLaneBoundary, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5fdetectedlane_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectedLane_descriptor_, &DetectedLane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectedLane_CandidateLane_descriptor_, &DetectedLane_CandidateLane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectedLaneBoundary_descriptor_, &DetectedLaneBoundary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectedLaneBoundary_CandidateLaneBoundary_descriptor_, &DetectedLaneBoundary_CandidateLaneBoundary::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5fdetectedlane_2eproto() {
  delete DetectedLane::default_instance_;
  delete DetectedLane_reflection_;
  delete DetectedLane_CandidateLane::default_instance_;
  delete DetectedLane_CandidateLane_reflection_;
  delete DetectedLaneBoundary::default_instance_;
  delete DetectedLaneBoundary_reflection_;
  delete DetectedLaneBoundary_CandidateLaneBoundary::default_instance_;
  delete DetectedLaneBoundary_CandidateLaneBoundary_reflection_;
}

void protobuf_AddDesc_osi_5fdetectedlane_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5fdetectedlane_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::osi3::protobuf_AddDesc_osi_5flane_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fdetectedobject_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026osi_detectedlane.proto\022\004osi3\032\016osi_lane"
    ".proto\032\030osi_detectedobject.proto\"\306\001\n\014Det"
    "ectedLane\022(\n\006header\030\001 \001(\0132\030.osi3.Detecte"
    "dItemHeader\0223\n\tcandidate\030\002 \003(\0132 .osi3.De"
    "tectedLane.CandidateLane\032W\n\rCandidateLan"
    "e\022\023\n\013probability\030\001 \001(\001\0221\n\016classification"
    "\030\002 \001(\0132\031.osi3.Lane.Classification\"\210\003\n\024De"
    "tectedLaneBoundary\022(\n\006header\030\001 \001(\0132\030.osi"
    "3.DetectedItemHeader\022C\n\tcandidate\030\002 \003(\0132"
    "0.osi3.DetectedLaneBoundary.CandidateLan"
    "eBoundary\0227\n\rboundary_line\030\003 \003(\0132 .osi3."
    "LaneBoundary.BoundaryPoint\022<\n\022boundary_l"
    "ine_rmse\030\004 \003(\0132 .osi3.LaneBoundary.Bound"
    "aryPoint\022!\n\031boundary_line_confidences\030\005 "
    "\003(\001\032g\n\025CandidateLaneBoundary\022\023\n\013probabil"
    "ity\030\001 \001(\001\0229\n\016classification\030\002 \001(\0132!.osi3"
    ".LaneBoundary.ClassificationB\002H\001", 672);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_detectedlane.proto", &protobuf_RegisterTypes);
  DetectedLane::default_instance_ = new DetectedLane();
  DetectedLane_CandidateLane::default_instance_ = new DetectedLane_CandidateLane();
  DetectedLaneBoundary::default_instance_ = new DetectedLaneBoundary();
  DetectedLaneBoundary_CandidateLaneBoundary::default_instance_ = new DetectedLaneBoundary_CandidateLaneBoundary();
  DetectedLane::default_instance_->InitAsDefaultInstance();
  DetectedLane_CandidateLane::default_instance_->InitAsDefaultInstance();
  DetectedLaneBoundary::default_instance_->InitAsDefaultInstance();
  DetectedLaneBoundary_CandidateLaneBoundary::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5fdetectedlane_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5fdetectedlane_2eproto {
  StaticDescriptorInitializer_osi_5fdetectedlane_2eproto() {
    protobuf_AddDesc_osi_5fdetectedlane_2eproto();
  }
} static_descriptor_initializer_osi_5fdetectedlane_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedLane_CandidateLane::kProbabilityFieldNumber;
const int DetectedLane_CandidateLane::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedLane_CandidateLane::DetectedLane_CandidateLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedLane.CandidateLane)
}

void DetectedLane_CandidateLane::InitAsDefaultInstance() {
  classification_ = const_cast< ::osi3::Lane_Classification*>(&::osi3::Lane_Classification::default_instance());
}

DetectedLane_CandidateLane::DetectedLane_CandidateLane(const DetectedLane_CandidateLane& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedLane.CandidateLane)
}

void DetectedLane_CandidateLane::SharedCtor() {
  _cached_size_ = 0;
  probability_ = 0;
  classification_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedLane_CandidateLane::~DetectedLane_CandidateLane() {
  // @@protoc_insertion_point(destructor:osi3.DetectedLane.CandidateLane)
  SharedDtor();
}

void DetectedLane_CandidateLane::SharedDtor() {
  if (this != default_instance_) {
    delete classification_;
  }
}

void DetectedLane_CandidateLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedLane_CandidateLane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedLane_CandidateLane_descriptor_;
}

const DetectedLane_CandidateLane& DetectedLane_CandidateLane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fdetectedlane_2eproto();
  return *default_instance_;
}

DetectedLane_CandidateLane* DetectedLane_CandidateLane::default_instance_ = NULL;

DetectedLane_CandidateLane* DetectedLane_CandidateLane::New(::google::protobuf::Arena* arena) const {
  DetectedLane_CandidateLane* n = new DetectedLane_CandidateLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedLane_CandidateLane::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedLane.CandidateLane)
  if (_has_bits_[0 / 32] & 3u) {
    probability_ = 0;
    if (has_classification()) {
      if (classification_ != NULL) classification_->::osi3::Lane_Classification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DetectedLane_CandidateLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedLane.CandidateLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_classification;
        break;
      }

      // optional .osi3.Lane.Classification classification = 2;
      case 2: {
        if (tag == 18) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedLane.CandidateLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedLane.CandidateLane)
  return false;
#undef DO_
}

void DetectedLane_CandidateLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedLane.CandidateLane)
  // optional double probability = 1;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // optional .osi3.Lane.Classification classification = 2;
  if (has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classification_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedLane.CandidateLane)
}

::google::protobuf::uint8* DetectedLane_CandidateLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedLane.CandidateLane)
  // optional double probability = 1;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // optional .osi3.Lane.Classification classification = 2;
  if (has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->classification_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedLane.CandidateLane)
  return target;
}

int DetectedLane_CandidateLane::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedLane.CandidateLane)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double probability = 1;
    if (has_probability()) {
      total_size += 1 + 8;
    }

    // optional .osi3.Lane.Classification classification = 2;
    if (has_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->classification_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedLane_CandidateLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedLane.CandidateLane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectedLane_CandidateLane* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedLane_CandidateLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedLane.CandidateLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedLane.CandidateLane)
    MergeFrom(*source);
  }
}

void DetectedLane_CandidateLane::MergeFrom(const DetectedLane_CandidateLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedLane.CandidateLane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_classification()) {
      mutable_classification()->::osi3::Lane_Classification::MergeFrom(from.classification());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DetectedLane_CandidateLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedLane.CandidateLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedLane_CandidateLane::CopyFrom(const DetectedLane_CandidateLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedLane.CandidateLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLane_CandidateLane::IsInitialized() const {

  return true;
}

void DetectedLane_CandidateLane::Swap(DetectedLane_CandidateLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedLane_CandidateLane::InternalSwap(DetectedLane_CandidateLane* other) {
  std::swap(probability_, other->probability_);
  std::swap(classification_, other->classification_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedLane_CandidateLane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedLane_CandidateLane_descriptor_;
  metadata.reflection = DetectedLane_CandidateLane_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedLane::kHeaderFieldNumber;
const int DetectedLane::kCandidateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedLane::DetectedLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedLane)
}

void DetectedLane::InitAsDefaultInstance() {
  header_ = const_cast< ::osi3::DetectedItemHeader*>(&::osi3::DetectedItemHeader::default_instance());
}

DetectedLane::DetectedLane(const DetectedLane& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedLane)
}

void DetectedLane::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedLane::~DetectedLane() {
  // @@protoc_insertion_point(destructor:osi3.DetectedLane)
  SharedDtor();
}

void DetectedLane::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void DetectedLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedLane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedLane_descriptor_;
}

const DetectedLane& DetectedLane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fdetectedlane_2eproto();
  return *default_instance_;
}

DetectedLane* DetectedLane::default_instance_ = NULL;

DetectedLane* DetectedLane::New(::google::protobuf::Arena* arena) const {
  DetectedLane* n = new DetectedLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedLane::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedLane)
  if (has_header()) {
    if (header_ != NULL) header_->::osi3::DetectedItemHeader::Clear();
  }
  candidate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DetectedLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.DetectedItemHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_candidate;
        break;
      }

      // repeated .osi3.DetectedLane.CandidateLane candidate = 2;
      case 2: {
        if (tag == 18) {
         parse_candidate:
          DO_(input->IncrementRecursionDepth());
         parse_loop_candidate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_candidate;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedLane)
  return false;
#undef DO_
}

void DetectedLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedLane)
  // optional .osi3.DetectedItemHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .osi3.DetectedLane.CandidateLane candidate = 2;
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->candidate(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedLane)
}

::google::protobuf::uint8* DetectedLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedLane)
  // optional .osi3.DetectedItemHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .osi3.DetectedLane.CandidateLane candidate = 2;
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->candidate(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedLane)
  return target;
}

int DetectedLane::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedLane)
  int total_size = 0;

  // optional .osi3.DetectedItemHeader header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .osi3.DetectedLane.CandidateLane candidate = 2;
  total_size += 1 * this->candidate_size();
  for (int i = 0; i < this->candidate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->candidate(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedLane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectedLane* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedLane)
    MergeFrom(*source);
  }
}

void DetectedLane::MergeFrom(const DetectedLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedLane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  candidate_.MergeFrom(from.candidate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from.header());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DetectedLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedLane::CopyFrom(const DetectedLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLane::IsInitialized() const {

  return true;
}

void DetectedLane::Swap(DetectedLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedLane::InternalSwap(DetectedLane* other) {
  std::swap(header_, other->header_);
  candidate_.UnsafeArenaSwap(&other->candidate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedLane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedLane_descriptor_;
  metadata.reflection = DetectedLane_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectedLane_CandidateLane

// optional double probability = 1;
bool DetectedLane_CandidateLane::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectedLane_CandidateLane::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectedLane_CandidateLane::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedLane_CandidateLane::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
 double DetectedLane_CandidateLane::probability() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedLane.CandidateLane.probability)
  return probability_;
}
 void DetectedLane_CandidateLane::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedLane.CandidateLane.probability)
}

// optional .osi3.Lane.Classification classification = 2;
bool DetectedLane_CandidateLane::has_classification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectedLane_CandidateLane::set_has_classification() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectedLane_CandidateLane::clear_has_classification() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectedLane_CandidateLane::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::Lane_Classification::Clear();
  clear_has_classification();
}
const ::osi3::Lane_Classification& DetectedLane_CandidateLane::classification() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedLane.CandidateLane.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
::osi3::Lane_Classification* DetectedLane_CandidateLane::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::Lane_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedLane.CandidateLane.classification)
  return classification_;
}
::osi3::Lane_Classification* DetectedLane_CandidateLane::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.DetectedLane.CandidateLane.classification)
  clear_has_classification();
  ::osi3::Lane_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
void DetectedLane_CandidateLane::set_allocated_classification(::osi3::Lane_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedLane.CandidateLane.classification)
}

// -------------------------------------------------------------------

// DetectedLane

// optional .osi3.DetectedItemHeader header = 1;
bool DetectedLane::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectedLane::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectedLane::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedLane::clear_header() {
  if (header_ != NULL) header_->::osi3::DetectedItemHeader::Clear();
  clear_has_header();
}
const ::osi3::DetectedItemHeader& DetectedLane::header() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedLane.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::osi3::DetectedItemHeader* DetectedLane::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::osi3::DetectedItemHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedLane.header)
  return header_;
}
::osi3::DetectedItemHeader* DetectedLane::release_header() {
  // @@protoc_insertion_point(field_release:osi3.DetectedLane.header)
  clear_has_header();
  ::osi3::DetectedItemHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DetectedLane::set_allocated_header(::osi3::DetectedItemHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedLane.header)
}

// repeated .osi3.DetectedLane.CandidateLane candidate = 2;
int DetectedLane::candidate_size() const {
  return candidate_.size();
}
void DetectedLane::clear_candidate() {
  candidate_.Clear();
}
const ::osi3::DetectedLane_CandidateLane& DetectedLane::candidate(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedLane.candidate)
  return candidate_.Get(index);
}
::osi3::DetectedLane_CandidateLane* DetectedLane::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedLane.candidate)
  return candidate_.Mutable(index);
}
::osi3::DetectedLane_CandidateLane* DetectedLane::add_candidate() {
  // @@protoc_insertion_point(field_add:osi3.DetectedLane.candidate)
  return candidate_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::DetectedLane_CandidateLane >*
DetectedLane::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedLane.candidate)
  return &candidate_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLane_CandidateLane >&
DetectedLane::candidate() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedLane.candidate)
  return candidate_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedLaneBoundary_CandidateLaneBoundary::kProbabilityFieldNumber;
const int DetectedLaneBoundary_CandidateLaneBoundary::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedLaneBoundary_CandidateLaneBoundary::DetectedLaneBoundary_CandidateLaneBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
}

void DetectedLaneBoundary_CandidateLaneBoundary::InitAsDefaultInstance() {
  classification_ = const_cast< ::osi3::LaneBoundary_Classification*>(&::osi3::LaneBoundary_Classification::default_instance());
}

DetectedLaneBoundary_CandidateLaneBoundary::DetectedLaneBoundary_CandidateLaneBoundary(const DetectedLaneBoundary_CandidateLaneBoundary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
}

void DetectedLaneBoundary_CandidateLaneBoundary::SharedCtor() {
  _cached_size_ = 0;
  probability_ = 0;
  classification_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedLaneBoundary_CandidateLaneBoundary::~DetectedLaneBoundary_CandidateLaneBoundary() {
  // @@protoc_insertion_point(destructor:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  SharedDtor();
}

void DetectedLaneBoundary_CandidateLaneBoundary::SharedDtor() {
  if (this != default_instance_) {
    delete classification_;
  }
}

void DetectedLaneBoundary_CandidateLaneBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedLaneBoundary_CandidateLaneBoundary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedLaneBoundary_CandidateLaneBoundary_descriptor_;
}

const DetectedLaneBoundary_CandidateLaneBoundary& DetectedLaneBoundary_CandidateLaneBoundary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fdetectedlane_2eproto();
  return *default_instance_;
}

DetectedLaneBoundary_CandidateLaneBoundary* DetectedLaneBoundary_CandidateLaneBoundary::default_instance_ = NULL;

DetectedLaneBoundary_CandidateLaneBoundary* DetectedLaneBoundary_CandidateLaneBoundary::New(::google::protobuf::Arena* arena) const {
  DetectedLaneBoundary_CandidateLaneBoundary* n = new DetectedLaneBoundary_CandidateLaneBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedLaneBoundary_CandidateLaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  if (_has_bits_[0 / 32] & 3u) {
    probability_ = 0;
    if (has_classification()) {
      if (classification_ != NULL) classification_->::osi3::LaneBoundary_Classification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DetectedLaneBoundary_CandidateLaneBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_classification;
        break;
      }

      // optional .osi3.LaneBoundary.Classification classification = 2;
      case 2: {
        if (tag == 18) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  return false;
#undef DO_
}

void DetectedLaneBoundary_CandidateLaneBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  // optional double probability = 1;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // optional .osi3.LaneBoundary.Classification classification = 2;
  if (has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classification_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
}

::google::protobuf::uint8* DetectedLaneBoundary_CandidateLaneBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  // optional double probability = 1;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // optional .osi3.LaneBoundary.Classification classification = 2;
  if (has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->classification_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  return target;
}

int DetectedLaneBoundary_CandidateLaneBoundary::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double probability = 1;
    if (has_probability()) {
      total_size += 1 + 8;
    }

    // optional .osi3.LaneBoundary.Classification classification = 2;
    if (has_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->classification_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedLaneBoundary_CandidateLaneBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectedLaneBoundary_CandidateLaneBoundary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedLaneBoundary_CandidateLaneBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
    MergeFrom(*source);
  }
}

void DetectedLaneBoundary_CandidateLaneBoundary::MergeFrom(const DetectedLaneBoundary_CandidateLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_classification()) {
      mutable_classification()->::osi3::LaneBoundary_Classification::MergeFrom(from.classification());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DetectedLaneBoundary_CandidateLaneBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedLaneBoundary_CandidateLaneBoundary::CopyFrom(const DetectedLaneBoundary_CandidateLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLaneBoundary_CandidateLaneBoundary::IsInitialized() const {

  return true;
}

void DetectedLaneBoundary_CandidateLaneBoundary::Swap(DetectedLaneBoundary_CandidateLaneBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedLaneBoundary_CandidateLaneBoundary::InternalSwap(DetectedLaneBoundary_CandidateLaneBoundary* other) {
  std::swap(probability_, other->probability_);
  std::swap(classification_, other->classification_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedLaneBoundary_CandidateLaneBoundary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedLaneBoundary_CandidateLaneBoundary_descriptor_;
  metadata.reflection = DetectedLaneBoundary_CandidateLaneBoundary_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedLaneBoundary::kHeaderFieldNumber;
const int DetectedLaneBoundary::kCandidateFieldNumber;
const int DetectedLaneBoundary::kBoundaryLineFieldNumber;
const int DetectedLaneBoundary::kBoundaryLineRmseFieldNumber;
const int DetectedLaneBoundary::kBoundaryLineConfidencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedLaneBoundary::DetectedLaneBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedLaneBoundary)
}

void DetectedLaneBoundary::InitAsDefaultInstance() {
  header_ = const_cast< ::osi3::DetectedItemHeader*>(&::osi3::DetectedItemHeader::default_instance());
}

DetectedLaneBoundary::DetectedLaneBoundary(const DetectedLaneBoundary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedLaneBoundary)
}

void DetectedLaneBoundary::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedLaneBoundary::~DetectedLaneBoundary() {
  // @@protoc_insertion_point(destructor:osi3.DetectedLaneBoundary)
  SharedDtor();
}

void DetectedLaneBoundary::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void DetectedLaneBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedLaneBoundary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedLaneBoundary_descriptor_;
}

const DetectedLaneBoundary& DetectedLaneBoundary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fdetectedlane_2eproto();
  return *default_instance_;
}

DetectedLaneBoundary* DetectedLaneBoundary::default_instance_ = NULL;

DetectedLaneBoundary* DetectedLaneBoundary::New(::google::protobuf::Arena* arena) const {
  DetectedLaneBoundary* n = new DetectedLaneBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedLaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedLaneBoundary)
  if (has_header()) {
    if (header_ != NULL) header_->::osi3::DetectedItemHeader::Clear();
  }
  candidate_.Clear();
  boundary_line_.Clear();
  boundary_line_rmse_.Clear();
  boundary_line_confidences_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DetectedLaneBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedLaneBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.DetectedItemHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_candidate;
        break;
      }

      // repeated .osi3.DetectedLaneBoundary.CandidateLaneBoundary candidate = 2;
      case 2: {
        if (tag == 18) {
         parse_candidate:
          DO_(input->IncrementRecursionDepth());
         parse_loop_candidate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_candidate;
        if (input->ExpectTag(26)) goto parse_loop_boundary_line;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_boundary_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_boundary_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_boundary_line;
        if (input->ExpectTag(34)) goto parse_loop_boundary_line_rmse;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line_rmse = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_boundary_line_rmse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_boundary_line_rmse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_boundary_line_rmse;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(41)) goto parse_boundary_line_confidences;
        break;
      }

      // repeated double boundary_line_confidences = 5;
      case 5: {
        if (tag == 41) {
         parse_boundary_line_confidences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_boundary_line_confidences())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_boundary_line_confidences())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_boundary_line_confidences;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedLaneBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedLaneBoundary)
  return false;
#undef DO_
}

void DetectedLaneBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedLaneBoundary)
  // optional .osi3.DetectedItemHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .osi3.DetectedLaneBoundary.CandidateLaneBoundary candidate = 2;
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->candidate(i), output);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 3;
  for (unsigned int i = 0, n = this->boundary_line_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boundary_line(i), output);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line_rmse = 4;
  for (unsigned int i = 0, n = this->boundary_line_rmse_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->boundary_line_rmse(i), output);
  }

  // repeated double boundary_line_confidences = 5;
  for (int i = 0; i < this->boundary_line_confidences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->boundary_line_confidences(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedLaneBoundary)
}

::google::protobuf::uint8* DetectedLaneBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedLaneBoundary)
  // optional .osi3.DetectedItemHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .osi3.DetectedLaneBoundary.CandidateLaneBoundary candidate = 2;
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->candidate(i), false, target);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 3;
  for (unsigned int i = 0, n = this->boundary_line_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->boundary_line(i), false, target);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line_rmse = 4;
  for (unsigned int i = 0, n = this->boundary_line_rmse_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->boundary_line_rmse(i), false, target);
  }

  // repeated double boundary_line_confidences = 5;
  for (int i = 0; i < this->boundary_line_confidences_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->boundary_line_confidences(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedLaneBoundary)
  return target;
}

int DetectedLaneBoundary::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedLaneBoundary)
  int total_size = 0;

  // optional .osi3.DetectedItemHeader header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .osi3.DetectedLaneBoundary.CandidateLaneBoundary candidate = 2;
  total_size += 1 * this->candidate_size();
  for (int i = 0; i < this->candidate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->candidate(i));
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 3;
  total_size += 1 * this->boundary_line_size();
  for (int i = 0; i < this->boundary_line_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boundary_line(i));
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line_rmse = 4;
  total_size += 1 * this->boundary_line_rmse_size();
  for (int i = 0; i < this->boundary_line_rmse_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boundary_line_rmse(i));
  }

  // repeated double boundary_line_confidences = 5;
  {
    int data_size = 0;
    data_size = 8 * this->boundary_line_confidences_size();
    total_size += 1 * this->boundary_line_confidences_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedLaneBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedLaneBoundary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectedLaneBoundary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedLaneBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedLaneBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedLaneBoundary)
    MergeFrom(*source);
  }
}

void DetectedLaneBoundary::MergeFrom(const DetectedLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedLaneBoundary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  candidate_.MergeFrom(from.candidate_);
  boundary_line_.MergeFrom(from.boundary_line_);
  boundary_line_rmse_.MergeFrom(from.boundary_line_rmse_);
  boundary_line_confidences_.MergeFrom(from.boundary_line_confidences_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from.header());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DetectedLaneBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedLaneBoundary::CopyFrom(const DetectedLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLaneBoundary::IsInitialized() const {

  return true;
}

void DetectedLaneBoundary::Swap(DetectedLaneBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedLaneBoundary::InternalSwap(DetectedLaneBoundary* other) {
  std::swap(header_, other->header_);
  candidate_.UnsafeArenaSwap(&other->candidate_);
  boundary_line_.UnsafeArenaSwap(&other->boundary_line_);
  boundary_line_rmse_.UnsafeArenaSwap(&other->boundary_line_rmse_);
  boundary_line_confidences_.UnsafeArenaSwap(&other->boundary_line_confidences_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedLaneBoundary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedLaneBoundary_descriptor_;
  metadata.reflection = DetectedLaneBoundary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectedLaneBoundary_CandidateLaneBoundary

// optional double probability = 1;
bool DetectedLaneBoundary_CandidateLaneBoundary::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectedLaneBoundary_CandidateLaneBoundary::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectedLaneBoundary_CandidateLaneBoundary::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedLaneBoundary_CandidateLaneBoundary::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
 double DetectedLaneBoundary_CandidateLaneBoundary::probability() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedLaneBoundary.CandidateLaneBoundary.probability)
  return probability_;
}
 void DetectedLaneBoundary_CandidateLaneBoundary::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedLaneBoundary.CandidateLaneBoundary.probability)
}

// optional .osi3.LaneBoundary.Classification classification = 2;
bool DetectedLaneBoundary_CandidateLaneBoundary::has_classification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectedLaneBoundary_CandidateLaneBoundary::set_has_classification() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectedLaneBoundary_CandidateLaneBoundary::clear_has_classification() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectedLaneBoundary_CandidateLaneBoundary::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::LaneBoundary_Classification::Clear();
  clear_has_classification();
}
const ::osi3::LaneBoundary_Classification& DetectedLaneBoundary_CandidateLaneBoundary::classification() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedLaneBoundary.CandidateLaneBoundary.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
::osi3::LaneBoundary_Classification* DetectedLaneBoundary_CandidateLaneBoundary::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::LaneBoundary_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedLaneBoundary.CandidateLaneBoundary.classification)
  return classification_;
}
::osi3::LaneBoundary_Classification* DetectedLaneBoundary_CandidateLaneBoundary::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.DetectedLaneBoundary.CandidateLaneBoundary.classification)
  clear_has_classification();
  ::osi3::LaneBoundary_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
void DetectedLaneBoundary_CandidateLaneBoundary::set_allocated_classification(::osi3::LaneBoundary_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedLaneBoundary.CandidateLaneBoundary.classification)
}

// -------------------------------------------------------------------

// DetectedLaneBoundary

// optional .osi3.DetectedItemHeader header = 1;
bool DetectedLaneBoundary::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectedLaneBoundary::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectedLaneBoundary::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedLaneBoundary::clear_header() {
  if (header_ != NULL) header_->::osi3::DetectedItemHeader::Clear();
  clear_has_header();
}
const ::osi3::DetectedItemHeader& DetectedLaneBoundary::header() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedLaneBoundary.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::osi3::DetectedItemHeader* DetectedLaneBoundary::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::osi3::DetectedItemHeader;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedLaneBoundary.header)
  return header_;
}
::osi3::DetectedItemHeader* DetectedLaneBoundary::release_header() {
  // @@protoc_insertion_point(field_release:osi3.DetectedLaneBoundary.header)
  clear_has_header();
  ::osi3::DetectedItemHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DetectedLaneBoundary::set_allocated_header(::osi3::DetectedItemHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedLaneBoundary.header)
}

// repeated .osi3.DetectedLaneBoundary.CandidateLaneBoundary candidate = 2;
int DetectedLaneBoundary::candidate_size() const {
  return candidate_.size();
}
void DetectedLaneBoundary::clear_candidate() {
  candidate_.Clear();
}
const ::osi3::DetectedLaneBoundary_CandidateLaneBoundary& DetectedLaneBoundary::candidate(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedLaneBoundary.candidate)
  return candidate_.Get(index);
}
::osi3::DetectedLaneBoundary_CandidateLaneBoundary* DetectedLaneBoundary::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedLaneBoundary.candidate)
  return candidate_.Mutable(index);
}
::osi3::DetectedLaneBoundary_CandidateLaneBoundary* DetectedLaneBoundary::add_candidate() {
  // @@protoc_insertion_point(field_add:osi3.DetectedLaneBoundary.candidate)
  return candidate_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::DetectedLaneBoundary_CandidateLaneBoundary >*
DetectedLaneBoundary::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedLaneBoundary.candidate)
  return &candidate_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::DetectedLaneBoundary_CandidateLaneBoundary >&
DetectedLaneBoundary::candidate() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedLaneBoundary.candidate)
  return candidate_;
}

// repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 3;
int DetectedLaneBoundary::boundary_line_size() const {
  return boundary_line_.size();
}
void DetectedLaneBoundary::clear_boundary_line() {
  boundary_line_.Clear();
}
const ::osi3::LaneBoundary_BoundaryPoint& DetectedLaneBoundary::boundary_line(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedLaneBoundary.boundary_line)
  return boundary_line_.Get(index);
}
::osi3::LaneBoundary_BoundaryPoint* DetectedLaneBoundary::mutable_boundary_line(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedLaneBoundary.boundary_line)
  return boundary_line_.Mutable(index);
}
::osi3::LaneBoundary_BoundaryPoint* DetectedLaneBoundary::add_boundary_line() {
  // @@protoc_insertion_point(field_add:osi3.DetectedLaneBoundary.boundary_line)
  return boundary_line_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary_BoundaryPoint >*
DetectedLaneBoundary::mutable_boundary_line() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedLaneBoundary.boundary_line)
  return &boundary_line_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary_BoundaryPoint >&
DetectedLaneBoundary::boundary_line() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedLaneBoundary.boundary_line)
  return boundary_line_;
}

// repeated .osi3.LaneBoundary.BoundaryPoint boundary_line_rmse = 4;
int DetectedLaneBoundary::boundary_line_rmse_size() const {
  return boundary_line_rmse_.size();
}
void DetectedLaneBoundary::clear_boundary_line_rmse() {
  boundary_line_rmse_.Clear();
}
const ::osi3::LaneBoundary_BoundaryPoint& DetectedLaneBoundary::boundary_line_rmse(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedLaneBoundary.boundary_line_rmse)
  return boundary_line_rmse_.Get(index);
}
::osi3::LaneBoundary_BoundaryPoint* DetectedLaneBoundary::mutable_boundary_line_rmse(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedLaneBoundary.boundary_line_rmse)
  return boundary_line_rmse_.Mutable(index);
}
::osi3::LaneBoundary_BoundaryPoint* DetectedLaneBoundary::add_boundary_line_rmse() {
  // @@protoc_insertion_point(field_add:osi3.DetectedLaneBoundary.boundary_line_rmse)
  return boundary_line_rmse_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary_BoundaryPoint >*
DetectedLaneBoundary::mutable_boundary_line_rmse() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedLaneBoundary.boundary_line_rmse)
  return &boundary_line_rmse_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary_BoundaryPoint >&
DetectedLaneBoundary::boundary_line_rmse() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedLaneBoundary.boundary_line_rmse)
  return boundary_line_rmse_;
}

// repeated double boundary_line_confidences = 5;
int DetectedLaneBoundary::boundary_line_confidences_size() const {
  return boundary_line_confidences_.size();
}
void DetectedLaneBoundary::clear_boundary_line_confidences() {
  boundary_line_confidences_.Clear();
}
 double DetectedLaneBoundary::boundary_line_confidences(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedLaneBoundary.boundary_line_confidences)
  return boundary_line_confidences_.Get(index);
}
 void DetectedLaneBoundary::set_boundary_line_confidences(int index, double value) {
  boundary_line_confidences_.Set(index, value);
  // @@protoc_insertion_point(field_set:osi3.DetectedLaneBoundary.boundary_line_confidences)
}
 void DetectedLaneBoundary::add_boundary_line_confidences(double value) {
  boundary_line_confidences_.Add(value);
  // @@protoc_insertion_point(field_add:osi3.DetectedLaneBoundary.boundary_line_confidences)
}
 const ::google::protobuf::RepeatedField< double >&
DetectedLaneBoundary::boundary_line_confidences() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedLaneBoundary.boundary_line_confidences)
  return boundary_line_confidences_;
}
 ::google::protobuf::RepeatedField< double >*
DetectedLaneBoundary::mutable_boundary_line_confidences() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedLaneBoundary.boundary_line_confidences)
  return &boundary_line_confidences_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
