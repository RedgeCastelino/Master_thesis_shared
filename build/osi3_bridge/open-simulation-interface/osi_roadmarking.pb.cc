// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_roadmarking.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_roadmarking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* RoadMarking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoadMarking_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoadMarking_Classification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoadMarking_Classification_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoadMarking_Classification_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoadMarking_Classification_Color_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5froadmarking_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5froadmarking_2eproto() {
  protobuf_AddDesc_osi_5froadmarking_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_roadmarking.proto");
  GOOGLE_CHECK(file != NULL);
  RoadMarking_descriptor_ = file->message_type(0);
  static const int RoadMarking_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMarking, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMarking, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMarking, classification_),
  };
  RoadMarking_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoadMarking_descriptor_,
      RoadMarking::default_instance_,
      RoadMarking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMarking, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoadMarking),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMarking, _internal_metadata_),
      -1);
  RoadMarking_Classification_descriptor_ = RoadMarking_descriptor_->nested_type(0);
  static const int RoadMarking_Classification_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMarking_Classification, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMarking_Classification, traffic_main_sign_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMarking_Classification, monochrome_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMarking_Classification, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMarking_Classification, value_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMarking_Classification, assigned_lane_id_),
  };
  RoadMarking_Classification_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoadMarking_Classification_descriptor_,
      RoadMarking_Classification::default_instance_,
      RoadMarking_Classification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMarking_Classification, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoadMarking_Classification),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadMarking_Classification, _internal_metadata_),
      -1);
  RoadMarking_Classification_Type_descriptor_ = RoadMarking_Classification_descriptor_->enum_type(0);
  RoadMarking_Classification_Color_descriptor_ = RoadMarking_Classification_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5froadmarking_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoadMarking_descriptor_, &RoadMarking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoadMarking_Classification_descriptor_, &RoadMarking_Classification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5froadmarking_2eproto() {
  delete RoadMarking::default_instance_;
  delete RoadMarking_reflection_;
  delete RoadMarking_Classification::default_instance_;
  delete RoadMarking_Classification_reflection_;
}

void protobuf_AddDesc_osi_5froadmarking_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5froadmarking_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::osi3::protobuf_AddDesc_osi_5fcommon_2eproto();
  ::osi3::protobuf_AddDesc_osi_5ftrafficsign_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025osi_roadmarking.proto\022\004osi3\032\020osi_commo"
    "n.proto\032\025osi_trafficsign.proto\"\255\006\n\013RoadM"
    "arking\022\034\n\002id\030\001 \001(\0132\020.osi3.Identifier\022\"\n\004"
    "base\030\002 \001(\0132\024.osi3.BaseStationary\0228\n\016clas"
    "sification\030\003 \001(\0132 .osi3.RoadMarking.Clas"
    "sification\032\241\005\n\016Classification\0223\n\004type\030\001 "
    "\001(\0162%.osi3.RoadMarking.Classification.Ty"
    "pe\022N\n\026traffic_main_sign_type\030\002 \001(\0162..osi"
    "3.TrafficSign.MainSign.Classification.Ty"
    "pe\022@\n\020monochrome_color\030\003 \001(\0162&.osi3.Road"
    "Marking.Classification.Color\022%\n\005value\030\004 "
    "\001(\0132\026.osi3.TrafficSignValue\022\022\n\nvalue_tex"
    "t\030\005 \001(\t\022*\n\020assigned_lane_id\030\006 \003(\0132\020.osi3"
    ".Identifier\"\315\001\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016"
    "\n\nTYPE_OTHER\020\001\022\035\n\031TYPE_PAINTED_TRAFFIC_S"
    "IGN\020\002\022\036\n\032TYPE_SYMBOLIC_TRAFFIC_SIGN\020\003\022\035\n"
    "\031TYPE_TEXTUAL_TRAFFIC_SIGN\020\004\022\027\n\023TYPE_GEN"
    "ERIC_SYMBOL\020\005\022\025\n\021TYPE_GENERIC_LINE\020\006\022\025\n\021"
    "TYPE_GENERIC_TEXT\020\007\"\220\001\n\005Color\022\021\n\rCOLOR_U"
    "NKNOWN\020\000\022\017\n\013COLOR_OTHER\020\001\022\017\n\013COLOR_WHITE"
    "\020\002\022\020\n\014COLOR_YELLOW\020\003\022\016\n\nCOLOR_BLUE\020\005\022\r\n\t"
    "COLOR_RED\020\006\022\017\n\013COLOR_GREEN\020\007\022\020\n\014COLOR_VI"
    "OLET\020\010B\002H\001", 890);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_roadmarking.proto", &protobuf_RegisterTypes);
  RoadMarking::default_instance_ = new RoadMarking();
  RoadMarking_Classification::default_instance_ = new RoadMarking_Classification();
  RoadMarking::default_instance_->InitAsDefaultInstance();
  RoadMarking_Classification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5froadmarking_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5froadmarking_2eproto {
  StaticDescriptorInitializer_osi_5froadmarking_2eproto() {
    protobuf_AddDesc_osi_5froadmarking_2eproto();
  }
} static_descriptor_initializer_osi_5froadmarking_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RoadMarking_Classification_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadMarking_Classification_Type_descriptor_;
}
bool RoadMarking_Classification_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_UNKNOWN;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_OTHER;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_PAINTED_TRAFFIC_SIGN;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_TEXTUAL_TRAFFIC_SIGN;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_GENERIC_SYMBOL;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_GENERIC_LINE;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_GENERIC_TEXT;
const RoadMarking_Classification_Type RoadMarking_Classification::Type_MIN;
const RoadMarking_Classification_Type RoadMarking_Classification::Type_MAX;
const int RoadMarking_Classification::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RoadMarking_Classification_Color_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadMarking_Classification_Color_descriptor_;
}
bool RoadMarking_Classification_Color_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_UNKNOWN;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_OTHER;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_WHITE;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_YELLOW;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_BLUE;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_RED;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_GREEN;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_VIOLET;
const RoadMarking_Classification_Color RoadMarking_Classification::Color_MIN;
const RoadMarking_Classification_Color RoadMarking_Classification::Color_MAX;
const int RoadMarking_Classification::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadMarking_Classification::kTypeFieldNumber;
const int RoadMarking_Classification::kTrafficMainSignTypeFieldNumber;
const int RoadMarking_Classification::kMonochromeColorFieldNumber;
const int RoadMarking_Classification::kValueFieldNumber;
const int RoadMarking_Classification::kValueTextFieldNumber;
const int RoadMarking_Classification::kAssignedLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadMarking_Classification::RoadMarking_Classification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RoadMarking.Classification)
}

void RoadMarking_Classification::InitAsDefaultInstance() {
  value_ = const_cast< ::osi3::TrafficSignValue*>(&::osi3::TrafficSignValue::default_instance());
}

RoadMarking_Classification::RoadMarking_Classification(const RoadMarking_Classification& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.RoadMarking.Classification)
}

void RoadMarking_Classification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  traffic_main_sign_type_ = 0;
  monochrome_color_ = 0;
  value_ = NULL;
  value_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoadMarking_Classification::~RoadMarking_Classification() {
  // @@protoc_insertion_point(destructor:osi3.RoadMarking.Classification)
  SharedDtor();
}

void RoadMarking_Classification::SharedDtor() {
  value_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete value_;
  }
}

void RoadMarking_Classification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadMarking_Classification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadMarking_Classification_descriptor_;
}

const RoadMarking_Classification& RoadMarking_Classification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5froadmarking_2eproto();
  return *default_instance_;
}

RoadMarking_Classification* RoadMarking_Classification::default_instance_ = NULL;

RoadMarking_Classification* RoadMarking_Classification::New(::google::protobuf::Arena* arena) const {
  RoadMarking_Classification* n = new RoadMarking_Classification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadMarking_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RoadMarking.Classification)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RoadMarking_Classification, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoadMarking_Classification*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(type_, traffic_main_sign_type_);
    monochrome_color_ = 0;
    if (has_value()) {
      if (value_ != NULL) value_->::osi3::TrafficSignValue::Clear();
    }
    if (has_value_text()) {
      value_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  assigned_lane_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoadMarking_Classification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RoadMarking.Classification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.RoadMarking.Classification.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::RoadMarking_Classification_Type_IsValid(value)) {
            set_type(static_cast< ::osi3::RoadMarking_Classification_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_traffic_main_sign_type;
        break;
      }

      // optional .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
      case 2: {
        if (tag == 16) {
         parse_traffic_main_sign_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::TrafficSign_MainSign_Classification_Type_IsValid(value)) {
            set_traffic_main_sign_type(static_cast< ::osi3::TrafficSign_MainSign_Classification_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_monochrome_color;
        break;
      }

      // optional .osi3.RoadMarking.Classification.Color monochrome_color = 3;
      case 3: {
        if (tag == 24) {
         parse_monochrome_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osi3::RoadMarking_Classification_Color_IsValid(value)) {
            set_monochrome_color(static_cast< ::osi3::RoadMarking_Classification_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional .osi3.TrafficSignValue value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_value_text;
        break;
      }

      // optional string value_text = 5;
      case 5: {
        if (tag == 42) {
         parse_value_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value_text().data(), this->value_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "osi3.RoadMarking.Classification.value_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_assigned_lane_id;
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 6;
      case 6: {
        if (tag == 50) {
         parse_assigned_lane_id:
          DO_(input->IncrementRecursionDepth());
         parse_loop_assigned_lane_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_assigned_lane_id;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RoadMarking.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RoadMarking.Classification)
  return false;
#undef DO_
}

void RoadMarking_Classification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RoadMarking.Classification)
  // optional .osi3.RoadMarking.Classification.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
  if (has_traffic_main_sign_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->traffic_main_sign_type(), output);
  }

  // optional .osi3.RoadMarking.Classification.Color monochrome_color = 3;
  if (has_monochrome_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->monochrome_color(), output);
  }

  // optional .osi3.TrafficSignValue value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->value_, output);
  }

  // optional string value_text = 5;
  if (has_value_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value_text().data(), this->value_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osi3.RoadMarking.Classification.value_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->value_text(), output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 6;
  for (unsigned int i = 0, n = this->assigned_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->assigned_lane_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RoadMarking.Classification)
}

::google::protobuf::uint8* RoadMarking_Classification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RoadMarking.Classification)
  // optional .osi3.RoadMarking.Classification.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
  if (has_traffic_main_sign_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->traffic_main_sign_type(), target);
  }

  // optional .osi3.RoadMarking.Classification.Color monochrome_color = 3;
  if (has_monochrome_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->monochrome_color(), target);
  }

  // optional .osi3.TrafficSignValue value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->value_, false, target);
  }

  // optional string value_text = 5;
  if (has_value_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value_text().data(), this->value_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "osi3.RoadMarking.Classification.value_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value_text(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 6;
  for (unsigned int i = 0, n = this->assigned_lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->assigned_lane_id(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RoadMarking.Classification)
  return target;
}

int RoadMarking_Classification::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RoadMarking.Classification)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .osi3.RoadMarking.Classification.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
    if (has_traffic_main_sign_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->traffic_main_sign_type());
    }

    // optional .osi3.RoadMarking.Classification.Color monochrome_color = 3;
    if (has_monochrome_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->monochrome_color());
    }

    // optional .osi3.TrafficSignValue value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->value_);
    }

    // optional string value_text = 5;
    if (has_value_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value_text());
    }

  }
  // repeated .osi3.Identifier assigned_lane_id = 6;
  total_size += 1 * this->assigned_lane_id_size();
  for (int i = 0; i < this->assigned_lane_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assigned_lane_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadMarking_Classification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RoadMarking.Classification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoadMarking_Classification* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadMarking_Classification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RoadMarking.Classification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RoadMarking.Classification)
    MergeFrom(*source);
  }
}

void RoadMarking_Classification::MergeFrom(const RoadMarking_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RoadMarking.Classification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_traffic_main_sign_type()) {
      set_traffic_main_sign_type(from.traffic_main_sign_type());
    }
    if (from.has_monochrome_color()) {
      set_monochrome_color(from.monochrome_color());
    }
    if (from.has_value()) {
      mutable_value()->::osi3::TrafficSignValue::MergeFrom(from.value());
    }
    if (from.has_value_text()) {
      set_has_value_text();
      value_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_text_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoadMarking_Classification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RoadMarking.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMarking_Classification::CopyFrom(const RoadMarking_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RoadMarking.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMarking_Classification::IsInitialized() const {

  return true;
}

void RoadMarking_Classification::Swap(RoadMarking_Classification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadMarking_Classification::InternalSwap(RoadMarking_Classification* other) {
  std::swap(type_, other->type_);
  std::swap(traffic_main_sign_type_, other->traffic_main_sign_type_);
  std::swap(monochrome_color_, other->monochrome_color_);
  std::swap(value_, other->value_);
  value_text_.Swap(&other->value_text_);
  assigned_lane_id_.UnsafeArenaSwap(&other->assigned_lane_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadMarking_Classification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoadMarking_Classification_descriptor_;
  metadata.reflection = RoadMarking_Classification_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadMarking::kIdFieldNumber;
const int RoadMarking::kBaseFieldNumber;
const int RoadMarking::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadMarking::RoadMarking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RoadMarking)
}

void RoadMarking::InitAsDefaultInstance() {
  id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  base_ = const_cast< ::osi3::BaseStationary*>(&::osi3::BaseStationary::default_instance());
  classification_ = const_cast< ::osi3::RoadMarking_Classification*>(&::osi3::RoadMarking_Classification::default_instance());
}

RoadMarking::RoadMarking(const RoadMarking& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.RoadMarking)
}

void RoadMarking::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  base_ = NULL;
  classification_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoadMarking::~RoadMarking() {
  // @@protoc_insertion_point(destructor:osi3.RoadMarking)
  SharedDtor();
}

void RoadMarking::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete base_;
    delete classification_;
  }
}

void RoadMarking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadMarking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoadMarking_descriptor_;
}

const RoadMarking& RoadMarking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5froadmarking_2eproto();
  return *default_instance_;
}

RoadMarking* RoadMarking::default_instance_ = NULL;

RoadMarking* RoadMarking::New(::google::protobuf::Arena* arena) const {
  RoadMarking* n = new RoadMarking;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadMarking::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RoadMarking)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      if (id_ != NULL) id_->::osi3::Identifier::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
    }
    if (has_classification()) {
      if (classification_ != NULL) classification_->::osi3::RoadMarking_Classification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoadMarking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RoadMarking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.Identifier id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .osi3.BaseStationary base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_classification;
        break;
      }

      // optional .osi3.RoadMarking.Classification classification = 3;
      case 3: {
        if (tag == 26) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RoadMarking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RoadMarking)
  return false;
#undef DO_
}

void RoadMarking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RoadMarking)
  // optional .osi3.Identifier id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .osi3.BaseStationary base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // optional .osi3.RoadMarking.Classification classification = 3;
  if (has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->classification_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RoadMarking)
}

::google::protobuf::uint8* RoadMarking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RoadMarking)
  // optional .osi3.Identifier id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // optional .osi3.BaseStationary base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->base_, false, target);
  }

  // optional .osi3.RoadMarking.Classification classification = 3;
  if (has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->classification_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RoadMarking)
  return target;
}

int RoadMarking::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RoadMarking)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .osi3.Identifier id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .osi3.BaseStationary base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_);
    }

    // optional .osi3.RoadMarking.Classification classification = 3;
    if (has_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->classification_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadMarking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RoadMarking)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoadMarking* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadMarking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RoadMarking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RoadMarking)
    MergeFrom(*source);
  }
}

void RoadMarking::MergeFrom(const RoadMarking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RoadMarking)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::osi3::Identifier::MergeFrom(from.id());
    }
    if (from.has_base()) {
      mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
    }
    if (from.has_classification()) {
      mutable_classification()->::osi3::RoadMarking_Classification::MergeFrom(from.classification());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoadMarking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RoadMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMarking::CopyFrom(const RoadMarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RoadMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMarking::IsInitialized() const {

  return true;
}

void RoadMarking::Swap(RoadMarking* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadMarking::InternalSwap(RoadMarking* other) {
  std::swap(id_, other->id_);
  std::swap(base_, other->base_);
  std::swap(classification_, other->classification_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadMarking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoadMarking_descriptor_;
  metadata.reflection = RoadMarking_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadMarking_Classification

// optional .osi3.RoadMarking.Classification.Type type = 1;
bool RoadMarking_Classification::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoadMarking_Classification::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void RoadMarking_Classification::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoadMarking_Classification::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::osi3::RoadMarking_Classification_Type RoadMarking_Classification::type() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.type)
  return static_cast< ::osi3::RoadMarking_Classification_Type >(type_);
}
 void RoadMarking_Classification::set_type(::osi3::RoadMarking_Classification_Type value) {
  assert(::osi3::RoadMarking_Classification_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.type)
}

// optional .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
bool RoadMarking_Classification::has_traffic_main_sign_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoadMarking_Classification::set_has_traffic_main_sign_type() {
  _has_bits_[0] |= 0x00000002u;
}
void RoadMarking_Classification::clear_has_traffic_main_sign_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoadMarking_Classification::clear_traffic_main_sign_type() {
  traffic_main_sign_type_ = 0;
  clear_has_traffic_main_sign_type();
}
 ::osi3::TrafficSign_MainSign_Classification_Type RoadMarking_Classification::traffic_main_sign_type() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.traffic_main_sign_type)
  return static_cast< ::osi3::TrafficSign_MainSign_Classification_Type >(traffic_main_sign_type_);
}
 void RoadMarking_Classification::set_traffic_main_sign_type(::osi3::TrafficSign_MainSign_Classification_Type value) {
  assert(::osi3::TrafficSign_MainSign_Classification_Type_IsValid(value));
  set_has_traffic_main_sign_type();
  traffic_main_sign_type_ = value;
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.traffic_main_sign_type)
}

// optional .osi3.RoadMarking.Classification.Color monochrome_color = 3;
bool RoadMarking_Classification::has_monochrome_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoadMarking_Classification::set_has_monochrome_color() {
  _has_bits_[0] |= 0x00000004u;
}
void RoadMarking_Classification::clear_has_monochrome_color() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoadMarking_Classification::clear_monochrome_color() {
  monochrome_color_ = 0;
  clear_has_monochrome_color();
}
 ::osi3::RoadMarking_Classification_Color RoadMarking_Classification::monochrome_color() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.monochrome_color)
  return static_cast< ::osi3::RoadMarking_Classification_Color >(monochrome_color_);
}
 void RoadMarking_Classification::set_monochrome_color(::osi3::RoadMarking_Classification_Color value) {
  assert(::osi3::RoadMarking_Classification_Color_IsValid(value));
  set_has_monochrome_color();
  monochrome_color_ = value;
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.monochrome_color)
}

// optional .osi3.TrafficSignValue value = 4;
bool RoadMarking_Classification::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoadMarking_Classification::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
void RoadMarking_Classification::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoadMarking_Classification::clear_value() {
  if (value_ != NULL) value_->::osi3::TrafficSignValue::Clear();
  clear_has_value();
}
const ::osi3::TrafficSignValue& RoadMarking_Classification::value() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::osi3::TrafficSignValue* RoadMarking_Classification::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::osi3::TrafficSignValue;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.value)
  return value_;
}
::osi3::TrafficSignValue* RoadMarking_Classification::release_value() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.Classification.value)
  clear_has_value();
  ::osi3::TrafficSignValue* temp = value_;
  value_ = NULL;
  return temp;
}
void RoadMarking_Classification::set_allocated_value(::osi3::TrafficSignValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.Classification.value)
}

// optional string value_text = 5;
bool RoadMarking_Classification::has_value_text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoadMarking_Classification::set_has_value_text() {
  _has_bits_[0] |= 0x00000010u;
}
void RoadMarking_Classification::clear_has_value_text() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoadMarking_Classification::clear_value_text() {
  value_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value_text();
}
 const ::std::string& RoadMarking_Classification::value_text() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.value_text)
  return value_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoadMarking_Classification::set_value_text(const ::std::string& value) {
  set_has_value_text();
  value_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.value_text)
}
 void RoadMarking_Classification::set_value_text(const char* value) {
  set_has_value_text();
  value_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.RoadMarking.Classification.value_text)
}
 void RoadMarking_Classification::set_value_text(const char* value, size_t size) {
  set_has_value_text();
  value_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.RoadMarking.Classification.value_text)
}
 ::std::string* RoadMarking_Classification::mutable_value_text() {
  set_has_value_text();
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.value_text)
  return value_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoadMarking_Classification::release_value_text() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.Classification.value_text)
  clear_has_value_text();
  return value_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoadMarking_Classification::set_allocated_value_text(::std::string* value_text) {
  if (value_text != NULL) {
    set_has_value_text();
  } else {
    clear_has_value_text();
  }
  value_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_text);
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.Classification.value_text)
}

// repeated .osi3.Identifier assigned_lane_id = 6;
int RoadMarking_Classification::assigned_lane_id_size() const {
  return assigned_lane_id_.size();
}
void RoadMarking_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
const ::osi3::Identifier& RoadMarking_Classification::assigned_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.assigned_lane_id)
  return assigned_lane_id_.Get(index);
}
::osi3::Identifier* RoadMarking_Classification::mutable_assigned_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.assigned_lane_id)
  return assigned_lane_id_.Mutable(index);
}
::osi3::Identifier* RoadMarking_Classification::add_assigned_lane_id() {
  // @@protoc_insertion_point(field_add:osi3.RoadMarking.Classification.assigned_lane_id)
  return assigned_lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
RoadMarking_Classification::mutable_assigned_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.RoadMarking.Classification.assigned_lane_id)
  return &assigned_lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
RoadMarking_Classification::assigned_lane_id() const {
  // @@protoc_insertion_point(field_list:osi3.RoadMarking.Classification.assigned_lane_id)
  return assigned_lane_id_;
}

// -------------------------------------------------------------------

// RoadMarking

// optional .osi3.Identifier id = 1;
bool RoadMarking::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoadMarking::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoadMarking::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoadMarking::clear_id() {
  if (id_ != NULL) id_->::osi3::Identifier::Clear();
  clear_has_id();
}
const ::osi3::Identifier& RoadMarking::id() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::osi3::Identifier* RoadMarking::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.id)
  return id_;
}
::osi3::Identifier* RoadMarking::release_id() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.id)
  clear_has_id();
  ::osi3::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
void RoadMarking::set_allocated_id(::osi3::Identifier* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.id)
}

// optional .osi3.BaseStationary base = 2;
bool RoadMarking::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoadMarking::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void RoadMarking::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoadMarking::clear_base() {
  if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
  clear_has_base();
}
const ::osi3::BaseStationary& RoadMarking::base() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::osi3::BaseStationary* RoadMarking::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::osi3::BaseStationary;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.base)
  return base_;
}
::osi3::BaseStationary* RoadMarking::release_base() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.base)
  clear_has_base();
  ::osi3::BaseStationary* temp = base_;
  base_ = NULL;
  return temp;
}
void RoadMarking::set_allocated_base(::osi3::BaseStationary* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.base)
}

// optional .osi3.RoadMarking.Classification classification = 3;
bool RoadMarking::has_classification() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoadMarking::set_has_classification() {
  _has_bits_[0] |= 0x00000004u;
}
void RoadMarking::clear_has_classification() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoadMarking::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::RoadMarking_Classification::Clear();
  clear_has_classification();
}
const ::osi3::RoadMarking_Classification& RoadMarking::classification() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
::osi3::RoadMarking_Classification* RoadMarking::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::RoadMarking_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.classification)
  return classification_;
}
::osi3::RoadMarking_Classification* RoadMarking::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.classification)
  clear_has_classification();
  ::osi3::RoadMarking_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
void RoadMarking::set_allocated_classification(::osi3::RoadMarking_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.classification)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
