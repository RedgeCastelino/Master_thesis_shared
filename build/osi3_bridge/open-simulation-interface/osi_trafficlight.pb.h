// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_trafficlight.proto

#ifndef PROTOBUF_osi_5ftrafficlight_2eproto__INCLUDED
#define PROTOBUF_osi_5ftrafficlight_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)

namespace osi3 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_osi_5ftrafficlight_2eproto();
void protobuf_AssignDesc_osi_5ftrafficlight_2eproto();
void protobuf_ShutdownFile_osi_5ftrafficlight_2eproto();

class TrafficLight;
class TrafficLight_Classification;

enum TrafficLight_Classification_Color {
  TrafficLight_Classification_Color_COLOR_UNKNOWN = 0,
  TrafficLight_Classification_Color_COLOR_OTHER = 1,
  TrafficLight_Classification_Color_COLOR_RED = 2,
  TrafficLight_Classification_Color_COLOR_YELLOW = 3,
  TrafficLight_Classification_Color_COLOR_GREEN = 4,
  TrafficLight_Classification_Color_COLOR_BLUE = 5,
  TrafficLight_Classification_Color_COLOR_WHITE = 6
};
bool TrafficLight_Classification_Color_IsValid(int value);
const TrafficLight_Classification_Color TrafficLight_Classification_Color_Color_MIN = TrafficLight_Classification_Color_COLOR_UNKNOWN;
const TrafficLight_Classification_Color TrafficLight_Classification_Color_Color_MAX = TrafficLight_Classification_Color_COLOR_WHITE;
const int TrafficLight_Classification_Color_Color_ARRAYSIZE = TrafficLight_Classification_Color_Color_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficLight_Classification_Color_descriptor();
inline const ::std::string& TrafficLight_Classification_Color_Name(TrafficLight_Classification_Color value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficLight_Classification_Color_descriptor(), value);
}
inline bool TrafficLight_Classification_Color_Parse(
    const ::std::string& name, TrafficLight_Classification_Color* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficLight_Classification_Color>(
    TrafficLight_Classification_Color_descriptor(), name, value);
}
enum TrafficLight_Classification_Icon {
  TrafficLight_Classification_Icon_ICON_UNKNOWN = 0,
  TrafficLight_Classification_Icon_ICON_OTHER = 1,
  TrafficLight_Classification_Icon_ICON_NONE = 2,
  TrafficLight_Classification_Icon_ICON_ARROW_STRAIGHT_AHEAD = 3,
  TrafficLight_Classification_Icon_ICON_ARROW_LEFT = 4,
  TrafficLight_Classification_Icon_ICON_ARROW_DIAG_LEFT = 5,
  TrafficLight_Classification_Icon_ICON_ARROW_STRAIGHT_AHEAD_LEFT = 6,
  TrafficLight_Classification_Icon_ICON_ARROW_RIGHT = 7,
  TrafficLight_Classification_Icon_ICON_ARROW_DIAG_RIGHT = 8,
  TrafficLight_Classification_Icon_ICON_ARROW_STRAIGHT_AHEAD_RIGHT = 9,
  TrafficLight_Classification_Icon_ICON_ARROW_LEFT_RIGHT = 10,
  TrafficLight_Classification_Icon_ICON_ARROW_DOWN = 11,
  TrafficLight_Classification_Icon_ICON_ARROW_DOWN_LEFT = 12,
  TrafficLight_Classification_Icon_ICON_ARROW_DOWN_RIGHT = 13,
  TrafficLight_Classification_Icon_ICON_ARROW_CROSS = 14,
  TrafficLight_Classification_Icon_ICON_PEDESTRIAN = 15,
  TrafficLight_Classification_Icon_ICON_WALK = 16,
  TrafficLight_Classification_Icon_ICON_DONT_WALK = 17,
  TrafficLight_Classification_Icon_ICON_BICYCLE = 18,
  TrafficLight_Classification_Icon_ICON_PEDESTRIAN_AND_BICYCLE = 19,
  TrafficLight_Classification_Icon_ICON_COUNTDOWN_SECONDS = 20,
  TrafficLight_Classification_Icon_ICON_COUNTDOWN_PERCENT = 21,
  TrafficLight_Classification_Icon_ICON_TRAM = 22,
  TrafficLight_Classification_Icon_ICON_BUS = 23,
  TrafficLight_Classification_Icon_ICON_BUS_AND_TRAM = 24
};
bool TrafficLight_Classification_Icon_IsValid(int value);
const TrafficLight_Classification_Icon TrafficLight_Classification_Icon_Icon_MIN = TrafficLight_Classification_Icon_ICON_UNKNOWN;
const TrafficLight_Classification_Icon TrafficLight_Classification_Icon_Icon_MAX = TrafficLight_Classification_Icon_ICON_BUS_AND_TRAM;
const int TrafficLight_Classification_Icon_Icon_ARRAYSIZE = TrafficLight_Classification_Icon_Icon_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficLight_Classification_Icon_descriptor();
inline const ::std::string& TrafficLight_Classification_Icon_Name(TrafficLight_Classification_Icon value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficLight_Classification_Icon_descriptor(), value);
}
inline bool TrafficLight_Classification_Icon_Parse(
    const ::std::string& name, TrafficLight_Classification_Icon* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficLight_Classification_Icon>(
    TrafficLight_Classification_Icon_descriptor(), name, value);
}
enum TrafficLight_Classification_Mode {
  TrafficLight_Classification_Mode_MODE_UNKNOWN = 0,
  TrafficLight_Classification_Mode_MODE_OTHER = 1,
  TrafficLight_Classification_Mode_MODE_OFF = 2,
  TrafficLight_Classification_Mode_MODE_CONSTANT = 3,
  TrafficLight_Classification_Mode_MODE_FLASHING = 4,
  TrafficLight_Classification_Mode_MODE_COUNTING = 5
};
bool TrafficLight_Classification_Mode_IsValid(int value);
const TrafficLight_Classification_Mode TrafficLight_Classification_Mode_Mode_MIN = TrafficLight_Classification_Mode_MODE_UNKNOWN;
const TrafficLight_Classification_Mode TrafficLight_Classification_Mode_Mode_MAX = TrafficLight_Classification_Mode_MODE_COUNTING;
const int TrafficLight_Classification_Mode_Mode_ARRAYSIZE = TrafficLight_Classification_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficLight_Classification_Mode_descriptor();
inline const ::std::string& TrafficLight_Classification_Mode_Name(TrafficLight_Classification_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficLight_Classification_Mode_descriptor(), value);
}
inline bool TrafficLight_Classification_Mode_Parse(
    const ::std::string& name, TrafficLight_Classification_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficLight_Classification_Mode>(
    TrafficLight_Classification_Mode_descriptor(), name, value);
}
// ===================================================================

class TrafficLight_Classification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficLight.Classification) */ {
 public:
  TrafficLight_Classification();
  virtual ~TrafficLight_Classification();

  TrafficLight_Classification(const TrafficLight_Classification& from);

  inline TrafficLight_Classification& operator=(const TrafficLight_Classification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLight_Classification& default_instance();

  void Swap(TrafficLight_Classification* other);

  // implements Message ----------------------------------------------

  inline TrafficLight_Classification* New() const { return New(NULL); }

  TrafficLight_Classification* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficLight_Classification& from);
  void MergeFrom(const TrafficLight_Classification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficLight_Classification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrafficLight_Classification_Color Color;
  static const Color COLOR_UNKNOWN =
    TrafficLight_Classification_Color_COLOR_UNKNOWN;
  static const Color COLOR_OTHER =
    TrafficLight_Classification_Color_COLOR_OTHER;
  static const Color COLOR_RED =
    TrafficLight_Classification_Color_COLOR_RED;
  static const Color COLOR_YELLOW =
    TrafficLight_Classification_Color_COLOR_YELLOW;
  static const Color COLOR_GREEN =
    TrafficLight_Classification_Color_COLOR_GREEN;
  static const Color COLOR_BLUE =
    TrafficLight_Classification_Color_COLOR_BLUE;
  static const Color COLOR_WHITE =
    TrafficLight_Classification_Color_COLOR_WHITE;
  static inline bool Color_IsValid(int value) {
    return TrafficLight_Classification_Color_IsValid(value);
  }
  static const Color Color_MIN =
    TrafficLight_Classification_Color_Color_MIN;
  static const Color Color_MAX =
    TrafficLight_Classification_Color_Color_MAX;
  static const int Color_ARRAYSIZE =
    TrafficLight_Classification_Color_Color_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Color_descriptor() {
    return TrafficLight_Classification_Color_descriptor();
  }
  static inline const ::std::string& Color_Name(Color value) {
    return TrafficLight_Classification_Color_Name(value);
  }
  static inline bool Color_Parse(const ::std::string& name,
      Color* value) {
    return TrafficLight_Classification_Color_Parse(name, value);
  }

  typedef TrafficLight_Classification_Icon Icon;
  static const Icon ICON_UNKNOWN =
    TrafficLight_Classification_Icon_ICON_UNKNOWN;
  static const Icon ICON_OTHER =
    TrafficLight_Classification_Icon_ICON_OTHER;
  static const Icon ICON_NONE =
    TrafficLight_Classification_Icon_ICON_NONE;
  static const Icon ICON_ARROW_STRAIGHT_AHEAD =
    TrafficLight_Classification_Icon_ICON_ARROW_STRAIGHT_AHEAD;
  static const Icon ICON_ARROW_LEFT =
    TrafficLight_Classification_Icon_ICON_ARROW_LEFT;
  static const Icon ICON_ARROW_DIAG_LEFT =
    TrafficLight_Classification_Icon_ICON_ARROW_DIAG_LEFT;
  static const Icon ICON_ARROW_STRAIGHT_AHEAD_LEFT =
    TrafficLight_Classification_Icon_ICON_ARROW_STRAIGHT_AHEAD_LEFT;
  static const Icon ICON_ARROW_RIGHT =
    TrafficLight_Classification_Icon_ICON_ARROW_RIGHT;
  static const Icon ICON_ARROW_DIAG_RIGHT =
    TrafficLight_Classification_Icon_ICON_ARROW_DIAG_RIGHT;
  static const Icon ICON_ARROW_STRAIGHT_AHEAD_RIGHT =
    TrafficLight_Classification_Icon_ICON_ARROW_STRAIGHT_AHEAD_RIGHT;
  static const Icon ICON_ARROW_LEFT_RIGHT =
    TrafficLight_Classification_Icon_ICON_ARROW_LEFT_RIGHT;
  static const Icon ICON_ARROW_DOWN =
    TrafficLight_Classification_Icon_ICON_ARROW_DOWN;
  static const Icon ICON_ARROW_DOWN_LEFT =
    TrafficLight_Classification_Icon_ICON_ARROW_DOWN_LEFT;
  static const Icon ICON_ARROW_DOWN_RIGHT =
    TrafficLight_Classification_Icon_ICON_ARROW_DOWN_RIGHT;
  static const Icon ICON_ARROW_CROSS =
    TrafficLight_Classification_Icon_ICON_ARROW_CROSS;
  static const Icon ICON_PEDESTRIAN =
    TrafficLight_Classification_Icon_ICON_PEDESTRIAN;
  static const Icon ICON_WALK =
    TrafficLight_Classification_Icon_ICON_WALK;
  static const Icon ICON_DONT_WALK =
    TrafficLight_Classification_Icon_ICON_DONT_WALK;
  static const Icon ICON_BICYCLE =
    TrafficLight_Classification_Icon_ICON_BICYCLE;
  static const Icon ICON_PEDESTRIAN_AND_BICYCLE =
    TrafficLight_Classification_Icon_ICON_PEDESTRIAN_AND_BICYCLE;
  static const Icon ICON_COUNTDOWN_SECONDS =
    TrafficLight_Classification_Icon_ICON_COUNTDOWN_SECONDS;
  static const Icon ICON_COUNTDOWN_PERCENT =
    TrafficLight_Classification_Icon_ICON_COUNTDOWN_PERCENT;
  static const Icon ICON_TRAM =
    TrafficLight_Classification_Icon_ICON_TRAM;
  static const Icon ICON_BUS =
    TrafficLight_Classification_Icon_ICON_BUS;
  static const Icon ICON_BUS_AND_TRAM =
    TrafficLight_Classification_Icon_ICON_BUS_AND_TRAM;
  static inline bool Icon_IsValid(int value) {
    return TrafficLight_Classification_Icon_IsValid(value);
  }
  static const Icon Icon_MIN =
    TrafficLight_Classification_Icon_Icon_MIN;
  static const Icon Icon_MAX =
    TrafficLight_Classification_Icon_Icon_MAX;
  static const int Icon_ARRAYSIZE =
    TrafficLight_Classification_Icon_Icon_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Icon_descriptor() {
    return TrafficLight_Classification_Icon_descriptor();
  }
  static inline const ::std::string& Icon_Name(Icon value) {
    return TrafficLight_Classification_Icon_Name(value);
  }
  static inline bool Icon_Parse(const ::std::string& name,
      Icon* value) {
    return TrafficLight_Classification_Icon_Parse(name, value);
  }

  typedef TrafficLight_Classification_Mode Mode;
  static const Mode MODE_UNKNOWN =
    TrafficLight_Classification_Mode_MODE_UNKNOWN;
  static const Mode MODE_OTHER =
    TrafficLight_Classification_Mode_MODE_OTHER;
  static const Mode MODE_OFF =
    TrafficLight_Classification_Mode_MODE_OFF;
  static const Mode MODE_CONSTANT =
    TrafficLight_Classification_Mode_MODE_CONSTANT;
  static const Mode MODE_FLASHING =
    TrafficLight_Classification_Mode_MODE_FLASHING;
  static const Mode MODE_COUNTING =
    TrafficLight_Classification_Mode_MODE_COUNTING;
  static inline bool Mode_IsValid(int value) {
    return TrafficLight_Classification_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    TrafficLight_Classification_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    TrafficLight_Classification_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    TrafficLight_Classification_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return TrafficLight_Classification_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return TrafficLight_Classification_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return TrafficLight_Classification_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.TrafficLight.Classification.Color color = 1;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  ::osi3::TrafficLight_Classification_Color color() const;
  void set_color(::osi3::TrafficLight_Classification_Color value);

  // optional .osi3.TrafficLight.Classification.Icon icon = 2;
  bool has_icon() const;
  void clear_icon();
  static const int kIconFieldNumber = 2;
  ::osi3::TrafficLight_Classification_Icon icon() const;
  void set_icon(::osi3::TrafficLight_Classification_Icon value);

  // optional .osi3.TrafficLight.Classification.Mode mode = 3;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::osi3::TrafficLight_Classification_Mode mode() const;
  void set_mode(::osi3::TrafficLight_Classification_Mode value);

  // optional double counter = 4;
  bool has_counter() const;
  void clear_counter();
  static const int kCounterFieldNumber = 4;
  double counter() const;
  void set_counter(double value);

  // repeated .osi3.Identifier assigned_lane_id = 5;
  int assigned_lane_id_size() const;
  void clear_assigned_lane_id();
  static const int kAssignedLaneIdFieldNumber = 5;
  const ::osi3::Identifier& assigned_lane_id(int index) const;
  ::osi3::Identifier* mutable_assigned_lane_id(int index);
  ::osi3::Identifier* add_assigned_lane_id();
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
      mutable_assigned_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
      assigned_lane_id() const;

  // @@protoc_insertion_point(class_scope:osi3.TrafficLight.Classification)
 private:
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_counter();
  inline void clear_has_counter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int color_;
  int icon_;
  double counter_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier > assigned_lane_id_;
  int mode_;
  friend void  protobuf_AddDesc_osi_5ftrafficlight_2eproto();
  friend void protobuf_AssignDesc_osi_5ftrafficlight_2eproto();
  friend void protobuf_ShutdownFile_osi_5ftrafficlight_2eproto();

  void InitAsDefaultInstance();
  static TrafficLight_Classification* default_instance_;
};
// -------------------------------------------------------------------

class TrafficLight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficLight) */ {
 public:
  TrafficLight();
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLight& default_instance();

  void Swap(TrafficLight* other);

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const { return New(NULL); }

  TrafficLight* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficLight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrafficLight_Classification Classification;

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::osi3::Identifier& id() const;
  ::osi3::Identifier* mutable_id();
  ::osi3::Identifier* release_id();
  void set_allocated_id(::osi3::Identifier* id);

  // optional .osi3.BaseStationary base = 2;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 2;
  const ::osi3::BaseStationary& base() const;
  ::osi3::BaseStationary* mutable_base();
  ::osi3::BaseStationary* release_base();
  void set_allocated_base(::osi3::BaseStationary* base);

  // optional .osi3.TrafficLight.Classification classification = 3;
  bool has_classification() const;
  void clear_classification();
  static const int kClassificationFieldNumber = 3;
  const ::osi3::TrafficLight_Classification& classification() const;
  ::osi3::TrafficLight_Classification* mutable_classification();
  ::osi3::TrafficLight_Classification* release_classification();
  void set_allocated_classification(::osi3::TrafficLight_Classification* classification);

  // @@protoc_insertion_point(class_scope:osi3.TrafficLight)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_classification();
  inline void clear_has_classification();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* id_;
  ::osi3::BaseStationary* base_;
  ::osi3::TrafficLight_Classification* classification_;
  friend void  protobuf_AddDesc_osi_5ftrafficlight_2eproto();
  friend void protobuf_AssignDesc_osi_5ftrafficlight_2eproto();
  friend void protobuf_ShutdownFile_osi_5ftrafficlight_2eproto();

  void InitAsDefaultInstance();
  static TrafficLight* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLight_Classification

// optional .osi3.TrafficLight.Classification.Color color = 1;
inline bool TrafficLight_Classification::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficLight_Classification::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficLight_Classification::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficLight_Classification::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::osi3::TrafficLight_Classification_Color TrafficLight_Classification::color() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.Classification.color)
  return static_cast< ::osi3::TrafficLight_Classification_Color >(color_);
}
inline void TrafficLight_Classification::set_color(::osi3::TrafficLight_Classification_Color value) {
  assert(::osi3::TrafficLight_Classification_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficLight.Classification.color)
}

// optional .osi3.TrafficLight.Classification.Icon icon = 2;
inline bool TrafficLight_Classification::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficLight_Classification::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficLight_Classification::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficLight_Classification::clear_icon() {
  icon_ = 0;
  clear_has_icon();
}
inline ::osi3::TrafficLight_Classification_Icon TrafficLight_Classification::icon() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.Classification.icon)
  return static_cast< ::osi3::TrafficLight_Classification_Icon >(icon_);
}
inline void TrafficLight_Classification::set_icon(::osi3::TrafficLight_Classification_Icon value) {
  assert(::osi3::TrafficLight_Classification_Icon_IsValid(value));
  set_has_icon();
  icon_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficLight.Classification.icon)
}

// optional .osi3.TrafficLight.Classification.Mode mode = 3;
inline bool TrafficLight_Classification::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficLight_Classification::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficLight_Classification::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficLight_Classification::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::osi3::TrafficLight_Classification_Mode TrafficLight_Classification::mode() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.Classification.mode)
  return static_cast< ::osi3::TrafficLight_Classification_Mode >(mode_);
}
inline void TrafficLight_Classification::set_mode(::osi3::TrafficLight_Classification_Mode value) {
  assert(::osi3::TrafficLight_Classification_Mode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficLight.Classification.mode)
}

// optional double counter = 4;
inline bool TrafficLight_Classification::has_counter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficLight_Classification::set_has_counter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrafficLight_Classification::clear_has_counter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrafficLight_Classification::clear_counter() {
  counter_ = 0;
  clear_has_counter();
}
inline double TrafficLight_Classification::counter() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.Classification.counter)
  return counter_;
}
inline void TrafficLight_Classification::set_counter(double value) {
  set_has_counter();
  counter_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficLight.Classification.counter)
}

// repeated .osi3.Identifier assigned_lane_id = 5;
inline int TrafficLight_Classification::assigned_lane_id_size() const {
  return assigned_lane_id_.size();
}
inline void TrafficLight_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
inline const ::osi3::Identifier& TrafficLight_Classification::assigned_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.Classification.assigned_lane_id)
  return assigned_lane_id_.Get(index);
}
inline ::osi3::Identifier* TrafficLight_Classification::mutable_assigned_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficLight.Classification.assigned_lane_id)
  return assigned_lane_id_.Mutable(index);
}
inline ::osi3::Identifier* TrafficLight_Classification::add_assigned_lane_id() {
  // @@protoc_insertion_point(field_add:osi3.TrafficLight.Classification.assigned_lane_id)
  return assigned_lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
TrafficLight_Classification::mutable_assigned_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.TrafficLight.Classification.assigned_lane_id)
  return &assigned_lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
TrafficLight_Classification::assigned_lane_id() const {
  // @@protoc_insertion_point(field_list:osi3.TrafficLight.Classification.assigned_lane_id)
  return assigned_lane_id_;
}

// -------------------------------------------------------------------

// TrafficLight

// optional .osi3.Identifier id = 1;
inline bool TrafficLight::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficLight::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficLight::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficLight::clear_id() {
  if (id_ != NULL) id_->::osi3::Identifier::Clear();
  clear_has_id();
}
inline const ::osi3::Identifier& TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::osi3::Identifier* TrafficLight::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.TrafficLight.id)
  return id_;
}
inline ::osi3::Identifier* TrafficLight::release_id() {
  // @@protoc_insertion_point(field_release:osi3.TrafficLight.id)
  clear_has_id();
  ::osi3::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline void TrafficLight::set_allocated_id(::osi3::Identifier* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficLight.id)
}

// optional .osi3.BaseStationary base = 2;
inline bool TrafficLight::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficLight::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficLight::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficLight::clear_base() {
  if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
  clear_has_base();
}
inline const ::osi3::BaseStationary& TrafficLight::base() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::osi3::BaseStationary* TrafficLight::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::osi3::BaseStationary;
  }
  // @@protoc_insertion_point(field_mutable:osi3.TrafficLight.base)
  return base_;
}
inline ::osi3::BaseStationary* TrafficLight::release_base() {
  // @@protoc_insertion_point(field_release:osi3.TrafficLight.base)
  clear_has_base();
  ::osi3::BaseStationary* temp = base_;
  base_ = NULL;
  return temp;
}
inline void TrafficLight::set_allocated_base(::osi3::BaseStationary* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficLight.base)
}

// optional .osi3.TrafficLight.Classification classification = 3;
inline bool TrafficLight::has_classification() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficLight::set_has_classification() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficLight::clear_has_classification() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficLight::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::TrafficLight_Classification::Clear();
  clear_has_classification();
}
inline const ::osi3::TrafficLight_Classification& TrafficLight::classification() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficLight.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
inline ::osi3::TrafficLight_Classification* TrafficLight::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::TrafficLight_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.TrafficLight.classification)
  return classification_;
}
inline ::osi3::TrafficLight_Classification* TrafficLight::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.TrafficLight.classification)
  clear_has_classification();
  ::osi3::TrafficLight_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
inline void TrafficLight::set_allocated_classification(::osi3::TrafficLight_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficLight.classification)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::osi3::TrafficLight_Classification_Color> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::TrafficLight_Classification_Color>() {
  return ::osi3::TrafficLight_Classification_Color_descriptor();
}
template <> struct is_proto_enum< ::osi3::TrafficLight_Classification_Icon> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::TrafficLight_Classification_Icon>() {
  return ::osi3::TrafficLight_Classification_Icon_descriptor();
}
template <> struct is_proto_enum< ::osi3::TrafficLight_Classification_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::TrafficLight_Classification_Mode>() {
  return ::osi3::TrafficLight_Classification_Mode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osi_5ftrafficlight_2eproto__INCLUDED
