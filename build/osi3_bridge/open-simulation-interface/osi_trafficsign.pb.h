// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_trafficsign.proto

#ifndef PROTOBUF_osi_5ftrafficsign_2eproto__INCLUDED
#define PROTOBUF_osi_5ftrafficsign_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)

namespace osi3 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_osi_5ftrafficsign_2eproto();
void protobuf_AssignDesc_osi_5ftrafficsign_2eproto();
void protobuf_ShutdownFile_osi_5ftrafficsign_2eproto();

class TrafficSign;
class TrafficSignValue;
class TrafficSign_MainSign;
class TrafficSign_MainSign_Classification;
class TrafficSign_SupplementarySign;
class TrafficSign_SupplementarySign_Classification;

enum TrafficSignValue_Unit {
  TrafficSignValue_Unit_UNIT_UNKNOWN = 0,
  TrafficSignValue_Unit_UNIT_OTHER = 1,
  TrafficSignValue_Unit_UNIT_NO_UNIT = 2,
  TrafficSignValue_Unit_UNIT_KILOMETER_PER_HOUR = 3,
  TrafficSignValue_Unit_UNIT_MILE_PER_HOUR = 4,
  TrafficSignValue_Unit_UNIT_METER = 5,
  TrafficSignValue_Unit_UNIT_KILOMETER = 6,
  TrafficSignValue_Unit_UNIT_FEET = 7,
  TrafficSignValue_Unit_UNIT_MILE = 8,
  TrafficSignValue_Unit_UNIT_METRIC_TON = 9,
  TrafficSignValue_Unit_UNIT_LONG_TON = 10,
  TrafficSignValue_Unit_UNIT_SHORT_TON = 11,
  TrafficSignValue_Unit_UNIT_MINUTES = 12,
  TrafficSignValue_Unit_UNIT_DAY = 13,
  TrafficSignValue_Unit_UNIT_PERCENTAGE = 14
};
bool TrafficSignValue_Unit_IsValid(int value);
const TrafficSignValue_Unit TrafficSignValue_Unit_Unit_MIN = TrafficSignValue_Unit_UNIT_UNKNOWN;
const TrafficSignValue_Unit TrafficSignValue_Unit_Unit_MAX = TrafficSignValue_Unit_UNIT_PERCENTAGE;
const int TrafficSignValue_Unit_Unit_ARRAYSIZE = TrafficSignValue_Unit_Unit_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignValue_Unit_descriptor();
inline const ::std::string& TrafficSignValue_Unit_Name(TrafficSignValue_Unit value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignValue_Unit_descriptor(), value);
}
inline bool TrafficSignValue_Unit_Parse(
    const ::std::string& name, TrafficSignValue_Unit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignValue_Unit>(
    TrafficSignValue_Unit_descriptor(), name, value);
}
enum TrafficSign_MainSign_Classification_Type {
  TrafficSign_MainSign_Classification_Type_TYPE_UNKNOWN = 0,
  TrafficSign_MainSign_Classification_Type_TYPE_OTHER = 1,
  TrafficSign_MainSign_Classification_Type_TYPE_DANGER_SPOT = 2,
  TrafficSign_MainSign_Classification_Type_TYPE_RIGHT_BEFORE_LEFT_NEXT_INTERSECTION = 3,
  TrafficSign_MainSign_Classification_Type_TYPE_TURN_LEFT = 4,
  TrafficSign_MainSign_Classification_Type_TYPE_TURN_RIGHT = 5,
  TrafficSign_MainSign_Classification_Type_TYPE_DOUBLE_TURN_LEFT = 6,
  TrafficSign_MainSign_Classification_Type_TYPE_DOUBLE_TURN_RIGHT = 7,
  TrafficSign_MainSign_Classification_Type_TYPE_HILL_DOWNWARDS = 8,
  TrafficSign_MainSign_Classification_Type_TYPE_HILL_UPWARDS = 9,
  TrafficSign_MainSign_Classification_Type_TYPE_WARNING_ROAD_NARROWING = 10,
  TrafficSign_MainSign_Classification_Type_TYPE_WARNING_ROAD_NARROWING_LEFT = 11,
  TrafficSign_MainSign_Classification_Type_TYPE_WARNING_ROAD_NARROWING_RIGHT = 12,
  TrafficSign_MainSign_Classification_Type_TYPE_ROAD_WORKS = 13,
  TrafficSign_MainSign_Classification_Type_TYPE_WARNING_TWO_WAY_TRAFFIC = 14,
  TrafficSign_MainSign_Classification_Type_TYPE_ATTENTION_TRAFFIC_LIGHT = 15,
  TrafficSign_MainSign_Classification_Type_TYPE_GIVE_WAY = 16,
  TrafficSign_MainSign_Classification_Type_TYPE_STOP = 17,
  TrafficSign_MainSign_Classification_Type_TYPE_PRIORITY_TO_OPPOSITE_DIRECTION = 18,
  TrafficSign_MainSign_Classification_Type_TYPE_PRIORITY_TO_OPPOSITE_DIRECTION_UPSIDE_DOWN = 19,
  TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_LEFT_TURN = 20,
  TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_RIGHT_TURN = 21,
  TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_STRAIGHT_AHEAD = 22,
  TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_LEFT_WAY = 23,
  TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_RIGHT_WAY = 24,
  TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_LEFT_TURN_AND_STRAIGHT_AHEAD = 25,
  TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT_AHEAD = 26,
  TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN = 27,
  TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_LEFT_TURN_RIGHT_TURN_AND_STRAIGHT_AHEAD = 28,
  TrafficSign_MainSign_Classification_Type_TYPE_ROUNDABOUT = 29,
  TrafficSign_MainSign_Classification_Type_TYPE_ONEWAY_LEFT = 30,
  TrafficSign_MainSign_Classification_Type_TYPE_ONEWAY_RIGHT = 31,
  TrafficSign_MainSign_Classification_Type_TYPE_PASS_LEFT = 32,
  TrafficSign_MainSign_Classification_Type_TYPE_PASS_RIGHT = 33,
  TrafficSign_MainSign_Classification_Type_TYPE_BUS_LANE = 34,
  TrafficSign_MainSign_Classification_Type_TYPE_BUS_LANE_BEGIN = 35,
  TrafficSign_MainSign_Classification_Type_TYPE_BUS_LANE_END = 36,
  TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_ALL = 37,
  TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_MOTOR_VEHICLES = 38,
  TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_TRUCKS = 39,
  TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_BICYCLES = 40,
  TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_MOTOR_AND_BIKES = 41,
  TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_PEDESTRIANS = 42,
  TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_MOTOR_VEHICLES_BIKES = 43,
  TrafficSign_MainSign_Classification_Type_TYPE_DO_NOT_ENTER = 44,
  TrafficSign_MainSign_Classification_Type_TYPE_ENVIRONMENTAL_ZONE_BEGIN = 45,
  TrafficSign_MainSign_Classification_Type_TYPE_ENVIRONMENTAL_ZONE_END = 46,
  TrafficSign_MainSign_Classification_Type_TYPE_NO_U_TURN_LEFT = 47,
  TrafficSign_MainSign_Classification_Type_TYPE_NO_U_TURN_RIGHT = 48,
  TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_U_TURN_LEFT = 49,
  TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_U_TURN_RIGHT = 50,
  TrafficSign_MainSign_Classification_Type_TYPE_MINIMUM_DISTANCE_FOR_TRUCKS = 51,
  TrafficSign_MainSign_Classification_Type_TYPE_SPEED_LIMIT_BEGIN = 52,
  TrafficSign_MainSign_Classification_Type_TYPE_SPEED_LIMIT_ZONE_BEGIN = 53,
  TrafficSign_MainSign_Classification_Type_TYPE_SPEED_LIMIT_ZONE_END = 54,
  TrafficSign_MainSign_Classification_Type_TYPE_MINIMUM_SPEED_BEGIN = 55,
  TrafficSign_MainSign_Classification_Type_TYPE_OVERTAKING_BAN_BEGIN = 56,
  TrafficSign_MainSign_Classification_Type_TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN = 57,
  TrafficSign_MainSign_Classification_Type_TYPE_SPEED_LIMIT_END = 58,
  TrafficSign_MainSign_Classification_Type_TYPE_MINIMUM_SPEED_END = 59,
  TrafficSign_MainSign_Classification_Type_TYPE_OVERTAKING_BAN_END = 60,
  TrafficSign_MainSign_Classification_Type_TYPE_OVERTAKING_BAN_FOR_TRUCKS_END = 61,
  TrafficSign_MainSign_Classification_Type_TYPE_ALL_RESTRICTIONS_END = 62,
  TrafficSign_MainSign_Classification_Type_TYPE_NO_STOPPING = 63,
  TrafficSign_MainSign_Classification_Type_TYPE_NO_PARKING = 64,
  TrafficSign_MainSign_Classification_Type_TYPE_NO_PARKING_ZONE_BEGIN = 65,
  TrafficSign_MainSign_Classification_Type_TYPE_NO_PARKING_ZONE_END = 66,
  TrafficSign_MainSign_Classification_Type_TYPE_RIGHT_OF_WAY_NEXT_INTERSECTION = 67,
  TrafficSign_MainSign_Classification_Type_TYPE_RIGHT_OF_WAY_BEGIN = 68,
  TrafficSign_MainSign_Classification_Type_TYPE_RIGHT_OF_WAY_END = 69,
  TrafficSign_MainSign_Classification_Type_TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION = 70,
  TrafficSign_MainSign_Classification_Type_TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION_UPSIDE_DOWN = 71,
  TrafficSign_MainSign_Classification_Type_TYPE_TOWN_BEGIN = 72,
  TrafficSign_MainSign_Classification_Type_TYPE_TOWN_END = 73,
  TrafficSign_MainSign_Classification_Type_TYPE_CAR_PARKING = 74,
  TrafficSign_MainSign_Classification_Type_TYPE_CAR_PARKING_ZONE_BEGIN = 75,
  TrafficSign_MainSign_Classification_Type_TYPE_CAR_PARKING_ZONE_END = 76,
  TrafficSign_MainSign_Classification_Type_TYPE_TRAFFIC_CALMED_DISTRICT_BEGIN = 77,
  TrafficSign_MainSign_Classification_Type_TYPE_TRAFFIC_CALMED_DISTRICT_END = 78,
  TrafficSign_MainSign_Classification_Type_TYPE_TUNNEL = 79,
  TrafficSign_MainSign_Classification_Type_TYPE_EMERGENCY_STOPPING_LEFT = 80,
  TrafficSign_MainSign_Classification_Type_TYPE_EMERGENCY_STOPPING_RIGHT = 81,
  TrafficSign_MainSign_Classification_Type_TYPE_HIGHWAY_BEGIN = 82,
  TrafficSign_MainSign_Classification_Type_TYPE_HIGHWAY_END = 83,
  TrafficSign_MainSign_Classification_Type_TYPE_EXPRESSWAY_BEGIN = 84,
  TrafficSign_MainSign_Classification_Type_TYPE_EXPRESSWAY_END = 85,
  TrafficSign_MainSign_Classification_Type_TYPE_HIGHWAY_EXIT = 86,
  TrafficSign_MainSign_Classification_Type_TYPE_PEDESTRIAN_CROSSING_INFO = 87,
  TrafficSign_MainSign_Classification_Type_TYPE_POLE_EXIT = 88,
  TrafficSign_MainSign_Classification_Type_TYPE_ANNOUNCE_LEFT_LANE_END = 89,
  TrafficSign_MainSign_Classification_Type_TYPE_ANNOUNCE_RIGHT_LANE_END = 90,
  TrafficSign_MainSign_Classification_Type_TYPE_POLE_WARNING = 91,
  TrafficSign_MainSign_Classification_Type_TYPE_TRAFFIC_LIGHT_GREEN_ARROW = 92
};
bool TrafficSign_MainSign_Classification_Type_IsValid(int value);
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification_Type_Type_MIN = TrafficSign_MainSign_Classification_Type_TYPE_UNKNOWN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification_Type_Type_MAX = TrafficSign_MainSign_Classification_Type_TYPE_TRAFFIC_LIGHT_GREEN_ARROW;
const int TrafficSign_MainSign_Classification_Type_Type_ARRAYSIZE = TrafficSign_MainSign_Classification_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSign_MainSign_Classification_Type_descriptor();
inline const ::std::string& TrafficSign_MainSign_Classification_Type_Name(TrafficSign_MainSign_Classification_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSign_MainSign_Classification_Type_descriptor(), value);
}
inline bool TrafficSign_MainSign_Classification_Type_Parse(
    const ::std::string& name, TrafficSign_MainSign_Classification_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSign_MainSign_Classification_Type>(
    TrafficSign_MainSign_Classification_Type_descriptor(), name, value);
}
enum TrafficSign_MainSign_Classification_DirectionScope {
  TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_UNKNOWN = 0,
  TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_OTHER = 1,
  TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_NO_DIRECTION = 2,
  TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_LEFT = 3,
  TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_RIGHT = 4,
  TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_LEFT_RIGHT = 5
};
bool TrafficSign_MainSign_Classification_DirectionScope_IsValid(int value);
const TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification_DirectionScope_DirectionScope_MIN = TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_UNKNOWN;
const TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification_DirectionScope_DirectionScope_MAX = TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_LEFT_RIGHT;
const int TrafficSign_MainSign_Classification_DirectionScope_DirectionScope_ARRAYSIZE = TrafficSign_MainSign_Classification_DirectionScope_DirectionScope_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSign_MainSign_Classification_DirectionScope_descriptor();
inline const ::std::string& TrafficSign_MainSign_Classification_DirectionScope_Name(TrafficSign_MainSign_Classification_DirectionScope value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSign_MainSign_Classification_DirectionScope_descriptor(), value);
}
inline bool TrafficSign_MainSign_Classification_DirectionScope_Parse(
    const ::std::string& name, TrafficSign_MainSign_Classification_DirectionScope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSign_MainSign_Classification_DirectionScope>(
    TrafficSign_MainSign_Classification_DirectionScope_descriptor(), name, value);
}
enum TrafficSign_SupplementarySign_Classification_Type {
  TrafficSign_SupplementarySign_Classification_Type_TYPE_UNKNOWN = 0,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_OTHER = 1,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_NO_SIGN = 2,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_VALID_FOR_DISTANCE = 3,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_VALID_IN_DISTANCE = 4,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_TIME_RANGE = 5,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_WEIGHT = 6,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_RAIN = 7,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_FOG = 8,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_SNOW = 9,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_SNOW_RAIN = 10,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_LEFT_ARROW = 11,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_RIGHT_ARROW = 12,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_LEFT_BEND_ARROW = 13,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_RIGHT_BEND_ARROW = 14,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_TRUCK = 15,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_TRACTORS_MAY_BE_PASSED = 16,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_HAZARDOUS = 17,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_TRAILER = 18,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_NIGHT = 19,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_ZONE = 20,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_STOP_4_WAY = 21,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_MOTORCYCLE = 22,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_MOTORCYCLE_ALLOWED = 23,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_CAR = 24,
  TrafficSign_SupplementarySign_Classification_Type_TYPE_STOP_IN = 25
};
bool TrafficSign_SupplementarySign_Classification_Type_IsValid(int value);
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification_Type_Type_MIN = TrafficSign_SupplementarySign_Classification_Type_TYPE_UNKNOWN;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification_Type_Type_MAX = TrafficSign_SupplementarySign_Classification_Type_TYPE_STOP_IN;
const int TrafficSign_SupplementarySign_Classification_Type_Type_ARRAYSIZE = TrafficSign_SupplementarySign_Classification_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSign_SupplementarySign_Classification_Type_descriptor();
inline const ::std::string& TrafficSign_SupplementarySign_Classification_Type_Name(TrafficSign_SupplementarySign_Classification_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSign_SupplementarySign_Classification_Type_descriptor(), value);
}
inline bool TrafficSign_SupplementarySign_Classification_Type_Parse(
    const ::std::string& name, TrafficSign_SupplementarySign_Classification_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSign_SupplementarySign_Classification_Type>(
    TrafficSign_SupplementarySign_Classification_Type_descriptor(), name, value);
}
enum TrafficSign_Variability {
  TrafficSign_Variability_VARIABILITY_UNKNOWN = 0,
  TrafficSign_Variability_VARIABILITY_OTHER = 1,
  TrafficSign_Variability_VARIABILITY_FIXED = 2,
  TrafficSign_Variability_VARIABILITY_VARIABLE = 3
};
bool TrafficSign_Variability_IsValid(int value);
const TrafficSign_Variability TrafficSign_Variability_Variability_MIN = TrafficSign_Variability_VARIABILITY_UNKNOWN;
const TrafficSign_Variability TrafficSign_Variability_Variability_MAX = TrafficSign_Variability_VARIABILITY_VARIABLE;
const int TrafficSign_Variability_Variability_ARRAYSIZE = TrafficSign_Variability_Variability_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSign_Variability_descriptor();
inline const ::std::string& TrafficSign_Variability_Name(TrafficSign_Variability value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSign_Variability_descriptor(), value);
}
inline bool TrafficSign_Variability_Parse(
    const ::std::string& name, TrafficSign_Variability* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSign_Variability>(
    TrafficSign_Variability_descriptor(), name, value);
}
// ===================================================================

class TrafficSignValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficSignValue) */ {
 public:
  TrafficSignValue();
  virtual ~TrafficSignValue();

  TrafficSignValue(const TrafficSignValue& from);

  inline TrafficSignValue& operator=(const TrafficSignValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignValue& default_instance();

  void Swap(TrafficSignValue* other);

  // implements Message ----------------------------------------------

  inline TrafficSignValue* New() const { return New(NULL); }

  TrafficSignValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficSignValue& from);
  void MergeFrom(const TrafficSignValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficSignValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrafficSignValue_Unit Unit;
  static const Unit UNIT_UNKNOWN =
    TrafficSignValue_Unit_UNIT_UNKNOWN;
  static const Unit UNIT_OTHER =
    TrafficSignValue_Unit_UNIT_OTHER;
  static const Unit UNIT_NO_UNIT =
    TrafficSignValue_Unit_UNIT_NO_UNIT;
  static const Unit UNIT_KILOMETER_PER_HOUR =
    TrafficSignValue_Unit_UNIT_KILOMETER_PER_HOUR;
  static const Unit UNIT_MILE_PER_HOUR =
    TrafficSignValue_Unit_UNIT_MILE_PER_HOUR;
  static const Unit UNIT_METER =
    TrafficSignValue_Unit_UNIT_METER;
  static const Unit UNIT_KILOMETER =
    TrafficSignValue_Unit_UNIT_KILOMETER;
  static const Unit UNIT_FEET =
    TrafficSignValue_Unit_UNIT_FEET;
  static const Unit UNIT_MILE =
    TrafficSignValue_Unit_UNIT_MILE;
  static const Unit UNIT_METRIC_TON =
    TrafficSignValue_Unit_UNIT_METRIC_TON;
  static const Unit UNIT_LONG_TON =
    TrafficSignValue_Unit_UNIT_LONG_TON;
  static const Unit UNIT_SHORT_TON =
    TrafficSignValue_Unit_UNIT_SHORT_TON;
  static const Unit UNIT_MINUTES =
    TrafficSignValue_Unit_UNIT_MINUTES;
  static const Unit UNIT_DAY =
    TrafficSignValue_Unit_UNIT_DAY;
  static const Unit UNIT_PERCENTAGE =
    TrafficSignValue_Unit_UNIT_PERCENTAGE;
  static inline bool Unit_IsValid(int value) {
    return TrafficSignValue_Unit_IsValid(value);
  }
  static const Unit Unit_MIN =
    TrafficSignValue_Unit_Unit_MIN;
  static const Unit Unit_MAX =
    TrafficSignValue_Unit_Unit_MAX;
  static const int Unit_ARRAYSIZE =
    TrafficSignValue_Unit_Unit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Unit_descriptor() {
    return TrafficSignValue_Unit_descriptor();
  }
  static inline const ::std::string& Unit_Name(Unit value) {
    return TrafficSignValue_Unit_Name(value);
  }
  static inline bool Unit_Parse(const ::std::string& name,
      Unit* value) {
    return TrafficSignValue_Unit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value() const;
  void set_value(double value);

  // optional .osi3.TrafficSignValue.Unit value_unit = 2;
  bool has_value_unit() const;
  void clear_value_unit();
  static const int kValueUnitFieldNumber = 2;
  ::osi3::TrafficSignValue_Unit value_unit() const;
  void set_value_unit(::osi3::TrafficSignValue_Unit value);

  // @@protoc_insertion_point(class_scope:osi3.TrafficSignValue)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_value_unit();
  inline void clear_has_value_unit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double value_;
  int value_unit_;
  friend void  protobuf_AddDesc_osi_5ftrafficsign_2eproto();
  friend void protobuf_AssignDesc_osi_5ftrafficsign_2eproto();
  friend void protobuf_ShutdownFile_osi_5ftrafficsign_2eproto();

  void InitAsDefaultInstance();
  static TrafficSignValue* default_instance_;
};
// -------------------------------------------------------------------

class TrafficSign_MainSign_Classification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficSign.MainSign.Classification) */ {
 public:
  TrafficSign_MainSign_Classification();
  virtual ~TrafficSign_MainSign_Classification();

  TrafficSign_MainSign_Classification(const TrafficSign_MainSign_Classification& from);

  inline TrafficSign_MainSign_Classification& operator=(const TrafficSign_MainSign_Classification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSign_MainSign_Classification& default_instance();

  void Swap(TrafficSign_MainSign_Classification* other);

  // implements Message ----------------------------------------------

  inline TrafficSign_MainSign_Classification* New() const { return New(NULL); }

  TrafficSign_MainSign_Classification* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficSign_MainSign_Classification& from);
  void MergeFrom(const TrafficSign_MainSign_Classification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficSign_MainSign_Classification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrafficSign_MainSign_Classification_Type Type;
  static const Type TYPE_UNKNOWN =
    TrafficSign_MainSign_Classification_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    TrafficSign_MainSign_Classification_Type_TYPE_OTHER;
  static const Type TYPE_DANGER_SPOT =
    TrafficSign_MainSign_Classification_Type_TYPE_DANGER_SPOT;
  static const Type TYPE_RIGHT_BEFORE_LEFT_NEXT_INTERSECTION =
    TrafficSign_MainSign_Classification_Type_TYPE_RIGHT_BEFORE_LEFT_NEXT_INTERSECTION;
  static const Type TYPE_TURN_LEFT =
    TrafficSign_MainSign_Classification_Type_TYPE_TURN_LEFT;
  static const Type TYPE_TURN_RIGHT =
    TrafficSign_MainSign_Classification_Type_TYPE_TURN_RIGHT;
  static const Type TYPE_DOUBLE_TURN_LEFT =
    TrafficSign_MainSign_Classification_Type_TYPE_DOUBLE_TURN_LEFT;
  static const Type TYPE_DOUBLE_TURN_RIGHT =
    TrafficSign_MainSign_Classification_Type_TYPE_DOUBLE_TURN_RIGHT;
  static const Type TYPE_HILL_DOWNWARDS =
    TrafficSign_MainSign_Classification_Type_TYPE_HILL_DOWNWARDS;
  static const Type TYPE_HILL_UPWARDS =
    TrafficSign_MainSign_Classification_Type_TYPE_HILL_UPWARDS;
  static const Type TYPE_WARNING_ROAD_NARROWING =
    TrafficSign_MainSign_Classification_Type_TYPE_WARNING_ROAD_NARROWING;
  static const Type TYPE_WARNING_ROAD_NARROWING_LEFT =
    TrafficSign_MainSign_Classification_Type_TYPE_WARNING_ROAD_NARROWING_LEFT;
  static const Type TYPE_WARNING_ROAD_NARROWING_RIGHT =
    TrafficSign_MainSign_Classification_Type_TYPE_WARNING_ROAD_NARROWING_RIGHT;
  static const Type TYPE_ROAD_WORKS =
    TrafficSign_MainSign_Classification_Type_TYPE_ROAD_WORKS;
  static const Type TYPE_WARNING_TWO_WAY_TRAFFIC =
    TrafficSign_MainSign_Classification_Type_TYPE_WARNING_TWO_WAY_TRAFFIC;
  static const Type TYPE_ATTENTION_TRAFFIC_LIGHT =
    TrafficSign_MainSign_Classification_Type_TYPE_ATTENTION_TRAFFIC_LIGHT;
  static const Type TYPE_GIVE_WAY =
    TrafficSign_MainSign_Classification_Type_TYPE_GIVE_WAY;
  static const Type TYPE_STOP =
    TrafficSign_MainSign_Classification_Type_TYPE_STOP;
  static const Type TYPE_PRIORITY_TO_OPPOSITE_DIRECTION =
    TrafficSign_MainSign_Classification_Type_TYPE_PRIORITY_TO_OPPOSITE_DIRECTION;
  static const Type TYPE_PRIORITY_TO_OPPOSITE_DIRECTION_UPSIDE_DOWN =
    TrafficSign_MainSign_Classification_Type_TYPE_PRIORITY_TO_OPPOSITE_DIRECTION_UPSIDE_DOWN;
  static const Type TYPE_PRESCRIBED_LEFT_TURN =
    TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_LEFT_TURN;
  static const Type TYPE_PRESCRIBED_RIGHT_TURN =
    TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_RIGHT_TURN;
  static const Type TYPE_PRESCRIBED_STRAIGHT_AHEAD =
    TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_STRAIGHT_AHEAD;
  static const Type TYPE_PRESCRIBED_LEFT_WAY =
    TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_LEFT_WAY;
  static const Type TYPE_PRESCRIBED_RIGHT_WAY =
    TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_RIGHT_WAY;
  static const Type TYPE_PRESCRIBED_LEFT_TURN_AND_STRAIGHT_AHEAD =
    TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_LEFT_TURN_AND_STRAIGHT_AHEAD;
  static const Type TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT_AHEAD =
    TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT_AHEAD;
  static const Type TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN =
    TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN;
  static const Type TYPE_PRESCRIBED_LEFT_TURN_RIGHT_TURN_AND_STRAIGHT_AHEAD =
    TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_LEFT_TURN_RIGHT_TURN_AND_STRAIGHT_AHEAD;
  static const Type TYPE_ROUNDABOUT =
    TrafficSign_MainSign_Classification_Type_TYPE_ROUNDABOUT;
  static const Type TYPE_ONEWAY_LEFT =
    TrafficSign_MainSign_Classification_Type_TYPE_ONEWAY_LEFT;
  static const Type TYPE_ONEWAY_RIGHT =
    TrafficSign_MainSign_Classification_Type_TYPE_ONEWAY_RIGHT;
  static const Type TYPE_PASS_LEFT =
    TrafficSign_MainSign_Classification_Type_TYPE_PASS_LEFT;
  static const Type TYPE_PASS_RIGHT =
    TrafficSign_MainSign_Classification_Type_TYPE_PASS_RIGHT;
  static const Type TYPE_BUS_LANE =
    TrafficSign_MainSign_Classification_Type_TYPE_BUS_LANE;
  static const Type TYPE_BUS_LANE_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_BUS_LANE_BEGIN;
  static const Type TYPE_BUS_LANE_END =
    TrafficSign_MainSign_Classification_Type_TYPE_BUS_LANE_END;
  static const Type TYPE_PROHIBITED_FOR_ALL =
    TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_ALL;
  static const Type TYPE_PROHIBITED_FOR_MOTOR_VEHICLES =
    TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_MOTOR_VEHICLES;
  static const Type TYPE_PROHIBITED_FOR_TRUCKS =
    TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_TRUCKS;
  static const Type TYPE_PROHIBITED_FOR_BICYCLES =
    TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_BICYCLES;
  static const Type TYPE_PROHIBITED_FOR_MOTOR_AND_BIKES =
    TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_MOTOR_AND_BIKES;
  static const Type TYPE_PROHIBITED_FOR_PEDESTRIANS =
    TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_PEDESTRIANS;
  static const Type TYPE_PROHIBITED_FOR_MOTOR_VEHICLES_BIKES =
    TrafficSign_MainSign_Classification_Type_TYPE_PROHIBITED_FOR_MOTOR_VEHICLES_BIKES;
  static const Type TYPE_DO_NOT_ENTER =
    TrafficSign_MainSign_Classification_Type_TYPE_DO_NOT_ENTER;
  static const Type TYPE_ENVIRONMENTAL_ZONE_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_ENVIRONMENTAL_ZONE_BEGIN;
  static const Type TYPE_ENVIRONMENTAL_ZONE_END =
    TrafficSign_MainSign_Classification_Type_TYPE_ENVIRONMENTAL_ZONE_END;
  static const Type TYPE_NO_U_TURN_LEFT =
    TrafficSign_MainSign_Classification_Type_TYPE_NO_U_TURN_LEFT;
  static const Type TYPE_NO_U_TURN_RIGHT =
    TrafficSign_MainSign_Classification_Type_TYPE_NO_U_TURN_RIGHT;
  static const Type TYPE_PRESCRIBED_U_TURN_LEFT =
    TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_U_TURN_LEFT;
  static const Type TYPE_PRESCRIBED_U_TURN_RIGHT =
    TrafficSign_MainSign_Classification_Type_TYPE_PRESCRIBED_U_TURN_RIGHT;
  static const Type TYPE_MINIMUM_DISTANCE_FOR_TRUCKS =
    TrafficSign_MainSign_Classification_Type_TYPE_MINIMUM_DISTANCE_FOR_TRUCKS;
  static const Type TYPE_SPEED_LIMIT_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_SPEED_LIMIT_BEGIN;
  static const Type TYPE_SPEED_LIMIT_ZONE_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_SPEED_LIMIT_ZONE_BEGIN;
  static const Type TYPE_SPEED_LIMIT_ZONE_END =
    TrafficSign_MainSign_Classification_Type_TYPE_SPEED_LIMIT_ZONE_END;
  static const Type TYPE_MINIMUM_SPEED_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_MINIMUM_SPEED_BEGIN;
  static const Type TYPE_OVERTAKING_BAN_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_OVERTAKING_BAN_BEGIN;
  static const Type TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN;
  static const Type TYPE_SPEED_LIMIT_END =
    TrafficSign_MainSign_Classification_Type_TYPE_SPEED_LIMIT_END;
  static const Type TYPE_MINIMUM_SPEED_END =
    TrafficSign_MainSign_Classification_Type_TYPE_MINIMUM_SPEED_END;
  static const Type TYPE_OVERTAKING_BAN_END =
    TrafficSign_MainSign_Classification_Type_TYPE_OVERTAKING_BAN_END;
  static const Type TYPE_OVERTAKING_BAN_FOR_TRUCKS_END =
    TrafficSign_MainSign_Classification_Type_TYPE_OVERTAKING_BAN_FOR_TRUCKS_END;
  static const Type TYPE_ALL_RESTRICTIONS_END =
    TrafficSign_MainSign_Classification_Type_TYPE_ALL_RESTRICTIONS_END;
  static const Type TYPE_NO_STOPPING =
    TrafficSign_MainSign_Classification_Type_TYPE_NO_STOPPING;
  static const Type TYPE_NO_PARKING =
    TrafficSign_MainSign_Classification_Type_TYPE_NO_PARKING;
  static const Type TYPE_NO_PARKING_ZONE_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_NO_PARKING_ZONE_BEGIN;
  static const Type TYPE_NO_PARKING_ZONE_END =
    TrafficSign_MainSign_Classification_Type_TYPE_NO_PARKING_ZONE_END;
  static const Type TYPE_RIGHT_OF_WAY_NEXT_INTERSECTION =
    TrafficSign_MainSign_Classification_Type_TYPE_RIGHT_OF_WAY_NEXT_INTERSECTION;
  static const Type TYPE_RIGHT_OF_WAY_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_RIGHT_OF_WAY_BEGIN;
  static const Type TYPE_RIGHT_OF_WAY_END =
    TrafficSign_MainSign_Classification_Type_TYPE_RIGHT_OF_WAY_END;
  static const Type TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION =
    TrafficSign_MainSign_Classification_Type_TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION;
  static const Type TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION_UPSIDE_DOWN =
    TrafficSign_MainSign_Classification_Type_TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION_UPSIDE_DOWN;
  static const Type TYPE_TOWN_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_TOWN_BEGIN;
  static const Type TYPE_TOWN_END =
    TrafficSign_MainSign_Classification_Type_TYPE_TOWN_END;
  static const Type TYPE_CAR_PARKING =
    TrafficSign_MainSign_Classification_Type_TYPE_CAR_PARKING;
  static const Type TYPE_CAR_PARKING_ZONE_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_CAR_PARKING_ZONE_BEGIN;
  static const Type TYPE_CAR_PARKING_ZONE_END =
    TrafficSign_MainSign_Classification_Type_TYPE_CAR_PARKING_ZONE_END;
  static const Type TYPE_TRAFFIC_CALMED_DISTRICT_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_TRAFFIC_CALMED_DISTRICT_BEGIN;
  static const Type TYPE_TRAFFIC_CALMED_DISTRICT_END =
    TrafficSign_MainSign_Classification_Type_TYPE_TRAFFIC_CALMED_DISTRICT_END;
  static const Type TYPE_TUNNEL =
    TrafficSign_MainSign_Classification_Type_TYPE_TUNNEL;
  static const Type TYPE_EMERGENCY_STOPPING_LEFT =
    TrafficSign_MainSign_Classification_Type_TYPE_EMERGENCY_STOPPING_LEFT;
  static const Type TYPE_EMERGENCY_STOPPING_RIGHT =
    TrafficSign_MainSign_Classification_Type_TYPE_EMERGENCY_STOPPING_RIGHT;
  static const Type TYPE_HIGHWAY_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_HIGHWAY_BEGIN;
  static const Type TYPE_HIGHWAY_END =
    TrafficSign_MainSign_Classification_Type_TYPE_HIGHWAY_END;
  static const Type TYPE_EXPRESSWAY_BEGIN =
    TrafficSign_MainSign_Classification_Type_TYPE_EXPRESSWAY_BEGIN;
  static const Type TYPE_EXPRESSWAY_END =
    TrafficSign_MainSign_Classification_Type_TYPE_EXPRESSWAY_END;
  static const Type TYPE_HIGHWAY_EXIT =
    TrafficSign_MainSign_Classification_Type_TYPE_HIGHWAY_EXIT;
  static const Type TYPE_PEDESTRIAN_CROSSING_INFO =
    TrafficSign_MainSign_Classification_Type_TYPE_PEDESTRIAN_CROSSING_INFO;
  static const Type TYPE_POLE_EXIT =
    TrafficSign_MainSign_Classification_Type_TYPE_POLE_EXIT;
  static const Type TYPE_ANNOUNCE_LEFT_LANE_END =
    TrafficSign_MainSign_Classification_Type_TYPE_ANNOUNCE_LEFT_LANE_END;
  static const Type TYPE_ANNOUNCE_RIGHT_LANE_END =
    TrafficSign_MainSign_Classification_Type_TYPE_ANNOUNCE_RIGHT_LANE_END;
  static const Type TYPE_POLE_WARNING =
    TrafficSign_MainSign_Classification_Type_TYPE_POLE_WARNING;
  static const Type TYPE_TRAFFIC_LIGHT_GREEN_ARROW =
    TrafficSign_MainSign_Classification_Type_TYPE_TRAFFIC_LIGHT_GREEN_ARROW;
  static inline bool Type_IsValid(int value) {
    return TrafficSign_MainSign_Classification_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TrafficSign_MainSign_Classification_Type_Type_MIN;
  static const Type Type_MAX =
    TrafficSign_MainSign_Classification_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TrafficSign_MainSign_Classification_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TrafficSign_MainSign_Classification_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TrafficSign_MainSign_Classification_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TrafficSign_MainSign_Classification_Type_Parse(name, value);
  }

  typedef TrafficSign_MainSign_Classification_DirectionScope DirectionScope;
  static const DirectionScope DIRECTION_SCOPE_UNKNOWN =
    TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_UNKNOWN;
  static const DirectionScope DIRECTION_SCOPE_OTHER =
    TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_OTHER;
  static const DirectionScope DIRECTION_SCOPE_NO_DIRECTION =
    TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_NO_DIRECTION;
  static const DirectionScope DIRECTION_SCOPE_LEFT =
    TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_LEFT;
  static const DirectionScope DIRECTION_SCOPE_RIGHT =
    TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_RIGHT;
  static const DirectionScope DIRECTION_SCOPE_LEFT_RIGHT =
    TrafficSign_MainSign_Classification_DirectionScope_DIRECTION_SCOPE_LEFT_RIGHT;
  static inline bool DirectionScope_IsValid(int value) {
    return TrafficSign_MainSign_Classification_DirectionScope_IsValid(value);
  }
  static const DirectionScope DirectionScope_MIN =
    TrafficSign_MainSign_Classification_DirectionScope_DirectionScope_MIN;
  static const DirectionScope DirectionScope_MAX =
    TrafficSign_MainSign_Classification_DirectionScope_DirectionScope_MAX;
  static const int DirectionScope_ARRAYSIZE =
    TrafficSign_MainSign_Classification_DirectionScope_DirectionScope_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DirectionScope_descriptor() {
    return TrafficSign_MainSign_Classification_DirectionScope_descriptor();
  }
  static inline const ::std::string& DirectionScope_Name(DirectionScope value) {
    return TrafficSign_MainSign_Classification_DirectionScope_Name(value);
  }
  static inline bool DirectionScope_Parse(const ::std::string& name,
      DirectionScope* value) {
    return TrafficSign_MainSign_Classification_DirectionScope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.TrafficSign.Variability variability = 1;
  bool has_variability() const;
  void clear_variability();
  static const int kVariabilityFieldNumber = 1;
  ::osi3::TrafficSign_Variability variability() const;
  void set_variability(::osi3::TrafficSign_Variability value);

  // optional .osi3.TrafficSign.MainSign.Classification.Type type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::osi3::TrafficSign_MainSign_Classification_Type type() const;
  void set_type(::osi3::TrafficSign_MainSign_Classification_Type value);

  // optional .osi3.TrafficSignValue value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::osi3::TrafficSignValue& value() const;
  ::osi3::TrafficSignValue* mutable_value();
  ::osi3::TrafficSignValue* release_value();
  void set_allocated_value(::osi3::TrafficSignValue* value);

  // optional .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
  bool has_direction_scope() const;
  void clear_direction_scope();
  static const int kDirectionScopeFieldNumber = 4;
  ::osi3::TrafficSign_MainSign_Classification_DirectionScope direction_scope() const;
  void set_direction_scope(::osi3::TrafficSign_MainSign_Classification_DirectionScope value);

  // repeated .osi3.Identifier assigned_lane_id = 5;
  int assigned_lane_id_size() const;
  void clear_assigned_lane_id();
  static const int kAssignedLaneIdFieldNumber = 5;
  const ::osi3::Identifier& assigned_lane_id(int index) const;
  ::osi3::Identifier* mutable_assigned_lane_id(int index);
  ::osi3::Identifier* add_assigned_lane_id();
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
      mutable_assigned_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
      assigned_lane_id() const;

  // @@protoc_insertion_point(class_scope:osi3.TrafficSign.MainSign.Classification)
 private:
  inline void set_has_variability();
  inline void clear_has_variability();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_direction_scope();
  inline void clear_has_direction_scope();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int variability_;
  int type_;
  ::osi3::TrafficSignValue* value_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier > assigned_lane_id_;
  int direction_scope_;
  friend void  protobuf_AddDesc_osi_5ftrafficsign_2eproto();
  friend void protobuf_AssignDesc_osi_5ftrafficsign_2eproto();
  friend void protobuf_ShutdownFile_osi_5ftrafficsign_2eproto();

  void InitAsDefaultInstance();
  static TrafficSign_MainSign_Classification* default_instance_;
};
// -------------------------------------------------------------------

class TrafficSign_MainSign : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficSign.MainSign) */ {
 public:
  TrafficSign_MainSign();
  virtual ~TrafficSign_MainSign();

  TrafficSign_MainSign(const TrafficSign_MainSign& from);

  inline TrafficSign_MainSign& operator=(const TrafficSign_MainSign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSign_MainSign& default_instance();

  void Swap(TrafficSign_MainSign* other);

  // implements Message ----------------------------------------------

  inline TrafficSign_MainSign* New() const { return New(NULL); }

  TrafficSign_MainSign* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficSign_MainSign& from);
  void MergeFrom(const TrafficSign_MainSign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficSign_MainSign* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrafficSign_MainSign_Classification Classification;

  // accessors -------------------------------------------------------

  // optional .osi3.BaseStationary base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::osi3::BaseStationary& base() const;
  ::osi3::BaseStationary* mutable_base();
  ::osi3::BaseStationary* release_base();
  void set_allocated_base(::osi3::BaseStationary* base);

  // optional .osi3.TrafficSign.MainSign.Classification classification = 2;
  bool has_classification() const;
  void clear_classification();
  static const int kClassificationFieldNumber = 2;
  const ::osi3::TrafficSign_MainSign_Classification& classification() const;
  ::osi3::TrafficSign_MainSign_Classification* mutable_classification();
  ::osi3::TrafficSign_MainSign_Classification* release_classification();
  void set_allocated_classification(::osi3::TrafficSign_MainSign_Classification* classification);

  // @@protoc_insertion_point(class_scope:osi3.TrafficSign.MainSign)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_classification();
  inline void clear_has_classification();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::BaseStationary* base_;
  ::osi3::TrafficSign_MainSign_Classification* classification_;
  friend void  protobuf_AddDesc_osi_5ftrafficsign_2eproto();
  friend void protobuf_AssignDesc_osi_5ftrafficsign_2eproto();
  friend void protobuf_ShutdownFile_osi_5ftrafficsign_2eproto();

  void InitAsDefaultInstance();
  static TrafficSign_MainSign* default_instance_;
};
// -------------------------------------------------------------------

class TrafficSign_SupplementarySign_Classification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficSign.SupplementarySign.Classification) */ {
 public:
  TrafficSign_SupplementarySign_Classification();
  virtual ~TrafficSign_SupplementarySign_Classification();

  TrafficSign_SupplementarySign_Classification(const TrafficSign_SupplementarySign_Classification& from);

  inline TrafficSign_SupplementarySign_Classification& operator=(const TrafficSign_SupplementarySign_Classification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSign_SupplementarySign_Classification& default_instance();

  void Swap(TrafficSign_SupplementarySign_Classification* other);

  // implements Message ----------------------------------------------

  inline TrafficSign_SupplementarySign_Classification* New() const { return New(NULL); }

  TrafficSign_SupplementarySign_Classification* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficSign_SupplementarySign_Classification& from);
  void MergeFrom(const TrafficSign_SupplementarySign_Classification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficSign_SupplementarySign_Classification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrafficSign_SupplementarySign_Classification_Type Type;
  static const Type TYPE_UNKNOWN =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_OTHER;
  static const Type TYPE_NO_SIGN =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_NO_SIGN;
  static const Type TYPE_VALID_FOR_DISTANCE =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_VALID_FOR_DISTANCE;
  static const Type TYPE_VALID_IN_DISTANCE =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_VALID_IN_DISTANCE;
  static const Type TYPE_TIME_RANGE =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_TIME_RANGE;
  static const Type TYPE_WEIGHT =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_WEIGHT;
  static const Type TYPE_RAIN =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_RAIN;
  static const Type TYPE_FOG =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_FOG;
  static const Type TYPE_SNOW =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_SNOW;
  static const Type TYPE_SNOW_RAIN =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_SNOW_RAIN;
  static const Type TYPE_LEFT_ARROW =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_LEFT_ARROW;
  static const Type TYPE_RIGHT_ARROW =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_RIGHT_ARROW;
  static const Type TYPE_LEFT_BEND_ARROW =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_LEFT_BEND_ARROW;
  static const Type TYPE_RIGHT_BEND_ARROW =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_RIGHT_BEND_ARROW;
  static const Type TYPE_TRUCK =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_TRUCK;
  static const Type TYPE_TRACTORS_MAY_BE_PASSED =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_TRACTORS_MAY_BE_PASSED;
  static const Type TYPE_HAZARDOUS =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_HAZARDOUS;
  static const Type TYPE_TRAILER =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_TRAILER;
  static const Type TYPE_NIGHT =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_NIGHT;
  static const Type TYPE_ZONE =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_ZONE;
  static const Type TYPE_STOP_4_WAY =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_STOP_4_WAY;
  static const Type TYPE_MOTORCYCLE =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_MOTORCYCLE;
  static const Type TYPE_MOTORCYCLE_ALLOWED =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_MOTORCYCLE_ALLOWED;
  static const Type TYPE_CAR =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_CAR;
  static const Type TYPE_STOP_IN =
    TrafficSign_SupplementarySign_Classification_Type_TYPE_STOP_IN;
  static inline bool Type_IsValid(int value) {
    return TrafficSign_SupplementarySign_Classification_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TrafficSign_SupplementarySign_Classification_Type_Type_MIN;
  static const Type Type_MAX =
    TrafficSign_SupplementarySign_Classification_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TrafficSign_SupplementarySign_Classification_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TrafficSign_SupplementarySign_Classification_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TrafficSign_SupplementarySign_Classification_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TrafficSign_SupplementarySign_Classification_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.TrafficSign.Variability variability = 1;
  bool has_variability() const;
  void clear_variability();
  static const int kVariabilityFieldNumber = 1;
  ::osi3::TrafficSign_Variability variability() const;
  void set_variability(::osi3::TrafficSign_Variability value);

  // optional .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::osi3::TrafficSign_SupplementarySign_Classification_Type type() const;
  void set_type(::osi3::TrafficSign_SupplementarySign_Classification_Type value);

  // repeated .osi3.TrafficSignValue value = 3;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::osi3::TrafficSignValue& value(int index) const;
  ::osi3::TrafficSignValue* mutable_value(int index);
  ::osi3::TrafficSignValue* add_value();
  ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSignValue >*
      mutable_value();
  const ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSignValue >&
      value() const;

  // repeated .osi3.Identifier assigned_lane_id = 4;
  int assigned_lane_id_size() const;
  void clear_assigned_lane_id();
  static const int kAssignedLaneIdFieldNumber = 4;
  const ::osi3::Identifier& assigned_lane_id(int index) const;
  ::osi3::Identifier* mutable_assigned_lane_id(int index);
  ::osi3::Identifier* add_assigned_lane_id();
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
      mutable_assigned_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
      assigned_lane_id() const;

  // @@protoc_insertion_point(class_scope:osi3.TrafficSign.SupplementarySign.Classification)
 private:
  inline void set_has_variability();
  inline void clear_has_variability();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int variability_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSignValue > value_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Identifier > assigned_lane_id_;
  friend void  protobuf_AddDesc_osi_5ftrafficsign_2eproto();
  friend void protobuf_AssignDesc_osi_5ftrafficsign_2eproto();
  friend void protobuf_ShutdownFile_osi_5ftrafficsign_2eproto();

  void InitAsDefaultInstance();
  static TrafficSign_SupplementarySign_Classification* default_instance_;
};
// -------------------------------------------------------------------

class TrafficSign_SupplementarySign : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficSign.SupplementarySign) */ {
 public:
  TrafficSign_SupplementarySign();
  virtual ~TrafficSign_SupplementarySign();

  TrafficSign_SupplementarySign(const TrafficSign_SupplementarySign& from);

  inline TrafficSign_SupplementarySign& operator=(const TrafficSign_SupplementarySign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSign_SupplementarySign& default_instance();

  void Swap(TrafficSign_SupplementarySign* other);

  // implements Message ----------------------------------------------

  inline TrafficSign_SupplementarySign* New() const { return New(NULL); }

  TrafficSign_SupplementarySign* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficSign_SupplementarySign& from);
  void MergeFrom(const TrafficSign_SupplementarySign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficSign_SupplementarySign* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrafficSign_SupplementarySign_Classification Classification;

  // accessors -------------------------------------------------------

  // optional .osi3.BaseStationary base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::osi3::BaseStationary& base() const;
  ::osi3::BaseStationary* mutable_base();
  ::osi3::BaseStationary* release_base();
  void set_allocated_base(::osi3::BaseStationary* base);

  // optional .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  bool has_classification() const;
  void clear_classification();
  static const int kClassificationFieldNumber = 2;
  const ::osi3::TrafficSign_SupplementarySign_Classification& classification() const;
  ::osi3::TrafficSign_SupplementarySign_Classification* mutable_classification();
  ::osi3::TrafficSign_SupplementarySign_Classification* release_classification();
  void set_allocated_classification(::osi3::TrafficSign_SupplementarySign_Classification* classification);

  // @@protoc_insertion_point(class_scope:osi3.TrafficSign.SupplementarySign)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_classification();
  inline void clear_has_classification();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::BaseStationary* base_;
  ::osi3::TrafficSign_SupplementarySign_Classification* classification_;
  friend void  protobuf_AddDesc_osi_5ftrafficsign_2eproto();
  friend void protobuf_AssignDesc_osi_5ftrafficsign_2eproto();
  friend void protobuf_ShutdownFile_osi_5ftrafficsign_2eproto();

  void InitAsDefaultInstance();
  static TrafficSign_SupplementarySign* default_instance_;
};
// -------------------------------------------------------------------

class TrafficSign : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficSign) */ {
 public:
  TrafficSign();
  virtual ~TrafficSign();

  TrafficSign(const TrafficSign& from);

  inline TrafficSign& operator=(const TrafficSign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSign& default_instance();

  void Swap(TrafficSign* other);

  // implements Message ----------------------------------------------

  inline TrafficSign* New() const { return New(NULL); }

  TrafficSign* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficSign& from);
  void MergeFrom(const TrafficSign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficSign* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrafficSign_MainSign MainSign;
  typedef TrafficSign_SupplementarySign SupplementarySign;

  typedef TrafficSign_Variability Variability;
  static const Variability VARIABILITY_UNKNOWN =
    TrafficSign_Variability_VARIABILITY_UNKNOWN;
  static const Variability VARIABILITY_OTHER =
    TrafficSign_Variability_VARIABILITY_OTHER;
  static const Variability VARIABILITY_FIXED =
    TrafficSign_Variability_VARIABILITY_FIXED;
  static const Variability VARIABILITY_VARIABLE =
    TrafficSign_Variability_VARIABILITY_VARIABLE;
  static inline bool Variability_IsValid(int value) {
    return TrafficSign_Variability_IsValid(value);
  }
  static const Variability Variability_MIN =
    TrafficSign_Variability_Variability_MIN;
  static const Variability Variability_MAX =
    TrafficSign_Variability_Variability_MAX;
  static const int Variability_ARRAYSIZE =
    TrafficSign_Variability_Variability_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Variability_descriptor() {
    return TrafficSign_Variability_descriptor();
  }
  static inline const ::std::string& Variability_Name(Variability value) {
    return TrafficSign_Variability_Name(value);
  }
  static inline bool Variability_Parse(const ::std::string& name,
      Variability* value) {
    return TrafficSign_Variability_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::osi3::Identifier& id() const;
  ::osi3::Identifier* mutable_id();
  ::osi3::Identifier* release_id();
  void set_allocated_id(::osi3::Identifier* id);

  // optional .osi3.TrafficSign.MainSign main_sign = 2;
  bool has_main_sign() const;
  void clear_main_sign();
  static const int kMainSignFieldNumber = 2;
  const ::osi3::TrafficSign_MainSign& main_sign() const;
  ::osi3::TrafficSign_MainSign* mutable_main_sign();
  ::osi3::TrafficSign_MainSign* release_main_sign();
  void set_allocated_main_sign(::osi3::TrafficSign_MainSign* main_sign);

  // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
  int supplementary_sign_size() const;
  void clear_supplementary_sign();
  static const int kSupplementarySignFieldNumber = 3;
  const ::osi3::TrafficSign_SupplementarySign& supplementary_sign(int index) const;
  ::osi3::TrafficSign_SupplementarySign* mutable_supplementary_sign(int index);
  ::osi3::TrafficSign_SupplementarySign* add_supplementary_sign();
  ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSign_SupplementarySign >*
      mutable_supplementary_sign();
  const ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSign_SupplementarySign >&
      supplementary_sign() const;

  // @@protoc_insertion_point(class_scope:osi3.TrafficSign)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_main_sign();
  inline void clear_has_main_sign();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* id_;
  ::osi3::TrafficSign_MainSign* main_sign_;
  ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSign_SupplementarySign > supplementary_sign_;
  friend void  protobuf_AddDesc_osi_5ftrafficsign_2eproto();
  friend void protobuf_AssignDesc_osi_5ftrafficsign_2eproto();
  friend void protobuf_ShutdownFile_osi_5ftrafficsign_2eproto();

  void InitAsDefaultInstance();
  static TrafficSign* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficSignValue

// optional double value = 1;
inline bool TrafficSignValue::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficSignValue::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficSignValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficSignValue::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double TrafficSignValue::value() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSignValue.value)
  return value_;
}
inline void TrafficSignValue::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficSignValue.value)
}

// optional .osi3.TrafficSignValue.Unit value_unit = 2;
inline bool TrafficSignValue::has_value_unit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficSignValue::set_has_value_unit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficSignValue::clear_has_value_unit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficSignValue::clear_value_unit() {
  value_unit_ = 0;
  clear_has_value_unit();
}
inline ::osi3::TrafficSignValue_Unit TrafficSignValue::value_unit() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSignValue.value_unit)
  return static_cast< ::osi3::TrafficSignValue_Unit >(value_unit_);
}
inline void TrafficSignValue::set_value_unit(::osi3::TrafficSignValue_Unit value) {
  assert(::osi3::TrafficSignValue_Unit_IsValid(value));
  set_has_value_unit();
  value_unit_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficSignValue.value_unit)
}

// -------------------------------------------------------------------

// TrafficSign_MainSign_Classification

// optional .osi3.TrafficSign.Variability variability = 1;
inline bool TrafficSign_MainSign_Classification::has_variability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficSign_MainSign_Classification::set_has_variability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficSign_MainSign_Classification::clear_has_variability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficSign_MainSign_Classification::clear_variability() {
  variability_ = 0;
  clear_has_variability();
}
inline ::osi3::TrafficSign_Variability TrafficSign_MainSign_Classification::variability() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.MainSign.Classification.variability)
  return static_cast< ::osi3::TrafficSign_Variability >(variability_);
}
inline void TrafficSign_MainSign_Classification::set_variability(::osi3::TrafficSign_Variability value) {
  assert(::osi3::TrafficSign_Variability_IsValid(value));
  set_has_variability();
  variability_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficSign.MainSign.Classification.variability)
}

// optional .osi3.TrafficSign.MainSign.Classification.Type type = 2;
inline bool TrafficSign_MainSign_Classification::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficSign_MainSign_Classification::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficSign_MainSign_Classification::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficSign_MainSign_Classification::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::osi3::TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::type() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.MainSign.Classification.type)
  return static_cast< ::osi3::TrafficSign_MainSign_Classification_Type >(type_);
}
inline void TrafficSign_MainSign_Classification::set_type(::osi3::TrafficSign_MainSign_Classification_Type value) {
  assert(::osi3::TrafficSign_MainSign_Classification_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficSign.MainSign.Classification.type)
}

// optional .osi3.TrafficSignValue value = 3;
inline bool TrafficSign_MainSign_Classification::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficSign_MainSign_Classification::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficSign_MainSign_Classification::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficSign_MainSign_Classification::clear_value() {
  if (value_ != NULL) value_->::osi3::TrafficSignValue::Clear();
  clear_has_value();
}
inline const ::osi3::TrafficSignValue& TrafficSign_MainSign_Classification::value() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.MainSign.Classification.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::osi3::TrafficSignValue* TrafficSign_MainSign_Classification::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::osi3::TrafficSignValue;
  }
  // @@protoc_insertion_point(field_mutable:osi3.TrafficSign.MainSign.Classification.value)
  return value_;
}
inline ::osi3::TrafficSignValue* TrafficSign_MainSign_Classification::release_value() {
  // @@protoc_insertion_point(field_release:osi3.TrafficSign.MainSign.Classification.value)
  clear_has_value();
  ::osi3::TrafficSignValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline void TrafficSign_MainSign_Classification::set_allocated_value(::osi3::TrafficSignValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficSign.MainSign.Classification.value)
}

// optional .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
inline bool TrafficSign_MainSign_Classification::has_direction_scope() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficSign_MainSign_Classification::set_has_direction_scope() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrafficSign_MainSign_Classification::clear_has_direction_scope() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrafficSign_MainSign_Classification::clear_direction_scope() {
  direction_scope_ = 0;
  clear_has_direction_scope();
}
inline ::osi3::TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::direction_scope() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.MainSign.Classification.direction_scope)
  return static_cast< ::osi3::TrafficSign_MainSign_Classification_DirectionScope >(direction_scope_);
}
inline void TrafficSign_MainSign_Classification::set_direction_scope(::osi3::TrafficSign_MainSign_Classification_DirectionScope value) {
  assert(::osi3::TrafficSign_MainSign_Classification_DirectionScope_IsValid(value));
  set_has_direction_scope();
  direction_scope_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficSign.MainSign.Classification.direction_scope)
}

// repeated .osi3.Identifier assigned_lane_id = 5;
inline int TrafficSign_MainSign_Classification::assigned_lane_id_size() const {
  return assigned_lane_id_.size();
}
inline void TrafficSign_MainSign_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
inline const ::osi3::Identifier& TrafficSign_MainSign_Classification::assigned_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.MainSign.Classification.assigned_lane_id)
  return assigned_lane_id_.Get(index);
}
inline ::osi3::Identifier* TrafficSign_MainSign_Classification::mutable_assigned_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficSign.MainSign.Classification.assigned_lane_id)
  return assigned_lane_id_.Mutable(index);
}
inline ::osi3::Identifier* TrafficSign_MainSign_Classification::add_assigned_lane_id() {
  // @@protoc_insertion_point(field_add:osi3.TrafficSign.MainSign.Classification.assigned_lane_id)
  return assigned_lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
TrafficSign_MainSign_Classification::mutable_assigned_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.TrafficSign.MainSign.Classification.assigned_lane_id)
  return &assigned_lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
TrafficSign_MainSign_Classification::assigned_lane_id() const {
  // @@protoc_insertion_point(field_list:osi3.TrafficSign.MainSign.Classification.assigned_lane_id)
  return assigned_lane_id_;
}

// -------------------------------------------------------------------

// TrafficSign_MainSign

// optional .osi3.BaseStationary base = 1;
inline bool TrafficSign_MainSign::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficSign_MainSign::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficSign_MainSign::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficSign_MainSign::clear_base() {
  if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
  clear_has_base();
}
inline const ::osi3::BaseStationary& TrafficSign_MainSign::base() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.MainSign.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::osi3::BaseStationary* TrafficSign_MainSign::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::osi3::BaseStationary;
  }
  // @@protoc_insertion_point(field_mutable:osi3.TrafficSign.MainSign.base)
  return base_;
}
inline ::osi3::BaseStationary* TrafficSign_MainSign::release_base() {
  // @@protoc_insertion_point(field_release:osi3.TrafficSign.MainSign.base)
  clear_has_base();
  ::osi3::BaseStationary* temp = base_;
  base_ = NULL;
  return temp;
}
inline void TrafficSign_MainSign::set_allocated_base(::osi3::BaseStationary* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficSign.MainSign.base)
}

// optional .osi3.TrafficSign.MainSign.Classification classification = 2;
inline bool TrafficSign_MainSign::has_classification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficSign_MainSign::set_has_classification() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficSign_MainSign::clear_has_classification() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficSign_MainSign::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::TrafficSign_MainSign_Classification::Clear();
  clear_has_classification();
}
inline const ::osi3::TrafficSign_MainSign_Classification& TrafficSign_MainSign::classification() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.MainSign.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
inline ::osi3::TrafficSign_MainSign_Classification* TrafficSign_MainSign::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::TrafficSign_MainSign_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.TrafficSign.MainSign.classification)
  return classification_;
}
inline ::osi3::TrafficSign_MainSign_Classification* TrafficSign_MainSign::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.TrafficSign.MainSign.classification)
  clear_has_classification();
  ::osi3::TrafficSign_MainSign_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
inline void TrafficSign_MainSign::set_allocated_classification(::osi3::TrafficSign_MainSign_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficSign.MainSign.classification)
}

// -------------------------------------------------------------------

// TrafficSign_SupplementarySign_Classification

// optional .osi3.TrafficSign.Variability variability = 1;
inline bool TrafficSign_SupplementarySign_Classification::has_variability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficSign_SupplementarySign_Classification::set_has_variability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficSign_SupplementarySign_Classification::clear_has_variability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficSign_SupplementarySign_Classification::clear_variability() {
  variability_ = 0;
  clear_has_variability();
}
inline ::osi3::TrafficSign_Variability TrafficSign_SupplementarySign_Classification::variability() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.SupplementarySign.Classification.variability)
  return static_cast< ::osi3::TrafficSign_Variability >(variability_);
}
inline void TrafficSign_SupplementarySign_Classification::set_variability(::osi3::TrafficSign_Variability value) {
  assert(::osi3::TrafficSign_Variability_IsValid(value));
  set_has_variability();
  variability_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficSign.SupplementarySign.Classification.variability)
}

// optional .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
inline bool TrafficSign_SupplementarySign_Classification::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficSign_SupplementarySign_Classification::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficSign_SupplementarySign_Classification::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficSign_SupplementarySign_Classification::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::osi3::TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::type() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.SupplementarySign.Classification.type)
  return static_cast< ::osi3::TrafficSign_SupplementarySign_Classification_Type >(type_);
}
inline void TrafficSign_SupplementarySign_Classification::set_type(::osi3::TrafficSign_SupplementarySign_Classification_Type value) {
  assert(::osi3::TrafficSign_SupplementarySign_Classification_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.TrafficSign.SupplementarySign.Classification.type)
}

// repeated .osi3.TrafficSignValue value = 3;
inline int TrafficSign_SupplementarySign_Classification::value_size() const {
  return value_.size();
}
inline void TrafficSign_SupplementarySign_Classification::clear_value() {
  value_.Clear();
}
inline const ::osi3::TrafficSignValue& TrafficSign_SupplementarySign_Classification::value(int index) const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.SupplementarySign.Classification.value)
  return value_.Get(index);
}
inline ::osi3::TrafficSignValue* TrafficSign_SupplementarySign_Classification::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficSign.SupplementarySign.Classification.value)
  return value_.Mutable(index);
}
inline ::osi3::TrafficSignValue* TrafficSign_SupplementarySign_Classification::add_value() {
  // @@protoc_insertion_point(field_add:osi3.TrafficSign.SupplementarySign.Classification.value)
  return value_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSignValue >*
TrafficSign_SupplementarySign_Classification::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:osi3.TrafficSign.SupplementarySign.Classification.value)
  return &value_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSignValue >&
TrafficSign_SupplementarySign_Classification::value() const {
  // @@protoc_insertion_point(field_list:osi3.TrafficSign.SupplementarySign.Classification.value)
  return value_;
}

// repeated .osi3.Identifier assigned_lane_id = 4;
inline int TrafficSign_SupplementarySign_Classification::assigned_lane_id_size() const {
  return assigned_lane_id_.size();
}
inline void TrafficSign_SupplementarySign_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
inline const ::osi3::Identifier& TrafficSign_SupplementarySign_Classification::assigned_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.SupplementarySign.Classification.assigned_lane_id)
  return assigned_lane_id_.Get(index);
}
inline ::osi3::Identifier* TrafficSign_SupplementarySign_Classification::mutable_assigned_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficSign.SupplementarySign.Classification.assigned_lane_id)
  return assigned_lane_id_.Mutable(index);
}
inline ::osi3::Identifier* TrafficSign_SupplementarySign_Classification::add_assigned_lane_id() {
  // @@protoc_insertion_point(field_add:osi3.TrafficSign.SupplementarySign.Classification.assigned_lane_id)
  return assigned_lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >*
TrafficSign_SupplementarySign_Classification::mutable_assigned_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.TrafficSign.SupplementarySign.Classification.assigned_lane_id)
  return &assigned_lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Identifier >&
TrafficSign_SupplementarySign_Classification::assigned_lane_id() const {
  // @@protoc_insertion_point(field_list:osi3.TrafficSign.SupplementarySign.Classification.assigned_lane_id)
  return assigned_lane_id_;
}

// -------------------------------------------------------------------

// TrafficSign_SupplementarySign

// optional .osi3.BaseStationary base = 1;
inline bool TrafficSign_SupplementarySign::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficSign_SupplementarySign::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficSign_SupplementarySign::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficSign_SupplementarySign::clear_base() {
  if (base_ != NULL) base_->::osi3::BaseStationary::Clear();
  clear_has_base();
}
inline const ::osi3::BaseStationary& TrafficSign_SupplementarySign::base() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.SupplementarySign.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::osi3::BaseStationary* TrafficSign_SupplementarySign::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::osi3::BaseStationary;
  }
  // @@protoc_insertion_point(field_mutable:osi3.TrafficSign.SupplementarySign.base)
  return base_;
}
inline ::osi3::BaseStationary* TrafficSign_SupplementarySign::release_base() {
  // @@protoc_insertion_point(field_release:osi3.TrafficSign.SupplementarySign.base)
  clear_has_base();
  ::osi3::BaseStationary* temp = base_;
  base_ = NULL;
  return temp;
}
inline void TrafficSign_SupplementarySign::set_allocated_base(::osi3::BaseStationary* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficSign.SupplementarySign.base)
}

// optional .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
inline bool TrafficSign_SupplementarySign::has_classification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficSign_SupplementarySign::set_has_classification() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficSign_SupplementarySign::clear_has_classification() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficSign_SupplementarySign::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::TrafficSign_SupplementarySign_Classification::Clear();
  clear_has_classification();
}
inline const ::osi3::TrafficSign_SupplementarySign_Classification& TrafficSign_SupplementarySign::classification() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.SupplementarySign.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
inline ::osi3::TrafficSign_SupplementarySign_Classification* TrafficSign_SupplementarySign::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::TrafficSign_SupplementarySign_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.TrafficSign.SupplementarySign.classification)
  return classification_;
}
inline ::osi3::TrafficSign_SupplementarySign_Classification* TrafficSign_SupplementarySign::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.TrafficSign.SupplementarySign.classification)
  clear_has_classification();
  ::osi3::TrafficSign_SupplementarySign_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
inline void TrafficSign_SupplementarySign::set_allocated_classification(::osi3::TrafficSign_SupplementarySign_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficSign.SupplementarySign.classification)
}

// -------------------------------------------------------------------

// TrafficSign

// optional .osi3.Identifier id = 1;
inline bool TrafficSign::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficSign::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficSign::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficSign::clear_id() {
  if (id_ != NULL) id_->::osi3::Identifier::Clear();
  clear_has_id();
}
inline const ::osi3::Identifier& TrafficSign::id() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::osi3::Identifier* TrafficSign::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.TrafficSign.id)
  return id_;
}
inline ::osi3::Identifier* TrafficSign::release_id() {
  // @@protoc_insertion_point(field_release:osi3.TrafficSign.id)
  clear_has_id();
  ::osi3::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline void TrafficSign::set_allocated_id(::osi3::Identifier* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficSign.id)
}

// optional .osi3.TrafficSign.MainSign main_sign = 2;
inline bool TrafficSign::has_main_sign() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficSign::set_has_main_sign() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficSign::clear_has_main_sign() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficSign::clear_main_sign() {
  if (main_sign_ != NULL) main_sign_->::osi3::TrafficSign_MainSign::Clear();
  clear_has_main_sign();
}
inline const ::osi3::TrafficSign_MainSign& TrafficSign::main_sign() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.main_sign)
  return main_sign_ != NULL ? *main_sign_ : *default_instance_->main_sign_;
}
inline ::osi3::TrafficSign_MainSign* TrafficSign::mutable_main_sign() {
  set_has_main_sign();
  if (main_sign_ == NULL) {
    main_sign_ = new ::osi3::TrafficSign_MainSign;
  }
  // @@protoc_insertion_point(field_mutable:osi3.TrafficSign.main_sign)
  return main_sign_;
}
inline ::osi3::TrafficSign_MainSign* TrafficSign::release_main_sign() {
  // @@protoc_insertion_point(field_release:osi3.TrafficSign.main_sign)
  clear_has_main_sign();
  ::osi3::TrafficSign_MainSign* temp = main_sign_;
  main_sign_ = NULL;
  return temp;
}
inline void TrafficSign::set_allocated_main_sign(::osi3::TrafficSign_MainSign* main_sign) {
  delete main_sign_;
  main_sign_ = main_sign;
  if (main_sign) {
    set_has_main_sign();
  } else {
    clear_has_main_sign();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficSign.main_sign)
}

// repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
inline int TrafficSign::supplementary_sign_size() const {
  return supplementary_sign_.size();
}
inline void TrafficSign::clear_supplementary_sign() {
  supplementary_sign_.Clear();
}
inline const ::osi3::TrafficSign_SupplementarySign& TrafficSign::supplementary_sign(int index) const {
  // @@protoc_insertion_point(field_get:osi3.TrafficSign.supplementary_sign)
  return supplementary_sign_.Get(index);
}
inline ::osi3::TrafficSign_SupplementarySign* TrafficSign::mutable_supplementary_sign(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficSign.supplementary_sign)
  return supplementary_sign_.Mutable(index);
}
inline ::osi3::TrafficSign_SupplementarySign* TrafficSign::add_supplementary_sign() {
  // @@protoc_insertion_point(field_add:osi3.TrafficSign.supplementary_sign)
  return supplementary_sign_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSign_SupplementarySign >*
TrafficSign::mutable_supplementary_sign() {
  // @@protoc_insertion_point(field_mutable_list:osi3.TrafficSign.supplementary_sign)
  return &supplementary_sign_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSign_SupplementarySign >&
TrafficSign::supplementary_sign() const {
  // @@protoc_insertion_point(field_list:osi3.TrafficSign.supplementary_sign)
  return supplementary_sign_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::osi3::TrafficSignValue_Unit> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::TrafficSignValue_Unit>() {
  return ::osi3::TrafficSignValue_Unit_descriptor();
}
template <> struct is_proto_enum< ::osi3::TrafficSign_MainSign_Classification_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::TrafficSign_MainSign_Classification_Type>() {
  return ::osi3::TrafficSign_MainSign_Classification_Type_descriptor();
}
template <> struct is_proto_enum< ::osi3::TrafficSign_MainSign_Classification_DirectionScope> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::TrafficSign_MainSign_Classification_DirectionScope>() {
  return ::osi3::TrafficSign_MainSign_Classification_DirectionScope_descriptor();
}
template <> struct is_proto_enum< ::osi3::TrafficSign_SupplementarySign_Classification_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::TrafficSign_SupplementarySign_Classification_Type>() {
  return ::osi3::TrafficSign_SupplementarySign_Classification_Type_descriptor();
}
template <> struct is_proto_enum< ::osi3::TrafficSign_Variability> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::TrafficSign_Variability>() {
  return ::osi3::TrafficSign_Variability_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osi_5ftrafficsign_2eproto__INCLUDED
