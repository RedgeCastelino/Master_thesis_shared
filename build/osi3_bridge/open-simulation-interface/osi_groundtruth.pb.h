// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_groundtruth.proto

#ifndef PROTOBUF_osi_5fgroundtruth_2eproto__INCLUDED
#define PROTOBUF_osi_5fgroundtruth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_version.pb.h"
#include "osi_common.pb.h"
#include "osi_environment.pb.h"
#include "osi_trafficsign.pb.h"
#include "osi_trafficlight.pb.h"
#include "osi_roadmarking.pb.h"
#include "osi_lane.pb.h"
#include "osi_object.pb.h"
#include "osi_occupant.pb.h"
// @@protoc_insertion_point(includes)

namespace osi3 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_osi_5fgroundtruth_2eproto();
void protobuf_AssignDesc_osi_5fgroundtruth_2eproto();
void protobuf_ShutdownFile_osi_5fgroundtruth_2eproto();

class GroundTruth;

// ===================================================================

class GroundTruth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.GroundTruth) */ {
 public:
  GroundTruth();
  virtual ~GroundTruth();

  GroundTruth(const GroundTruth& from);

  inline GroundTruth& operator=(const GroundTruth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroundTruth& default_instance();

  void Swap(GroundTruth* other);

  // implements Message ----------------------------------------------

  inline GroundTruth* New() const { return New(NULL); }

  GroundTruth* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroundTruth& from);
  void MergeFrom(const GroundTruth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroundTruth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .osi3.InterfaceVersion version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::osi3::InterfaceVersion& version() const;
  ::osi3::InterfaceVersion* mutable_version();
  ::osi3::InterfaceVersion* release_version();
  void set_allocated_version(::osi3::InterfaceVersion* version);

  // optional .osi3.Timestamp timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::osi3::Timestamp& timestamp() const;
  ::osi3::Timestamp* mutable_timestamp();
  ::osi3::Timestamp* release_timestamp();
  void set_allocated_timestamp(::osi3::Timestamp* timestamp);

  // optional .osi3.Identifier host_vehicle_id = 3;
  bool has_host_vehicle_id() const;
  void clear_host_vehicle_id();
  static const int kHostVehicleIdFieldNumber = 3;
  const ::osi3::Identifier& host_vehicle_id() const;
  ::osi3::Identifier* mutable_host_vehicle_id();
  ::osi3::Identifier* release_host_vehicle_id();
  void set_allocated_host_vehicle_id(::osi3::Identifier* host_vehicle_id);

  // repeated .osi3.StationaryObject stationary_object = 4;
  int stationary_object_size() const;
  void clear_stationary_object();
  static const int kStationaryObjectFieldNumber = 4;
  const ::osi3::StationaryObject& stationary_object(int index) const;
  ::osi3::StationaryObject* mutable_stationary_object(int index);
  ::osi3::StationaryObject* add_stationary_object();
  ::google::protobuf::RepeatedPtrField< ::osi3::StationaryObject >*
      mutable_stationary_object();
  const ::google::protobuf::RepeatedPtrField< ::osi3::StationaryObject >&
      stationary_object() const;

  // repeated .osi3.MovingObject moving_object = 5;
  int moving_object_size() const;
  void clear_moving_object();
  static const int kMovingObjectFieldNumber = 5;
  const ::osi3::MovingObject& moving_object(int index) const;
  ::osi3::MovingObject* mutable_moving_object(int index);
  ::osi3::MovingObject* add_moving_object();
  ::google::protobuf::RepeatedPtrField< ::osi3::MovingObject >*
      mutable_moving_object();
  const ::google::protobuf::RepeatedPtrField< ::osi3::MovingObject >&
      moving_object() const;

  // repeated .osi3.TrafficSign traffic_sign = 6;
  int traffic_sign_size() const;
  void clear_traffic_sign();
  static const int kTrafficSignFieldNumber = 6;
  const ::osi3::TrafficSign& traffic_sign(int index) const;
  ::osi3::TrafficSign* mutable_traffic_sign(int index);
  ::osi3::TrafficSign* add_traffic_sign();
  ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSign >*
      mutable_traffic_sign();
  const ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSign >&
      traffic_sign() const;

  // repeated .osi3.TrafficLight traffic_light = 7;
  int traffic_light_size() const;
  void clear_traffic_light();
  static const int kTrafficLightFieldNumber = 7;
  const ::osi3::TrafficLight& traffic_light(int index) const;
  ::osi3::TrafficLight* mutable_traffic_light(int index);
  ::osi3::TrafficLight* add_traffic_light();
  ::google::protobuf::RepeatedPtrField< ::osi3::TrafficLight >*
      mutable_traffic_light();
  const ::google::protobuf::RepeatedPtrField< ::osi3::TrafficLight >&
      traffic_light() const;

  // repeated .osi3.RoadMarking road_marking = 8;
  int road_marking_size() const;
  void clear_road_marking();
  static const int kRoadMarkingFieldNumber = 8;
  const ::osi3::RoadMarking& road_marking(int index) const;
  ::osi3::RoadMarking* mutable_road_marking(int index);
  ::osi3::RoadMarking* add_road_marking();
  ::google::protobuf::RepeatedPtrField< ::osi3::RoadMarking >*
      mutable_road_marking();
  const ::google::protobuf::RepeatedPtrField< ::osi3::RoadMarking >&
      road_marking() const;

  // repeated .osi3.LaneBoundary lane_boundary = 9;
  int lane_boundary_size() const;
  void clear_lane_boundary();
  static const int kLaneBoundaryFieldNumber = 9;
  const ::osi3::LaneBoundary& lane_boundary(int index) const;
  ::osi3::LaneBoundary* mutable_lane_boundary(int index);
  ::osi3::LaneBoundary* add_lane_boundary();
  ::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary >*
      mutable_lane_boundary();
  const ::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary >&
      lane_boundary() const;

  // repeated .osi3.Lane lane = 10;
  int lane_size() const;
  void clear_lane();
  static const int kLaneFieldNumber = 10;
  const ::osi3::Lane& lane(int index) const;
  ::osi3::Lane* mutable_lane(int index);
  ::osi3::Lane* add_lane();
  ::google::protobuf::RepeatedPtrField< ::osi3::Lane >*
      mutable_lane();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Lane >&
      lane() const;

  // repeated .osi3.Occupant occupant = 11;
  int occupant_size() const;
  void clear_occupant();
  static const int kOccupantFieldNumber = 11;
  const ::osi3::Occupant& occupant(int index) const;
  ::osi3::Occupant* mutable_occupant(int index);
  ::osi3::Occupant* add_occupant();
  ::google::protobuf::RepeatedPtrField< ::osi3::Occupant >*
      mutable_occupant();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Occupant >&
      occupant() const;

  // optional .osi3.EnvironmentalConditions environmental_conditions = 12;
  bool has_environmental_conditions() const;
  void clear_environmental_conditions();
  static const int kEnvironmentalConditionsFieldNumber = 12;
  const ::osi3::EnvironmentalConditions& environmental_conditions() const;
  ::osi3::EnvironmentalConditions* mutable_environmental_conditions();
  ::osi3::EnvironmentalConditions* release_environmental_conditions();
  void set_allocated_environmental_conditions(::osi3::EnvironmentalConditions* environmental_conditions);

  // optional uint32 country_code = 13;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 13;
  ::google::protobuf::uint32 country_code() const;
  void set_country_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:osi3.GroundTruth)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_host_vehicle_id();
  inline void clear_has_host_vehicle_id();
  inline void set_has_environmental_conditions();
  inline void clear_has_environmental_conditions();
  inline void set_has_country_code();
  inline void clear_has_country_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::InterfaceVersion* version_;
  ::osi3::Timestamp* timestamp_;
  ::osi3::Identifier* host_vehicle_id_;
  ::google::protobuf::RepeatedPtrField< ::osi3::StationaryObject > stationary_object_;
  ::google::protobuf::RepeatedPtrField< ::osi3::MovingObject > moving_object_;
  ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSign > traffic_sign_;
  ::google::protobuf::RepeatedPtrField< ::osi3::TrafficLight > traffic_light_;
  ::google::protobuf::RepeatedPtrField< ::osi3::RoadMarking > road_marking_;
  ::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary > lane_boundary_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Lane > lane_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Occupant > occupant_;
  ::osi3::EnvironmentalConditions* environmental_conditions_;
  ::google::protobuf::uint32 country_code_;
  friend void  protobuf_AddDesc_osi_5fgroundtruth_2eproto();
  friend void protobuf_AssignDesc_osi_5fgroundtruth_2eproto();
  friend void protobuf_ShutdownFile_osi_5fgroundtruth_2eproto();

  void InitAsDefaultInstance();
  static GroundTruth* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GroundTruth

// optional .osi3.InterfaceVersion version = 1;
inline bool GroundTruth::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroundTruth::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroundTruth::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroundTruth::clear_version() {
  if (version_ != NULL) version_->::osi3::InterfaceVersion::Clear();
  clear_has_version();
}
inline const ::osi3::InterfaceVersion& GroundTruth::version() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
inline ::osi3::InterfaceVersion* GroundTruth::mutable_version() {
  set_has_version();
  if (version_ == NULL) {
    version_ = new ::osi3::InterfaceVersion;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.version)
  return version_;
}
inline ::osi3::InterfaceVersion* GroundTruth::release_version() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.version)
  clear_has_version();
  ::osi3::InterfaceVersion* temp = version_;
  version_ = NULL;
  return temp;
}
inline void GroundTruth::set_allocated_version(::osi3::InterfaceVersion* version) {
  delete version_;
  version_ = version;
  if (version) {
    set_has_version();
  } else {
    clear_has_version();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.version)
}

// optional .osi3.Timestamp timestamp = 2;
inline bool GroundTruth::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroundTruth::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroundTruth::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroundTruth::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::osi3::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::osi3::Timestamp& GroundTruth::timestamp() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::osi3::Timestamp* GroundTruth::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.timestamp)
  return timestamp_;
}
inline ::osi3::Timestamp* GroundTruth::release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.timestamp)
  clear_has_timestamp();
  ::osi3::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void GroundTruth::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.timestamp)
}

// optional .osi3.Identifier host_vehicle_id = 3;
inline bool GroundTruth::has_host_vehicle_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroundTruth::set_has_host_vehicle_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroundTruth::clear_has_host_vehicle_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroundTruth::clear_host_vehicle_id() {
  if (host_vehicle_id_ != NULL) host_vehicle_id_->::osi3::Identifier::Clear();
  clear_has_host_vehicle_id();
}
inline const ::osi3::Identifier& GroundTruth::host_vehicle_id() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.host_vehicle_id)
  return host_vehicle_id_ != NULL ? *host_vehicle_id_ : *default_instance_->host_vehicle_id_;
}
inline ::osi3::Identifier* GroundTruth::mutable_host_vehicle_id() {
  set_has_host_vehicle_id();
  if (host_vehicle_id_ == NULL) {
    host_vehicle_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.host_vehicle_id)
  return host_vehicle_id_;
}
inline ::osi3::Identifier* GroundTruth::release_host_vehicle_id() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.host_vehicle_id)
  clear_has_host_vehicle_id();
  ::osi3::Identifier* temp = host_vehicle_id_;
  host_vehicle_id_ = NULL;
  return temp;
}
inline void GroundTruth::set_allocated_host_vehicle_id(::osi3::Identifier* host_vehicle_id) {
  delete host_vehicle_id_;
  host_vehicle_id_ = host_vehicle_id;
  if (host_vehicle_id) {
    set_has_host_vehicle_id();
  } else {
    clear_has_host_vehicle_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.host_vehicle_id)
}

// repeated .osi3.StationaryObject stationary_object = 4;
inline int GroundTruth::stationary_object_size() const {
  return stationary_object_.size();
}
inline void GroundTruth::clear_stationary_object() {
  stationary_object_.Clear();
}
inline const ::osi3::StationaryObject& GroundTruth::stationary_object(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.stationary_object)
  return stationary_object_.Get(index);
}
inline ::osi3::StationaryObject* GroundTruth::mutable_stationary_object(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.stationary_object)
  return stationary_object_.Mutable(index);
}
inline ::osi3::StationaryObject* GroundTruth::add_stationary_object() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.stationary_object)
  return stationary_object_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::StationaryObject >*
GroundTruth::mutable_stationary_object() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.stationary_object)
  return &stationary_object_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::StationaryObject >&
GroundTruth::stationary_object() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.stationary_object)
  return stationary_object_;
}

// repeated .osi3.MovingObject moving_object = 5;
inline int GroundTruth::moving_object_size() const {
  return moving_object_.size();
}
inline void GroundTruth::clear_moving_object() {
  moving_object_.Clear();
}
inline const ::osi3::MovingObject& GroundTruth::moving_object(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.moving_object)
  return moving_object_.Get(index);
}
inline ::osi3::MovingObject* GroundTruth::mutable_moving_object(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.moving_object)
  return moving_object_.Mutable(index);
}
inline ::osi3::MovingObject* GroundTruth::add_moving_object() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.moving_object)
  return moving_object_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::MovingObject >*
GroundTruth::mutable_moving_object() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.moving_object)
  return &moving_object_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::MovingObject >&
GroundTruth::moving_object() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.moving_object)
  return moving_object_;
}

// repeated .osi3.TrafficSign traffic_sign = 6;
inline int GroundTruth::traffic_sign_size() const {
  return traffic_sign_.size();
}
inline void GroundTruth::clear_traffic_sign() {
  traffic_sign_.Clear();
}
inline const ::osi3::TrafficSign& GroundTruth::traffic_sign(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.traffic_sign)
  return traffic_sign_.Get(index);
}
inline ::osi3::TrafficSign* GroundTruth::mutable_traffic_sign(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.traffic_sign)
  return traffic_sign_.Mutable(index);
}
inline ::osi3::TrafficSign* GroundTruth::add_traffic_sign() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.traffic_sign)
  return traffic_sign_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSign >*
GroundTruth::mutable_traffic_sign() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.traffic_sign)
  return &traffic_sign_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSign >&
GroundTruth::traffic_sign() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.traffic_sign)
  return traffic_sign_;
}

// repeated .osi3.TrafficLight traffic_light = 7;
inline int GroundTruth::traffic_light_size() const {
  return traffic_light_.size();
}
inline void GroundTruth::clear_traffic_light() {
  traffic_light_.Clear();
}
inline const ::osi3::TrafficLight& GroundTruth::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.traffic_light)
  return traffic_light_.Get(index);
}
inline ::osi3::TrafficLight* GroundTruth::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.traffic_light)
  return traffic_light_.Mutable(index);
}
inline ::osi3::TrafficLight* GroundTruth::add_traffic_light() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.traffic_light)
  return traffic_light_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::TrafficLight >*
GroundTruth::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.traffic_light)
  return &traffic_light_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::TrafficLight >&
GroundTruth::traffic_light() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.traffic_light)
  return traffic_light_;
}

// repeated .osi3.RoadMarking road_marking = 8;
inline int GroundTruth::road_marking_size() const {
  return road_marking_.size();
}
inline void GroundTruth::clear_road_marking() {
  road_marking_.Clear();
}
inline const ::osi3::RoadMarking& GroundTruth::road_marking(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.road_marking)
  return road_marking_.Get(index);
}
inline ::osi3::RoadMarking* GroundTruth::mutable_road_marking(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.road_marking)
  return road_marking_.Mutable(index);
}
inline ::osi3::RoadMarking* GroundTruth::add_road_marking() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.road_marking)
  return road_marking_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::RoadMarking >*
GroundTruth::mutable_road_marking() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.road_marking)
  return &road_marking_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::RoadMarking >&
GroundTruth::road_marking() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.road_marking)
  return road_marking_;
}

// repeated .osi3.LaneBoundary lane_boundary = 9;
inline int GroundTruth::lane_boundary_size() const {
  return lane_boundary_.size();
}
inline void GroundTruth::clear_lane_boundary() {
  lane_boundary_.Clear();
}
inline const ::osi3::LaneBoundary& GroundTruth::lane_boundary(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.lane_boundary)
  return lane_boundary_.Get(index);
}
inline ::osi3::LaneBoundary* GroundTruth::mutable_lane_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.lane_boundary)
  return lane_boundary_.Mutable(index);
}
inline ::osi3::LaneBoundary* GroundTruth::add_lane_boundary() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.lane_boundary)
  return lane_boundary_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary >*
GroundTruth::mutable_lane_boundary() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.lane_boundary)
  return &lane_boundary_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary >&
GroundTruth::lane_boundary() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.lane_boundary)
  return lane_boundary_;
}

// repeated .osi3.Lane lane = 10;
inline int GroundTruth::lane_size() const {
  return lane_.size();
}
inline void GroundTruth::clear_lane() {
  lane_.Clear();
}
inline const ::osi3::Lane& GroundTruth::lane(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.lane)
  return lane_.Get(index);
}
inline ::osi3::Lane* GroundTruth::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.lane)
  return lane_.Mutable(index);
}
inline ::osi3::Lane* GroundTruth::add_lane() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.lane)
  return lane_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Lane >*
GroundTruth::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.lane)
  return &lane_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Lane >&
GroundTruth::lane() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.lane)
  return lane_;
}

// repeated .osi3.Occupant occupant = 11;
inline int GroundTruth::occupant_size() const {
  return occupant_.size();
}
inline void GroundTruth::clear_occupant() {
  occupant_.Clear();
}
inline const ::osi3::Occupant& GroundTruth::occupant(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.occupant)
  return occupant_.Get(index);
}
inline ::osi3::Occupant* GroundTruth::mutable_occupant(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.occupant)
  return occupant_.Mutable(index);
}
inline ::osi3::Occupant* GroundTruth::add_occupant() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.occupant)
  return occupant_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Occupant >*
GroundTruth::mutable_occupant() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.occupant)
  return &occupant_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Occupant >&
GroundTruth::occupant() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.occupant)
  return occupant_;
}

// optional .osi3.EnvironmentalConditions environmental_conditions = 12;
inline bool GroundTruth::has_environmental_conditions() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GroundTruth::set_has_environmental_conditions() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GroundTruth::clear_has_environmental_conditions() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GroundTruth::clear_environmental_conditions() {
  if (environmental_conditions_ != NULL) environmental_conditions_->::osi3::EnvironmentalConditions::Clear();
  clear_has_environmental_conditions();
}
inline const ::osi3::EnvironmentalConditions& GroundTruth::environmental_conditions() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.environmental_conditions)
  return environmental_conditions_ != NULL ? *environmental_conditions_ : *default_instance_->environmental_conditions_;
}
inline ::osi3::EnvironmentalConditions* GroundTruth::mutable_environmental_conditions() {
  set_has_environmental_conditions();
  if (environmental_conditions_ == NULL) {
    environmental_conditions_ = new ::osi3::EnvironmentalConditions;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.environmental_conditions)
  return environmental_conditions_;
}
inline ::osi3::EnvironmentalConditions* GroundTruth::release_environmental_conditions() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.environmental_conditions)
  clear_has_environmental_conditions();
  ::osi3::EnvironmentalConditions* temp = environmental_conditions_;
  environmental_conditions_ = NULL;
  return temp;
}
inline void GroundTruth::set_allocated_environmental_conditions(::osi3::EnvironmentalConditions* environmental_conditions) {
  delete environmental_conditions_;
  environmental_conditions_ = environmental_conditions;
  if (environmental_conditions) {
    set_has_environmental_conditions();
  } else {
    clear_has_environmental_conditions();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.environmental_conditions)
}

// optional uint32 country_code = 13;
inline bool GroundTruth::has_country_code() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GroundTruth::set_has_country_code() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GroundTruth::clear_has_country_code() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GroundTruth::clear_country_code() {
  country_code_ = 0u;
  clear_has_country_code();
}
inline ::google::protobuf::uint32 GroundTruth::country_code() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.country_code)
  return country_code_;
}
inline void GroundTruth::set_country_code(::google::protobuf::uint32 value) {
  set_has_country_code();
  country_code_ = value;
  // @@protoc_insertion_point(field_set:osi3.GroundTruth.country_code)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osi_5fgroundtruth_2eproto__INCLUDED
