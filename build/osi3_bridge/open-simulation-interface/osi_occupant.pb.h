// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_occupant.proto

#ifndef PROTOBUF_osi_5foccupant_2eproto__INCLUDED
#define PROTOBUF_osi_5foccupant_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)

namespace osi3 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_osi_5foccupant_2eproto();
void protobuf_AssignDesc_osi_5foccupant_2eproto();
void protobuf_ShutdownFile_osi_5foccupant_2eproto();

class Occupant;
class Occupant_Classification;

enum Occupant_Classification_Seat {
  Occupant_Classification_Seat_SEAT_UNKNOWN = 0,
  Occupant_Classification_Seat_SEAT_OTHER = 1,
  Occupant_Classification_Seat_SEAT_FRONT_LEFT = 2,
  Occupant_Classification_Seat_SEAT_FRONT_RIGHT = 3,
  Occupant_Classification_Seat_SEAT_FRONT_MIDDLE = 4,
  Occupant_Classification_Seat_SEAT_BACK_LEFT = 5,
  Occupant_Classification_Seat_SEAT_BACK_RIGHT = 6,
  Occupant_Classification_Seat_SEAT_BACK_MIDDLE = 7,
  Occupant_Classification_Seat_SEAT_THIRD_ROW_LEFT = 8,
  Occupant_Classification_Seat_SEAT_THIRD_ROW_RIGHT = 9,
  Occupant_Classification_Seat_SEAT_THIRD_ROW_MIDDLE = 10
};
bool Occupant_Classification_Seat_IsValid(int value);
const Occupant_Classification_Seat Occupant_Classification_Seat_Seat_MIN = Occupant_Classification_Seat_SEAT_UNKNOWN;
const Occupant_Classification_Seat Occupant_Classification_Seat_Seat_MAX = Occupant_Classification_Seat_SEAT_THIRD_ROW_MIDDLE;
const int Occupant_Classification_Seat_Seat_ARRAYSIZE = Occupant_Classification_Seat_Seat_MAX + 1;

const ::google::protobuf::EnumDescriptor* Occupant_Classification_Seat_descriptor();
inline const ::std::string& Occupant_Classification_Seat_Name(Occupant_Classification_Seat value) {
  return ::google::protobuf::internal::NameOfEnum(
    Occupant_Classification_Seat_descriptor(), value);
}
inline bool Occupant_Classification_Seat_Parse(
    const ::std::string& name, Occupant_Classification_Seat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Occupant_Classification_Seat>(
    Occupant_Classification_Seat_descriptor(), name, value);
}
enum Occupant_Classification_SteeringControl {
  Occupant_Classification_SteeringControl_STEERING_CONTROL_UNKNOWN = 0,
  Occupant_Classification_SteeringControl_STEERING_CONTROL_OTHER = 1,
  Occupant_Classification_SteeringControl_STEERING_CONTROL_NO_HAND = 2,
  Occupant_Classification_SteeringControl_STEERING_CONTROL_ONE_HAND = 3,
  Occupant_Classification_SteeringControl_STEERING_CONTROL_BOTH_HANDS = 4,
  Occupant_Classification_SteeringControl_STEERING_CONTROL_LEFT_HAND = 5,
  Occupant_Classification_SteeringControl_STEERING_CONTROL_RIGHT_HAND = 6
};
bool Occupant_Classification_SteeringControl_IsValid(int value);
const Occupant_Classification_SteeringControl Occupant_Classification_SteeringControl_SteeringControl_MIN = Occupant_Classification_SteeringControl_STEERING_CONTROL_UNKNOWN;
const Occupant_Classification_SteeringControl Occupant_Classification_SteeringControl_SteeringControl_MAX = Occupant_Classification_SteeringControl_STEERING_CONTROL_RIGHT_HAND;
const int Occupant_Classification_SteeringControl_SteeringControl_ARRAYSIZE = Occupant_Classification_SteeringControl_SteeringControl_MAX + 1;

const ::google::protobuf::EnumDescriptor* Occupant_Classification_SteeringControl_descriptor();
inline const ::std::string& Occupant_Classification_SteeringControl_Name(Occupant_Classification_SteeringControl value) {
  return ::google::protobuf::internal::NameOfEnum(
    Occupant_Classification_SteeringControl_descriptor(), value);
}
inline bool Occupant_Classification_SteeringControl_Parse(
    const ::std::string& name, Occupant_Classification_SteeringControl* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Occupant_Classification_SteeringControl>(
    Occupant_Classification_SteeringControl_descriptor(), name, value);
}
// ===================================================================

class Occupant_Classification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Occupant.Classification) */ {
 public:
  Occupant_Classification();
  virtual ~Occupant_Classification();

  Occupant_Classification(const Occupant_Classification& from);

  inline Occupant_Classification& operator=(const Occupant_Classification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Occupant_Classification& default_instance();

  void Swap(Occupant_Classification* other);

  // implements Message ----------------------------------------------

  inline Occupant_Classification* New() const { return New(NULL); }

  Occupant_Classification* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Occupant_Classification& from);
  void MergeFrom(const Occupant_Classification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Occupant_Classification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Occupant_Classification_Seat Seat;
  static const Seat SEAT_UNKNOWN =
    Occupant_Classification_Seat_SEAT_UNKNOWN;
  static const Seat SEAT_OTHER =
    Occupant_Classification_Seat_SEAT_OTHER;
  static const Seat SEAT_FRONT_LEFT =
    Occupant_Classification_Seat_SEAT_FRONT_LEFT;
  static const Seat SEAT_FRONT_RIGHT =
    Occupant_Classification_Seat_SEAT_FRONT_RIGHT;
  static const Seat SEAT_FRONT_MIDDLE =
    Occupant_Classification_Seat_SEAT_FRONT_MIDDLE;
  static const Seat SEAT_BACK_LEFT =
    Occupant_Classification_Seat_SEAT_BACK_LEFT;
  static const Seat SEAT_BACK_RIGHT =
    Occupant_Classification_Seat_SEAT_BACK_RIGHT;
  static const Seat SEAT_BACK_MIDDLE =
    Occupant_Classification_Seat_SEAT_BACK_MIDDLE;
  static const Seat SEAT_THIRD_ROW_LEFT =
    Occupant_Classification_Seat_SEAT_THIRD_ROW_LEFT;
  static const Seat SEAT_THIRD_ROW_RIGHT =
    Occupant_Classification_Seat_SEAT_THIRD_ROW_RIGHT;
  static const Seat SEAT_THIRD_ROW_MIDDLE =
    Occupant_Classification_Seat_SEAT_THIRD_ROW_MIDDLE;
  static inline bool Seat_IsValid(int value) {
    return Occupant_Classification_Seat_IsValid(value);
  }
  static const Seat Seat_MIN =
    Occupant_Classification_Seat_Seat_MIN;
  static const Seat Seat_MAX =
    Occupant_Classification_Seat_Seat_MAX;
  static const int Seat_ARRAYSIZE =
    Occupant_Classification_Seat_Seat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Seat_descriptor() {
    return Occupant_Classification_Seat_descriptor();
  }
  static inline const ::std::string& Seat_Name(Seat value) {
    return Occupant_Classification_Seat_Name(value);
  }
  static inline bool Seat_Parse(const ::std::string& name,
      Seat* value) {
    return Occupant_Classification_Seat_Parse(name, value);
  }

  typedef Occupant_Classification_SteeringControl SteeringControl;
  static const SteeringControl STEERING_CONTROL_UNKNOWN =
    Occupant_Classification_SteeringControl_STEERING_CONTROL_UNKNOWN;
  static const SteeringControl STEERING_CONTROL_OTHER =
    Occupant_Classification_SteeringControl_STEERING_CONTROL_OTHER;
  static const SteeringControl STEERING_CONTROL_NO_HAND =
    Occupant_Classification_SteeringControl_STEERING_CONTROL_NO_HAND;
  static const SteeringControl STEERING_CONTROL_ONE_HAND =
    Occupant_Classification_SteeringControl_STEERING_CONTROL_ONE_HAND;
  static const SteeringControl STEERING_CONTROL_BOTH_HANDS =
    Occupant_Classification_SteeringControl_STEERING_CONTROL_BOTH_HANDS;
  static const SteeringControl STEERING_CONTROL_LEFT_HAND =
    Occupant_Classification_SteeringControl_STEERING_CONTROL_LEFT_HAND;
  static const SteeringControl STEERING_CONTROL_RIGHT_HAND =
    Occupant_Classification_SteeringControl_STEERING_CONTROL_RIGHT_HAND;
  static inline bool SteeringControl_IsValid(int value) {
    return Occupant_Classification_SteeringControl_IsValid(value);
  }
  static const SteeringControl SteeringControl_MIN =
    Occupant_Classification_SteeringControl_SteeringControl_MIN;
  static const SteeringControl SteeringControl_MAX =
    Occupant_Classification_SteeringControl_SteeringControl_MAX;
  static const int SteeringControl_ARRAYSIZE =
    Occupant_Classification_SteeringControl_SteeringControl_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SteeringControl_descriptor() {
    return Occupant_Classification_SteeringControl_descriptor();
  }
  static inline const ::std::string& SteeringControl_Name(SteeringControl value) {
    return Occupant_Classification_SteeringControl_Name(value);
  }
  static inline bool SteeringControl_Parse(const ::std::string& name,
      SteeringControl* value) {
    return Occupant_Classification_SteeringControl_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool is_driver = 2;
  bool has_is_driver() const;
  void clear_is_driver();
  static const int kIsDriverFieldNumber = 2;
  bool is_driver() const;
  void set_is_driver(bool value);

  // optional .osi3.Occupant.Classification.Seat seat = 3;
  bool has_seat() const;
  void clear_seat();
  static const int kSeatFieldNumber = 3;
  ::osi3::Occupant_Classification_Seat seat() const;
  void set_seat(::osi3::Occupant_Classification_Seat value);

  // optional .osi3.Occupant.Classification.SteeringControl steering_control = 4;
  bool has_steering_control() const;
  void clear_steering_control();
  static const int kSteeringControlFieldNumber = 4;
  ::osi3::Occupant_Classification_SteeringControl steering_control() const;
  void set_steering_control(::osi3::Occupant_Classification_SteeringControl value);

  // @@protoc_insertion_point(class_scope:osi3.Occupant.Classification)
 private:
  inline void set_has_is_driver();
  inline void clear_has_is_driver();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_steering_control();
  inline void clear_has_steering_control();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool is_driver_;
  int seat_;
  int steering_control_;
  friend void  protobuf_AddDesc_osi_5foccupant_2eproto();
  friend void protobuf_AssignDesc_osi_5foccupant_2eproto();
  friend void protobuf_ShutdownFile_osi_5foccupant_2eproto();

  void InitAsDefaultInstance();
  static Occupant_Classification* default_instance_;
};
// -------------------------------------------------------------------

class Occupant : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Occupant) */ {
 public:
  Occupant();
  virtual ~Occupant();

  Occupant(const Occupant& from);

  inline Occupant& operator=(const Occupant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Occupant& default_instance();

  void Swap(Occupant* other);

  // implements Message ----------------------------------------------

  inline Occupant* New() const { return New(NULL); }

  Occupant* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Occupant& from);
  void MergeFrom(const Occupant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Occupant* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Occupant_Classification Classification;

  // accessors -------------------------------------------------------

  // optional .osi3.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::osi3::Identifier& id() const;
  ::osi3::Identifier* mutable_id();
  ::osi3::Identifier* release_id();
  void set_allocated_id(::osi3::Identifier* id);

  // optional .osi3.Occupant.Classification classification = 2;
  bool has_classification() const;
  void clear_classification();
  static const int kClassificationFieldNumber = 2;
  const ::osi3::Occupant_Classification& classification() const;
  ::osi3::Occupant_Classification* mutable_classification();
  ::osi3::Occupant_Classification* release_classification();
  void set_allocated_classification(::osi3::Occupant_Classification* classification);

  // @@protoc_insertion_point(class_scope:osi3.Occupant)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_classification();
  inline void clear_has_classification();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::osi3::Identifier* id_;
  ::osi3::Occupant_Classification* classification_;
  friend void  protobuf_AddDesc_osi_5foccupant_2eproto();
  friend void protobuf_AssignDesc_osi_5foccupant_2eproto();
  friend void protobuf_ShutdownFile_osi_5foccupant_2eproto();

  void InitAsDefaultInstance();
  static Occupant* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Occupant_Classification

// optional bool is_driver = 2;
inline bool Occupant_Classification::has_is_driver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Occupant_Classification::set_has_is_driver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Occupant_Classification::clear_has_is_driver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Occupant_Classification::clear_is_driver() {
  is_driver_ = false;
  clear_has_is_driver();
}
inline bool Occupant_Classification::is_driver() const {
  // @@protoc_insertion_point(field_get:osi3.Occupant.Classification.is_driver)
  return is_driver_;
}
inline void Occupant_Classification::set_is_driver(bool value) {
  set_has_is_driver();
  is_driver_ = value;
  // @@protoc_insertion_point(field_set:osi3.Occupant.Classification.is_driver)
}

// optional .osi3.Occupant.Classification.Seat seat = 3;
inline bool Occupant_Classification::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Occupant_Classification::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Occupant_Classification::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Occupant_Classification::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::osi3::Occupant_Classification_Seat Occupant_Classification::seat() const {
  // @@protoc_insertion_point(field_get:osi3.Occupant.Classification.seat)
  return static_cast< ::osi3::Occupant_Classification_Seat >(seat_);
}
inline void Occupant_Classification::set_seat(::osi3::Occupant_Classification_Seat value) {
  assert(::osi3::Occupant_Classification_Seat_IsValid(value));
  set_has_seat();
  seat_ = value;
  // @@protoc_insertion_point(field_set:osi3.Occupant.Classification.seat)
}

// optional .osi3.Occupant.Classification.SteeringControl steering_control = 4;
inline bool Occupant_Classification::has_steering_control() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Occupant_Classification::set_has_steering_control() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Occupant_Classification::clear_has_steering_control() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Occupant_Classification::clear_steering_control() {
  steering_control_ = 0;
  clear_has_steering_control();
}
inline ::osi3::Occupant_Classification_SteeringControl Occupant_Classification::steering_control() const {
  // @@protoc_insertion_point(field_get:osi3.Occupant.Classification.steering_control)
  return static_cast< ::osi3::Occupant_Classification_SteeringControl >(steering_control_);
}
inline void Occupant_Classification::set_steering_control(::osi3::Occupant_Classification_SteeringControl value) {
  assert(::osi3::Occupant_Classification_SteeringControl_IsValid(value));
  set_has_steering_control();
  steering_control_ = value;
  // @@protoc_insertion_point(field_set:osi3.Occupant.Classification.steering_control)
}

// -------------------------------------------------------------------

// Occupant

// optional .osi3.Identifier id = 1;
inline bool Occupant::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Occupant::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Occupant::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Occupant::clear_id() {
  if (id_ != NULL) id_->::osi3::Identifier::Clear();
  clear_has_id();
}
inline const ::osi3::Identifier& Occupant::id() const {
  // @@protoc_insertion_point(field_get:osi3.Occupant.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::osi3::Identifier* Occupant::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.Occupant.id)
  return id_;
}
inline ::osi3::Identifier* Occupant::release_id() {
  // @@protoc_insertion_point(field_release:osi3.Occupant.id)
  clear_has_id();
  ::osi3::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Occupant::set_allocated_id(::osi3::Identifier* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.Occupant.id)
}

// optional .osi3.Occupant.Classification classification = 2;
inline bool Occupant::has_classification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Occupant::set_has_classification() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Occupant::clear_has_classification() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Occupant::clear_classification() {
  if (classification_ != NULL) classification_->::osi3::Occupant_Classification::Clear();
  clear_has_classification();
}
inline const ::osi3::Occupant_Classification& Occupant::classification() const {
  // @@protoc_insertion_point(field_get:osi3.Occupant.classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
inline ::osi3::Occupant_Classification* Occupant::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) {
    classification_ = new ::osi3::Occupant_Classification;
  }
  // @@protoc_insertion_point(field_mutable:osi3.Occupant.classification)
  return classification_;
}
inline ::osi3::Occupant_Classification* Occupant::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.Occupant.classification)
  clear_has_classification();
  ::osi3::Occupant_Classification* temp = classification_;
  classification_ = NULL;
  return temp;
}
inline void Occupant::set_allocated_classification(::osi3::Occupant_Classification* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.Occupant.classification)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::osi3::Occupant_Classification_Seat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::Occupant_Classification_Seat>() {
  return ::osi3::Occupant_Classification_Seat_descriptor();
}
template <> struct is_proto_enum< ::osi3::Occupant_Classification_SteeringControl> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::Occupant_Classification_SteeringControl>() {
  return ::osi3::Occupant_Classification_SteeringControl_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osi_5foccupant_2eproto__INCLUDED
