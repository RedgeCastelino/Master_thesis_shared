// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_groundtruth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osi_groundtruth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osi3 {

namespace {

const ::google::protobuf::Descriptor* GroundTruth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroundTruth_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_osi_5fgroundtruth_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_osi_5fgroundtruth_2eproto() {
  protobuf_AddDesc_osi_5fgroundtruth_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osi_groundtruth.proto");
  GOOGLE_CHECK(file != NULL);
  GroundTruth_descriptor_ = file->message_type(0);
  static const int GroundTruth_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, host_vehicle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, stationary_object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, moving_object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, traffic_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, traffic_light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, road_marking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, lane_boundary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, occupant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, environmental_conditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, country_code_),
  };
  GroundTruth_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroundTruth_descriptor_,
      GroundTruth::default_instance_,
      GroundTruth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, _has_bits_[0]),
      -1,
      -1,
      sizeof(GroundTruth),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osi_5fgroundtruth_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroundTruth_descriptor_, &GroundTruth::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osi_5fgroundtruth_2eproto() {
  delete GroundTruth::default_instance_;
  delete GroundTruth_reflection_;
}

void protobuf_AddDesc_osi_5fgroundtruth_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_osi_5fgroundtruth_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::osi3::protobuf_AddDesc_osi_5fversion_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fcommon_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fenvironment_2eproto();
  ::osi3::protobuf_AddDesc_osi_5ftrafficsign_2eproto();
  ::osi3::protobuf_AddDesc_osi_5ftrafficlight_2eproto();
  ::osi3::protobuf_AddDesc_osi_5froadmarking_2eproto();
  ::osi3::protobuf_AddDesc_osi_5flane_2eproto();
  ::osi3::protobuf_AddDesc_osi_5fobject_2eproto();
  ::osi3::protobuf_AddDesc_osi_5foccupant_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025osi_groundtruth.proto\022\004osi3\032\021osi_versi"
    "on.proto\032\020osi_common.proto\032\025osi_environm"
    "ent.proto\032\025osi_trafficsign.proto\032\026osi_tr"
    "afficlight.proto\032\025osi_roadmarking.proto\032"
    "\016osi_lane.proto\032\020osi_object.proto\032\022osi_o"
    "ccupant.proto\"\236\004\n\013GroundTruth\022\'\n\007version"
    "\030\001 \001(\0132\026.osi3.InterfaceVersion\022\"\n\ttimest"
    "amp\030\002 \001(\0132\017.osi3.Timestamp\022)\n\017host_vehic"
    "le_id\030\003 \001(\0132\020.osi3.Identifier\0221\n\021station"
    "ary_object\030\004 \003(\0132\026.osi3.StationaryObject"
    "\022)\n\rmoving_object\030\005 \003(\0132\022.osi3.MovingObj"
    "ect\022\'\n\014traffic_sign\030\006 \003(\0132\021.osi3.Traffic"
    "Sign\022)\n\rtraffic_light\030\007 \003(\0132\022.osi3.Traff"
    "icLight\022\'\n\014road_marking\030\010 \003(\0132\021.osi3.Roa"
    "dMarking\022)\n\rlane_boundary\030\t \003(\0132\022.osi3.L"
    "aneBoundary\022\030\n\004lane\030\n \003(\0132\n.osi3.Lane\022 \n"
    "\010occupant\030\013 \003(\0132\016.osi3.Occupant\022\?\n\030envir"
    "onmental_conditions\030\014 \001(\0132\035.osi3.Environ"
    "mentalConditions\022\024\n\014country_code\030\r \001(\rB\002"
    "H\001", 762);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_groundtruth.proto", &protobuf_RegisterTypes);
  GroundTruth::default_instance_ = new GroundTruth();
  GroundTruth::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osi_5fgroundtruth_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osi_5fgroundtruth_2eproto {
  StaticDescriptorInitializer_osi_5fgroundtruth_2eproto() {
    protobuf_AddDesc_osi_5fgroundtruth_2eproto();
  }
} static_descriptor_initializer_osi_5fgroundtruth_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroundTruth::kVersionFieldNumber;
const int GroundTruth::kTimestampFieldNumber;
const int GroundTruth::kHostVehicleIdFieldNumber;
const int GroundTruth::kStationaryObjectFieldNumber;
const int GroundTruth::kMovingObjectFieldNumber;
const int GroundTruth::kTrafficSignFieldNumber;
const int GroundTruth::kTrafficLightFieldNumber;
const int GroundTruth::kRoadMarkingFieldNumber;
const int GroundTruth::kLaneBoundaryFieldNumber;
const int GroundTruth::kLaneFieldNumber;
const int GroundTruth::kOccupantFieldNumber;
const int GroundTruth::kEnvironmentalConditionsFieldNumber;
const int GroundTruth::kCountryCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroundTruth::GroundTruth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.GroundTruth)
}

void GroundTruth::InitAsDefaultInstance() {
  version_ = const_cast< ::osi3::InterfaceVersion*>(&::osi3::InterfaceVersion::default_instance());
  timestamp_ = const_cast< ::osi3::Timestamp*>(&::osi3::Timestamp::default_instance());
  host_vehicle_id_ = const_cast< ::osi3::Identifier*>(&::osi3::Identifier::default_instance());
  environmental_conditions_ = const_cast< ::osi3::EnvironmentalConditions*>(&::osi3::EnvironmentalConditions::default_instance());
}

GroundTruth::GroundTruth(const GroundTruth& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osi3.GroundTruth)
}

void GroundTruth::SharedCtor() {
  _cached_size_ = 0;
  version_ = NULL;
  timestamp_ = NULL;
  host_vehicle_id_ = NULL;
  environmental_conditions_ = NULL;
  country_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroundTruth::~GroundTruth() {
  // @@protoc_insertion_point(destructor:osi3.GroundTruth)
  SharedDtor();
}

void GroundTruth::SharedDtor() {
  if (this != default_instance_) {
    delete version_;
    delete timestamp_;
    delete host_vehicle_id_;
    delete environmental_conditions_;
  }
}

void GroundTruth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroundTruth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroundTruth_descriptor_;
}

const GroundTruth& GroundTruth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osi_5fgroundtruth_2eproto();
  return *default_instance_;
}

GroundTruth* GroundTruth::default_instance_ = NULL;

GroundTruth* GroundTruth::New(::google::protobuf::Arena* arena) const {
  GroundTruth* n = new GroundTruth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.GroundTruth)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_version()) {
      if (version_ != NULL) version_->::osi3::InterfaceVersion::Clear();
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::osi3::Timestamp::Clear();
    }
    if (has_host_vehicle_id()) {
      if (host_vehicle_id_ != NULL) host_vehicle_id_->::osi3::Identifier::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 6144u) {
    if (has_environmental_conditions()) {
      if (environmental_conditions_ != NULL) environmental_conditions_->::osi3::EnvironmentalConditions::Clear();
    }
    country_code_ = 0u;
  }
  stationary_object_.Clear();
  moving_object_.Clear();
  traffic_sign_.Clear();
  traffic_light_.Clear();
  road_marking_.Clear();
  lane_boundary_.Clear();
  lane_.Clear();
  occupant_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GroundTruth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.GroundTruth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osi3.InterfaceVersion version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .osi3.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_host_vehicle_id;
        break;
      }

      // optional .osi3.Identifier host_vehicle_id = 3;
      case 3: {
        if (tag == 26) {
         parse_host_vehicle_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host_vehicle_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stationary_object;
        break;
      }

      // repeated .osi3.StationaryObject stationary_object = 4;
      case 4: {
        if (tag == 34) {
         parse_stationary_object:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stationary_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stationary_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_stationary_object;
        if (input->ExpectTag(42)) goto parse_loop_moving_object;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.MovingObject moving_object = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_moving_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_moving_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_moving_object;
        if (input->ExpectTag(50)) goto parse_loop_traffic_sign;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.TrafficSign traffic_sign = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_traffic_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_traffic_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_traffic_sign;
        if (input->ExpectTag(58)) goto parse_loop_traffic_light;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.TrafficLight traffic_light = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_traffic_light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_traffic_light;
        if (input->ExpectTag(66)) goto parse_loop_road_marking;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.RoadMarking road_marking = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_road_marking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_road_marking()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_road_marking;
        if (input->ExpectTag(74)) goto parse_loop_lane_boundary;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.LaneBoundary lane_boundary = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lane_boundary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lane_boundary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_lane_boundary;
        if (input->ExpectTag(82)) goto parse_loop_lane;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.Lane lane = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_lane;
        if (input->ExpectTag(90)) goto parse_loop_occupant;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .osi3.Occupant occupant = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_occupant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_occupant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_occupant;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(98)) goto parse_environmental_conditions;
        break;
      }

      // optional .osi3.EnvironmentalConditions environmental_conditions = 12;
      case 12: {
        if (tag == 98) {
         parse_environmental_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_environmental_conditions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_country_code;
        break;
      }

      // optional uint32 country_code = 13;
      case 13: {
        if (tag == 104) {
         parse_country_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_code_)));
          set_has_country_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.GroundTruth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.GroundTruth)
  return false;
#undef DO_
}

void GroundTruth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.GroundTruth)
  // optional .osi3.InterfaceVersion version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->version_, output);
  }

  // optional .osi3.Timestamp timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  // optional .osi3.Identifier host_vehicle_id = 3;
  if (has_host_vehicle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->host_vehicle_id_, output);
  }

  // repeated .osi3.StationaryObject stationary_object = 4;
  for (unsigned int i = 0, n = this->stationary_object_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stationary_object(i), output);
  }

  // repeated .osi3.MovingObject moving_object = 5;
  for (unsigned int i = 0, n = this->moving_object_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->moving_object(i), output);
  }

  // repeated .osi3.TrafficSign traffic_sign = 6;
  for (unsigned int i = 0, n = this->traffic_sign_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->traffic_sign(i), output);
  }

  // repeated .osi3.TrafficLight traffic_light = 7;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->traffic_light(i), output);
  }

  // repeated .osi3.RoadMarking road_marking = 8;
  for (unsigned int i = 0, n = this->road_marking_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->road_marking(i), output);
  }

  // repeated .osi3.LaneBoundary lane_boundary = 9;
  for (unsigned int i = 0, n = this->lane_boundary_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->lane_boundary(i), output);
  }

  // repeated .osi3.Lane lane = 10;
  for (unsigned int i = 0, n = this->lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->lane(i), output);
  }

  // repeated .osi3.Occupant occupant = 11;
  for (unsigned int i = 0, n = this->occupant_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->occupant(i), output);
  }

  // optional .osi3.EnvironmentalConditions environmental_conditions = 12;
  if (has_environmental_conditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->environmental_conditions_, output);
  }

  // optional uint32 country_code = 13;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->country_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.GroundTruth)
}

::google::protobuf::uint8* GroundTruth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.GroundTruth)
  // optional .osi3.InterfaceVersion version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->version_, false, target);
  }

  // optional .osi3.Timestamp timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->timestamp_, false, target);
  }

  // optional .osi3.Identifier host_vehicle_id = 3;
  if (has_host_vehicle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->host_vehicle_id_, false, target);
  }

  // repeated .osi3.StationaryObject stationary_object = 4;
  for (unsigned int i = 0, n = this->stationary_object_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->stationary_object(i), false, target);
  }

  // repeated .osi3.MovingObject moving_object = 5;
  for (unsigned int i = 0, n = this->moving_object_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->moving_object(i), false, target);
  }

  // repeated .osi3.TrafficSign traffic_sign = 6;
  for (unsigned int i = 0, n = this->traffic_sign_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->traffic_sign(i), false, target);
  }

  // repeated .osi3.TrafficLight traffic_light = 7;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->traffic_light(i), false, target);
  }

  // repeated .osi3.RoadMarking road_marking = 8;
  for (unsigned int i = 0, n = this->road_marking_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->road_marking(i), false, target);
  }

  // repeated .osi3.LaneBoundary lane_boundary = 9;
  for (unsigned int i = 0, n = this->lane_boundary_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->lane_boundary(i), false, target);
  }

  // repeated .osi3.Lane lane = 10;
  for (unsigned int i = 0, n = this->lane_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->lane(i), false, target);
  }

  // repeated .osi3.Occupant occupant = 11;
  for (unsigned int i = 0, n = this->occupant_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->occupant(i), false, target);
  }

  // optional .osi3.EnvironmentalConditions environmental_conditions = 12;
  if (has_environmental_conditions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->environmental_conditions_, false, target);
  }

  // optional uint32 country_code = 13;
  if (has_country_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->country_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.GroundTruth)
  return target;
}

int GroundTruth::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.GroundTruth)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .osi3.InterfaceVersion version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->version_);
    }

    // optional .osi3.Timestamp timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timestamp_);
    }

    // optional .osi3.Identifier host_vehicle_id = 3;
    if (has_host_vehicle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->host_vehicle_id_);
    }

  }
  if (_has_bits_[11 / 32] & 6144u) {
    // optional .osi3.EnvironmentalConditions environmental_conditions = 12;
    if (has_environmental_conditions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->environmental_conditions_);
    }

    // optional uint32 country_code = 13;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_code());
    }

  }
  // repeated .osi3.StationaryObject stationary_object = 4;
  total_size += 1 * this->stationary_object_size();
  for (int i = 0; i < this->stationary_object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stationary_object(i));
  }

  // repeated .osi3.MovingObject moving_object = 5;
  total_size += 1 * this->moving_object_size();
  for (int i = 0; i < this->moving_object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moving_object(i));
  }

  // repeated .osi3.TrafficSign traffic_sign = 6;
  total_size += 1 * this->traffic_sign_size();
  for (int i = 0; i < this->traffic_sign_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_sign(i));
  }

  // repeated .osi3.TrafficLight traffic_light = 7;
  total_size += 1 * this->traffic_light_size();
  for (int i = 0; i < this->traffic_light_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_light(i));
  }

  // repeated .osi3.RoadMarking road_marking = 8;
  total_size += 1 * this->road_marking_size();
  for (int i = 0; i < this->road_marking_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->road_marking(i));
  }

  // repeated .osi3.LaneBoundary lane_boundary = 9;
  total_size += 1 * this->lane_boundary_size();
  for (int i = 0; i < this->lane_boundary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_boundary(i));
  }

  // repeated .osi3.Lane lane = 10;
  total_size += 1 * this->lane_size();
  for (int i = 0; i < this->lane_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane(i));
  }

  // repeated .osi3.Occupant occupant = 11;
  total_size += 1 * this->occupant_size();
  for (int i = 0; i < this->occupant_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->occupant(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroundTruth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.GroundTruth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GroundTruth* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GroundTruth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.GroundTruth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.GroundTruth)
    MergeFrom(*source);
  }
}

void GroundTruth::MergeFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.GroundTruth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  stationary_object_.MergeFrom(from.stationary_object_);
  moving_object_.MergeFrom(from.moving_object_);
  traffic_sign_.MergeFrom(from.traffic_sign_);
  traffic_light_.MergeFrom(from.traffic_light_);
  road_marking_.MergeFrom(from.road_marking_);
  lane_boundary_.MergeFrom(from.lane_boundary_);
  lane_.MergeFrom(from.lane_);
  occupant_.MergeFrom(from.occupant_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::osi3::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_host_vehicle_id()) {
      mutable_host_vehicle_id()->::osi3::Identifier::MergeFrom(from.host_vehicle_id());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_environmental_conditions()) {
      mutable_environmental_conditions()->::osi3::EnvironmentalConditions::MergeFrom(from.environmental_conditions());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GroundTruth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundTruth::CopyFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTruth::IsInitialized() const {

  return true;
}

void GroundTruth::Swap(GroundTruth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroundTruth::InternalSwap(GroundTruth* other) {
  std::swap(version_, other->version_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(host_vehicle_id_, other->host_vehicle_id_);
  stationary_object_.UnsafeArenaSwap(&other->stationary_object_);
  moving_object_.UnsafeArenaSwap(&other->moving_object_);
  traffic_sign_.UnsafeArenaSwap(&other->traffic_sign_);
  traffic_light_.UnsafeArenaSwap(&other->traffic_light_);
  road_marking_.UnsafeArenaSwap(&other->road_marking_);
  lane_boundary_.UnsafeArenaSwap(&other->lane_boundary_);
  lane_.UnsafeArenaSwap(&other->lane_);
  occupant_.UnsafeArenaSwap(&other->occupant_);
  std::swap(environmental_conditions_, other->environmental_conditions_);
  std::swap(country_code_, other->country_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroundTruth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroundTruth_descriptor_;
  metadata.reflection = GroundTruth_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroundTruth

// optional .osi3.InterfaceVersion version = 1;
bool GroundTruth::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GroundTruth::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GroundTruth::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GroundTruth::clear_version() {
  if (version_ != NULL) version_->::osi3::InterfaceVersion::Clear();
  clear_has_version();
}
const ::osi3::InterfaceVersion& GroundTruth::version() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
::osi3::InterfaceVersion* GroundTruth::mutable_version() {
  set_has_version();
  if (version_ == NULL) {
    version_ = new ::osi3::InterfaceVersion;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.version)
  return version_;
}
::osi3::InterfaceVersion* GroundTruth::release_version() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.version)
  clear_has_version();
  ::osi3::InterfaceVersion* temp = version_;
  version_ = NULL;
  return temp;
}
void GroundTruth::set_allocated_version(::osi3::InterfaceVersion* version) {
  delete version_;
  version_ = version;
  if (version) {
    set_has_version();
  } else {
    clear_has_version();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.version)
}

// optional .osi3.Timestamp timestamp = 2;
bool GroundTruth::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GroundTruth::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void GroundTruth::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void GroundTruth::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::osi3::Timestamp::Clear();
  clear_has_timestamp();
}
const ::osi3::Timestamp& GroundTruth::timestamp() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::osi3::Timestamp* GroundTruth::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::osi3::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.timestamp)
  return timestamp_;
}
::osi3::Timestamp* GroundTruth::release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.timestamp)
  clear_has_timestamp();
  ::osi3::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void GroundTruth::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.timestamp)
}

// optional .osi3.Identifier host_vehicle_id = 3;
bool GroundTruth::has_host_vehicle_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GroundTruth::set_has_host_vehicle_id() {
  _has_bits_[0] |= 0x00000004u;
}
void GroundTruth::clear_has_host_vehicle_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void GroundTruth::clear_host_vehicle_id() {
  if (host_vehicle_id_ != NULL) host_vehicle_id_->::osi3::Identifier::Clear();
  clear_has_host_vehicle_id();
}
const ::osi3::Identifier& GroundTruth::host_vehicle_id() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.host_vehicle_id)
  return host_vehicle_id_ != NULL ? *host_vehicle_id_ : *default_instance_->host_vehicle_id_;
}
::osi3::Identifier* GroundTruth::mutable_host_vehicle_id() {
  set_has_host_vehicle_id();
  if (host_vehicle_id_ == NULL) {
    host_vehicle_id_ = new ::osi3::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.host_vehicle_id)
  return host_vehicle_id_;
}
::osi3::Identifier* GroundTruth::release_host_vehicle_id() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.host_vehicle_id)
  clear_has_host_vehicle_id();
  ::osi3::Identifier* temp = host_vehicle_id_;
  host_vehicle_id_ = NULL;
  return temp;
}
void GroundTruth::set_allocated_host_vehicle_id(::osi3::Identifier* host_vehicle_id) {
  delete host_vehicle_id_;
  host_vehicle_id_ = host_vehicle_id;
  if (host_vehicle_id) {
    set_has_host_vehicle_id();
  } else {
    clear_has_host_vehicle_id();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.host_vehicle_id)
}

// repeated .osi3.StationaryObject stationary_object = 4;
int GroundTruth::stationary_object_size() const {
  return stationary_object_.size();
}
void GroundTruth::clear_stationary_object() {
  stationary_object_.Clear();
}
const ::osi3::StationaryObject& GroundTruth::stationary_object(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.stationary_object)
  return stationary_object_.Get(index);
}
::osi3::StationaryObject* GroundTruth::mutable_stationary_object(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.stationary_object)
  return stationary_object_.Mutable(index);
}
::osi3::StationaryObject* GroundTruth::add_stationary_object() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.stationary_object)
  return stationary_object_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::StationaryObject >*
GroundTruth::mutable_stationary_object() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.stationary_object)
  return &stationary_object_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::StationaryObject >&
GroundTruth::stationary_object() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.stationary_object)
  return stationary_object_;
}

// repeated .osi3.MovingObject moving_object = 5;
int GroundTruth::moving_object_size() const {
  return moving_object_.size();
}
void GroundTruth::clear_moving_object() {
  moving_object_.Clear();
}
const ::osi3::MovingObject& GroundTruth::moving_object(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.moving_object)
  return moving_object_.Get(index);
}
::osi3::MovingObject* GroundTruth::mutable_moving_object(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.moving_object)
  return moving_object_.Mutable(index);
}
::osi3::MovingObject* GroundTruth::add_moving_object() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.moving_object)
  return moving_object_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::MovingObject >*
GroundTruth::mutable_moving_object() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.moving_object)
  return &moving_object_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::MovingObject >&
GroundTruth::moving_object() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.moving_object)
  return moving_object_;
}

// repeated .osi3.TrafficSign traffic_sign = 6;
int GroundTruth::traffic_sign_size() const {
  return traffic_sign_.size();
}
void GroundTruth::clear_traffic_sign() {
  traffic_sign_.Clear();
}
const ::osi3::TrafficSign& GroundTruth::traffic_sign(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.traffic_sign)
  return traffic_sign_.Get(index);
}
::osi3::TrafficSign* GroundTruth::mutable_traffic_sign(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.traffic_sign)
  return traffic_sign_.Mutable(index);
}
::osi3::TrafficSign* GroundTruth::add_traffic_sign() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.traffic_sign)
  return traffic_sign_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::TrafficSign >*
GroundTruth::mutable_traffic_sign() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.traffic_sign)
  return &traffic_sign_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::TrafficSign >&
GroundTruth::traffic_sign() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.traffic_sign)
  return traffic_sign_;
}

// repeated .osi3.TrafficLight traffic_light = 7;
int GroundTruth::traffic_light_size() const {
  return traffic_light_.size();
}
void GroundTruth::clear_traffic_light() {
  traffic_light_.Clear();
}
const ::osi3::TrafficLight& GroundTruth::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.traffic_light)
  return traffic_light_.Get(index);
}
::osi3::TrafficLight* GroundTruth::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.traffic_light)
  return traffic_light_.Mutable(index);
}
::osi3::TrafficLight* GroundTruth::add_traffic_light() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.traffic_light)
  return traffic_light_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::TrafficLight >*
GroundTruth::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.traffic_light)
  return &traffic_light_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::TrafficLight >&
GroundTruth::traffic_light() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.traffic_light)
  return traffic_light_;
}

// repeated .osi3.RoadMarking road_marking = 8;
int GroundTruth::road_marking_size() const {
  return road_marking_.size();
}
void GroundTruth::clear_road_marking() {
  road_marking_.Clear();
}
const ::osi3::RoadMarking& GroundTruth::road_marking(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.road_marking)
  return road_marking_.Get(index);
}
::osi3::RoadMarking* GroundTruth::mutable_road_marking(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.road_marking)
  return road_marking_.Mutable(index);
}
::osi3::RoadMarking* GroundTruth::add_road_marking() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.road_marking)
  return road_marking_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::RoadMarking >*
GroundTruth::mutable_road_marking() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.road_marking)
  return &road_marking_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::RoadMarking >&
GroundTruth::road_marking() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.road_marking)
  return road_marking_;
}

// repeated .osi3.LaneBoundary lane_boundary = 9;
int GroundTruth::lane_boundary_size() const {
  return lane_boundary_.size();
}
void GroundTruth::clear_lane_boundary() {
  lane_boundary_.Clear();
}
const ::osi3::LaneBoundary& GroundTruth::lane_boundary(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.lane_boundary)
  return lane_boundary_.Get(index);
}
::osi3::LaneBoundary* GroundTruth::mutable_lane_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.lane_boundary)
  return lane_boundary_.Mutable(index);
}
::osi3::LaneBoundary* GroundTruth::add_lane_boundary() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.lane_boundary)
  return lane_boundary_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary >*
GroundTruth::mutable_lane_boundary() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.lane_boundary)
  return &lane_boundary_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::LaneBoundary >&
GroundTruth::lane_boundary() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.lane_boundary)
  return lane_boundary_;
}

// repeated .osi3.Lane lane = 10;
int GroundTruth::lane_size() const {
  return lane_.size();
}
void GroundTruth::clear_lane() {
  lane_.Clear();
}
const ::osi3::Lane& GroundTruth::lane(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.lane)
  return lane_.Get(index);
}
::osi3::Lane* GroundTruth::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.lane)
  return lane_.Mutable(index);
}
::osi3::Lane* GroundTruth::add_lane() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.lane)
  return lane_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::Lane >*
GroundTruth::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.lane)
  return &lane_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::Lane >&
GroundTruth::lane() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.lane)
  return lane_;
}

// repeated .osi3.Occupant occupant = 11;
int GroundTruth::occupant_size() const {
  return occupant_.size();
}
void GroundTruth::clear_occupant() {
  occupant_.Clear();
}
const ::osi3::Occupant& GroundTruth::occupant(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.occupant)
  return occupant_.Get(index);
}
::osi3::Occupant* GroundTruth::mutable_occupant(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.occupant)
  return occupant_.Mutable(index);
}
::osi3::Occupant* GroundTruth::add_occupant() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.occupant)
  return occupant_.Add();
}
::google::protobuf::RepeatedPtrField< ::osi3::Occupant >*
GroundTruth::mutable_occupant() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.occupant)
  return &occupant_;
}
const ::google::protobuf::RepeatedPtrField< ::osi3::Occupant >&
GroundTruth::occupant() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.occupant)
  return occupant_;
}

// optional .osi3.EnvironmentalConditions environmental_conditions = 12;
bool GroundTruth::has_environmental_conditions() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GroundTruth::set_has_environmental_conditions() {
  _has_bits_[0] |= 0x00000800u;
}
void GroundTruth::clear_has_environmental_conditions() {
  _has_bits_[0] &= ~0x00000800u;
}
void GroundTruth::clear_environmental_conditions() {
  if (environmental_conditions_ != NULL) environmental_conditions_->::osi3::EnvironmentalConditions::Clear();
  clear_has_environmental_conditions();
}
const ::osi3::EnvironmentalConditions& GroundTruth::environmental_conditions() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.environmental_conditions)
  return environmental_conditions_ != NULL ? *environmental_conditions_ : *default_instance_->environmental_conditions_;
}
::osi3::EnvironmentalConditions* GroundTruth::mutable_environmental_conditions() {
  set_has_environmental_conditions();
  if (environmental_conditions_ == NULL) {
    environmental_conditions_ = new ::osi3::EnvironmentalConditions;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.environmental_conditions)
  return environmental_conditions_;
}
::osi3::EnvironmentalConditions* GroundTruth::release_environmental_conditions() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.environmental_conditions)
  clear_has_environmental_conditions();
  ::osi3::EnvironmentalConditions* temp = environmental_conditions_;
  environmental_conditions_ = NULL;
  return temp;
}
void GroundTruth::set_allocated_environmental_conditions(::osi3::EnvironmentalConditions* environmental_conditions) {
  delete environmental_conditions_;
  environmental_conditions_ = environmental_conditions;
  if (environmental_conditions) {
    set_has_environmental_conditions();
  } else {
    clear_has_environmental_conditions();
  }
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.environmental_conditions)
}

// optional uint32 country_code = 13;
bool GroundTruth::has_country_code() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GroundTruth::set_has_country_code() {
  _has_bits_[0] |= 0x00001000u;
}
void GroundTruth::clear_has_country_code() {
  _has_bits_[0] &= ~0x00001000u;
}
void GroundTruth::clear_country_code() {
  country_code_ = 0u;
  clear_has_country_code();
}
 ::google::protobuf::uint32 GroundTruth::country_code() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.country_code)
  return country_code_;
}
 void GroundTruth::set_country_code(::google::protobuf::uint32 value) {
  set_has_country_code();
  country_code_ = value;
  // @@protoc_insertion_point(field_set:osi3.GroundTruth.country_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)
