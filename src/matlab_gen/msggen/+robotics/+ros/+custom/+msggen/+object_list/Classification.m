classdef Classification < robotics.ros.Message
    %Classification MATLAB implementation of object_list/Classification
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'object_list/Classification' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '37b53ddc70d71a526ada035ab3f28e33' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Car
        Truck
        Motorcycle
        Bicycle
        Pedestrian
        Stacionary
        Other
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Bicycle', 'Car', 'Motorcycle', 'Other', 'Pedestrian', 'Stacionary', 'Truck'} % List of non-constant message properties
        ROSPropertyList = {'bicycle', 'car', 'motorcycle', 'other', 'pedestrian', 'stacionary', 'truck'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Classification(msg)
            %Classification Construct the message object Classification
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function car = get.Car(obj)
            %get.Car Get the value for property Car
            car = single(obj.JavaMessage.getCar);
        end
        
        function set.Car(obj, car)
            %set.Car Set the value for property Car
            validateattributes(car, {'numeric'}, {'nonempty', 'scalar'}, 'Classification', 'Car');
            
            obj.JavaMessage.setCar(car);
        end
        
        function truck = get.Truck(obj)
            %get.Truck Get the value for property Truck
            truck = single(obj.JavaMessage.getTruck);
        end
        
        function set.Truck(obj, truck)
            %set.Truck Set the value for property Truck
            validateattributes(truck, {'numeric'}, {'nonempty', 'scalar'}, 'Classification', 'Truck');
            
            obj.JavaMessage.setTruck(truck);
        end
        
        function motorcycle = get.Motorcycle(obj)
            %get.Motorcycle Get the value for property Motorcycle
            motorcycle = single(obj.JavaMessage.getMotorcycle);
        end
        
        function set.Motorcycle(obj, motorcycle)
            %set.Motorcycle Set the value for property Motorcycle
            validateattributes(motorcycle, {'numeric'}, {'nonempty', 'scalar'}, 'Classification', 'Motorcycle');
            
            obj.JavaMessage.setMotorcycle(motorcycle);
        end
        
        function bicycle = get.Bicycle(obj)
            %get.Bicycle Get the value for property Bicycle
            bicycle = single(obj.JavaMessage.getBicycle);
        end
        
        function set.Bicycle(obj, bicycle)
            %set.Bicycle Set the value for property Bicycle
            validateattributes(bicycle, {'numeric'}, {'nonempty', 'scalar'}, 'Classification', 'Bicycle');
            
            obj.JavaMessage.setBicycle(bicycle);
        end
        
        function pedestrian = get.Pedestrian(obj)
            %get.Pedestrian Get the value for property Pedestrian
            pedestrian = single(obj.JavaMessage.getPedestrian);
        end
        
        function set.Pedestrian(obj, pedestrian)
            %set.Pedestrian Set the value for property Pedestrian
            validateattributes(pedestrian, {'numeric'}, {'nonempty', 'scalar'}, 'Classification', 'Pedestrian');
            
            obj.JavaMessage.setPedestrian(pedestrian);
        end
        
        function stacionary = get.Stacionary(obj)
            %get.Stacionary Get the value for property Stacionary
            stacionary = single(obj.JavaMessage.getStacionary);
        end
        
        function set.Stacionary(obj, stacionary)
            %set.Stacionary Set the value for property Stacionary
            validateattributes(stacionary, {'numeric'}, {'nonempty', 'scalar'}, 'Classification', 'Stacionary');
            
            obj.JavaMessage.setStacionary(stacionary);
        end
        
        function other = get.Other(obj)
            %get.Other Get the value for property Other
            other = single(obj.JavaMessage.getOther);
        end
        
        function set.Other(obj, other)
            %set.Other Set the value for property Other
            validateattributes(other, {'numeric'}, {'nonempty', 'scalar'}, 'Classification', 'Other');
            
            obj.JavaMessage.setOther(other);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Car = obj.Car;
            cpObj.Truck = obj.Truck;
            cpObj.Motorcycle = obj.Motorcycle;
            cpObj.Bicycle = obj.Bicycle;
            cpObj.Pedestrian = obj.Pedestrian;
            cpObj.Stacionary = obj.Stacionary;
            cpObj.Other = obj.Other;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Car = strObj.Car;
            obj.Truck = strObj.Truck;
            obj.Motorcycle = strObj.Motorcycle;
            obj.Bicycle = strObj.Bicycle;
            obj.Pedestrian = strObj.Pedestrian;
            obj.Stacionary = strObj.Stacionary;
            obj.Other = strObj.Other;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Car = obj.Car;
            strObj.Truck = obj.Truck;
            strObj.Motorcycle = obj.Motorcycle;
            strObj.Bicycle = obj.Bicycle;
            strObj.Pedestrian = obj.Pedestrian;
            strObj.Stacionary = obj.Stacionary;
            strObj.Other = obj.Other;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.object_list.Classification.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.object_list.Classification;
            obj.reload(strObj);
        end
    end
end
