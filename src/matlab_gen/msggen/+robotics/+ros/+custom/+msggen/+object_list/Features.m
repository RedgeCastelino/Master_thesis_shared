classdef Features < robotics.ros.Message
    %Features MATLAB implementation of object_list/Features
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'object_list/Features' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'acfb5ca82687e271a6722833317ebf1a' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        FL
        FM
        FR
        MR
        RR
        RM
        RL
        ML
    end
    
    properties (Constant, Hidden)
        PropertyList = {'FL', 'FM', 'FR', 'ML', 'MR', 'RL', 'RM', 'RR'} % List of non-constant message properties
        ROSPropertyList = {'FL', 'FM', 'FR', 'ML', 'MR', 'RL', 'RM', 'RR'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Features(msg)
            %Features Construct the message object Features
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function fl = get.FL(obj)
            %get.FL Get the value for property FL
            fl = typecast(int8(obj.JavaMessage.getFL), 'uint8');
        end
        
        function set.FL(obj, fl)
            %set.FL Set the value for property FL
            validateattributes(fl, {'numeric'}, {'nonempty', 'scalar'}, 'Features', 'FL');
            
            obj.JavaMessage.setFL(fl);
        end
        
        function fm = get.FM(obj)
            %get.FM Get the value for property FM
            fm = typecast(int8(obj.JavaMessage.getFM), 'uint8');
        end
        
        function set.FM(obj, fm)
            %set.FM Set the value for property FM
            validateattributes(fm, {'numeric'}, {'nonempty', 'scalar'}, 'Features', 'FM');
            
            obj.JavaMessage.setFM(fm);
        end
        
        function fr = get.FR(obj)
            %get.FR Get the value for property FR
            fr = typecast(int8(obj.JavaMessage.getFR), 'uint8');
        end
        
        function set.FR(obj, fr)
            %set.FR Set the value for property FR
            validateattributes(fr, {'numeric'}, {'nonempty', 'scalar'}, 'Features', 'FR');
            
            obj.JavaMessage.setFR(fr);
        end
        
        function mr = get.MR(obj)
            %get.MR Get the value for property MR
            mr = typecast(int8(obj.JavaMessage.getMR), 'uint8');
        end
        
        function set.MR(obj, mr)
            %set.MR Set the value for property MR
            validateattributes(mr, {'numeric'}, {'nonempty', 'scalar'}, 'Features', 'MR');
            
            obj.JavaMessage.setMR(mr);
        end
        
        function rr = get.RR(obj)
            %get.RR Get the value for property RR
            rr = typecast(int8(obj.JavaMessage.getRR), 'uint8');
        end
        
        function set.RR(obj, rr)
            %set.RR Set the value for property RR
            validateattributes(rr, {'numeric'}, {'nonempty', 'scalar'}, 'Features', 'RR');
            
            obj.JavaMessage.setRR(rr);
        end
        
        function rm = get.RM(obj)
            %get.RM Get the value for property RM
            rm = typecast(int8(obj.JavaMessage.getRM), 'uint8');
        end
        
        function set.RM(obj, rm)
            %set.RM Set the value for property RM
            validateattributes(rm, {'numeric'}, {'nonempty', 'scalar'}, 'Features', 'RM');
            
            obj.JavaMessage.setRM(rm);
        end
        
        function rl = get.RL(obj)
            %get.RL Get the value for property RL
            rl = typecast(int8(obj.JavaMessage.getRL), 'uint8');
        end
        
        function set.RL(obj, rl)
            %set.RL Set the value for property RL
            validateattributes(rl, {'numeric'}, {'nonempty', 'scalar'}, 'Features', 'RL');
            
            obj.JavaMessage.setRL(rl);
        end
        
        function ml = get.ML(obj)
            %get.ML Get the value for property ML
            ml = typecast(int8(obj.JavaMessage.getML), 'uint8');
        end
        
        function set.ML(obj, ml)
            %set.ML Set the value for property ML
            validateattributes(ml, {'numeric'}, {'nonempty', 'scalar'}, 'Features', 'ML');
            
            obj.JavaMessage.setML(ml);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.FL = obj.FL;
            cpObj.FM = obj.FM;
            cpObj.FR = obj.FR;
            cpObj.MR = obj.MR;
            cpObj.RR = obj.RR;
            cpObj.RM = obj.RM;
            cpObj.RL = obj.RL;
            cpObj.ML = obj.ML;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.FL = strObj.FL;
            obj.FM = strObj.FM;
            obj.FR = strObj.FR;
            obj.MR = strObj.MR;
            obj.RR = strObj.RR;
            obj.RM = strObj.RM;
            obj.RL = strObj.RL;
            obj.ML = strObj.ML;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.FL = obj.FL;
            strObj.FM = obj.FM;
            strObj.FR = obj.FR;
            strObj.MR = obj.MR;
            strObj.RR = obj.RR;
            strObj.RM = obj.RM;
            strObj.RL = obj.RL;
            strObj.ML = obj.ML;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.object_list.Features.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.object_list.Features;
            obj.reload(strObj);
        end
    end
end
