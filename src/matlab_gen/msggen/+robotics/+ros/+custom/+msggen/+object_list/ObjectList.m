classdef ObjectList < robotics.ros.Message
    %ObjectList MATLAB implementation of object_list/ObjectList
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'object_list/ObjectList' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '734e0a3fa2ba5ceee95429910366b99c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        ObjectListClassificationClass = robotics.ros.msg.internal.MessageFactory.getClassForType('object_list/Classification') % Dispatch to MATLAB class for message type object_list/Classification
        ObjectListDimensionClass = robotics.ros.msg.internal.MessageFactory.getClassForType('object_list/Dimension') % Dispatch to MATLAB class for message type object_list/Dimension
        ObjectListFeaturesClass = robotics.ros.msg.internal.MessageFactory.getClassForType('object_list/Features') % Dispatch to MATLAB class for message type object_list/Features
        ObjectListGeometricClass = robotics.ros.msg.internal.MessageFactory.getClassForType('object_list/Geometric') % Dispatch to MATLAB class for message type object_list/Geometric
    end
    
    properties (Dependent)
        ObjId
        Geometric
        Dimension
        PropExistence
        PropMov
        Classification
        Features
        Covariance
    end
    
    properties (Access = protected)
        Cache = struct('Geometric', [], 'Dimension', [], 'Classification', [], 'Features', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Classification', 'Covariance', 'Dimension', 'Features', 'Geometric', 'ObjId', 'PropExistence', 'PropMov'} % List of non-constant message properties
        ROSPropertyList = {'classification', 'covariance', 'dimension', 'features', 'geometric', 'obj_id', 'prop_existence', 'prop_mov'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ObjectList(msg)
            %ObjectList Construct the message object ObjectList
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function objid = get.ObjId(obj)
            %get.ObjId Get the value for property ObjId
            objid = int32(obj.JavaMessage.getObjId);
        end
        
        function set.ObjId(obj, objid)
            %set.ObjId Set the value for property ObjId
            validateattributes(objid, {'numeric'}, {'nonempty', 'scalar'}, 'ObjectList', 'ObjId');
            
            obj.JavaMessage.setObjId(objid);
        end
        
        function geometric = get.Geometric(obj)
            %get.Geometric Get the value for property Geometric
            if isempty(obj.Cache.Geometric)
                obj.Cache.Geometric = feval(obj.ObjectListGeometricClass, obj.JavaMessage.getGeometric);
            end
            geometric = obj.Cache.Geometric;
        end
        
        function set.Geometric(obj, geometric)
            %set.Geometric Set the value for property Geometric
            validateattributes(geometric, {obj.ObjectListGeometricClass}, {'nonempty', 'scalar'}, 'ObjectList', 'Geometric');
            
            obj.JavaMessage.setGeometric(geometric.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Geometric)
                obj.Cache.Geometric.setJavaObject(geometric.getJavaObject);
            end
        end
        
        function dimension = get.Dimension(obj)
            %get.Dimension Get the value for property Dimension
            if isempty(obj.Cache.Dimension)
                obj.Cache.Dimension = feval(obj.ObjectListDimensionClass, obj.JavaMessage.getDimension);
            end
            dimension = obj.Cache.Dimension;
        end
        
        function set.Dimension(obj, dimension)
            %set.Dimension Set the value for property Dimension
            validateattributes(dimension, {obj.ObjectListDimensionClass}, {'nonempty', 'scalar'}, 'ObjectList', 'Dimension');
            
            obj.JavaMessage.setDimension(dimension.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Dimension)
                obj.Cache.Dimension.setJavaObject(dimension.getJavaObject);
            end
        end
        
        function propexistence = get.PropExistence(obj)
            %get.PropExistence Get the value for property PropExistence
            propexistence = single(obj.JavaMessage.getPropExistence);
        end
        
        function set.PropExistence(obj, propexistence)
            %set.PropExistence Set the value for property PropExistence
            validateattributes(propexistence, {'numeric'}, {'nonempty', 'scalar'}, 'ObjectList', 'PropExistence');
            
            obj.JavaMessage.setPropExistence(propexistence);
        end
        
        function propmov = get.PropMov(obj)
            %get.PropMov Get the value for property PropMov
            propmov = single(obj.JavaMessage.getPropMov);
        end
        
        function set.PropMov(obj, propmov)
            %set.PropMov Set the value for property PropMov
            validateattributes(propmov, {'numeric'}, {'nonempty', 'scalar'}, 'ObjectList', 'PropMov');
            
            obj.JavaMessage.setPropMov(propmov);
        end
        
        function classification = get.Classification(obj)
            %get.Classification Get the value for property Classification
            if isempty(obj.Cache.Classification)
                obj.Cache.Classification = feval(obj.ObjectListClassificationClass, obj.JavaMessage.getClassification);
            end
            classification = obj.Cache.Classification;
        end
        
        function set.Classification(obj, classification)
            %set.Classification Set the value for property Classification
            validateattributes(classification, {obj.ObjectListClassificationClass}, {'nonempty', 'scalar'}, 'ObjectList', 'Classification');
            
            obj.JavaMessage.setClassification(classification.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Classification)
                obj.Cache.Classification.setJavaObject(classification.getJavaObject);
            end
        end
        
        function features = get.Features(obj)
            %get.Features Get the value for property Features
            if isempty(obj.Cache.Features)
                obj.Cache.Features = feval(obj.ObjectListFeaturesClass, obj.JavaMessage.getFeatures);
            end
            features = obj.Cache.Features;
        end
        
        function set.Features(obj, features)
            %set.Features Set the value for property Features
            validateattributes(features, {obj.ObjectListFeaturesClass}, {'nonempty', 'scalar'}, 'ObjectList', 'Features');
            
            obj.JavaMessage.setFeatures(features.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Features)
                obj.Cache.Features.setJavaObject(features.getJavaObject);
            end
        end
        
        function covariance = get.Covariance(obj)
            %get.Covariance Get the value for property Covariance
            javaArray = obj.JavaMessage.getCovariance;
            array = obj.readJavaArray(javaArray, 'double');
            covariance = double(array);
        end
        
        function set.Covariance(obj, covariance)
            %set.Covariance Set the value for property Covariance
            validateattributes(covariance, {'numeric'}, {'vector', 'numel', 36}, 'ObjectList', 'Covariance');
            
            javaArray = obj.JavaMessage.getCovariance;
            array = obj.writeJavaArray(covariance, javaArray, 'double');
            obj.JavaMessage.setCovariance(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Geometric = [];
            obj.Cache.Dimension = [];
            obj.Cache.Classification = [];
            obj.Cache.Features = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ObjId = obj.ObjId;
            cpObj.PropExistence = obj.PropExistence;
            cpObj.PropMov = obj.PropMov;
            cpObj.Covariance = obj.Covariance;
            
            % Recursively copy compound properties
            cpObj.Geometric = copy(obj.Geometric);
            cpObj.Dimension = copy(obj.Dimension);
            cpObj.Classification = copy(obj.Classification);
            cpObj.Features = copy(obj.Features);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ObjId = strObj.ObjId;
            obj.PropExistence = strObj.PropExistence;
            obj.PropMov = strObj.PropMov;
            obj.Covariance = strObj.Covariance;
            obj.Geometric = feval([obj.ObjectListGeometricClass '.loadobj'], strObj.Geometric);
            obj.Dimension = feval([obj.ObjectListDimensionClass '.loadobj'], strObj.Dimension);
            obj.Classification = feval([obj.ObjectListClassificationClass '.loadobj'], strObj.Classification);
            obj.Features = feval([obj.ObjectListFeaturesClass '.loadobj'], strObj.Features);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ObjId = obj.ObjId;
            strObj.PropExistence = obj.PropExistence;
            strObj.PropMov = obj.PropMov;
            strObj.Covariance = obj.Covariance;
            strObj.Geometric = saveobj(obj.Geometric);
            strObj.Dimension = saveobj(obj.Dimension);
            strObj.Classification = saveobj(obj.Classification);
            strObj.Features = saveobj(obj.Features);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.object_list.ObjectList.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.object_list.ObjectList;
            obj.reload(strObj);
        end
    end
end
