# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from object_list/SensorProperty.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SensorProperty(genpy.Message):
  _md5sum = "b92131fc47bc49b0227fc3ddb6760ee8"
  _type = "object_list/SensorProperty"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 sensor_id
float64 sensortype
float64 posx_variance
float64 posy_variance
float64 velx_variance
float64 vely_variance
float64 trust_existance
float64 trust_car
float64 trust_truck
float64 trust_motorcycle
float64 trust_bicycle
float64 trust_pedestrian
float64 trust_stationary
float64 trust_other 
"""
  __slots__ = ['sensor_id','sensortype','posx_variance','posy_variance','velx_variance','vely_variance','trust_existance','trust_car','trust_truck','trust_motorcycle','trust_bicycle','trust_pedestrian','trust_stationary','trust_other']
  _slot_types = ['int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sensor_id,sensortype,posx_variance,posy_variance,velx_variance,vely_variance,trust_existance,trust_car,trust_truck,trust_motorcycle,trust_bicycle,trust_pedestrian,trust_stationary,trust_other

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorProperty, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sensor_id is None:
        self.sensor_id = 0
      if self.sensortype is None:
        self.sensortype = 0.
      if self.posx_variance is None:
        self.posx_variance = 0.
      if self.posy_variance is None:
        self.posy_variance = 0.
      if self.velx_variance is None:
        self.velx_variance = 0.
      if self.vely_variance is None:
        self.vely_variance = 0.
      if self.trust_existance is None:
        self.trust_existance = 0.
      if self.trust_car is None:
        self.trust_car = 0.
      if self.trust_truck is None:
        self.trust_truck = 0.
      if self.trust_motorcycle is None:
        self.trust_motorcycle = 0.
      if self.trust_bicycle is None:
        self.trust_bicycle = 0.
      if self.trust_pedestrian is None:
        self.trust_pedestrian = 0.
      if self.trust_stationary is None:
        self.trust_stationary = 0.
      if self.trust_other is None:
        self.trust_other = 0.
    else:
      self.sensor_id = 0
      self.sensortype = 0.
      self.posx_variance = 0.
      self.posy_variance = 0.
      self.velx_variance = 0.
      self.vely_variance = 0.
      self.trust_existance = 0.
      self.trust_car = 0.
      self.trust_truck = 0.
      self.trust_motorcycle = 0.
      self.trust_bicycle = 0.
      self.trust_pedestrian = 0.
      self.trust_stationary = 0.
      self.trust_other = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i13d().pack(_x.sensor_id, _x.sensortype, _x.posx_variance, _x.posy_variance, _x.velx_variance, _x.vely_variance, _x.trust_existance, _x.trust_car, _x.trust_truck, _x.trust_motorcycle, _x.trust_bicycle, _x.trust_pedestrian, _x.trust_stationary, _x.trust_other))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 108
      (_x.sensor_id, _x.sensortype, _x.posx_variance, _x.posy_variance, _x.velx_variance, _x.vely_variance, _x.trust_existance, _x.trust_car, _x.trust_truck, _x.trust_motorcycle, _x.trust_bicycle, _x.trust_pedestrian, _x.trust_stationary, _x.trust_other,) = _get_struct_i13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i13d().pack(_x.sensor_id, _x.sensortype, _x.posx_variance, _x.posy_variance, _x.velx_variance, _x.vely_variance, _x.trust_existance, _x.trust_car, _x.trust_truck, _x.trust_motorcycle, _x.trust_bicycle, _x.trust_pedestrian, _x.trust_stationary, _x.trust_other))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 108
      (_x.sensor_id, _x.sensortype, _x.posx_variance, _x.posy_variance, _x.velx_variance, _x.vely_variance, _x.trust_existance, _x.trust_car, _x.trust_truck, _x.trust_motorcycle, _x.trust_bicycle, _x.trust_pedestrian, _x.trust_stationary, _x.trust_other,) = _get_struct_i13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i13d = None
def _get_struct_i13d():
    global _struct_i13d
    if _struct_i13d is None:
        _struct_i13d = struct.Struct("<i13d")
    return _struct_i13d
