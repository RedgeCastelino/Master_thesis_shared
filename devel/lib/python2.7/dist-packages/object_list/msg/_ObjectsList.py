# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from object_list/ObjectsList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import object_list.msg
import std_msgs.msg

class ObjectsList(genpy.Message):
  _md5sum = "d69ee6a3db897657f81853c8b3814ced"
  _type = "object_list/ObjectsList"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
ObjectList[] obj_list
SensorProperty sensor_property

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: object_list/ObjectList
int32 obj_id
float64 time
Geometric geometric
float64[36] covariance
Dimension dimension
float64 prop_existence
float64 prop_nonexistence
float64 prop_persistance
float64 prop_mov 
Classification classification
float64[12] classification_mass
Features features
int64[] sensors_fused

================================================================================
MSG: object_list/Geometric
float64 x
float64 y
float64 vx
float64 vy
float64 ax
float64 ay
float64 yaw
float64 yawrate

================================================================================
MSG: object_list/Dimension
float64 length
float64 width
float64 length_variance
float64 width_variance


================================================================================
MSG: object_list/Classification
float32 car
float32 truck
float32 motorcycle
float32 bicycle
float32 pedestrian
float32 stacionary
float32 other

================================================================================
MSG: object_list/Features
uint8 FL
uint8 FM
uint8 FR
uint8 MR
uint8 RR
uint8 RM
uint8 RL
uint8 ML

================================================================================
MSG: object_list/SensorProperty
int32 sensor_id
float64 sensortype
float64 posx_variance
float64 posy_variance
float64 velx_variance
float64 vely_variance
float64 trust_existance
float64 trust_car
float64 trust_truck
float64 trust_motorcycle
float64 trust_bicycle
float64 trust_pedestrian
float64 trust_stationary
float64 trust_other 
"""
  __slots__ = ['header','obj_list','sensor_property']
  _slot_types = ['std_msgs/Header','object_list/ObjectList[]','object_list/SensorProperty']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,obj_list,sensor_property

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectsList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.obj_list is None:
        self.obj_list = []
      if self.sensor_property is None:
        self.sensor_property = object_list.msg.SensorProperty()
    else:
      self.header = std_msgs.msg.Header()
      self.obj_list = []
      self.sensor_property = object_list.msg.SensorProperty()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.obj_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_list:
        _x = val1
        buff.write(_get_struct_id().pack(_x.obj_id, _x.time))
        _v1 = val1.geometric
        _x = _v1
        buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.vx, _x.vy, _x.ax, _x.ay, _x.yaw, _x.yawrate))
        buff.write(_get_struct_36d().pack(*val1.covariance))
        _v2 = val1.dimension
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.length, _x.width, _x.length_variance, _x.width_variance))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.prop_existence, _x.prop_nonexistence, _x.prop_persistance, _x.prop_mov))
        _v3 = val1.classification
        _x = _v3
        buff.write(_get_struct_7f().pack(_x.car, _x.truck, _x.motorcycle, _x.bicycle, _x.pedestrian, _x.stacionary, _x.other))
        buff.write(_get_struct_12d().pack(*val1.classification_mass))
        _v4 = val1.features
        _x = _v4
        buff.write(_get_struct_8B().pack(_x.FL, _x.FM, _x.FR, _x.MR, _x.RR, _x.RM, _x.RL, _x.ML))
        length = len(val1.sensors_fused)
        buff.write(_struct_I.pack(length))
        pattern = '<%sq'%length
        buff.write(struct.Struct(pattern).pack(*val1.sensors_fused))
      _x = self
      buff.write(_get_struct_i13d().pack(_x.sensor_property.sensor_id, _x.sensor_property.sensortype, _x.sensor_property.posx_variance, _x.sensor_property.posy_variance, _x.sensor_property.velx_variance, _x.sensor_property.vely_variance, _x.sensor_property.trust_existance, _x.sensor_property.trust_car, _x.sensor_property.trust_truck, _x.sensor_property.trust_motorcycle, _x.sensor_property.trust_bicycle, _x.sensor_property.trust_pedestrian, _x.sensor_property.trust_stationary, _x.sensor_property.trust_other))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.obj_list is None:
        self.obj_list = None
      if self.sensor_property is None:
        self.sensor_property = object_list.msg.SensorProperty()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_list = []
      for i in range(0, length):
        val1 = object_list.msg.ObjectList()
        _x = val1
        start = end
        end += 12
        (_x.obj_id, _x.time,) = _get_struct_id().unpack(str[start:end])
        _v5 = val1.geometric
        _x = _v5
        start = end
        end += 64
        (_x.x, _x.y, _x.vx, _x.vy, _x.ax, _x.ay, _x.yaw, _x.yawrate,) = _get_struct_8d().unpack(str[start:end])
        start = end
        end += 288
        val1.covariance = _get_struct_36d().unpack(str[start:end])
        _v6 = val1.dimension
        _x = _v6
        start = end
        end += 32
        (_x.length, _x.width, _x.length_variance, _x.width_variance,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.prop_existence, _x.prop_nonexistence, _x.prop_persistance, _x.prop_mov,) = _get_struct_4d().unpack(str[start:end])
        _v7 = val1.classification
        _x = _v7
        start = end
        end += 28
        (_x.car, _x.truck, _x.motorcycle, _x.bicycle, _x.pedestrian, _x.stacionary, _x.other,) = _get_struct_7f().unpack(str[start:end])
        start = end
        end += 96
        val1.classification_mass = _get_struct_12d().unpack(str[start:end])
        _v8 = val1.features
        _x = _v8
        start = end
        end += 8
        (_x.FL, _x.FM, _x.FR, _x.MR, _x.RR, _x.RM, _x.RL, _x.ML,) = _get_struct_8B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sq'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.sensors_fused = s.unpack(str[start:end])
        self.obj_list.append(val1)
      _x = self
      start = end
      end += 108
      (_x.sensor_property.sensor_id, _x.sensor_property.sensortype, _x.sensor_property.posx_variance, _x.sensor_property.posy_variance, _x.sensor_property.velx_variance, _x.sensor_property.vely_variance, _x.sensor_property.trust_existance, _x.sensor_property.trust_car, _x.sensor_property.trust_truck, _x.sensor_property.trust_motorcycle, _x.sensor_property.trust_bicycle, _x.sensor_property.trust_pedestrian, _x.sensor_property.trust_stationary, _x.sensor_property.trust_other,) = _get_struct_i13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.obj_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_list:
        _x = val1
        buff.write(_get_struct_id().pack(_x.obj_id, _x.time))
        _v9 = val1.geometric
        _x = _v9
        buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.vx, _x.vy, _x.ax, _x.ay, _x.yaw, _x.yawrate))
        buff.write(val1.covariance.tostring())
        _v10 = val1.dimension
        _x = _v10
        buff.write(_get_struct_4d().pack(_x.length, _x.width, _x.length_variance, _x.width_variance))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.prop_existence, _x.prop_nonexistence, _x.prop_persistance, _x.prop_mov))
        _v11 = val1.classification
        _x = _v11
        buff.write(_get_struct_7f().pack(_x.car, _x.truck, _x.motorcycle, _x.bicycle, _x.pedestrian, _x.stacionary, _x.other))
        buff.write(val1.classification_mass.tostring())
        _v12 = val1.features
        _x = _v12
        buff.write(_get_struct_8B().pack(_x.FL, _x.FM, _x.FR, _x.MR, _x.RR, _x.RM, _x.RL, _x.ML))
        length = len(val1.sensors_fused)
        buff.write(_struct_I.pack(length))
        pattern = '<%sq'%length
        buff.write(val1.sensors_fused.tostring())
      _x = self
      buff.write(_get_struct_i13d().pack(_x.sensor_property.sensor_id, _x.sensor_property.sensortype, _x.sensor_property.posx_variance, _x.sensor_property.posy_variance, _x.sensor_property.velx_variance, _x.sensor_property.vely_variance, _x.sensor_property.trust_existance, _x.sensor_property.trust_car, _x.sensor_property.trust_truck, _x.sensor_property.trust_motorcycle, _x.sensor_property.trust_bicycle, _x.sensor_property.trust_pedestrian, _x.sensor_property.trust_stationary, _x.sensor_property.trust_other))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.obj_list is None:
        self.obj_list = None
      if self.sensor_property is None:
        self.sensor_property = object_list.msg.SensorProperty()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_list = []
      for i in range(0, length):
        val1 = object_list.msg.ObjectList()
        _x = val1
        start = end
        end += 12
        (_x.obj_id, _x.time,) = _get_struct_id().unpack(str[start:end])
        _v13 = val1.geometric
        _x = _v13
        start = end
        end += 64
        (_x.x, _x.y, _x.vx, _x.vy, _x.ax, _x.ay, _x.yaw, _x.yawrate,) = _get_struct_8d().unpack(str[start:end])
        start = end
        end += 288
        val1.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v14 = val1.dimension
        _x = _v14
        start = end
        end += 32
        (_x.length, _x.width, _x.length_variance, _x.width_variance,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.prop_existence, _x.prop_nonexistence, _x.prop_persistance, _x.prop_mov,) = _get_struct_4d().unpack(str[start:end])
        _v15 = val1.classification
        _x = _v15
        start = end
        end += 28
        (_x.car, _x.truck, _x.motorcycle, _x.bicycle, _x.pedestrian, _x.stacionary, _x.other,) = _get_struct_7f().unpack(str[start:end])
        start = end
        end += 96
        val1.classification_mass = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
        _v16 = val1.features
        _x = _v16
        start = end
        end += 8
        (_x.FL, _x.FM, _x.FR, _x.MR, _x.RR, _x.RM, _x.RL, _x.ML,) = _get_struct_8B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sq'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.sensors_fused = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
        self.obj_list.append(val1)
      _x = self
      start = end
      end += 108
      (_x.sensor_property.sensor_id, _x.sensor_property.sensortype, _x.sensor_property.posx_variance, _x.sensor_property.posy_variance, _x.sensor_property.velx_variance, _x.sensor_property.vely_variance, _x.sensor_property.trust_existance, _x.sensor_property.trust_car, _x.sensor_property.trust_truck, _x.sensor_property.trust_motorcycle, _x.sensor_property.trust_bicycle, _x.sensor_property.trust_pedestrian, _x.sensor_property.trust_stationary, _x.sensor_property.trust_other,) = _get_struct_i13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
_struct_i13d = None
def _get_struct_i13d():
    global _struct_i13d
    if _struct_i13d is None:
        _struct_i13d = struct.Struct("<i13d")
    return _struct_i13d
_struct_id = None
def _get_struct_id():
    global _struct_id
    if _struct_id is None:
        _struct_id = struct.Struct("<id")
    return _struct_id
