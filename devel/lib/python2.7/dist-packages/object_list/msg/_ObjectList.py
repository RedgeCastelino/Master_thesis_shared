# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from object_list/ObjectList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import object_list.msg

class ObjectList(genpy.Message):
  _md5sum = "d5793b04b71b063f6fee4d02602a19de"
  _type = "object_list/ObjectList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 obj_id
float64 time
Geometric geometric
float64[36] covariance
Dimension dimension
float64 prop_existence
float64 prop_nonexistence
float64 prop_persistance
float64 prop_mov 
Classification classification
float64[12] classification_mass
Features features
int64[] sensors_fused

================================================================================
MSG: object_list/Geometric
float64 x
float64 y
float64 vx
float64 vy
float64 ax
float64 ay
float64 yaw
float64 yawrate

================================================================================
MSG: object_list/Dimension
float64 length
float64 width
float64 length_variance
float64 width_variance


================================================================================
MSG: object_list/Classification
float32 car
float32 truck
float32 motorcycle
float32 bicycle
float32 pedestrian
float32 stacionary
float32 other

================================================================================
MSG: object_list/Features
uint8 FL
uint8 FM
uint8 FR
uint8 MR
uint8 RR
uint8 RM
uint8 RL
uint8 ML
"""
  __slots__ = ['obj_id','time','geometric','covariance','dimension','prop_existence','prop_nonexistence','prop_persistance','prop_mov','classification','classification_mass','features','sensors_fused']
  _slot_types = ['int32','float64','object_list/Geometric','float64[36]','object_list/Dimension','float64','float64','float64','float64','object_list/Classification','float64[12]','object_list/Features','int64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obj_id,time,geometric,covariance,dimension,prop_existence,prop_nonexistence,prop_persistance,prop_mov,classification,classification_mass,features,sensors_fused

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obj_id is None:
        self.obj_id = 0
      if self.time is None:
        self.time = 0.
      if self.geometric is None:
        self.geometric = object_list.msg.Geometric()
      if self.covariance is None:
        self.covariance = [0.] * 36
      if self.dimension is None:
        self.dimension = object_list.msg.Dimension()
      if self.prop_existence is None:
        self.prop_existence = 0.
      if self.prop_nonexistence is None:
        self.prop_nonexistence = 0.
      if self.prop_persistance is None:
        self.prop_persistance = 0.
      if self.prop_mov is None:
        self.prop_mov = 0.
      if self.classification is None:
        self.classification = object_list.msg.Classification()
      if self.classification_mass is None:
        self.classification_mass = [0.] * 12
      if self.features is None:
        self.features = object_list.msg.Features()
      if self.sensors_fused is None:
        self.sensors_fused = []
    else:
      self.obj_id = 0
      self.time = 0.
      self.geometric = object_list.msg.Geometric()
      self.covariance = [0.] * 36
      self.dimension = object_list.msg.Dimension()
      self.prop_existence = 0.
      self.prop_nonexistence = 0.
      self.prop_persistance = 0.
      self.prop_mov = 0.
      self.classification = object_list.msg.Classification()
      self.classification_mass = [0.] * 12
      self.features = object_list.msg.Features()
      self.sensors_fused = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i9d().pack(_x.obj_id, _x.time, _x.geometric.x, _x.geometric.y, _x.geometric.vx, _x.geometric.vy, _x.geometric.ax, _x.geometric.ay, _x.geometric.yaw, _x.geometric.yawrate))
      buff.write(_get_struct_36d().pack(*self.covariance))
      _x = self
      buff.write(_get_struct_8d7f().pack(_x.dimension.length, _x.dimension.width, _x.dimension.length_variance, _x.dimension.width_variance, _x.prop_existence, _x.prop_nonexistence, _x.prop_persistance, _x.prop_mov, _x.classification.car, _x.classification.truck, _x.classification.motorcycle, _x.classification.bicycle, _x.classification.pedestrian, _x.classification.stacionary, _x.classification.other))
      buff.write(_get_struct_12d().pack(*self.classification_mass))
      _x = self
      buff.write(_get_struct_8B().pack(_x.features.FL, _x.features.FM, _x.features.FR, _x.features.MR, _x.features.RR, _x.features.RM, _x.features.RL, _x.features.ML))
      length = len(self.sensors_fused)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.sensors_fused))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.geometric is None:
        self.geometric = object_list.msg.Geometric()
      if self.dimension is None:
        self.dimension = object_list.msg.Dimension()
      if self.classification is None:
        self.classification = object_list.msg.Classification()
      if self.features is None:
        self.features = object_list.msg.Features()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.obj_id, _x.time, _x.geometric.x, _x.geometric.y, _x.geometric.vx, _x.geometric.vy, _x.geometric.ax, _x.geometric.ay, _x.geometric.yaw, _x.geometric.yawrate,) = _get_struct_i9d().unpack(str[start:end])
      start = end
      end += 288
      self.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 92
      (_x.dimension.length, _x.dimension.width, _x.dimension.length_variance, _x.dimension.width_variance, _x.prop_existence, _x.prop_nonexistence, _x.prop_persistance, _x.prop_mov, _x.classification.car, _x.classification.truck, _x.classification.motorcycle, _x.classification.bicycle, _x.classification.pedestrian, _x.classification.stacionary, _x.classification.other,) = _get_struct_8d7f().unpack(str[start:end])
      start = end
      end += 96
      self.classification_mass = _get_struct_12d().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.features.FL, _x.features.FM, _x.features.FR, _x.features.MR, _x.features.RR, _x.features.RM, _x.features.RL, _x.features.ML,) = _get_struct_8B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sensors_fused = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i9d().pack(_x.obj_id, _x.time, _x.geometric.x, _x.geometric.y, _x.geometric.vx, _x.geometric.vy, _x.geometric.ax, _x.geometric.ay, _x.geometric.yaw, _x.geometric.yawrate))
      buff.write(self.covariance.tostring())
      _x = self
      buff.write(_get_struct_8d7f().pack(_x.dimension.length, _x.dimension.width, _x.dimension.length_variance, _x.dimension.width_variance, _x.prop_existence, _x.prop_nonexistence, _x.prop_persistance, _x.prop_mov, _x.classification.car, _x.classification.truck, _x.classification.motorcycle, _x.classification.bicycle, _x.classification.pedestrian, _x.classification.stacionary, _x.classification.other))
      buff.write(self.classification_mass.tostring())
      _x = self
      buff.write(_get_struct_8B().pack(_x.features.FL, _x.features.FM, _x.features.FR, _x.features.MR, _x.features.RR, _x.features.RM, _x.features.RL, _x.features.ML))
      length = len(self.sensors_fused)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.sensors_fused.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.geometric is None:
        self.geometric = object_list.msg.Geometric()
      if self.dimension is None:
        self.dimension = object_list.msg.Dimension()
      if self.classification is None:
        self.classification = object_list.msg.Classification()
      if self.features is None:
        self.features = object_list.msg.Features()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.obj_id, _x.time, _x.geometric.x, _x.geometric.y, _x.geometric.vx, _x.geometric.vy, _x.geometric.ax, _x.geometric.ay, _x.geometric.yaw, _x.geometric.yawrate,) = _get_struct_i9d().unpack(str[start:end])
      start = end
      end += 288
      self.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 92
      (_x.dimension.length, _x.dimension.width, _x.dimension.length_variance, _x.dimension.width_variance, _x.prop_existence, _x.prop_nonexistence, _x.prop_persistance, _x.prop_mov, _x.classification.car, _x.classification.truck, _x.classification.motorcycle, _x.classification.bicycle, _x.classification.pedestrian, _x.classification.stacionary, _x.classification.other,) = _get_struct_8d7f().unpack(str[start:end])
      start = end
      end += 96
      self.classification_mass = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      _x = self
      start = end
      end += 8
      (_x.features.FL, _x.features.FM, _x.features.FR, _x.features.MR, _x.features.RR, _x.features.RM, _x.features.RL, _x.features.ML,) = _get_struct_8B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sensors_fused = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
_struct_8d7f = None
def _get_struct_8d7f():
    global _struct_8d7f
    if _struct_8d7f is None:
        _struct_8d7f = struct.Struct("<8d7f")
    return _struct_8d7f
_struct_i9d = None
def _get_struct_i9d():
    global _struct_i9d
    if _struct_i9d is None:
        _struct_i9d = struct.Struct("<i9d")
    return _struct_i9d
