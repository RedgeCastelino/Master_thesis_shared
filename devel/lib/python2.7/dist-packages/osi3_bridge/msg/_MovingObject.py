# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from osi3_bridge/MovingObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import osi3_bridge.msg

class MovingObject(genpy.Message):
  _md5sum = "1d813c673962ef31735dd456446e05b5"
  _type = "osi3_bridge/MovingObject"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 id
osi3_bridge/Dimension3d dimension
geometry_msgs/Vector3 position
osi3_bridge/Orientation3d orientation
geometry_msgs/Vector3 velocity
geometry_msgs/Vector3 acceleration
uint8 type

uint8 TYPE_UNKNOWN = 0
uint8 TYPE_OTHER = 1
uint8 TYPE_CAR = 2
uint8 TYPE_PEDESTRIAN = 3
uint8 TYPE_ANIMAL = 4
uint8 TYPE_TRUCK = 5
uint8 TYPE_TRAILER = 6
uint8 TYPE_MOTORBIKE = 7
uint8 TYPE_BICYCLE = 8
uint8 TYPE_BUS = 9
uint8 TYPE_TRAM = 10
uint8 TYPE_TRAIN = 11
uint8 TYPE_WHEELCHAIR = 12


================================================================================
MSG: osi3_bridge/Dimension3d
float64 length
float64 width
float64 height

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: osi3_bridge/Orientation3d
float64 roll
float64 pitch
float64 yaw
"""
  # Pseudo-constants
  TYPE_UNKNOWN = 0
  TYPE_OTHER = 1
  TYPE_CAR = 2
  TYPE_PEDESTRIAN = 3
  TYPE_ANIMAL = 4
  TYPE_TRUCK = 5
  TYPE_TRAILER = 6
  TYPE_MOTORBIKE = 7
  TYPE_BICYCLE = 8
  TYPE_BUS = 9
  TYPE_TRAM = 10
  TYPE_TRAIN = 11
  TYPE_WHEELCHAIR = 12

  __slots__ = ['id','dimension','position','orientation','velocity','acceleration','type']
  _slot_types = ['uint64','osi3_bridge/Dimension3d','geometry_msgs/Vector3','osi3_bridge/Orientation3d','geometry_msgs/Vector3','geometry_msgs/Vector3','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,dimension,position,orientation,velocity,acceleration,type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MovingObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.dimension is None:
        self.dimension = osi3_bridge.msg.Dimension3d()
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      if self.orientation is None:
        self.orientation = osi3_bridge.msg.Orientation3d()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.type is None:
        self.type = 0
    else:
      self.id = 0
      self.dimension = osi3_bridge.msg.Dimension3d()
      self.position = geometry_msgs.msg.Vector3()
      self.orientation = osi3_bridge.msg.Orientation3d()
      self.velocity = geometry_msgs.msg.Vector3()
      self.acceleration = geometry_msgs.msg.Vector3()
      self.type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Q15dB().pack(_x.id, _x.dimension.length, _x.dimension.width, _x.dimension.height, _x.position.x, _x.position.y, _x.position.z, _x.orientation.roll, _x.orientation.pitch, _x.orientation.yaw, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dimension is None:
        self.dimension = osi3_bridge.msg.Dimension3d()
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      if self.orientation is None:
        self.orientation = osi3_bridge.msg.Orientation3d()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 129
      (_x.id, _x.dimension.length, _x.dimension.width, _x.dimension.height, _x.position.x, _x.position.y, _x.position.z, _x.orientation.roll, _x.orientation.pitch, _x.orientation.yaw, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.type,) = _get_struct_Q15dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Q15dB().pack(_x.id, _x.dimension.length, _x.dimension.width, _x.dimension.height, _x.position.x, _x.position.y, _x.position.z, _x.orientation.roll, _x.orientation.pitch, _x.orientation.yaw, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dimension is None:
        self.dimension = osi3_bridge.msg.Dimension3d()
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      if self.orientation is None:
        self.orientation = osi3_bridge.msg.Orientation3d()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 129
      (_x.id, _x.dimension.length, _x.dimension.width, _x.dimension.height, _x.position.x, _x.position.y, _x.position.z, _x.orientation.roll, _x.orientation.pitch, _x.orientation.yaw, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.type,) = _get_struct_Q15dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Q15dB = None
def _get_struct_Q15dB():
    global _struct_Q15dB
    if _struct_Q15dB is None:
        _struct_Q15dB = struct.Struct("<Q15dB")
    return _struct_Q15dB
