// Generated by gencpp from file osi3_bridge/MovingObject.msg
// DO NOT EDIT!


#ifndef OSI3_BRIDGE_MESSAGE_MOVINGOBJECT_H
#define OSI3_BRIDGE_MESSAGE_MOVINGOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <osi3_bridge/Dimension3d.h>
#include <geometry_msgs/Vector3.h>
#include <osi3_bridge/Orientation3d.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace osi3_bridge
{
template <class ContainerAllocator>
struct MovingObject_
{
  typedef MovingObject_<ContainerAllocator> Type;

  MovingObject_()
    : id(0)
    , dimension()
    , position()
    , orientation()
    , velocity()
    , acceleration()
    , type(0)  {
    }
  MovingObject_(const ContainerAllocator& _alloc)
    : id(0)
    , dimension(_alloc)
    , position(_alloc)
    , orientation(_alloc)
    , velocity(_alloc)
    , acceleration(_alloc)
    , type(0)  {
  (void)_alloc;
    }



   typedef uint64_t _id_type;
  _id_type id;

   typedef  ::osi3_bridge::Dimension3d_<ContainerAllocator>  _dimension_type;
  _dimension_type dimension;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::osi3_bridge::Orientation3d_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef uint8_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TYPE_UNKNOWN)
  #undef TYPE_UNKNOWN
#endif
#if defined(_WIN32) && defined(TYPE_OTHER)
  #undef TYPE_OTHER
#endif
#if defined(_WIN32) && defined(TYPE_CAR)
  #undef TYPE_CAR
#endif
#if defined(_WIN32) && defined(TYPE_PEDESTRIAN)
  #undef TYPE_PEDESTRIAN
#endif
#if defined(_WIN32) && defined(TYPE_ANIMAL)
  #undef TYPE_ANIMAL
#endif
#if defined(_WIN32) && defined(TYPE_TRUCK)
  #undef TYPE_TRUCK
#endif
#if defined(_WIN32) && defined(TYPE_TRAILER)
  #undef TYPE_TRAILER
#endif
#if defined(_WIN32) && defined(TYPE_MOTORBIKE)
  #undef TYPE_MOTORBIKE
#endif
#if defined(_WIN32) && defined(TYPE_BICYCLE)
  #undef TYPE_BICYCLE
#endif
#if defined(_WIN32) && defined(TYPE_BUS)
  #undef TYPE_BUS
#endif
#if defined(_WIN32) && defined(TYPE_TRAM)
  #undef TYPE_TRAM
#endif
#if defined(_WIN32) && defined(TYPE_TRAIN)
  #undef TYPE_TRAIN
#endif
#if defined(_WIN32) && defined(TYPE_WHEELCHAIR)
  #undef TYPE_WHEELCHAIR
#endif

  enum {
    TYPE_UNKNOWN = 0u,
    TYPE_OTHER = 1u,
    TYPE_CAR = 2u,
    TYPE_PEDESTRIAN = 3u,
    TYPE_ANIMAL = 4u,
    TYPE_TRUCK = 5u,
    TYPE_TRAILER = 6u,
    TYPE_MOTORBIKE = 7u,
    TYPE_BICYCLE = 8u,
    TYPE_BUS = 9u,
    TYPE_TRAM = 10u,
    TYPE_TRAIN = 11u,
    TYPE_WHEELCHAIR = 12u,
  };


  typedef boost::shared_ptr< ::osi3_bridge::MovingObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::osi3_bridge::MovingObject_<ContainerAllocator> const> ConstPtr;

}; // struct MovingObject_

typedef ::osi3_bridge::MovingObject_<std::allocator<void> > MovingObject;

typedef boost::shared_ptr< ::osi3_bridge::MovingObject > MovingObjectPtr;
typedef boost::shared_ptr< ::osi3_bridge::MovingObject const> MovingObjectConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::osi3_bridge::MovingObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::osi3_bridge::MovingObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::osi3_bridge::MovingObject_<ContainerAllocator1> & lhs, const ::osi3_bridge::MovingObject_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.dimension == rhs.dimension &&
    lhs.position == rhs.position &&
    lhs.orientation == rhs.orientation &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::osi3_bridge::MovingObject_<ContainerAllocator1> & lhs, const ::osi3_bridge::MovingObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace osi3_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::osi3_bridge::MovingObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::osi3_bridge::MovingObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osi3_bridge::MovingObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osi3_bridge::MovingObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osi3_bridge::MovingObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osi3_bridge::MovingObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::osi3_bridge::MovingObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d813c673962ef31735dd456446e05b5";
  }

  static const char* value(const ::osi3_bridge::MovingObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d813c673962ef31ULL;
  static const uint64_t static_value2 = 0x735dd456446e05b5ULL;
};

template<class ContainerAllocator>
struct DataType< ::osi3_bridge::MovingObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "osi3_bridge/MovingObject";
  }

  static const char* value(const ::osi3_bridge::MovingObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::osi3_bridge::MovingObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 id\n"
"osi3_bridge/Dimension3d dimension\n"
"geometry_msgs/Vector3 position\n"
"osi3_bridge/Orientation3d orientation\n"
"geometry_msgs/Vector3 velocity\n"
"geometry_msgs/Vector3 acceleration\n"
"uint8 type\n"
"\n"
"uint8 TYPE_UNKNOWN = 0\n"
"uint8 TYPE_OTHER = 1\n"
"uint8 TYPE_CAR = 2\n"
"uint8 TYPE_PEDESTRIAN = 3\n"
"uint8 TYPE_ANIMAL = 4\n"
"uint8 TYPE_TRUCK = 5\n"
"uint8 TYPE_TRAILER = 6\n"
"uint8 TYPE_MOTORBIKE = 7\n"
"uint8 TYPE_BICYCLE = 8\n"
"uint8 TYPE_BUS = 9\n"
"uint8 TYPE_TRAM = 10\n"
"uint8 TYPE_TRAIN = 11\n"
"uint8 TYPE_WHEELCHAIR = 12\n"
"\n"
"\n"
"================================================================================\n"
"MSG: osi3_bridge/Dimension3d\n"
"float64 length\n"
"float64 width\n"
"float64 height\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: osi3_bridge/Orientation3d\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
;
  }

  static const char* value(const ::osi3_bridge::MovingObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::osi3_bridge::MovingObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.dimension);
      stream.next(m.position);
      stream.next(m.orientation);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MovingObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::osi3_bridge::MovingObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::osi3_bridge::MovingObject_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id);
    s << indent << "dimension: ";
    s << std::endl;
    Printer< ::osi3_bridge::Dimension3d_<ContainerAllocator> >::stream(s, indent + "  ", v.dimension);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::osi3_bridge::Orientation3d_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OSI3_BRIDGE_MESSAGE_MOVINGOBJECT_H
