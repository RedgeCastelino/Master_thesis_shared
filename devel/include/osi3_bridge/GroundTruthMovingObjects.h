// Generated by gencpp from file osi3_bridge/GroundTruthMovingObjects.msg
// DO NOT EDIT!


#ifndef OSI3_BRIDGE_MESSAGE_GROUNDTRUTHMOVINGOBJECTS_H
#define OSI3_BRIDGE_MESSAGE_GROUNDTRUTHMOVINGOBJECTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <osi3_bridge/MovingObject.h>

namespace osi3_bridge
{
template <class ContainerAllocator>
struct GroundTruthMovingObjects_
{
  typedef GroundTruthMovingObjects_<ContainerAllocator> Type;

  GroundTruthMovingObjects_()
    : header()
    , objects()  {
    }
  GroundTruthMovingObjects_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , objects(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::osi3_bridge::MovingObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::osi3_bridge::MovingObject_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> const> ConstPtr;

}; // struct GroundTruthMovingObjects_

typedef ::osi3_bridge::GroundTruthMovingObjects_<std::allocator<void> > GroundTruthMovingObjects;

typedef boost::shared_ptr< ::osi3_bridge::GroundTruthMovingObjects > GroundTruthMovingObjectsPtr;
typedef boost::shared_ptr< ::osi3_bridge::GroundTruthMovingObjects const> GroundTruthMovingObjectsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator1> & lhs, const ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.objects == rhs.objects;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator1> & lhs, const ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace osi3_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5c10f964cf85cf58aa709fc3567f543";
  }

  static const char* value(const ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5c10f964cf85cf5ULL;
  static const uint64_t static_value2 = 0x8aa709fc3567f543ULL;
};

template<class ContainerAllocator>
struct DataType< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "osi3_bridge/GroundTruthMovingObjects";
  }

  static const char* value(const ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"osi3_bridge/MovingObject[] objects\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: osi3_bridge/MovingObject\n"
"uint64 id\n"
"osi3_bridge/Dimension3d dimension\n"
"geometry_msgs/Vector3 position\n"
"osi3_bridge/Orientation3d orientation\n"
"geometry_msgs/Vector3 velocity\n"
"geometry_msgs/Vector3 acceleration\n"
"uint8 type\n"
"\n"
"uint8 TYPE_UNKNOWN = 0\n"
"uint8 TYPE_OTHER = 1\n"
"uint8 TYPE_CAR = 2\n"
"uint8 TYPE_PEDESTRIAN = 3\n"
"uint8 TYPE_ANIMAL = 4\n"
"uint8 TYPE_TRUCK = 5\n"
"uint8 TYPE_TRAILER = 6\n"
"uint8 TYPE_MOTORBIKE = 7\n"
"uint8 TYPE_BICYCLE = 8\n"
"uint8 TYPE_BUS = 9\n"
"uint8 TYPE_TRAM = 10\n"
"uint8 TYPE_TRAIN = 11\n"
"uint8 TYPE_WHEELCHAIR = 12\n"
"\n"
"\n"
"================================================================================\n"
"MSG: osi3_bridge/Dimension3d\n"
"float64 length\n"
"float64 width\n"
"float64 height\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: osi3_bridge/Orientation3d\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
;
  }

  static const char* value(const ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GroundTruthMovingObjects_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::osi3_bridge::GroundTruthMovingObjects_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::osi3_bridge::MovingObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OSI3_BRIDGE_MESSAGE_GROUNDTRUTHMOVINGOBJECTS_H
