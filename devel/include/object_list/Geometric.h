// Generated by gencpp from file object_list/Geometric.msg
// DO NOT EDIT!


#ifndef OBJECT_LIST_MESSAGE_GEOMETRIC_H
#define OBJECT_LIST_MESSAGE_GEOMETRIC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_list
{
template <class ContainerAllocator>
struct Geometric_
{
  typedef Geometric_<ContainerAllocator> Type;

  Geometric_()
    : x(0.0)
    , y(0.0)
    , vx(0.0)
    , vy(0.0)
    , ax(0.0)
    , ay(0.0)
    , yaw(0.0)
    , yawrate(0.0)  {
    }
  Geometric_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , vx(0.0)
    , vy(0.0)
    , ax(0.0)
    , ay(0.0)
    , yaw(0.0)
    , yawrate(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _ax_type;
  _ax_type ax;

   typedef double _ay_type;
  _ay_type ay;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _yawrate_type;
  _yawrate_type yawrate;





  typedef boost::shared_ptr< ::object_list::Geometric_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_list::Geometric_<ContainerAllocator> const> ConstPtr;

}; // struct Geometric_

typedef ::object_list::Geometric_<std::allocator<void> > Geometric;

typedef boost::shared_ptr< ::object_list::Geometric > GeometricPtr;
typedef boost::shared_ptr< ::object_list::Geometric const> GeometricConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_list::Geometric_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_list::Geometric_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_list::Geometric_<ContainerAllocator1> & lhs, const ::object_list::Geometric_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.ax == rhs.ax &&
    lhs.ay == rhs.ay &&
    lhs.yaw == rhs.yaw &&
    lhs.yawrate == rhs.yawrate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_list::Geometric_<ContainerAllocator1> & lhs, const ::object_list::Geometric_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_list

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::object_list::Geometric_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_list::Geometric_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_list::Geometric_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_list::Geometric_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_list::Geometric_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_list::Geometric_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_list::Geometric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74a252effe5544c6405c61fc1ab21633";
  }

  static const char* value(const ::object_list::Geometric_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74a252effe5544c6ULL;
  static const uint64_t static_value2 = 0x405c61fc1ab21633ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_list::Geometric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_list/Geometric";
  }

  static const char* value(const ::object_list::Geometric_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_list::Geometric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 vx\n"
"float64 vy\n"
"float64 ax\n"
"float64 ay\n"
"float64 yaw\n"
"float64 yawrate\n"
;
  }

  static const char* value(const ::object_list::Geometric_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_list::Geometric_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.yaw);
      stream.next(m.yawrate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Geometric_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_list::Geometric_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_list::Geometric_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "ax: ";
    Printer<double>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<double>::stream(s, indent + "  ", v.ay);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "yawrate: ";
    Printer<double>::stream(s, indent + "  ", v.yawrate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_LIST_MESSAGE_GEOMETRIC_H
