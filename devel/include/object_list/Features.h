// Generated by gencpp from file object_list/Features.msg
// DO NOT EDIT!


#ifndef OBJECT_LIST_MESSAGE_FEATURES_H
#define OBJECT_LIST_MESSAGE_FEATURES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_list
{
template <class ContainerAllocator>
struct Features_
{
  typedef Features_<ContainerAllocator> Type;

  Features_()
    : FL(0)
    , FM(0)
    , FR(0)
    , MR(0)
    , RR(0)
    , RM(0)
    , RL(0)
    , ML(0)  {
    }
  Features_(const ContainerAllocator& _alloc)
    : FL(0)
    , FM(0)
    , FR(0)
    , MR(0)
    , RR(0)
    , RM(0)
    , RL(0)
    , ML(0)  {
  (void)_alloc;
    }



   typedef uint8_t _FL_type;
  _FL_type FL;

   typedef uint8_t _FM_type;
  _FM_type FM;

   typedef uint8_t _FR_type;
  _FR_type FR;

   typedef uint8_t _MR_type;
  _MR_type MR;

   typedef uint8_t _RR_type;
  _RR_type RR;

   typedef uint8_t _RM_type;
  _RM_type RM;

   typedef uint8_t _RL_type;
  _RL_type RL;

   typedef uint8_t _ML_type;
  _ML_type ML;





  typedef boost::shared_ptr< ::object_list::Features_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_list::Features_<ContainerAllocator> const> ConstPtr;

}; // struct Features_

typedef ::object_list::Features_<std::allocator<void> > Features;

typedef boost::shared_ptr< ::object_list::Features > FeaturesPtr;
typedef boost::shared_ptr< ::object_list::Features const> FeaturesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_list::Features_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_list::Features_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_list::Features_<ContainerAllocator1> & lhs, const ::object_list::Features_<ContainerAllocator2> & rhs)
{
  return lhs.FL == rhs.FL &&
    lhs.FM == rhs.FM &&
    lhs.FR == rhs.FR &&
    lhs.MR == rhs.MR &&
    lhs.RR == rhs.RR &&
    lhs.RM == rhs.RM &&
    lhs.RL == rhs.RL &&
    lhs.ML == rhs.ML;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_list::Features_<ContainerAllocator1> & lhs, const ::object_list::Features_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_list

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::object_list::Features_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_list::Features_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_list::Features_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_list::Features_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_list::Features_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_list::Features_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_list::Features_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acfb5ca82687e271a6722833317ebf1a";
  }

  static const char* value(const ::object_list::Features_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacfb5ca82687e271ULL;
  static const uint64_t static_value2 = 0xa6722833317ebf1aULL;
};

template<class ContainerAllocator>
struct DataType< ::object_list::Features_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_list/Features";
  }

  static const char* value(const ::object_list::Features_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_list::Features_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 FL\n"
"uint8 FM\n"
"uint8 FR\n"
"uint8 MR\n"
"uint8 RR\n"
"uint8 RM\n"
"uint8 RL\n"
"uint8 ML\n"
;
  }

  static const char* value(const ::object_list::Features_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_list::Features_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.FL);
      stream.next(m.FM);
      stream.next(m.FR);
      stream.next(m.MR);
      stream.next(m.RR);
      stream.next(m.RM);
      stream.next(m.RL);
      stream.next(m.ML);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Features_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_list::Features_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_list::Features_<ContainerAllocator>& v)
  {
    s << indent << "FL: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FL);
    s << indent << "FM: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FM);
    s << indent << "FR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FR);
    s << indent << "MR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MR);
    s << indent << "RR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RR);
    s << indent << "RM: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RM);
    s << indent << "RL: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RL);
    s << indent << "ML: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ML);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_LIST_MESSAGE_FEATURES_H
