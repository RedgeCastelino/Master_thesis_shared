// Generated by gencpp from file object_list/Dimension.msg
// DO NOT EDIT!


#ifndef OBJECT_LIST_MESSAGE_DIMENSION_H
#define OBJECT_LIST_MESSAGE_DIMENSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_list
{
template <class ContainerAllocator>
struct Dimension_
{
  typedef Dimension_<ContainerAllocator> Type;

  Dimension_()
    : length(0.0)
    , width(0.0)
    , length_variance(0.0)
    , width_variance(0.0)  {
    }
  Dimension_(const ContainerAllocator& _alloc)
    : length(0.0)
    , width(0.0)
    , length_variance(0.0)
    , width_variance(0.0)  {
  (void)_alloc;
    }



   typedef double _length_type;
  _length_type length;

   typedef double _width_type;
  _width_type width;

   typedef double _length_variance_type;
  _length_variance_type length_variance;

   typedef double _width_variance_type;
  _width_variance_type width_variance;





  typedef boost::shared_ptr< ::object_list::Dimension_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_list::Dimension_<ContainerAllocator> const> ConstPtr;

}; // struct Dimension_

typedef ::object_list::Dimension_<std::allocator<void> > Dimension;

typedef boost::shared_ptr< ::object_list::Dimension > DimensionPtr;
typedef boost::shared_ptr< ::object_list::Dimension const> DimensionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_list::Dimension_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_list::Dimension_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_list::Dimension_<ContainerAllocator1> & lhs, const ::object_list::Dimension_<ContainerAllocator2> & rhs)
{
  return lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.length_variance == rhs.length_variance &&
    lhs.width_variance == rhs.width_variance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_list::Dimension_<ContainerAllocator1> & lhs, const ::object_list::Dimension_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_list

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::object_list::Dimension_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_list::Dimension_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_list::Dimension_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_list::Dimension_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_list::Dimension_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_list::Dimension_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_list::Dimension_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01a8c17587dd313244e2f2fd574d1415";
  }

  static const char* value(const ::object_list::Dimension_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01a8c17587dd3132ULL;
  static const uint64_t static_value2 = 0x44e2f2fd574d1415ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_list::Dimension_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_list/Dimension";
  }

  static const char* value(const ::object_list::Dimension_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_list::Dimension_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 length\n"
"float64 width\n"
"float64 length_variance\n"
"float64 width_variance\n"
"\n"
;
  }

  static const char* value(const ::object_list::Dimension_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_list::Dimension_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.length_variance);
      stream.next(m.width_variance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Dimension_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_list::Dimension_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_list::Dimension_<ContainerAllocator>& v)
  {
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "length_variance: ";
    Printer<double>::stream(s, indent + "  ", v.length_variance);
    s << indent << "width_variance: ";
    Printer<double>::stream(s, indent + "  ", v.width_variance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_LIST_MESSAGE_DIMENSION_H
