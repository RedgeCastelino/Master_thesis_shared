// Generated by gencpp from file object_list/Classification.msg
// DO NOT EDIT!


#ifndef OBJECT_LIST_MESSAGE_CLASSIFICATION_H
#define OBJECT_LIST_MESSAGE_CLASSIFICATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_list
{
template <class ContainerAllocator>
struct Classification_
{
  typedef Classification_<ContainerAllocator> Type;

  Classification_()
    : car(0.0)
    , truck(0.0)
    , motorcycle(0.0)
    , bicycle(0.0)
    , pedestrian(0.0)
    , stacionary(0.0)
    , other(0.0)  {
    }
  Classification_(const ContainerAllocator& _alloc)
    : car(0.0)
    , truck(0.0)
    , motorcycle(0.0)
    , bicycle(0.0)
    , pedestrian(0.0)
    , stacionary(0.0)
    , other(0.0)  {
  (void)_alloc;
    }



   typedef float _car_type;
  _car_type car;

   typedef float _truck_type;
  _truck_type truck;

   typedef float _motorcycle_type;
  _motorcycle_type motorcycle;

   typedef float _bicycle_type;
  _bicycle_type bicycle;

   typedef float _pedestrian_type;
  _pedestrian_type pedestrian;

   typedef float _stacionary_type;
  _stacionary_type stacionary;

   typedef float _other_type;
  _other_type other;





  typedef boost::shared_ptr< ::object_list::Classification_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_list::Classification_<ContainerAllocator> const> ConstPtr;

}; // struct Classification_

typedef ::object_list::Classification_<std::allocator<void> > Classification;

typedef boost::shared_ptr< ::object_list::Classification > ClassificationPtr;
typedef boost::shared_ptr< ::object_list::Classification const> ClassificationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_list::Classification_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_list::Classification_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_list::Classification_<ContainerAllocator1> & lhs, const ::object_list::Classification_<ContainerAllocator2> & rhs)
{
  return lhs.car == rhs.car &&
    lhs.truck == rhs.truck &&
    lhs.motorcycle == rhs.motorcycle &&
    lhs.bicycle == rhs.bicycle &&
    lhs.pedestrian == rhs.pedestrian &&
    lhs.stacionary == rhs.stacionary &&
    lhs.other == rhs.other;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_list::Classification_<ContainerAllocator1> & lhs, const ::object_list::Classification_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_list

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::object_list::Classification_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_list::Classification_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_list::Classification_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_list::Classification_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_list::Classification_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_list::Classification_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_list::Classification_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37b53ddc70d71a526ada035ab3f28e33";
  }

  static const char* value(const ::object_list::Classification_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37b53ddc70d71a52ULL;
  static const uint64_t static_value2 = 0x6ada035ab3f28e33ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_list::Classification_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_list/Classification";
  }

  static const char* value(const ::object_list::Classification_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_list::Classification_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 car\n"
"float32 truck\n"
"float32 motorcycle\n"
"float32 bicycle\n"
"float32 pedestrian\n"
"float32 stacionary\n"
"float32 other\n"
;
  }

  static const char* value(const ::object_list::Classification_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_list::Classification_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car);
      stream.next(m.truck);
      stream.next(m.motorcycle);
      stream.next(m.bicycle);
      stream.next(m.pedestrian);
      stream.next(m.stacionary);
      stream.next(m.other);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Classification_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_list::Classification_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_list::Classification_<ContainerAllocator>& v)
  {
    s << indent << "car: ";
    Printer<float>::stream(s, indent + "  ", v.car);
    s << indent << "truck: ";
    Printer<float>::stream(s, indent + "  ", v.truck);
    s << indent << "motorcycle: ";
    Printer<float>::stream(s, indent + "  ", v.motorcycle);
    s << indent << "bicycle: ";
    Printer<float>::stream(s, indent + "  ", v.bicycle);
    s << indent << "pedestrian: ";
    Printer<float>::stream(s, indent + "  ", v.pedestrian);
    s << indent << "stacionary: ";
    Printer<float>::stream(s, indent + "  ", v.stacionary);
    s << indent << "other: ";
    Printer<float>::stream(s, indent + "  ", v.other);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_LIST_MESSAGE_CLASSIFICATION_H
